{"version":3,"sources":["../../../devtools-shared/src/index.ts","../../../devtools-shared/src/event-types.ts","../../../devtools-shared/src/scopes.ts","../../../devtools-shared/src/context.tsx","../../../devtools-shared/src/send.ts","../../../devtools-shared/src/receive.ts","../../../devtools-internal/src/index.ts","../../../devtools-internal/src/get-trace.ts","../../../devtools-internal/src/clean-stack.ts","../../../devtools-internal/src/constants.ts","../../../devtools-internal/src/is-refine-stack.ts","../../../devtools-internal/src/get-package-name-from-filename.ts","../../../devtools-internal/src/get-resource-path.ts","../../../devtools-internal/src/get-xray.ts","../../../devtools-internal/src/use-query-subscription.tsx","../../../devtools-internal/src/listeners.ts","../../../devtools-internal/src/create-identifier.ts","../../../core/src/index.tsx","../../../core/src/components/pages/error/index.tsx","../../../core/src/hooks/auth/usePermissions/index.ts","../../../core/src/definitions/table/index.ts","../../../core/src/definitions/helpers/userFriendlySeconds/index.ts","../../../core/src/definitions/helpers/importCSVMapper/index.ts","../../../core/src/definitions/helpers/userFriendlyResourceName/index.ts","../../../core/src/definitions/helpers/handleUseParams/index.tsx","../../../core/src/definitions/helpers/pickNotDeprecated/index.ts","../../../core/src/definitions/helpers/keys/index.ts","../../../core/src/definitions/helpers/queryKeys/index.ts","../../../core/src/definitions/helpers/hasPermission/index.ts","../../../core/src/definitions/helpers/router/is-parameter.ts","../../../core/src/definitions/helpers/router/split-to-segments.ts","../../../core/src/definitions/helpers/router/is-segment-counts-same.ts","../../../core/src/definitions/helpers/router/remove-leading-trailing-slashes.ts","../../../core/src/definitions/helpers/router/check-by-segments.ts","../../../core/src/definitions/helpers/router/get-default-action-path.ts","../../../core/src/definitions/helpers/router/get-parent-resource.ts","../../../core/src/definitions/helpers/router/get-parent-prefix-for-resource.ts","../../../core/src/definitions/helpers/router/get-action-routes-from-resource.ts","../../../core/src/definitions/helpers/router/pick-matched-route.ts","../../../core/src/definitions/helpers/router/match-resource-from-route.ts","../../../core/src/definitions/helpers/routeGenerator/index.ts","../../../core/src/definitions/helpers/treeView/createTreeView/index.ts","../../../core/src/definitions/helpers/humanizeString/index.ts","../../../core/src/contexts/refine/index.tsx","../../../core/src/components/layoutWrapper/defaultLayout/index.tsx","../../../core/src/definitions/helpers/handleRefineOptions/index.ts","../../../core/src/definitions/helpers/redirectPage/index.ts","../../../core/src/definitions/helpers/sequentialPromises/index.ts","../../../core/src/definitions/helpers/pick-resource/index.ts","../../../core/src/definitions/helpers/pickDataProvider/index.ts","../../../core/src/definitions/helpers/handleMultiple/index.ts","../../../core/src/definitions/helpers/useInfinitePagination/index.ts","../../../core/src/definitions/helpers/legacy-resource-transform/index.ts","../../../core/src/definitions/helpers/router/pick-route-params.ts","../../../core/src/definitions/helpers/router/prepare-route-params.ts","../../../core/src/definitions/helpers/router/compose-route.ts","../../../core/src/contexts/auth/index.tsx","../../../core/src/definitions/helpers/useActiveAuthProvider/index.ts","../../../core/src/definitions/helpers/handlePaginationParams/index.ts","../../../core/src/definitions/helpers/useMediaQuery/index.ts","../../../core/src/definitions/helpers/safe-translate/index.ts","../../../core/src/definitions/helpers/generateDocumentTitle/index.ts","../../../core/src/hooks/refine/useMutationMode.ts","../../../core/src/hooks/refine/useWarnAboutChange/index.ts","../../../core/src/contexts/unsavedWarn/index.tsx","../../../core/src/hooks/refine/useSyncWithLocation.ts","../../../core/src/hooks/refine/useTitle.tsx","../../../core/src/hooks/refine/useRefineContext.ts","../../../core/src/definitions/helpers/useUserFriendlyName/index.ts","../../../core/src/definitions/helpers/flatten-object-keys/index.ts","../../../core/src/definitions/helpers/property-path-to-array/index.ts","../../../core/src/definitions/upload/file2Base64/index.ts","../../../core/src/hooks/useKeys/index.tsx","../../../core/src/hooks/auth/useGetIdentity/index.ts","../../../core/src/hooks/auth/useLogout/index.ts","../../../core/src/hooks/auth/useInvalidateAuthStore/index.ts","../../../core/src/hooks/auth/useLogin/index.ts","../../../core/src/hooks/auth/useRegister/index.ts","../../../core/src/hooks/auth/useForgotPassword/index.ts","../../../core/src/hooks/auth/useUpdatePassword/index.ts","../../../core/src/hooks/auth/useIsAuthenticated/index.ts","../../../core/src/hooks/auth/useOnError/index.ts","../../../core/src/hooks/auth/useIsExistAuthentication/index.ts","../../../core/src/hooks/data/useList.ts","../../../core/src/hooks/useLoadingOvertime/index.ts","../../../core/src/hooks/data/useOne.ts","../../../core/src/hooks/data/useMany.ts","../../../core/src/hooks/data/useUpdate.ts","../../../core/src/contexts/undoableQueue/undoableQueueContext.tsx","../../../core/src/hooks/data/useCreate.ts","../../../core/src/hooks/data/useDelete.ts","../../../core/src/hooks/data/useCreateMany.ts","../../../core/src/hooks/data/useUpdateMany.ts","../../../core/src/hooks/data/useDeleteMany.ts","../../../core/src/hooks/data/useApiUrl.ts","../../../core/src/hooks/data/useCustom.ts","../../../core/src/hooks/data/useCustomMutation.ts","../../../core/src/hooks/data/useDataProvider.tsx","../../../core/src/contexts/data/index.tsx","../../../core/src/hooks/data/useInfiniteList.ts","../../../core/src/contexts/live/index.tsx","../../../core/src/hooks/invalidate/index.tsx","../../../core/src/hooks/resource/useResource/index.ts","../../../core/src/contexts/resource/index.tsx","../../../core/src/hooks/deepMemo/index.tsx","../../../core/src/hooks/memoized/index.tsx","../../../core/src/contexts/router-picker/index.tsx","../../../core/src/hooks/router/use-parsed/index.tsx","../../../core/src/contexts/router/index.tsx","../../../core/src/hooks/router/use-parse/index.tsx","../../../core/src/hooks/resource/useResourceWithRoute/index.ts","../../../core/src/hooks/live/useResourceSubscription/index.ts","../../../core/src/hooks/live/useLiveMode/index.ts","../../../core/src/hooks/live/useSubscription/index.ts","../../../core/src/hooks/live/usePublish/index.ts","../../../core/src/hooks/notification/useCancelNotification/index.tsx","../../../core/src/hooks/notification/useNotification/index.ts","../../../core/src/contexts/notification/index.tsx","../../../core/src/hooks/notification/useHandleNotification/index.ts","../../../core/src/hooks/translate/useSetLocale.ts","../../../core/src/contexts/translation/index.tsx","../../../core/src/hooks/translate/useTranslate.ts","../../../core/src/hooks/translate/useGetLocale.ts","../../../core/src/hooks/export/index.ts","../../../core/src/hooks/form/useForm.ts","../../../core/src/hooks/redirection/index.ts","../../../core/src/hooks/router/use-go/index.tsx","../../../core/src/hooks/router/use-get-to-path/index.ts","../../../core/src/hooks/router/use-back/index.tsx","../../../core/src/hooks/navigation/index.ts","../../../core/src/hooks/show/useShow.ts","../../../core/src/hooks/import/index.tsx","../../../core/src/hooks/modal/useModal/index.tsx","../../../core/src/hooks/router/use-to-path/index.ts","../../../core/src/hooks/router/use-link/index.tsx","../../../core/src/hooks/legacy-router/useRouterContext.ts","../../../core/src/contexts/legacy-router/index.tsx","../../../core/src/hooks/accessControl/useCan/index.ts","../../../core/src/contexts/accessControl/index.tsx","../../../core/src/definitions/helpers/sanitize-resource/index.ts","../../../core/src/hooks/accessControl/useCanWithoutCache.ts","../../../core/src/hooks/useSelect/index.ts","../../../core/src/hooks/useTable/index.ts","../../../core/src/hooks/auditLog/useLog/index.ts","../../../core/src/contexts/auditLog/index.tsx","../../../core/src/hooks/auditLog/useLogList/index.ts","../../../core/src/hooks/breadcrumb/index.ts","../../../core/src/hooks/menu/useMenu.tsx","../../../core/src/definitions/helpers/menu/create-resource-key.ts","../../../core/src/definitions/helpers/menu/create-tree.ts","../../../core/src/hooks/useMeta/index.ts","../../../core/src/components/pages/login/index.tsx","../../../core/src/components/pages/auth/index.tsx","../../../core/src/components/pages/auth/components/login/index.tsx","../../../core/src/components/pages/auth/components/register/index.tsx","../../../core/src/components/pages/auth/components/forgotPassword/index.tsx","../../../core/src/components/pages/auth/components/updatePassword/index.tsx","../../../core/src/components/pages/ready/index.tsx","../../../core/src/components/pages/welcome/index.tsx","../../../core/src/components/containers/refine/index.tsx","../../../core/src/components/telemetry/index.tsx","../../../core/src/hooks/useTelemetryData/index.ts","../../../core/src/definitions/helpers/check-router-prop-misuse/index.ts","../../../core/src/hooks/router/use-router-misuse-warning/index.ts","../../../core/src/components/undoableQueue/index.tsx","../../../core/src/components/layoutWrapper/index.tsx","../../../core/src/components/authenticated/index.tsx","../../../core/src/components/routeChangeHandler/index.tsx","../../../core/src/components/canAccess/index.tsx","../../../core/src/components/gh-banner/index.tsx","../../../core/src/components/gh-banner/styles.ts","../../../core/src/components/autoSaveIndicator/index.tsx","../../../ui-types/src/index.tsx","../../../ui-types/src/ids.tsx","../../../ui-types/src/classNames.ts","../../../antd/src/index.tsx","../../../antd/src/hooks/form/useForm.ts","../../../antd/src/hooks/form/useModalForm/useModalForm.ts","../../../antd/src/hooks/modal/useModal/index.tsx","../../../antd/src/hooks/form/useDrawerForm/useDrawerForm.ts","../../../antd/src/hooks/form/useStepsForm/useStepsForm.ts","../../../antd/src/hooks/table/useTable/useTable.ts","../../../antd/src/definitions/table/index.ts","../../../antd/src/hooks/table/useTable/paginationLink.tsx","../../../antd/src/hooks/table/useEditableTable/useEditableTable.ts","../../../antd/src/hooks/fields/useSelect/index.ts","../../../antd/src/hooks/fields/useCheckboxGroup/index.ts","../../../antd/src/hooks/fields/useRadioGroup/index.ts","../../../antd/src/hooks/import/index.tsx","../../../antd/src/hooks/list/useSimpleList/useSimpleList.ts","../../../antd/src/hooks/useFileUploadState/index.ts","../../../antd/src/hooks/useSiderVisible/index.ts","../../../antd/src/contexts/themedLayoutContext/index.tsx","../../../antd/src/hooks/useThemedLayoutContext/index.ts","../../../antd/src/providers/notificationProvider/index.tsx","../../../antd/src/components/undoableNotification/index.tsx","../../../antd/src/components/layout/index.tsx","../../../antd/src/components/layout/sider/index.tsx","../../../antd/src/components/layout/sider/styles.ts","../../../antd/src/components/layout/header/index.tsx","../../../antd/src/components/layout/title/index.tsx","../../../antd/src/components/themedLayout/index.tsx","../../../antd/src/components/themedLayout/sider/index.tsx","../../../antd/src/components/themedLayout/sider/styles.ts","../../../antd/src/components/themedLayout/header/index.tsx","../../../antd/src/components/themedLayout/title/index.tsx","../../../antd/src/components/themedLayoutV2/index.tsx","../../../antd/src/components/themedLayoutV2/sider/index.tsx","../../../antd/src/components/themedLayoutV2/sider/styles.ts","../../../antd/src/components/themedLayoutV2/header/index.tsx","../../../antd/src/components/themedLayoutV2/title/index.tsx","../../../antd/src/components/buttons/create/index.tsx","../../../antd/src/components/buttons/edit/index.tsx","../../../antd/src/components/buttons/delete/index.tsx","../../../antd/src/components/buttons/refresh/index.tsx","../../../antd/src/components/buttons/show/index.tsx","../../../antd/src/components/buttons/list/index.tsx","../../../antd/src/components/buttons/export/index.tsx","../../../antd/src/components/buttons/save/index.tsx","../../../antd/src/components/buttons/clone/index.tsx","../../../antd/src/components/buttons/import/index.tsx","../../../antd/src/components/crud/list/index.tsx","../../../antd/src/components/crud/create/index.tsx","../../../antd/src/components/crud/edit/index.tsx","../../../antd/src/components/crud/show/index.tsx","../../../antd/src/components/fields/text/index.tsx","../../../antd/src/components/fields/tag/index.tsx","../../../antd/src/components/fields/email/index.tsx","../../../antd/src/components/fields/image/index.tsx","../../../antd/src/components/fields/boolean/index.tsx","../../../antd/src/components/fields/date/index.tsx","../../../antd/src/components/fields/file/index.tsx","../../../antd/src/components/fields/url/index.tsx","../../../antd/src/components/fields/number/index.tsx","../../../antd/src/components/fields/markdown/index.tsx","../../../antd/src/components/table/components/filterDropdown/index.tsx","../../../antd/src/components/pages/error/index.tsx","../../../antd/src/components/pages/login/index.tsx","../../../antd/src/components/pages/login/styles.ts","../../../antd/src/components/pages/ready/index.tsx","../../../antd/src/components/pages/welcome/index.tsx","../../../antd/src/components/pages/auth/index.tsx","../../../antd/src/components/pages/auth/components/login/index.tsx","../../../antd/src/components/pages/auth/components/styles.ts","../../../antd/src/components/pages/auth/components/register/index.tsx","../../../antd/src/components/pages/auth/components/forgotPassword/index.tsx","../../../antd/src/components/pages/auth/components/updatePassword/index.tsx","../../../antd/src/components/breadcrumb/index.tsx","../../../antd/src/components/pageHeader/index.tsx","../../../antd/src/components/autoSaveIndicator/index.tsx","../../../antd/src/definitions/upload/index.ts","../../../antd/src/definitions/themes/index.ts","../../src/inferencers/antd/index.tsx","../../src/inferencers/antd/show.tsx","../../src/create-inferencer/index.tsx","../../src/utilities/get-fieldable-keys/index.ts","../../src/utilities/pick-data-provider/index.tsx","../../src/utilities/pick-inferred-field/index.ts","../../src/utilities/prettier-format/index.ts","../../src/utilities/pretty-spaces/index.ts","../../src/field-inferencers/relation.ts","../../src/utilities/remove-relation-suffix/index.ts","../../src/utilities/pretty-string/index.ts","../../src/utilities/translate-pretty-string/index.ts","../../src/utilities/to-singular/index.ts","../../src/utilities/to-plural/index.ts","../../src/utilities/replace-exports/index.ts","../../src/utilities/replace-imports/index.ts","../../src/utilities/resource-from-inferred/index.ts","../../src/utilities/component-name/index.ts","../../src/utilities/jsx/index.ts","../../src/utilities/prepare-live-code/index.ts","../../src/utilities/remove-hidden-code/index.ts","../../src/utilities/accessor/index.ts","../../src/utilities/print-imports/index.ts","../../src/utilities/is-id-key/index.ts","../../src/utilities/get-option-label/index.ts","../../src/utilities/no-op/index.ts","../../src/utilities/get-variable-name/index.ts","../../src/utilities/get-meta-props/index.ts","../../src/utilities/id-quote-wrapper/index.ts","../../src/compose-inferencers/index.ts","../../src/compose-transformers/index.ts","../../src/field-inferencers/array.ts","../../src/field-inferencers/boolean.ts","../../src/field-inferencers/date.ts","../../src/field-inferencers/email.ts","../../src/field-inferencers/image.ts","../../src/field-inferencers/nullish.ts","../../src/field-inferencers/number.ts","../../src/field-inferencers/object.ts","../../src/field-inferencers/richtext.ts","../../src/field-inferencers/text.ts","../../src/field-inferencers/url.ts","../../src/field-inferencers/index.ts","../../src/field-transformers/basic-to-relation.ts","../../src/field-transformers/image-by-key.ts","../../src/field-transformers/relation-by-resource.ts","../../src/field-transformers/relation-to-fieldable.ts","../../src/field-transformers/index.ts","../../src/components/live/index.tsx","../../src/components/shared-code-viewer/index.tsx","../../src/use-infer-fetch/index.tsx","../../src/use-relation-fetch/index.ts","../../src/inferencers/antd/error.tsx","../../src/inferencers/antd/loading.tsx","../../src/inferencers/antd/next/list.tsx","../../src/from-scheme/find.ts","../../src/from-scheme/scheme.ts","../../src/from-scheme/create-schema-inferencer/index.tsx","../../src/from-scheme/compose-schema-inferencers/index.ts","../../src/from-scheme/compose-transformers/index.ts","../../src/from-scheme/field-from-schema-inferencers/array.ts","../../src/from-scheme/field-from-schema-inferencers/boolean.ts","../../src/from-scheme/field-from-schema-inferencers/date.ts","../../src/from-scheme/field-from-schema-inferencers/email.ts","../../src/from-scheme/field-from-schema-inferencers/number.ts","../../src/from-scheme/field-from-schema-inferencers/object.ts","../../src/from-scheme/field-from-schema-inferencers/richtext.ts","../../src/from-scheme/field-from-schema-inferencers/text.ts","../../src/from-scheme/field-from-schema-inferencers/url.ts","../../src/from-scheme/field-from-schema-inferencers/index.ts","../../src/from-scheme/field-transformers/basic-to-relation.ts","../../src/from-scheme/field-transformers/image-by-key.ts","../../src/from-scheme/field-transformers/relation-by-resource.ts","../../src/from-scheme/field-transformers/relation-to-fieldable.ts","../../src/from-scheme/field-transformers/index.ts","../../src/inferencers/antd/next/create.tsx","../../src/inferencers/antd/edit.tsx"],"sourcesContent":["export { DevtoolsEvent, DevtoolsEventPayloads } from \"./event-types\";\nexport { TraceType } from \"./trace\";\nexport { Feed, FeedSection } from \"./feed\";\nexport {\n    PackageType,\n    PackageLatestVersionType,\n    AvailablePackageType,\n} from \"./package\";\nexport { RefineHook, Scopes, hooksByScope, scopes } from \"./scopes\";\n\nexport { DevToolsContextProvider, DevToolsContext } from \"./context\";\n\nexport { send } from \"./send\";\nexport { receive } from \"./receive\";\n","import {\n    Mutation,\n    MutationKey,\n    MutationStatus,\n    QueryKey,\n    QueryState,\n    QueryStatus,\n} from \"@tanstack/react-query\";\nimport { TraceType } from \"./trace\";\n\nexport enum DevtoolsEvent {\n    RELOAD = \"devtools:reload\",\n    DEVTOOLS_INIT = \"devtools:init\",\n    DEVTOOLS_HANDSHAKE = \"devtools:handshake\",\n    DEVTOOLS_ALREADY_CONNECTED = \"devtools:already-connected\",\n    ACTIVITY = \"devtools:send-activity\",\n    DEVTOOLS_ACTIVITY_UPDATE = \"devtools:activity-update\",\n    DEVTOOLS_CONNECTED_APP = \"devtools:connected-app\",\n    DEVTOOLS_DISCONNECTED_APP = \"devtools:disconnected-app\",\n    DEVTOOLS_HIGHLIGHT_IN_MONITOR = \"devtools:highlight-in-monitor\",\n    DEVTOOLS_HIGHLIGHT_IN_MONITOR_ACTION = \"devtools:highlight-in-monitor-action\",\n    DEVTOOLS_LOGIN_SUCCESS = \"devtools:login-success\",\n    DEVTOOLS_RELOAD_AFTER_LOGIN = \"devtools:reload-after-login\",\n}\n\ntype Timestamps = {\n    createdAt: number;\n    updatedAt: number;\n};\n\ntype ActivityPayload =\n    | {\n          type: \"mutation\";\n          identifier: string;\n          key?: MutationKey;\n          status?: MutationStatus;\n          trace?: TraceType[];\n          state: Mutation<any, any, any, any>[\"state\"];\n          variables?: Mutation<any, any, any, any>[\"state\"][\"variables\"];\n          hookName: string;\n          resourcePath: string | null;\n          legacyKey: boolean;\n      }\n    | {\n          type: \"query\";\n          identifier: string;\n          key?: QueryKey;\n          status?: QueryStatus;\n          trace?: TraceType[];\n          state: QueryState<any, any>;\n          hookName: string;\n          resourcePath: string | null;\n          legacyKey: boolean;\n      };\n\nexport type DevtoolsEventPayloads = {\n    [DevtoolsEvent.RELOAD]: {};\n    [DevtoolsEvent.DEVTOOLS_INIT]: { url: string };\n    [DevtoolsEvent.DEVTOOLS_HANDSHAKE]: { url: string };\n    [DevtoolsEvent.DEVTOOLS_ALREADY_CONNECTED]: { url: string };\n    [DevtoolsEvent.ACTIVITY]: ActivityPayload;\n    [DevtoolsEvent.DEVTOOLS_ACTIVITY_UPDATE]: {\n        updatedActivities: (ActivityPayload & Timestamps)[];\n    };\n    [DevtoolsEvent.DEVTOOLS_CONNECTED_APP]: { url: string | null };\n    [DevtoolsEvent.DEVTOOLS_DISCONNECTED_APP]: {};\n    [DevtoolsEvent.DEVTOOLS_HIGHLIGHT_IN_MONITOR]: { name: string };\n    [DevtoolsEvent.DEVTOOLS_HIGHLIGHT_IN_MONITOR_ACTION]: { name: string };\n    [DevtoolsEvent.DEVTOOLS_LOGIN_SUCCESS]: {};\n    [DevtoolsEvent.DEVTOOLS_RELOAD_AFTER_LOGIN]: {};\n};\n","export type RefineHook =\n    | \"useCan\"\n    | \"useLog\"\n    | \"useLogList\"\n    | \"useCreate\"\n    | \"useCreateMany\"\n    | \"useCustom\"\n    | \"useCustomMutation\"\n    | \"useDelete\"\n    | \"useDeleteMany\"\n    | \"useInfiniteList\"\n    | \"useList\"\n    | \"useMany\"\n    | \"useOne\"\n    | \"useUpdate\"\n    | \"useUpdateMany\"\n    | \"useForgotPassword\"\n    | \"useGetIdentity\"\n    | \"useIsAuthenticated\"\n    | \"useLogin\"\n    | \"useLogout\"\n    | \"useOnError\"\n    | \"usePermissions\"\n    | \"useRegister\"\n    | \"useUpdatePassword\";\n\nexport type Scopes = \"data\" | \"audit-log\" | \"access-control\" | \"auth\";\n\nexport const scopes: Record<RefineHook, Scopes> = {\n    useCan: \"access-control\",\n    useLog: \"audit-log\",\n    useLogList: \"audit-log\",\n    useCreate: \"data\",\n    useCreateMany: \"data\",\n    useCustom: \"data\",\n    useCustomMutation: \"data\",\n    useDelete: \"data\",\n    useDeleteMany: \"data\",\n    useInfiniteList: \"data\",\n    useList: \"data\",\n    useMany: \"data\",\n    useOne: \"data\",\n    useUpdate: \"data\",\n    useUpdateMany: \"data\",\n    useForgotPassword: \"auth\",\n    useGetIdentity: \"auth\",\n    useIsAuthenticated: \"auth\",\n    useLogin: \"auth\",\n    useLogout: \"auth\",\n    useOnError: \"auth\",\n    usePermissions: \"auth\",\n    useRegister: \"auth\",\n    useUpdatePassword: \"auth\",\n};\n\nexport const hooksByScope = Object.entries(scopes).reduce(\n    (acc, [hook, scope]) => {\n        if (!acc[scope]) {\n            acc[scope] = [];\n        }\n\n        acc[scope].push(hook as RefineHook);\n\n        return acc;\n    },\n    {} as Record<Scopes, RefineHook[]>,\n);\n","import React from \"react\";\nimport { DevtoolsEvent } from \"./event-types\";\nimport { send } from \"./send\";\nimport { receive } from \"./receive\";\n\ntype DevToolsContextValue = {\n    __devtools: boolean;\n    port: number;\n    url: string;\n    secure: boolean;\n    ws: WebSocket | null;\n    devtoolsUrl?: string;\n};\n\nexport const DevToolsContext = React.createContext<DevToolsContextValue>({\n    __devtools: false,\n    port: 5002,\n    url: \"localhost\",\n    secure: false,\n    ws: null,\n});\n\ntype Props = React.PropsWithChildren<\n    Partial<Pick<DevToolsContextValue, \"port\" | \"__devtools\">>\n>;\n\nexport const DevToolsContextProvider: React.FC<Props> = ({\n    __devtools,\n    port,\n    children,\n}) => {\n    const [values, setValues] = React.useState<DevToolsContextValue>({\n        __devtools: __devtools ?? false,\n        port: port ?? 5002,\n        url: \"localhost\",\n        secure: false,\n        ws: null,\n    });\n\n    const [ws, setWs] = React.useState<WebSocket | null>(null);\n\n    React.useEffect(() => {\n        const wsInstance = new WebSocket(\n            `${values.secure ? \"wss\" : \"ws\"}://localhost:${values.port}`,\n        );\n\n        const unsubscribe = receive(\n            wsInstance,\n            DevtoolsEvent.DEVTOOLS_HANDSHAKE,\n            (data) => {\n                setValues((v) => ({\n                    ...v,\n                    devtoolsUrl: data.url,\n                }));\n                unsubscribe();\n            },\n        );\n\n        wsInstance.addEventListener(\"open\", () => {\n            if (!values.__devtools) {\n                send(wsInstance, DevtoolsEvent.DEVTOOLS_INIT, {\n                    url: window.location.origin,\n                });\n            }\n        });\n\n        setWs(wsInstance);\n\n        return () => {\n            unsubscribe();\n\n            wsInstance.close(1000, window.location.origin);\n        };\n    }, []);\n\n    const contextValues = React.useMemo<DevToolsContextValue>(\n        () => ({\n            ...values,\n            ws,\n        }),\n        [values, ws],\n    );\n\n    return (\n        <DevToolsContext.Provider value={contextValues}>\n            {children}\n        </DevToolsContext.Provider>\n    );\n};\n","import { DevtoolsEvent, DevtoolsEventPayloads } from \"./event-types\";\n\nexport async function send<T extends DevtoolsEvent>(\n    ws: WebSocket,\n    event: T,\n    payload: DevtoolsEventPayloads[T],\n) {\n    // check if the socket is open\n    // if not, wait for it to open\n    if (ws.readyState !== ws.OPEN) {\n        await new Promise<void>((resolve) => {\n            const listener = () => {\n                ws.send(JSON.stringify({ event, payload }));\n                resolve();\n                ws.removeEventListener(\"open\", listener);\n            };\n\n            ws.addEventListener(\"open\", listener);\n        });\n        return;\n    } else {\n        ws.send(JSON.stringify({ event, payload }));\n        return;\n    }\n}\n","// receive ws message by adding a listener to the ws object\n\nimport { DevtoolsEvent, DevtoolsEventPayloads } from \"./event-types\";\n\nexport function receive<T extends DevtoolsEvent>(\n    ws: WebSocket,\n    event: T,\n    callback: (payload: DevtoolsEventPayloads[T]) => void,\n) {\n    const listener = (e: MessageEvent) => {\n        const { event: receivedEvent, payload } = JSON.parse(e.data);\n        if (event === receivedEvent) {\n            callback(payload);\n        }\n    };\n\n    ws.addEventListener(\"message\", listener);\n\n    return () => {\n        ws.removeEventListener(\"message\", listener);\n    };\n}\n","export { getTrace } from \"./get-trace\";\nexport { getXRay } from \"./get-xray\";\nexport { useQuerySubscription } from \"./use-query-subscription\";\n","import ErrorStackParser from \"error-stack-parser\";\nimport { cleanStack } from \"./clean-stack\";\nimport { isRefineStack } from \"./is-refine-stack\";\nimport { getPackageNameFromFilename } from \"./get-package-name-from-filename\";\nimport { TraceType } from \"@refinedev/devtools-shared\";\n\nexport function getTrace() {\n    if (__DEV_CONDITION__ !== \"development\") {\n        return [];\n    } else {\n        try {\n            const error = new Error();\n            const stack = ErrorStackParser.parse(error);\n            const clean = cleanStack(stack);\n            const traces = clean\n                .map(\n                    (frame) =>\n                        ({\n                            file: frame.fileName,\n                            line: frame.lineNumber,\n                            column: frame.columnNumber,\n                            function: frame.functionName,\n                            isRefine: isRefineStack(frame.fileName),\n                            packageName: getPackageNameFromFilename(\n                                frame.fileName,\n                            ),\n                        } as TraceType),\n                )\n                .filter((trace) => trace.function);\n            return traces.slice(1);\n        } catch (error) {\n            return [];\n        }\n    }\n}\n","import type { StackFrame } from \"error-stack-parser\";\n\nconst unrelatedFunctionName = \"renderWithHooks\";\n\nexport const cleanStack = (stack: StackFrame[]) => {\n    const firstUnrelatedIndex = stack.findIndex(\n        (frame) => frame.functionName === unrelatedFunctionName,\n    );\n\n    if (firstUnrelatedIndex !== -1) {\n        return stack.slice(0, firstUnrelatedIndex);\n    }\n\n    return stack;\n};\n","export const REFINE_PACKAGE_FILEPATH_REGEXP =\n    __DEV_CONDITION__ !== \"development\"\n        ? /node_modules\\/refinedev\\/(?<name>.*?)\\//\n        : /\\/refine\\/packages\\/(?<name>.*?)\\//;\n","import { REFINE_PACKAGE_FILEPATH_REGEXP } from \"./constants\";\n\nexport const isRefineStack = (filename?: string) => {\n    if (!filename) return false;\n\n    const match = filename.match(REFINE_PACKAGE_FILEPATH_REGEXP);\n\n    return !!match;\n};\n","import { REFINE_PACKAGE_FILEPATH_REGEXP } from \"./constants\";\n\nexport const getPackageNameFromFilename = (filename?: string) => {\n    if (!filename) return;\n\n    const match = filename.match(REFINE_PACKAGE_FILEPATH_REGEXP);\n\n    const name = match?.groups?.name;\n\n    if (!name) return;\n\n    return `@refinedev/${name}`;\n};\n","import {\n    DevtoolsEvent,\n    DevtoolsEventPayloads,\n    RefineHook,\n    scopes,\n} from \"@refinedev/devtools-shared\";\n\nexport type Activity =\n    DevtoolsEventPayloads[DevtoolsEvent.DEVTOOLS_ACTIVITY_UPDATE][\"updatedActivities\"][number];\n\nexport const getResourcePath = (\n    hookName: RefineHook,\n    legacyKey: boolean,\n): string | null => {\n    if (scopes[hookName] === \"auth\") {\n        return null;\n    }\n    if (hookName === \"useCan\") {\n        if (legacyKey) {\n            return \"key[1].resource\";\n        } else {\n            return \"key[1]\";\n        }\n    }\n    if (scopes[hookName] === \"audit-log\") {\n        if (hookName === \"useLog\") {\n            return \"variables.resource\";\n        }\n        return \"key[1]\";\n    }\n    if (scopes[hookName] === \"data\") {\n        if (hookName === \"useCustom\" || hookName === \"useCustomMutation\") {\n            return null;\n        }\n        switch (hookName) {\n            case \"useList\":\n            case \"useInfiniteList\":\n            case \"useOne\":\n            case \"useMany\":\n                if (legacyKey) {\n                    return \"key[1]\";\n                } else {\n                    return \"key[2]\";\n                }\n            case \"useCreate\":\n            case \"useCreateMany\":\n            case \"useDelete\":\n            case \"useDeleteMany\":\n            case \"useUpdate\":\n            case \"useUpdateMany\":\n                return \"variables.resource\";\n        }\n    }\n    return null;\n};\n","import { RefineHook, TraceType } from \"@refinedev/devtools-shared\";\nimport { getTrace } from \"./get-trace\";\nimport { getResourcePath } from \"./get-resource-path\";\n\nexport type XRayResponse = {\n    hookName: string;\n    trace: TraceType[];\n    resourcePath: string | null;\n    legacyKey: boolean;\n};\n\nexport function getXRay(hookName: string, legacyKey: boolean): XRayResponse {\n    if (__DEV_CONDITION__ !== \"development\") {\n        return {\n            hookName: \"\",\n            trace: [],\n            resourcePath: null,\n            legacyKey: false,\n        };\n    } else {\n        const trace = getTrace().slice(1);\n\n        const resourcePath = getResourcePath(hookName as RefineHook, legacyKey);\n\n        return {\n            hookName,\n            trace,\n            resourcePath,\n            legacyKey,\n        };\n    }\n}\n","import { DevToolsContext } from \"@refinedev/devtools-shared\";\nimport { QueryClient } from \"@tanstack/react-query\";\nimport React, { useContext } from \"react\";\nimport { createQueryListener, createMutationListener } from \"./listeners\";\n\nexport const useQuerySubscription =\n    __DEV_CONDITION__ !== \"development\"\n        ? () => ({})\n        : (queryClient: QueryClient) => {\n              const { ws } = useContext(DevToolsContext);\n              const queryCacheSubscription = React.useRef<() => void>();\n              const mutationCacheSubscription = React.useRef<() => void>();\n\n              React.useEffect(() => {\n                  if (!ws) return () => 0;\n\n                  const queryCache = queryClient.getQueryCache();\n\n                  const queryListener = createQueryListener(ws);\n\n                  queryCache.getAll().forEach(queryListener);\n\n                  queryCacheSubscription.current = queryCache.subscribe(\n                      ({ query, type }) =>\n                          (type === \"added\" || type === \"updated\") &&\n                          queryListener(query),\n                  );\n\n                  return () => {\n                      queryCacheSubscription.current?.();\n                  };\n              }, [ws, queryClient]);\n\n              React.useEffect(() => {\n                  if (!ws) return () => 0;\n\n                  const mutationCache = queryClient.getMutationCache();\n\n                  const mutationListener = createMutationListener(ws);\n\n                  mutationCache.getAll().forEach(mutationListener);\n\n                  mutationCacheSubscription.current = mutationCache.subscribe(\n                      ({ mutation, type }) =>\n                          (type === \"added\" || type === \"updated\") &&\n                          mutationListener(mutation),\n                  );\n\n                  return () => {\n                      mutationCacheSubscription.current?.();\n                  };\n              }, [ws, queryClient]);\n\n              return {};\n          };\n","import { DevtoolsEvent, send } from \"@refinedev/devtools-shared\";\nimport { Mutation, Query } from \"@tanstack/react-query\";\n\nimport { createIdentifier } from \"./create-identifier\";\nimport { XRayResponse } from \"./get-xray\";\n\nexport const createMutationListener =\n    (ws: WebSocket) => (mutation?: Mutation) => {\n        if (!mutation?.meta?.trace) return;\n\n        const meta: XRayResponse = mutation?.meta as any;\n\n        new Promise<void>((resolve) => {\n            send(ws, DevtoolsEvent.ACTIVITY, {\n                type: \"mutation\",\n                identifier: createIdentifier(\n                    mutation?.options.mutationKey,\n                    mutation?.meta?.trace as any,\n                ),\n                key: mutation?.options.mutationKey as any,\n                status: mutation?.state.status,\n                state: mutation?.state,\n                variables: mutation?.state?.variables,\n                ...meta,\n            });\n            resolve();\n        });\n\n        // console.table({\n        //     type: \"mutation\",\n        //     key: mutation?.options.mutationKey,\n        //     id: mutation?.mutationId,\n        //     status: mutation?.state.status,\n        //     trace: mutation?.meta?.trace,\n        //     state: mutation?.state,\n        //     variables: mutation?.state?.variables,\n        // });\n    };\n\nexport const createQueryListener = (ws: WebSocket) => (query: Query) => {\n    if (!query?.meta?.trace) return;\n\n    const meta: XRayResponse = query?.meta as any;\n\n    new Promise<void>((resolve) => {\n        send(ws, DevtoolsEvent.ACTIVITY, {\n            type: \"query\",\n            identifier: createIdentifier(\n                query.queryKey,\n                query.meta?.trace as any,\n            ),\n            key: query.queryKey as any,\n            status: query.state.status,\n            state: query.state,\n            ...meta,\n        });\n        resolve();\n    });\n\n    // console.table({\n    //     type: \"query\",\n    //     key: query.queryKey,\n    //     status: query.state.status,\n    //     trace: query.meta?.trace,\n    //     state: query.state,\n    // });\n};\n","import { TraceType } from \"@refinedev/devtools-shared\";\nimport { MutationKey, QueryKey } from \"@tanstack/react-query\";\n\nexport const createIdentifier = (\n    key?: QueryKey | MutationKey,\n    trace?: TraceType[],\n) => {\n    const simpleTrace = trace?.map(\n        (t) =>\n            `${t.file}:${t.line}:${t.column}#${t.function}-${t.packageName}-${\n                t.isRefine ? 1 : 0\n            }`,\n    );\n    const str = JSON.stringify([...(key ?? []), ...(simpleTrace ?? [])]);\n\n    return str;\n};\n","export * from \"./components\";\nexport * from \"./hooks\";\n\nexport {\n    Action,\n    ActionWithPage,\n    AccessControlProvider,\n    AuditLogProvider,\n    LegacyAuthProvider,\n    AuthBindings,\n    BaseKey,\n    BaseRecord,\n    CanParams,\n    CanReturnType,\n    ConditionalFilter,\n    CreateManyResponse,\n    CreateResponse,\n    CrudFilter,\n    CrudFilters,\n    CrudOperators,\n    CrudSort,\n    CrudSorting,\n    CustomResponse,\n    DeleteManyResponse,\n    DeleteOneResponse,\n    FormAction,\n    GetListResponse,\n    GetManyResponse,\n    GetOneResponse,\n    HttpError,\n    LayoutProps,\n    LiveEvent,\n    LiveModeProps,\n    LogicalFilter,\n    LogParams,\n    MapDataFn,\n    MetaQuery,\n    MetaDataQuery,\n    MutationMode,\n    NotificationProvider,\n    OpenNotificationParams,\n    Option,\n    BaseOption,\n    Pagination,\n    PromptProps,\n    RedirectionTypes,\n    RedirectAction,\n    ResourceErrorRouterParams,\n    ResourceProps,\n    ResourceRouterParams,\n    RouteAction,\n    SortOrder,\n    SuccessErrorNotification,\n    TitleProps,\n    TranslationProvider,\n    UpdateManyResponse,\n    UpdateResponse,\n    I18nProvider,\n    IAccessControlContext,\n    ILegacyAuthContext,\n    IDataContextProvider as DataProvider,\n    ILiveContext as LiveProvider,\n    ILog,\n    ILogData,\n    ILoginForm,\n    INotificationContext,\n    IResourceComponents,\n    IResourceComponentsProps,\n    IResourceContext as ResourceProvider,\n    ITranslationContext,\n    IResourceItem,\n    IRouterProvider,\n    ITreeMenu,\n    IQueryKeys,\n    AccessControlBindings,\n    DataBindings,\n    i18nBindings,\n    LiveBindings,\n    NotificationsBindings,\n    ResourceBindings,\n    RouterBindings,\n    ParseResponse,\n    ParsedParams,\n    GoConfig,\n    BackFunction,\n    GoFunction,\n    ParseFunction,\n    Prettify,\n    FormWithSyncWithLocationParams,\n    AutoSaveIndicatorProps,\n    AutoSaveProps,\n    GetListParams,\n    GetManyParams,\n    GetOneParams,\n    CreateParams,\n    CreateManyParams,\n    UpdateParams,\n    UpdateManyParams,\n    DeleteOneParams,\n    DeleteManyParams,\n    CustomParams,\n} from \"./interfaces\";\n\n// all auth types\nexport * from \"./interfaces/auth\";\n\nexport {\n    getDefaultFilter,\n    getDefaultSortOrder,\n    parseTableParams,\n    parseTableParamsFromQuery,\n    setInitialFilters,\n    setInitialSorters,\n    stringifyTableParams,\n    unionFilters,\n    unionSorters,\n} from \"./definitions/table\";\nexport {\n    createTreeView,\n    handleUseParams,\n    importCSVMapper,\n    routeGenerator,\n    userFriendlyResourceName,\n    getNextPageParam,\n    getPreviousPageParam,\n    pickNotDeprecated,\n    legacyResourceTransform,\n    matchResourceFromRoute,\n    useActiveAuthProvider,\n    useUserFriendlyName,\n    queryKeys,\n    pickDataProvider,\n    keys,\n    KeyBuilder,\n    flattenObjectKeys,\n    propertyPathToArray,\n} from \"./definitions/helpers\";\nexport { file2Base64 } from \"./definitions/upload\";\nexport { generateDefaultDocumentTitle } from \"./definitions\";\n\nexport { ResourceContext } from \"./contexts/resource/index\";\nexport { TranslationContext } from \"./contexts/translation/index\";\nexport { AccessControlContext } from \"./contexts/accessControl/index\";\n","import React, { useEffect, useState } from \"react\";\n\nimport {\n    useNavigation,\n    useTranslate,\n    useResource,\n    useGo,\n    useRouterType,\n} from \"@hooks\";\n\n/**\n * When the app is navigated to a non-existent route, refine shows a default error page.\n * A custom error component can be used for this error page.\n *\n * @see {@link https://refine.dev/docs/packages/documentation/routers/} for more details.\n */\nexport const ErrorComponent: React.FC = () => {\n    const [errorMessage, setErrorMessage] = useState<string>();\n    const translate = useTranslate();\n    const { push } = useNavigation();\n    const go = useGo();\n    const routerType = useRouterType();\n\n    const { resource, action } = useResource();\n\n    useEffect(() => {\n        if (resource && action) {\n            setErrorMessage(\n                translate(\n                    \"pages.error.info\",\n                    {\n                        action: action,\n                        resource: resource.name,\n                    },\n                    `You may have forgotten to add the \"${action}\" component to \"${resource.name}\" resource.`,\n                ),\n            );\n        }\n    }, [resource, action]);\n\n    return (\n        <>\n            <h1>\n                {translate(\n                    \"pages.error.404\",\n                    undefined,\n                    \"Sorry, the page you visited does not exist.\",\n                )}\n            </h1>\n            {errorMessage && <p>{errorMessage}</p>}\n            <button\n                onClick={() => {\n                    if (routerType === \"legacy\") {\n                        push(\"/\");\n                    } else {\n                        go({ to: \"/\" });\n                    }\n                }}\n            >\n                {translate(\"pages.error.backHome\", undefined, \"Back Home\")}\n            </button>\n        </>\n    );\n};\n","import {\n    useQuery,\n    UseQueryResult,\n    UseQueryOptions,\n} from \"@tanstack/react-query\";\nimport { getXRay } from \"@refinedev/devtools-internal\";\n\nimport { useKeys } from \"@hooks/useKeys\";\n\nimport { useAuthBindingsContext, useLegacyAuthContext } from \"@contexts/auth\";\nimport { PermissionResponse } from \"../../../interfaces\";\n\nexport type UsePermissionsLegacyProps<TData = any> = {\n    v3LegacyAuthProviderCompatible: true;\n    options?: UseQueryOptions<TData>;\n};\n\nexport type UsePermissionsProps<TData = PermissionResponse> = {\n    v3LegacyAuthProviderCompatible?: false;\n    options?: UseQueryOptions<TData>;\n};\n\nexport type UsePermissionsCombinedProps<TData = any> = {\n    v3LegacyAuthProviderCompatible: boolean;\n    options?: UseQueryOptions<TData> | UseQueryOptions<PermissionResponse>;\n};\n\nexport type UsePermissionsLegacyReturnType<TData = any> = UseQueryResult<\n    TData,\n    unknown\n>;\n\nexport type UsePermissionsReturnType<TData = PermissionResponse> =\n    UseQueryResult<TData, unknown>;\n\nexport type UsePermissionsCombinedReturnType<TData = any> =\n    | UseQueryResult<TData, unknown>\n    | UseQueryResult<PermissionResponse, unknown>;\n\nexport function usePermissions<TData = any>(\n    props: UsePermissionsLegacyProps<TData>,\n): UsePermissionsLegacyReturnType<TData>;\n\nexport function usePermissions<TData = PermissionResponse>(\n    props?: UsePermissionsProps<TData>,\n): UsePermissionsReturnType<TData>;\n\nexport function usePermissions<TData = any>(\n    props?: UsePermissionsCombinedProps<TData>,\n): UsePermissionsCombinedReturnType<TData>;\n\n/**\n * `usePermissions` calls the `getPermissions` method from the {@link https://refine.dev/docs/core/providers/auth-provider `authProvider`} under the hood.\n *\n * @see {@link https://refine.dev/docs/api-reference/core/hooks/auth/usePermissions} for more details.\n *\n * @typeParam TData - Result data of the query\n *\n */\nexport function usePermissions<TData = any>({\n    v3LegacyAuthProviderCompatible = false,\n    options,\n}: UsePermissionsProps<TData> | UsePermissionsLegacyProps<TData> = {}):\n    | UsePermissionsReturnType\n    | UsePermissionsLegacyReturnType<TData> {\n    const { getPermissions: legacyGetPermission } = useLegacyAuthContext();\n    const { getPermissions } = useAuthBindingsContext();\n    const { keys, preferLegacyKeys } = useKeys();\n\n    const queryResponse = useQuery<TData>(\n        keys().auth().action(\"permissions\").get(preferLegacyKeys),\n        // Enabled check for `getPermissions` is enough to be sure that it's defined in the query function but TS is not smart enough to know that.\n        (getPermissions as (params?: unknown) => Promise<TData>) ??\n            (() => Promise.resolve(undefined)),\n        {\n            enabled: !v3LegacyAuthProviderCompatible && !!getPermissions,\n            ...(v3LegacyAuthProviderCompatible ? {} : options),\n            meta: {\n                ...(v3LegacyAuthProviderCompatible ? {} : options?.meta),\n                ...getXRay(\"usePermissions\", preferLegacyKeys),\n            },\n        },\n    );\n\n    const legacyQueryResponse = useQuery<TData>(\n        [\n            ...keys().auth().action(\"permissions\").get(preferLegacyKeys),\n            \"v3LegacyAuthProviderCompatible\",\n        ],\n        // Enabled check for `getPermissions` is enough to be sure that it's defined in the query function but TS is not smart enough to know that.\n        legacyGetPermission ?? (() => Promise.resolve(undefined)),\n        {\n            enabled: v3LegacyAuthProviderCompatible && !!legacyGetPermission,\n            ...(v3LegacyAuthProviderCompatible ? options : {}),\n            meta: {\n                ...(v3LegacyAuthProviderCompatible ? options?.meta : {}),\n                ...getXRay(\"usePermissions\", preferLegacyKeys),\n            },\n        },\n    );\n\n    return v3LegacyAuthProviderCompatible ? legacyQueryResponse : queryResponse;\n}\n","import qs, { IStringifyOptions } from \"qs\";\nimport unionWith from \"lodash/unionWith\";\nimport differenceWith from \"lodash/differenceWith\";\nimport warnOnce from \"warn-once\";\n\nimport {\n    CrudFilters,\n    CrudSorting,\n    CrudFilter,\n    CrudSort,\n    CrudOperators,\n    SortOrder,\n} from \"../../interfaces\";\nimport { pickNotDeprecated } from \"@definitions/helpers\";\n\nexport const parseTableParams = (url: string) => {\n    const { current, pageSize, sorter, sorters, filters } = qs.parse(\n        url.substring(1), // remove first ? character\n    );\n\n    return {\n        parsedCurrent: current && Number(current),\n        parsedPageSize: pageSize && Number(pageSize),\n        parsedSorter: (pickNotDeprecated(sorters, sorter) as CrudSorting) ?? [],\n        parsedFilters: (filters as CrudFilters) ?? [],\n    };\n};\n\nexport const parseTableParamsFromQuery = (params: any) => {\n    const url = qs.stringify(params);\n    return parseTableParams(`/${url}`);\n};\n\n/**\n * @internal This function is used to stringify table params from the useTable hook.\n */\nexport const stringifyTableParams = (params: {\n    pagination?: { current?: number; pageSize?: number };\n    sorters: CrudSorting;\n    filters: CrudFilters;\n    [key: string]: any;\n}): string => {\n    const options: IStringifyOptions = {\n        skipNulls: true,\n        arrayFormat: \"indices\",\n        encode: false,\n    };\n    const { pagination, sorter, sorters, filters, ...rest } = params;\n\n    const queryString = qs.stringify(\n        {\n            ...rest,\n            ...(pagination ? pagination : {}),\n            sorters: pickNotDeprecated(sorters, sorter),\n            filters,\n        },\n        options,\n    );\n\n    return queryString;\n};\n\nexport const compareFilters = (\n    left: CrudFilter,\n    right: CrudFilter,\n): boolean => {\n    if (\n        left.operator !== \"and\" &&\n        left.operator !== \"or\" &&\n        right.operator !== \"and\" &&\n        right.operator !== \"or\"\n    ) {\n        return (\n            (\"field\" in left ? left.field : undefined) ==\n                (\"field\" in right ? right.field : undefined) &&\n            left.operator == right.operator\n        );\n    }\n\n    return (\n        (\"key\" in left ? left.key : undefined) ==\n            (\"key\" in right ? right.key : undefined) &&\n        left.operator == right.operator\n    );\n};\n\nexport const compareSorters = (left: CrudSort, right: CrudSort): boolean =>\n    left.field == right.field;\n// Keep only one CrudFilter per type according to compareFilters\n// Items in the array that is passed first to unionWith have higher priority\n// CrudFilter items with undefined values are necessary to signify no filter\n// After union, don't keep CrudFilter items with undefined value in the result\n// Items in the arrays with higher priority are put at the end.\nexport const unionFilters = (\n    permanentFilter: CrudFilters,\n    newFilters: CrudFilters,\n    prevFilters: CrudFilters = [],\n): CrudFilters => {\n    const isKeyRequired = newFilters.filter(\n        (f) => (f.operator === \"or\" || f.operator === \"and\") && !f.key,\n    );\n\n    if (isKeyRequired.length > 1) {\n        warnOnce(\n            true,\n            `[conditionalFilters]: You have created multiple Conditional Filters at the top level, this requires the key parameter. \\nFor more information, see https://refine.dev/docs/advanced-tutorials/data-provider/handling-filters/#top-level-multiple-conditional-filters-usage`,\n        );\n    }\n\n    return unionWith(\n        permanentFilter,\n        newFilters,\n        prevFilters,\n        compareFilters,\n    ).filter(\n        (crudFilter) =>\n            crudFilter.value !== undefined &&\n            crudFilter.value !== null &&\n            (crudFilter.operator !== \"or\" ||\n                (crudFilter.operator === \"or\" &&\n                    crudFilter.value.length !== 0)) &&\n            (crudFilter.operator !== \"and\" ||\n                (crudFilter.operator === \"and\" &&\n                    crudFilter.value.length !== 0)),\n    );\n};\n\nexport const unionSorters = (\n    permanentSorter: CrudSorting,\n    newSorters: CrudSorting,\n): CrudSorting =>\n    unionWith(permanentSorter, newSorters, compareSorters).filter(\n        (crudSorter) =>\n            crudSorter.order !== undefined && crudSorter.order !== null,\n    );\n// Prioritize filters in the permanentFilter and put it at the end of result array\nexport const setInitialFilters = (\n    permanentFilter: CrudFilters,\n    defaultFilter: CrudFilters,\n): CrudFilters => [\n    ...differenceWith(defaultFilter, permanentFilter, compareFilters),\n    ...permanentFilter,\n];\n\nexport const setInitialSorters = (\n    permanentSorter: CrudSorting,\n    defaultSorter: CrudSorting,\n): CrudSorting => [\n    ...differenceWith(defaultSorter, permanentSorter, compareSorters),\n    ...permanentSorter,\n];\n\nexport const getDefaultSortOrder = (\n    columnName: string,\n    sorter?: CrudSorting,\n): SortOrder | undefined => {\n    if (!sorter) {\n        return undefined;\n    }\n\n    const sortItem = sorter.find((item) => item.field === columnName);\n\n    if (sortItem) {\n        return sortItem.order as SortOrder;\n    }\n\n    return undefined;\n};\n\nexport const getDefaultFilter = (\n    columnName: string,\n    filters?: CrudFilters,\n    operatorType: CrudOperators = \"eq\",\n): CrudFilter[\"value\"] | undefined => {\n    const filter = filters?.find((filter) => {\n        if (\n            filter.operator !== \"or\" &&\n            filter.operator !== \"and\" &&\n            \"field\" in filter\n        ) {\n            const { operator, field } = filter;\n            return field === columnName && operator === operatorType;\n        }\n        return undefined;\n    });\n\n    if (filter) {\n        return filter.value || [];\n    }\n\n    return undefined;\n};\n","export const userFriendlySecond = (miliseconds: number): number => {\n    return miliseconds / 1000; //convert to seconds\n};\n","import zip from \"lodash/zip\";\nimport fromPairs from \"lodash/fromPairs\";\nimport { MapDataFn } from \"../../../interfaces\";\n\nexport const importCSVMapper = <TItem = any, TVariables = any>(\n    data: any[][],\n    mapData: MapDataFn<TItem, TVariables> = (item) => item as any,\n): TVariables[] => {\n    const [headers, ...body] = data;\n    return body\n        .map((entry) => fromPairs(zip(headers, entry)))\n        .map((item: any, index, array: any) =>\n            mapData.call(undefined, item, index, array),\n        );\n};\n","import pluralize from \"pluralize\";\nimport { humanizeString } from \"@definitions\";\n\n/**\n * A method that the internal uses\n * @internal\n * @deprecated use `useUserFriendlyName` instead.\n */\nexport const userFriendlyResourceName = (\n    resource = \"\",\n    type: \"singular\" | \"plural\",\n): string => {\n    const humanizeResource = humanizeString(resource);\n    if (type === \"singular\") {\n        return pluralize.singular(humanizeResource);\n    }\n    return pluralize.plural(humanizeResource);\n};\n","export const handleUseParams = (params: any = {}): any => {\n    if (params?.id) {\n        return {\n            ...params,\n            id: decodeURIComponent(params.id),\n        };\n    }\n    return params;\n};\n","/*\n * Returns first value that is not undefined.\n * @internal This is an internal helper function. Please do not use externally.\n */\nexport const pickNotDeprecated = <T extends unknown[]>(\n    ...args: T\n): T[never] => {\n    return args.find((arg) => typeof arg !== \"undefined\");\n};\n","import { BaseKey } from \"src/interfaces\";\n\ntype ParametrizedDataActions = \"list\" | \"infinite\";\ntype IdRequiredDataActions = \"one\";\ntype IdsRequiredDataActions = \"many\";\ntype DataMutationActions =\n    | \"custom\"\n    | \"customMutation\"\n    | \"create\"\n    | \"createMany\"\n    | \"update\"\n    | \"updateMany\"\n    | \"delete\"\n    | \"deleteMany\";\n\ntype AuthActionType =\n    | \"login\"\n    | \"logout\"\n    | \"identity\"\n    | \"register\"\n    | \"forgotPassword\"\n    | \"check\"\n    | \"onError\"\n    | \"permissions\"\n    | \"updatePassword\";\n\ntype AuditActionType = \"list\" | \"log\" | \"rename\";\n\ntype IdType = BaseKey;\ntype IdsType = IdType[];\n\ntype ParamsType = any;\n\ntype KeySegment = string | IdType | IdsType | ParamsType;\n\nexport function arrayFindIndex<T>(array: T[], slice: T[]): number {\n    return array.findIndex(\n        (item, index) =>\n            index <= array.length - slice.length &&\n            slice.every(\n                (sliceItem, sliceIndex) =>\n                    array[index + sliceIndex] === sliceItem,\n            ),\n    );\n}\n\nexport function arrayReplace<T>(\n    array: T[],\n    partToBeReplaced: T[],\n    newPart: T[],\n): T[] {\n    const newArray: T[] = [...array];\n    const startIndex = arrayFindIndex(array, partToBeReplaced);\n\n    if (startIndex !== -1) {\n        newArray.splice(startIndex, partToBeReplaced.length, ...newPart);\n    }\n\n    return newArray;\n}\n\nexport function stripUndefined(segments: KeySegment[]) {\n    return segments.filter((segment) => segment !== undefined);\n}\n\nfunction convertToLegacy(segments: KeySegment[]) {\n    // for `list`, `many` and `one`\n    if (segments[0] === \"data\") {\n        // [data, dpName, resource, action, ...];\n        const newSegments = segments.slice(1);\n\n        if (newSegments[2] === \"many\") {\n            newSegments[2] = \"getMany\";\n        } else if (newSegments[2] === \"infinite\") {\n            newSegments[2] = \"list\";\n        } else if (newSegments[2] === \"one\") {\n            newSegments[2] = \"detail\";\n        } else if (newSegments[1] === \"custom\") {\n            const newParams = {\n                ...newSegments[2],\n            };\n            delete newParams.method;\n            delete newParams.url;\n\n            return [\n                newSegments[0],\n                newSegments[1],\n                newSegments[2].method,\n                newSegments[2].url,\n                newParams,\n            ];\n        }\n\n        return newSegments;\n    }\n    // for `audit` -> `logList`\n    if (segments[0] === \"audit\") {\n        // [audit, resource, action, params] (for log and list)\n        // or\n        // [audit, action, params] (for rename)\n        if (segments[2] === \"list\") {\n            return [\"logList\", segments[1], segments[3]];\n        }\n    }\n    // for `access` -> `useCan`\n    if (segments[0] === \"access\") {\n        // [access, resource, action, params]\n        if (segments.length === 4) {\n            return [\n                \"useCan\",\n                {\n                    resource: segments[1],\n                    action: segments[2],\n                    ...segments[3], // params: { params, enabled }\n                },\n            ];\n        }\n    }\n    // for `auth`\n    if (segments[0] === \"auth\") {\n        if (arrayFindIndex(segments, [\"auth\", \"login\"]) !== -1) {\n            return [\"useLogin\"];\n        }\n        if (arrayFindIndex(segments, [\"auth\", \"logout\"]) !== -1) {\n            return [\"useLogout\"];\n        }\n        if (arrayFindIndex(segments, [\"auth\", \"identity\"]) !== -1) {\n            return [\"getUserIdentity\"];\n        }\n        if (arrayFindIndex(segments, [\"auth\", \"register\"]) !== -1) {\n            return [\"useRegister\"];\n        }\n        if (arrayFindIndex(segments, [\"auth\", \"forgotPassword\"]) !== -1) {\n            return [\"useForgotPassword\"];\n        }\n        if (arrayFindIndex(segments, [\"auth\", \"check\"]) !== -1) {\n            return [\"useAuthenticated\", segments[2]]; // [auth, check, params]\n        }\n        if (arrayFindIndex(segments, [\"auth\", \"onError\"]) !== -1) {\n            return [\"useCheckError\"];\n        }\n        if (arrayFindIndex(segments, [\"auth\", \"permissions\"]) !== -1) {\n            return [\"usePermissions\"];\n        }\n        if (arrayFindIndex(segments, [\"auth\", \"updatePassword\"]) !== -1) {\n            return [\"useUpdatePassword\"];\n        }\n    }\n    return segments;\n}\n\nclass BaseKeyBuilder {\n    segments: KeySegment[] = [];\n\n    constructor(segments: KeySegment[] = []) {\n        this.segments = segments;\n    }\n\n    key() {\n        return this.segments;\n    }\n\n    legacy() {\n        return convertToLegacy(this.segments);\n    }\n\n    get(legacy?: boolean) {\n        return legacy ? this.legacy() : this.segments;\n    }\n}\n\nclass ParamsKeyBuilder extends BaseKeyBuilder {\n    constructor(segments: KeySegment[]) {\n        super(segments);\n    }\n\n    params(paramsValue?: ParamsType) {\n        return new BaseKeyBuilder([...this.segments, paramsValue]);\n    }\n}\n\nclass DataIdRequiringKeyBuilder extends BaseKeyBuilder {\n    constructor(segments: KeySegment[]) {\n        super(segments);\n    }\n\n    id(idValue?: IdType) {\n        return new ParamsKeyBuilder([\n            ...this.segments,\n            idValue ? String(idValue) : undefined,\n        ]);\n    }\n}\n\nclass DataIdsRequiringKeyBuilder extends BaseKeyBuilder {\n    constructor(segments: KeySegment[]) {\n        super(segments);\n    }\n\n    ids(...idsValue: IdsType) {\n        return new ParamsKeyBuilder([\n            ...this.segments,\n            ...(idsValue.length ? [idsValue.map((el) => String(el))] : []),\n        ]);\n    }\n}\n\nclass DataResourceKeyBuilder extends BaseKeyBuilder {\n    constructor(segments: KeySegment[]) {\n        super(segments);\n    }\n\n    action(actionType: ParametrizedDataActions): ParamsKeyBuilder;\n    action(actionType: IdRequiredDataActions): DataIdRequiringKeyBuilder;\n    action(actionType: IdsRequiredDataActions): DataIdsRequiringKeyBuilder;\n    action(\n        actionType:\n            | ParametrizedDataActions\n            | IdRequiredDataActions\n            | IdsRequiredDataActions,\n    ):\n        | ParamsKeyBuilder\n        | DataIdRequiringKeyBuilder\n        | DataIdsRequiringKeyBuilder {\n        if (actionType === \"one\") {\n            return new DataIdRequiringKeyBuilder([\n                ...this.segments,\n                actionType,\n            ]);\n        } else if (actionType === \"many\") {\n            return new DataIdsRequiringKeyBuilder([\n                ...this.segments,\n                actionType,\n            ]);\n        } else if ([\"list\", \"infinite\"].includes(actionType)) {\n            return new ParamsKeyBuilder([...this.segments, actionType]);\n        } else {\n            throw new Error(\"Invalid action type\");\n        }\n    }\n}\n\nclass DataKeyBuilder extends BaseKeyBuilder {\n    constructor(segments: KeySegment[]) {\n        super(segments);\n    }\n\n    resource(resourceName?: string) {\n        return new DataResourceKeyBuilder([...this.segments, resourceName]);\n    }\n\n    mutation(mutationName: DataMutationActions) {\n        return new ParamsKeyBuilder([\n            ...(mutationName === \"custom\" ? this.segments : [this.segments[0]]),\n            mutationName,\n        ]);\n    }\n}\n\nclass AuthKeyBuilder extends BaseKeyBuilder {\n    constructor(segments: KeySegment[]) {\n        super(segments);\n    }\n\n    action(actionType: AuthActionType) {\n        return new ParamsKeyBuilder([...this.segments, actionType]);\n    }\n}\n\nclass AccessResourceKeyBuilder extends BaseKeyBuilder {\n    constructor(segments: KeySegment[]) {\n        super(segments);\n    }\n\n    action(resourceName: string) {\n        return new ParamsKeyBuilder([...this.segments, resourceName]);\n    }\n}\n\nclass AccessKeyBuilder extends BaseKeyBuilder {\n    constructor(segments: KeySegment[]) {\n        super(segments);\n    }\n\n    resource(resourceName?: string) {\n        return new AccessResourceKeyBuilder([...this.segments, resourceName]);\n    }\n}\n\nclass AuditActionKeyBuilder extends BaseKeyBuilder {\n    constructor(segments: KeySegment[]) {\n        super(segments);\n    }\n\n    action(actionType: Extract<AuditActionType, \"list\">) {\n        return new ParamsKeyBuilder([...this.segments, actionType]);\n    }\n}\n\nclass AuditKeyBuilder extends BaseKeyBuilder {\n    constructor(segments: KeySegment[]) {\n        super(segments);\n    }\n\n    resource(resourceName?: string) {\n        return new AuditActionKeyBuilder([...this.segments, resourceName]);\n    }\n\n    action(actionType: Extract<AuditActionType, \"rename\" | \"log\">) {\n        return new ParamsKeyBuilder([...this.segments, actionType]);\n    }\n}\n\nexport class KeyBuilder extends BaseKeyBuilder {\n    constructor(segments: KeySegment[]) {\n        super(segments);\n    }\n\n    data(name?: string) {\n        return new DataKeyBuilder([\"data\", name || \"default\"]);\n    }\n\n    auth() {\n        return new AuthKeyBuilder([\"auth\"]);\n    }\n\n    access() {\n        return new AccessKeyBuilder([\"access\"]);\n    }\n\n    audit() {\n        return new AuditKeyBuilder([\"audit\"]);\n    }\n}\n\nexport const keys = () => new KeyBuilder([]);\n","import { IQueryKeys } from \"src/interfaces\";\nimport { QueryKey } from \"@tanstack/react-query\";\n\nimport { MetaQuery } from \"src/interfaces\";\nimport { pickNotDeprecated } from \"../pickNotDeprecated\";\nimport { keys as newKeys } from \"../keys\";\n\n/**\n * @deprecated `queryKeys` is deprecated. Please use `keys` instead.\n */\nexport const queryKeys = (\n    resource?: string,\n    dataProviderName?: string,\n    meta?: MetaQuery,\n    /**\n     * @deprecated `metaData` is deprecated with refine@4, refine will pass `meta` instead, however, we still support `metaData` for backward compatibility.\n     */\n    metaData?: MetaQuery | undefined,\n): IQueryKeys => {\n    const providerName = dataProviderName || \"default\";\n    const keys: IQueryKeys = {\n        all: [providerName],\n        resourceAll: [providerName, resource || \"\"],\n        list: (config) => [\n            ...keys.resourceAll,\n            \"list\",\n            {\n                ...config,\n                ...(pickNotDeprecated(meta, metaData) || {}),\n            } as QueryKey,\n        ],\n        many: (ids) =>\n            [\n                ...keys.resourceAll,\n                \"getMany\",\n                (ids && ids.map(String)) as QueryKey,\n                { ...(pickNotDeprecated(meta, metaData) || {}) } as QueryKey,\n            ].filter((item) => item !== undefined),\n        detail: (id) => [\n            ...keys.resourceAll,\n            \"detail\",\n            id?.toString(),\n            { ...(pickNotDeprecated(meta, metaData) || {}) } as QueryKey,\n        ],\n        logList: (meta) =>\n            [\"logList\", resource, meta as any, metaData as QueryKey].filter(\n                (item) => item !== undefined,\n            ),\n    };\n    return keys;\n};\n\nexport const queryKeysReplacement = (preferLegacyKeys?: boolean) => {\n    return (\n        resource?: string,\n        dataProviderName?: string,\n        meta?: MetaQuery,\n        /**\n         * @deprecated `metaData` is deprecated with refine@4, refine will pass `meta` instead, however, we still support `metaData` for backward compatibility.\n         */\n        metaData?: MetaQuery | undefined,\n    ): IQueryKeys => {\n        const providerName = dataProviderName || \"default\";\n\n        const keys: IQueryKeys = {\n            all: newKeys().data(providerName).get(preferLegacyKeys),\n            resourceAll: newKeys()\n                .data(dataProviderName)\n                .resource(resource ?? \"\")\n                .get(preferLegacyKeys),\n            list: (config) =>\n                newKeys()\n                    .data(dataProviderName)\n                    .resource(resource ?? \"\")\n                    .action(\"list\")\n                    .params({\n                        ...config,\n                        ...(pickNotDeprecated(meta, metaData) || {}),\n                    })\n                    .get(preferLegacyKeys),\n            many: (ids) =>\n                newKeys()\n                    .data(dataProviderName)\n                    .resource(resource ?? \"\")\n                    .action(\"many\")\n                    .ids(...(ids ?? []))\n                    .params({\n                        ...(pickNotDeprecated(meta, metaData) || {}),\n                    })\n                    .get(preferLegacyKeys),\n            detail: (id) =>\n                newKeys()\n                    .data(dataProviderName)\n                    .resource(resource ?? \"\")\n                    .action(\"one\")\n                    .id(id ?? \"\")\n                    .params({\n                        ...(pickNotDeprecated(meta, metaData) || {}),\n                    })\n                    .get(preferLegacyKeys),\n            logList: (meta) =>\n                [\n                    ...newKeys()\n                        .audit()\n                        .resource(resource)\n                        .action(\"list\")\n                        .params(meta)\n                        .get(preferLegacyKeys),\n                    metaData as QueryKey,\n                ].filter((item) => item !== undefined),\n        };\n\n        return keys;\n    };\n};\n","export const hasPermission = (\n    permissions: string[] | undefined,\n    action: string | undefined,\n): boolean => {\n    if (!permissions || !action) {\n        return false;\n    }\n    return !!permissions.find((i) => i === action);\n};\n","/**\n * Check if a segment is a parameter. (e.g. :id)\n */\nexport const isParameter = (segment: string) => {\n    return segment.startsWith(\":\");\n};\n","/**\n * Split a path to segments.\n */\nexport const splitToSegments = (path: string) => {\n    const segments = path.split(\"/\").filter((segment) => segment !== \"\");\n    return segments;\n};\n","import { splitToSegments } from \"./split-to-segments\";\n\n/**\n * Checks if the both routes have the same number of segments.\n */\nexport const isSegmentCountsSame = (route: string, resourceRoute: string) => {\n    const routeSegments = splitToSegments(route);\n    const resourceRouteSegments = splitToSegments(resourceRoute);\n\n    return routeSegments.length === resourceRouteSegments.length;\n};\n","/**\n * Remove leading and trailing slashes from a route.\n */\nexport const removeLeadingTrailingSlashes = (route: string) => {\n    return route.replace(/^\\/|\\/$/g, \"\");\n};\n","import { isParameter } from \"./is-parameter\";\nimport { isSegmentCountsSame } from \"./is-segment-counts-same\";\nimport { removeLeadingTrailingSlashes } from \"./remove-leading-trailing-slashes\";\nimport { splitToSegments } from \"./split-to-segments\";\n\n/**\n * This function if the route and resourceRoute match by segments.\n * - First, trailing and leading slashes are removed\n * - Then, the route and resourceRoute are split to segments and checked if they have the same number of segments\n * - Then, each segment is checked if it is a parameter or if it matches the resourceRoute segment\n * - If all segments match, the function returns true, otherwise false\n */\nexport const checkBySegments = (route: string, resourceRoute: string) => {\n    const stdRoute = removeLeadingTrailingSlashes(route);\n    const stdResourceRoute = removeLeadingTrailingSlashes(resourceRoute);\n    // we need to check if the route and resourceRoute have the same number of segments\n    // if not, we can't match them\n    if (!isSegmentCountsSame(stdRoute, stdResourceRoute)) {\n        return false;\n    }\n\n    const routeSegments = splitToSegments(stdRoute);\n    const resourceRouteSegments = splitToSegments(stdResourceRoute);\n\n    return resourceRouteSegments.every((segment, index) => {\n        return isParameter(segment) || segment === routeSegments[index];\n    });\n};\n","import { Action } from \"src/interfaces\";\nimport { removeLeadingTrailingSlashes } from \"./remove-leading-trailing-slashes\";\n\n/**\n * This helper function returns the default path for a given action and resource.\n * It also applies the parentPrefix if provided.\n * This is used by the legacy router and the new router if the resource doesn't provide a custom path.\n */\nexport const getDefaultActionPath = (\n    resourceName: string,\n    action: Action,\n    parentPrefix?: string,\n): string => {\n    const cleanParentPrefix = removeLeadingTrailingSlashes(parentPrefix || \"\");\n\n    let path = `${cleanParentPrefix}${\n        cleanParentPrefix ? \"/\" : \"\"\n    }${resourceName}`;\n\n    if (action === \"list\") {\n        path = `${path}`;\n    } else if (action === \"create\") {\n        path = `${path}/create`;\n    } else if (action === \"edit\") {\n        path = `${path}/edit/:id`;\n    } else if (action === \"show\") {\n        path = `${path}/show/:id`;\n    } else if (action === \"clone\") {\n        path = `${path}/clone/:id`;\n    }\n\n    return `/${path.replace(/^\\//, \"\")}`;\n};\n","import { IResourceItem } from \"src/interfaces\";\nimport { pickNotDeprecated } from \"../pickNotDeprecated\";\n\n/**\n * Returns the parent resource of the given resource.\n * Works both with the deprecated `parentName` and the new `parent` property.\n */\nexport const getParentResource = (\n    resource: IResourceItem,\n    resources: IResourceItem[],\n): IResourceItem | undefined => {\n    const parentName = pickNotDeprecated(\n        resource.meta?.parent,\n        resource.options?.parent,\n        resource.parentName,\n    );\n\n    if (!parentName) {\n        return undefined;\n    }\n\n    const parentResource = resources.find(\n        (resource) => (resource.identifier ?? resource.name) === parentName,\n    );\n\n    /**\n     * If the parent resource is not found, we return a resource object with the name of the parent resource.\n     * Because we still want to have nesting and prefixing for the resource even if the parent is not explicitly defined.\n     */\n    return parentResource ?? { name: parentName };\n};\n","import { ResourceProps } from \"src/interfaces/bindings/resource\";\nimport { getParentResource } from \"./get-parent-resource\";\nimport { removeLeadingTrailingSlashes } from \"./remove-leading-trailing-slashes\";\n\n/**\n * Returns the parent prefix for a resource\n * - If `legacy` is provided, the computation is based on the `route` option of the resource\n */\nexport const getParentPrefixForResource = (\n    resource: ResourceProps,\n    resources: ResourceProps[],\n    /**\n     * Uses legacy route if true (`options.route`)\n     */\n    legacy?: boolean,\n): string | undefined => {\n    const parents: ResourceProps[] = [];\n\n    let parent = getParentResource(resource, resources);\n\n    while (parent) {\n        parents.push(parent);\n        parent = getParentResource(parent, resources);\n    }\n\n    if (parents.length === 0) {\n        return undefined;\n    }\n\n    return `/${parents\n        .reverse()\n        .map((parent) => {\n            const v = legacy\n                ? parent.options?.route ?? parent.name\n                : parent.name;\n            return removeLeadingTrailingSlashes(v);\n        })\n        .join(\"/\")}`;\n};\n","import { Action, IResourceItem } from \"src/interfaces\";\nimport { getDefaultActionPath } from \"./get-default-action-path\";\nimport { getParentPrefixForResource } from \"./get-parent-prefix-for-resource\";\n\nexport type ResourceActionRoute = {\n    action: Action;\n    resource: IResourceItem;\n    route: string;\n};\n\n/**\n * This function returns all the routes for available actions for a resource.\n * - If the action is a function, it means we're fallbacking to default path for the action\n * - If the action is a string, it means we don't have the component, but we have the route\n * - If the action is an object, it means we have the component and the route\n * - It will return an array of objects with the action, the resource and the route\n */\nexport const getActionRoutesFromResource = (\n    resource: IResourceItem,\n    resources: IResourceItem[],\n    /**\n     * Uses legacy route if true (`options.route`)\n     */\n    legacy?: boolean,\n) => {\n    const actions: ResourceActionRoute[] = [];\n\n    const actionList: Action[] = [\"list\", \"show\", \"edit\", \"create\", \"clone\"];\n\n    const parentPrefix = getParentPrefixForResource(\n        resource,\n        resources,\n        legacy,\n    );\n\n    actionList.forEach((action) => {\n        const item =\n            legacy && action === \"clone\" ? resource.create : resource[action];\n\n        let route: string | undefined = undefined;\n\n        if (typeof item === \"function\" || legacy) {\n            // means we're fallbacking to default path for the action\n            route = getDefaultActionPath(\n                legacy\n                    ? resource.meta?.route ??\n                          resource.options?.route ??\n                          resource.name\n                    : resource.name,\n                action,\n                legacy ? parentPrefix : undefined,\n            );\n        } else if (typeof item === \"string\") {\n            // means we don't have the component, but we have the route\n            route = item;\n        } else if (typeof item === \"object\") {\n            // means we have the component and the route\n            route = item.path;\n        }\n\n        if (route) {\n            actions.push({\n                action,\n                resource,\n                route: `/${route.replace(/^\\//, \"\")}`,\n            });\n        }\n    });\n\n    return actions;\n};\n","import { ResourceActionRoute } from \"./get-action-routes-from-resource\";\nimport { isParameter } from \"./is-parameter\";\nimport { removeLeadingTrailingSlashes } from \"./remove-leading-trailing-slashes\";\nimport { splitToSegments } from \"./split-to-segments\";\n\n/**\n * Picks the most eligible route from the given matched routes.\n * - If there's only one route, it returns it.\n * - If there's more than one route, it picks the best non-greedy match.\n */\nexport const pickMatchedRoute = (\n    routes: ResourceActionRoute[],\n): ResourceActionRoute | undefined => {\n    // these routes are all matched, we should pick the least parametrized one\n\n    // no routes, no match\n    if (routes.length === 0) {\n        return undefined;\n    }\n\n    // no need to calculate the route segments if there's only one route\n    if (routes.length === 1) {\n        return routes[0];\n    }\n\n    // remove trailing and leading slashes\n    // split them to segments\n    const sanitizedRoutes = routes.map((route) => ({\n        ...route,\n        splitted: splitToSegments(removeLeadingTrailingSlashes(route.route)),\n    }));\n\n    // at this point, before calling this function, we already checked for segment lenghts and expect all of them to be the same\n    const segmentsCount = sanitizedRoutes[0]?.splitted.length ?? 0;\n\n    let eligibleRoutes: Array<(typeof sanitizedRoutes)[number]> = [\n        ...sanitizedRoutes,\n    ];\n\n    // loop through the segments\n    for (let i = 0; i < segmentsCount; i++) {\n        const nonParametrizedRoutes = eligibleRoutes.filter(\n            (route) => !isParameter(route.splitted[i]),\n        );\n\n        if (nonParametrizedRoutes.length === 0) {\n            // keep the eligible routes as they are\n            continue;\n        }\n        if (nonParametrizedRoutes.length === 1) {\n            // no need to continue, we found the route\n            eligibleRoutes = nonParametrizedRoutes;\n            break;\n        }\n\n        // we have more than one non-parametrized route, we need to check the next segment\n        eligibleRoutes = nonParametrizedRoutes;\n    }\n\n    return eligibleRoutes[0];\n};\n","import { Action, IResourceItem } from \"../../../interfaces\";\nimport { checkBySegments } from \"./check-by-segments\";\nimport { getActionRoutesFromResource } from \"./get-action-routes-from-resource\";\nimport { pickMatchedRoute } from \"./pick-matched-route\";\n\n/**\n * Match the resource from the route\n * - It will calculate all possible routes for resources and their actions\n * - It will check if the route matches any of the possible routes\n * - It will return the most eligible resource and action\n */\nexport const matchResourceFromRoute = (\n    route: string,\n    resources: IResourceItem[],\n): {\n    found: boolean;\n    resource?: IResourceItem;\n    action?: Action;\n    matchedRoute?: string;\n} => {\n    const allActionRoutes = resources.flatMap((resource) => {\n        return getActionRoutesFromResource(resource, resources);\n    });\n\n    const allFound = allActionRoutes.filter((actionRoute) => {\n        return checkBySegments(route, actionRoute.route);\n    });\n\n    const mostEligible = pickMatchedRoute(allFound);\n\n    return {\n        found: !!mostEligible,\n        resource: mostEligible?.resource,\n        action: mostEligible?.action,\n        matchedRoute: mostEligible?.route,\n    };\n};\n","import { ResourceProps } from \"src/interfaces/bindings/resource\";\nimport { getParentPrefixForResource } from \"../router\";\nimport { pickNotDeprecated } from \"../pickNotDeprecated\";\n\n/**\n * generates route for the resource based on parents and custom routes\n * @deprecated this is a **legacy** function and works only with the old resource definition\n */\nexport const routeGenerator = (\n    item: ResourceProps,\n    resourcesFromProps: ResourceProps[],\n): string | undefined => {\n    let route;\n\n    const parentPrefix = getParentPrefixForResource(\n        item,\n        resourcesFromProps,\n        true,\n    );\n\n    if (parentPrefix) {\n        const meta = pickNotDeprecated(item.meta, item.options);\n        route = `${parentPrefix}/${meta?.route ?? item.name}`;\n    } else {\n        route = item.options?.route ?? item.name;\n    }\n\n    return `/${route.replace(/^\\//, \"\")}`;\n};\n","import { pickNotDeprecated } from \"@definitions/helpers/pickNotDeprecated\";\nimport { IResourceItem, ITreeMenu, IMenuItem } from \"src/interfaces\";\n\n/**\n * @deprecated This helper is deprecated. Please use `createTree` instead.\n */\nexport const createTreeView = (\n    resources: IResourceItem[] | IMenuItem[],\n): ITreeMenu[] | ITreeMenu[] => {\n    const tree = [];\n    const resourcesRouteObject: { [key: string]: any } = {};\n    const resourcesNameObject: { [key: string]: any } = {};\n    let parent: IResourceItem | IMenuItem;\n    let child: ITreeMenu;\n\n    for (let i = 0; i < resources.length; i++) {\n        parent = resources[i];\n\n        const route =\n            parent.route ??\n            pickNotDeprecated(parent?.meta, parent.options)?.route ??\n            \"\";\n\n        resourcesRouteObject[route] = parent;\n        resourcesRouteObject[route][\"children\"] = [];\n\n        resourcesNameObject[parent.name] = parent;\n        resourcesNameObject[parent.name][\"children\"] = [];\n    }\n\n    for (const name in resourcesRouteObject) {\n        if (resourcesRouteObject.hasOwnProperty(name)) {\n            child = resourcesRouteObject[name];\n\n            if (child.parentName && resourcesNameObject[child.parentName]) {\n                resourcesNameObject[child.parentName][\"children\"].push(child);\n            } else {\n                tree.push(child);\n            }\n        }\n    }\n\n    return tree;\n};\n","export const humanizeString = (text: string): string => {\n    text = text.replace(/([a-z]{1})([A-Z]{1})/g, \"$1-$2\");\n    text = text.replace(/([A-Z]{1})([A-Z]{1})([a-z]{1})/g, \"$1-$2$3\");\n\n    text = text\n        .toLowerCase()\n        .replace(/[_-]+/g, \" \")\n        .replace(/\\s{2,}/g, \" \")\n        .trim();\n    text = text.charAt(0).toUpperCase() + text.slice(1);\n\n    return text;\n};\n// https://www.npmjs.com/package/humanize-string\n","import React from \"react\";\nimport pluralize from \"pluralize\";\nimport { humanizeString } from \"../../definitions/helpers/humanizeString\";\n\nimport {\n    IRefineContextOptions,\n    IRefineContext,\n    IRefineContextProvider,\n} from \"./IRefineContext\";\nimport { DefaultLayout } from \"@components/layoutWrapper/defaultLayout\";\n\nimport { LoginPage as DefaultLoginPage } from \"@components/pages\";\n\nexport const defaultRefineOptions: IRefineContextOptions = {\n    mutationMode: \"pessimistic\",\n    syncWithLocation: false,\n    undoableTimeout: 5000,\n    warnWhenUnsavedChanges: false,\n    liveMode: \"off\",\n    redirect: {\n        afterCreate: \"list\",\n        afterClone: \"list\",\n        afterEdit: \"list\",\n    },\n    overtime: {\n        interval: 1000,\n    },\n    textTransformers: {\n        humanize: humanizeString,\n        plural: pluralize.plural,\n        singular: pluralize.singular,\n    },\n    disableServerSideValidation: false,\n};\n\nexport const RefineContext = React.createContext<IRefineContext>({\n    hasDashboard: false,\n    mutationMode: \"pessimistic\",\n    warnWhenUnsavedChanges: false,\n    syncWithLocation: false,\n    undoableTimeout: 5000,\n    Title: undefined,\n    Sider: undefined,\n    Header: undefined,\n    Footer: undefined,\n    Layout: DefaultLayout,\n    OffLayoutArea: undefined,\n    liveMode: \"off\",\n    onLiveEvent: undefined,\n    options: defaultRefineOptions,\n});\n\nexport const RefineContextProvider: React.FC<IRefineContextProvider> = ({\n    hasDashboard,\n    mutationMode,\n    warnWhenUnsavedChanges,\n    syncWithLocation,\n    undoableTimeout,\n    children,\n    DashboardPage,\n    Title,\n    Layout = DefaultLayout,\n    Header,\n    Sider,\n    Footer,\n    OffLayoutArea,\n    LoginPage = DefaultLoginPage,\n    catchAll,\n    liveMode = \"off\",\n    onLiveEvent,\n    options,\n}) => {\n    return (\n        <RefineContext.Provider\n            value={{\n                hasDashboard,\n                mutationMode,\n                warnWhenUnsavedChanges,\n                syncWithLocation,\n                Title,\n                undoableTimeout,\n                Layout,\n                Header,\n                Sider,\n                Footer,\n                OffLayoutArea,\n                DashboardPage,\n                LoginPage,\n                catchAll,\n                liveMode,\n                onLiveEvent,\n                options,\n            }}\n        >\n            {children}\n        </RefineContext.Provider>\n    );\n};\n","import React from \"react\";\n\nimport { LayoutProps } from \"../../../interfaces\";\n\nexport const DefaultLayout: React.FC<LayoutProps> = ({ children }) => {\n    return <div>{children}</div>;\n};\n","import { QueryClient, QueryClientConfig } from \"@tanstack/react-query\";\n\nimport { defaultRefineOptions } from \"@contexts/refine\";\nimport {\n    IRefineContextOptions,\n    IRefineOptions,\n    LiveModeProps,\n    MutationMode,\n} from \"src/interfaces\";\n\ntype HandleRefineOptionsProps = {\n    options?: IRefineOptions;\n    mutationMode?: MutationMode;\n    syncWithLocation?: boolean;\n    warnWhenUnsavedChanges?: boolean;\n    undoableTimeout?: number;\n    liveMode?: LiveModeProps[\"liveMode\"];\n    disableTelemetry?: boolean;\n    reactQueryClientConfig?: QueryClientConfig;\n    reactQueryDevtoolConfig?: any | false;\n};\n\ntype HandleRefineOptionsReturnValues = {\n    optionsWithDefaults: IRefineContextOptions;\n    disableTelemetryWithDefault: boolean;\n    reactQueryWithDefaults: {\n        clientConfig: QueryClientConfig | InstanceType<typeof QueryClient>;\n        devtoolConfig: false | any;\n    };\n};\n\nexport const handleRefineOptions = ({\n    options,\n    disableTelemetry,\n    liveMode,\n    mutationMode,\n    reactQueryClientConfig,\n    reactQueryDevtoolConfig,\n    syncWithLocation,\n    undoableTimeout,\n    warnWhenUnsavedChanges,\n}: HandleRefineOptionsProps = {}): HandleRefineOptionsReturnValues => {\n    const optionsWithDefaults: IRefineContextOptions = {\n        breadcrumb: options?.breadcrumb,\n        mutationMode:\n            options?.mutationMode ??\n            mutationMode ??\n            defaultRefineOptions.mutationMode,\n        undoableTimeout:\n            options?.undoableTimeout ??\n            undoableTimeout ??\n            defaultRefineOptions.undoableTimeout,\n        syncWithLocation:\n            options?.syncWithLocation ??\n            syncWithLocation ??\n            defaultRefineOptions.syncWithLocation,\n        warnWhenUnsavedChanges:\n            options?.warnWhenUnsavedChanges ??\n            warnWhenUnsavedChanges ??\n            defaultRefineOptions.warnWhenUnsavedChanges,\n        liveMode:\n            options?.liveMode ?? liveMode ?? defaultRefineOptions.liveMode,\n        redirect: {\n            afterCreate:\n                options?.redirect?.afterCreate ??\n                defaultRefineOptions.redirect.afterCreate,\n            afterClone:\n                options?.redirect?.afterClone ??\n                defaultRefineOptions.redirect.afterClone,\n            afterEdit:\n                options?.redirect?.afterEdit ??\n                defaultRefineOptions.redirect.afterEdit,\n        },\n        overtime: options?.overtime ?? defaultRefineOptions.overtime,\n        textTransformers: {\n            humanize:\n                options?.textTransformers?.humanize ??\n                defaultRefineOptions.textTransformers.humanize,\n            plural:\n                options?.textTransformers?.plural ??\n                defaultRefineOptions.textTransformers.plural,\n            singular:\n                options?.textTransformers?.singular ??\n                defaultRefineOptions.textTransformers.singular,\n        },\n        disableServerSideValidation:\n            options?.disableServerSideValidation ??\n            defaultRefineOptions.disableServerSideValidation,\n        projectId: options?.projectId,\n        useNewQueryKeys: options?.useNewQueryKeys,\n    };\n\n    const disableTelemetryWithDefault =\n        options?.disableTelemetry ?? disableTelemetry ?? false;\n\n    const reactQueryWithDefaults = {\n        clientConfig:\n            options?.reactQuery?.clientConfig ?? reactQueryClientConfig ?? {},\n        devtoolConfig:\n            options?.reactQuery?.devtoolConfig ?? reactQueryDevtoolConfig ?? {},\n    };\n\n    return {\n        optionsWithDefaults,\n        disableTelemetryWithDefault,\n        reactQueryWithDefaults,\n    };\n};\n","import { Action, IRefineContextOptions, RedirectAction } from \"src/interfaces\";\n\ntype RedirectPageProps = {\n    redirectFromProps?: RedirectAction;\n    action: Action;\n    redirectOptions: IRefineContextOptions[\"redirect\"];\n};\n\nexport const redirectPage = ({\n    redirectFromProps,\n    action,\n    redirectOptions,\n}: RedirectPageProps): RedirectAction => {\n    if (redirectFromProps || redirectFromProps === false) {\n        return redirectFromProps;\n    }\n\n    switch (action) {\n        case \"clone\":\n            return redirectOptions.afterClone;\n        case \"create\":\n            return redirectOptions.afterCreate;\n        case \"edit\":\n            return redirectOptions.afterEdit;\n        default:\n            return false;\n    }\n};\n","type EachResolve<TResolve, Response> = (\n    result: TResolve,\n    index: number,\n) => Response;\ntype EachReject<TReject, Response> = (\n    error: TReject,\n    index: number,\n) => Response;\n\nexport const sequentialPromises = async <\n    TResolve = unknown,\n    TReject = unknown,\n    TResolveResponse = unknown,\n    TRejectResponse = unknown,\n>(\n    promises: (() => Promise<TResolve>)[],\n    onEachResolve: EachResolve<TResolve, TResolveResponse>,\n    onEachReject: EachReject<TReject, TRejectResponse>,\n): Promise<(TResolveResponse | TRejectResponse)[]> => {\n    const results = [];\n    // @ts-expect-error Remove this when we enable `downLevelIterations`\n    for (const [index, promise] of promises.entries()) {\n        try {\n            const result = await promise();\n\n            results.push(onEachResolve(result, index));\n        } catch (error) {\n            results.push(onEachReject(error as TReject, index));\n        }\n    }\n    return results;\n};\n","import { IResourceItem } from \"src/interfaces/bindings/resource\";\nimport { removeLeadingTrailingSlashes } from \"../router/remove-leading-trailing-slashes\";\n\n/**\n * Picks the resource based on the provided identifier.\n * Identifier fallbacks to `name` if `identifier` is not explicitly provided to the resource.\n * If legacy is true, then resource is matched by `route` first and then by `name`.\n */\nexport const pickResource = (\n    identifier?: string,\n    resources: IResourceItem[] = [],\n    /**\n     * If true, the identifier will be checked for `route` and `name` properties\n     */\n    legacy = false,\n): IResourceItem | undefined => {\n    if (!identifier) {\n        return undefined;\n    }\n\n    if (legacy) {\n        const resourceByRoute = resources.find(\n            (r) =>\n                removeLeadingTrailingSlashes(r.route ?? \"\") ===\n                removeLeadingTrailingSlashes(identifier),\n        );\n\n        const resource = resourceByRoute\n            ? resourceByRoute\n            : resources.find((r) => r.name === identifier);\n\n        return resource;\n    }\n\n    let resource = resources.find((r) => r.identifier === identifier);\n    if (!resource) {\n        resource = resources.find((r) => r.name === identifier);\n    }\n\n    return resource;\n};\n","import { IResourceItem } from \"src/interfaces/bindings/resource\";\nimport { pickResource } from \"../pick-resource\";\nimport { pickNotDeprecated } from \"../pickNotDeprecated\";\n\n/**\n * Picks the data provider name based on the provided name or fallbacks to resource definition, or `default`.\n */\nexport const pickDataProvider = (\n    resourceName?: string,\n    dataProviderName?: string,\n    resources?: IResourceItem[],\n) => {\n    if (dataProviderName) {\n        return dataProviderName;\n    }\n\n    /**\n     * In this helper, we don't do `route` based matching therefore there's no need to check for `legacy` behaviors.\n     */\n    const resource = pickResource(resourceName, resources);\n\n    const meta = pickNotDeprecated(resource?.meta, resource?.options);\n\n    if (meta?.dataProviderName) {\n        return meta.dataProviderName;\n    }\n\n    return \"default\";\n};\n","export const handleMultiple = async <TData = unknown>(\n    promises: Promise<{ data: TData }>[],\n): Promise<{ data: TData[] }> => {\n    return {\n        data: (await Promise.all(promises)).map((res) => res.data),\n    };\n};\n","import { GetListResponse } from \"../../../interfaces\";\n\nexport const getNextPageParam = (lastPage: GetListResponse) => {\n    const { pagination, cursor } = lastPage;\n\n    // cursor pagination\n    if (cursor?.next) {\n        return cursor.next;\n    }\n\n    const current = pagination?.current || 1;\n\n    const pageSize = pagination?.pageSize || 10;\n    const totalPages = Math.ceil((lastPage.total || 0) / pageSize);\n\n    return current < totalPages ? Number(current) + 1 : undefined;\n};\n\nexport const getPreviousPageParam = (lastPage: GetListResponse) => {\n    const { pagination, cursor } = lastPage;\n\n    // cursor pagination\n    if (cursor?.prev) {\n        return cursor.prev;\n    }\n\n    const current = pagination?.current || 1;\n\n    return current === 1 ? undefined : current - 1;\n};\n","import {\n    IResourceItem,\n    ResourceProps,\n} from \"../../../interfaces/bindings/resource\";\n\nimport { routeGenerator } from \"../routeGenerator\";\n\n/**\n * For the legacy definition of resources, we did a basic transformation for provided resources\n * - This is meant to provide an easier way to access properties.\n * - In the new definition, we don't need to do transformations and properties can be accessed via helpers or manually.\n * This is kept for backward compability\n */\nexport const legacyResourceTransform = (resources: ResourceProps[]) => {\n    const _resources: IResourceItem[] = [];\n\n    resources.forEach((resource) => {\n        _resources.push({\n            ...resource,\n            label: resource.meta?.label ?? resource.options?.label,\n            route: routeGenerator(resource, resources),\n            canCreate: !!resource.create,\n            canEdit: !!resource.edit,\n            canShow: !!resource.show,\n            canDelete: resource.canDelete,\n        });\n    });\n\n    return _resources;\n};\n","import { splitToSegments } from \"./split-to-segments\";\nimport { removeLeadingTrailingSlashes } from \"./remove-leading-trailing-slashes\";\nimport { isParameter } from \"./is-parameter\";\n\n/**\n * Picks the route parameters from the given route.\n * (e.g. /users/:id/posts/:postId => ['id', 'postId'])\n */\nexport const pickRouteParams = (route: string) => {\n    const segments = splitToSegments(removeLeadingTrailingSlashes(route));\n\n    return segments.flatMap((s) => {\n        if (isParameter(s)) {\n            return [s.slice(1)];\n        }\n\n        return [];\n    });\n};\n","/**\n * Prepares the route params by checking the existing params and meta data.\n * Meta data is prioritized over params.\n * Params are prioritized over predetermined id, action and resource.\n * This means, we can use `meta` for user supplied params (both manually or from the query string)\n */\nexport const prepareRouteParams = <\n    TRouteParams extends Record<string, unknown> = Record<string, unknown>,\n>(\n    routeParams: (keyof TRouteParams)[],\n    meta: Record<string, unknown> = {},\n): Partial<TRouteParams> => {\n    return routeParams.reduce((acc, key) => {\n        const value = meta[key as string];\n        if (typeof value !== \"undefined\") {\n            acc[key] = value as TRouteParams[keyof TRouteParams];\n        }\n        return acc;\n    }, {} as Partial<TRouteParams>);\n};\n","import { MetaQuery, ParseResponse } from \"src/interfaces\";\nimport { pickRouteParams } from \"./pick-route-params\";\nimport { prepareRouteParams } from \"./prepare-route-params\";\n\n/**\n * This function will compose a route with the given params and meta.\n * - A route can have parameters like (eg: /users/:id)\n * - First we pick the route params from the route (eg: [id])\n * - Then we prepare the route params with the given params and meta (eg: { id: 1 })\n * - Then we replace the route params with the prepared route params (eg: /users/1)\n */\nexport const composeRoute = (\n    designatedRoute: string,\n    resourceMeta: MetaQuery = {},\n    parsed: ParseResponse = {},\n    meta: Record<string, unknown> = {},\n): string => {\n    // pickRouteParams (from the route)\n    const routeParams = pickRouteParams(designatedRoute);\n    // prepareRouteParams (from route params, params and meta)\n    const preparedRouteParams = prepareRouteParams(routeParams, {\n        ...resourceMeta,\n        ...(typeof parsed?.id !== \"undefined\" ? { id: parsed.id } : {}),\n        ...(typeof parsed?.action !== \"undefined\"\n            ? { action: parsed.action }\n            : {}),\n        ...(typeof parsed?.resource !== \"undefined\"\n            ? { resource: parsed.resource }\n            : {}),\n        ...parsed?.params,\n        ...meta,\n    });\n    // replace route params with prepared route params\n    return designatedRoute.replace(/:([^\\/]+)/g, (match, key) => {\n        const fromParams = preparedRouteParams[key];\n        if (typeof fromParams !== \"undefined\") {\n            return `${fromParams}`;\n        }\n        return match;\n    });\n};\n","import React, { PropsWithChildren } from \"react\";\n\nimport { useNavigation } from \"@hooks\";\nimport { ILegacyAuthContext, IAuthBindingsContext } from \"../../interfaces\";\n\n/**\n * @deprecated `LegacyAuthContext` is deprecated with refine@4, use `AuthBindingsContext` instead, however, we still support `LegacyAuthContext` for backward compatibility.\n */\nexport const LegacyAuthContext = React.createContext<ILegacyAuthContext>({});\n\n/**\n * @deprecated `LegacyAuthContextProvider` is deprecated with refine@4, use `AuthBindingsContextProvider` instead, however, we still support `LegacyAuthContextProvider` for backward compatibility.\n */\nexport const LegacyAuthContextProvider: React.FC<\n    ILegacyAuthContext & {\n        children?: React.ReactNode;\n    }\n> = ({ children, isProvided, ...authOperations }) => {\n    const { replace } = useNavigation();\n\n    const loginFunc = async (params: any) => {\n        try {\n            const result = await authOperations.login?.(params);\n\n            return result;\n        } catch (error) {\n            return Promise.reject(error);\n        }\n    };\n\n    const registerFunc = async (params: any) => {\n        try {\n            const result = await authOperations.register?.(params);\n\n            return result;\n        } catch (error) {\n            return Promise.reject(error);\n        }\n    };\n\n    const logoutFunc = async (params: any) => {\n        try {\n            const redirectPath = await authOperations.logout?.(params);\n\n            return redirectPath;\n        } catch (error) {\n            return Promise.reject(error);\n        }\n    };\n\n    const checkAuthFunc = async (params: any) => {\n        try {\n            await authOperations.checkAuth?.(params);\n            return Promise.resolve();\n        } catch (error) {\n            if ((error as { redirectPath?: string })?.redirectPath) {\n                replace((error as { redirectPath: string }).redirectPath);\n            }\n\n            return Promise.reject(error);\n        }\n    };\n\n    return (\n        <LegacyAuthContext.Provider\n            value={{\n                ...authOperations,\n                login: loginFunc,\n                logout: logoutFunc,\n                checkAuth: checkAuthFunc,\n                register: registerFunc,\n                isProvided,\n            }}\n        >\n            {children}\n        </LegacyAuthContext.Provider>\n    );\n};\n\nexport const AuthBindingsContext = React.createContext<\n    Partial<IAuthBindingsContext>\n>({});\n\nexport const AuthBindingsContextProvider: React.FC<\n    PropsWithChildren<IAuthBindingsContext>\n> = ({ children, isProvided, ...authBindings }) => {\n    const handleLogin = async (params: unknown) => {\n        try {\n            const result = await authBindings.login?.(params);\n\n            return result;\n        } catch (error) {\n            console.warn(\n                \"Unhandled Error in login: refine always expects a resolved promise.\",\n                error,\n            );\n            return Promise.reject(error);\n        }\n    };\n\n    const handleRegister = async (params: unknown) => {\n        try {\n            const result = await authBindings.register?.(params);\n\n            return result;\n        } catch (error) {\n            console.warn(\n                \"Unhandled Error in register: refine always expects a resolved promise.\",\n                error,\n            );\n            return Promise.reject(error);\n        }\n    };\n\n    const handleLogout = async (params: unknown) => {\n        try {\n            const result = await authBindings.logout?.(params);\n\n            return result;\n        } catch (error) {\n            console.warn(\n                \"Unhandled Error in logout: refine always expects a resolved promise.\",\n                error,\n            );\n            return Promise.reject(error);\n        }\n    };\n\n    const handleCheck = async (params: unknown) => {\n        try {\n            const result = await authBindings.check?.(params);\n\n            return Promise.resolve(result);\n        } catch (error) {\n            console.warn(\n                \"Unhandled Error in check: refine always expects a resolved promise.\",\n                error,\n            );\n            return Promise.reject(error);\n        }\n    };\n\n    const handleForgotPassword = async (params: unknown) => {\n        try {\n            const result = await authBindings.forgotPassword?.(params);\n\n            return Promise.resolve(result);\n        } catch (error) {\n            console.warn(\n                \"Unhandled Error in forgotPassword: refine always expects a resolved promise.\",\n                error,\n            );\n            return Promise.reject(error);\n        }\n    };\n\n    const handleUpdatePassword = async (params: unknown) => {\n        try {\n            const result = await authBindings.updatePassword?.(params);\n            return Promise.resolve(result);\n        } catch (error) {\n            console.warn(\n                \"Unhandled Error in updatePassword: refine always expects a resolved promise.\",\n                error,\n            );\n            return Promise.reject(error);\n        }\n    };\n\n    return (\n        <AuthBindingsContext.Provider\n            value={{\n                ...authBindings,\n                login: handleLogin as IAuthBindingsContext[\"login\"],\n                logout: handleLogout as IAuthBindingsContext[\"logout\"],\n                check: handleCheck as IAuthBindingsContext[\"check\"],\n                register: handleRegister as IAuthBindingsContext[\"register\"],\n                forgotPassword:\n                    handleForgotPassword as IAuthBindingsContext[\"forgotPassword\"],\n                updatePassword:\n                    handleUpdatePassword as IAuthBindingsContext[\"updatePassword\"],\n                isProvided,\n            }}\n        >\n            {children}\n        </AuthBindingsContext.Provider>\n    );\n};\n\n/**\n * @deprecated `useLegacyAuthContext` is deprecated with refine@4, use `useAuthBindingsContext` instead, however, we still support `useLegacyAuthContext` for backward compatibility.\n */\nexport const useLegacyAuthContext = () => {\n    const context = React.useContext(LegacyAuthContext);\n\n    return context;\n};\n\nexport const useAuthBindingsContext = () => {\n    const context = React.useContext(AuthBindingsContext);\n\n    return context;\n};\n","import { useAuthBindingsContext, useLegacyAuthContext } from \"@contexts/auth\";\n\n/**\n * @returns authProvider or legacyAuthProvider if provided, otherwise null\n * @internal\n * NOTE: Will be removed in v5\n */\nexport const useActiveAuthProvider = () => {\n    const legacyAuthProvider = useLegacyAuthContext();\n    const authProvider = useAuthBindingsContext();\n\n    if (authProvider.isProvided) {\n        return { isLegacy: false, ...authProvider };\n    }\n\n    if (legacyAuthProvider.isProvided) {\n        // legacyAuthProvider interface is different from authProvider interface\n        // we need to convert it to authProvider interface for simple usage\n        // in the future, we will remove legacyAuthProvider\n        return {\n            isLegacy: true,\n            ...legacyAuthProvider,\n            check: legacyAuthProvider.checkAuth,\n            onError: legacyAuthProvider.checkError,\n            getIdentity: legacyAuthProvider.getUserIdentity,\n        };\n    }\n\n    return null;\n};\n","import { Pagination } from \"../../../interfaces\";\nimport { pickNotDeprecated } from \"../pickNotDeprecated\";\n\ntype HandlePaginationParamsProps = {\n    hasPagination?: boolean;\n    pagination?: Pagination;\n    configPagination?: Pagination;\n};\n\nexport const handlePaginationParams = ({\n    hasPagination,\n    pagination,\n    configPagination,\n}: HandlePaginationParamsProps = {}): Required<Pagination> => {\n    const hasPaginationString = hasPagination === false ? \"off\" : \"server\";\n    const mode = pagination?.mode ?? hasPaginationString;\n\n    const current =\n        pickNotDeprecated(pagination?.current, configPagination?.current) ?? 1;\n\n    const pageSize =\n        pickNotDeprecated(pagination?.pageSize, configPagination?.pageSize) ??\n        10;\n\n    return {\n        current,\n        pageSize,\n        mode,\n    };\n};\n","import { useState, useEffect } from \"react\";\n\nexport const useMediaQuery = (query: string) => {\n    const [matches, setMatches] = useState(false);\n\n    useEffect(() => {\n        const media = window.matchMedia(query);\n        if (media.matches !== matches) {\n            setMatches(media.matches);\n        }\n        const listener = () => setMatches(media.matches);\n        window.addEventListener(\"resize\", listener);\n        return () => window.removeEventListener(\"resize\", listener);\n    }, [matches, query]);\n\n    return matches;\n};\n","import type { useTranslate } from \"@hooks/translate\";\n\nexport const safeTranslate = (\n    translate: ReturnType<typeof useTranslate>,\n    key: string,\n    defaultMessage?: string,\n    options?: any,\n) => {\n    const translated = options\n        ? translate(key, options, defaultMessage)\n        : translate(key, defaultMessage);\n\n    const fallback = defaultMessage ?? key;\n\n    if (translated === key || typeof translated === \"undefined\") {\n        return fallback;\n    }\n\n    return translated;\n};\n","import { IResourceItem } from \"@contexts/resource\";\nimport { userFriendlyResourceName } from \"../userFriendlyResourceName\";\nimport type { useTranslate } from \"@hooks/translate\";\nimport { safeTranslate } from \"../safe-translate\";\n\n/**\n * Generates document title for the given resource and action.\n */\nexport function generateDefaultDocumentTitle(\n    translate: ReturnType<typeof useTranslate>,\n    resource?: IResourceItem,\n    action?: string,\n    id?: string,\n    resourceName?: string,\n) {\n    const actionPrefixMatcher = {\n        create: \"Create new \",\n        clone: `#${id ?? \"\"} Clone `,\n        edit: `#${id ?? \"\"} Edit `,\n        show: `#${id ?? \"\"} Show `,\n        list: \"\",\n    };\n\n    const identifier = resource?.identifier ?? resource?.name;\n\n    const resourceNameFallback =\n        resource?.label ??\n        resource?.meta?.label ??\n        userFriendlyResourceName(\n            identifier,\n            action === \"list\" ? \"plural\" : \"singular\",\n        );\n\n    const resourceNameWithFallback = resourceName ?? resourceNameFallback;\n\n    const defaultTitle = safeTranslate(\n        translate,\n        \"documentTitle.default\",\n        \"refine\",\n    );\n    const suffix = safeTranslate(\n        translate,\n        \"documentTitle.suffix\",\n        \" | refine\",\n    );\n    let autoGeneratedTitle = defaultTitle;\n\n    if (action && identifier) {\n        autoGeneratedTitle = safeTranslate(\n            translate,\n            `documentTitle.${identifier}.${action}`,\n            `${\n                actionPrefixMatcher[\n                    action as keyof typeof actionPrefixMatcher\n                ] ?? \"\"\n            }${resourceNameWithFallback}${suffix}`,\n            { id },\n        );\n    }\n\n    return autoGeneratedTitle;\n}\n","import { useContext } from \"react\";\n\nimport { RefineContext } from \"@contexts/refine\";\nimport { IRefineContextOptions } from \"../../interfaces\";\n\ntype UseMutationModeType = () => {\n    mutationMode: IRefineContextOptions[\"mutationMode\"];\n    undoableTimeout: IRefineContextOptions[\"undoableTimeout\"];\n};\n\n/**\n * Mutation mode determines which mode the mutation runs with.\n * Mutations can run under three different modes: `pessimistic`, `optimistic` and `undoable`.\n * Each mode corresponds to a different type of user experience.\n *\n * @see {@link https://refine.dev/docs/guides-and-concepts/mutation-mode} for more details.\n */\nexport const useMutationMode: UseMutationModeType = () => {\n    const { mutationMode, undoableTimeout } = useContext(RefineContext);\n\n    return { mutationMode, undoableTimeout };\n};\n","import { useContext } from \"react\";\n\nimport { RefineContext } from \"@contexts/refine\";\nimport { UnsavedWarnContext } from \"@contexts/unsavedWarn\";\nimport {\n    IRefineContextOptions,\n    IUnsavedWarnContext,\n} from \"../../../interfaces\";\n\ntype UseWarnAboutChangeType = () => {\n    warnWhenUnsavedChanges: IRefineContextOptions[\"warnWhenUnsavedChanges\"];\n    warnWhen: NonNullable<IUnsavedWarnContext[\"warnWhen\"]>;\n    setWarnWhen: NonNullable<IUnsavedWarnContext[\"setWarnWhen\"]>;\n};\n\n/**\n * When you have unsaved changes and try to leave the current page, **refine** shows a confirmation modal box.\n * To activate this feature, set the `warnWhenUnsavedChanges` to `true`.\n *\n * @see {@link https://refine.dev/docs/api-reference/core/components/refine-config#warnwhenunsavedchanges} for more details.\n */\nexport const useWarnAboutChange: UseWarnAboutChangeType = () => {\n    const { warnWhenUnsavedChanges } = useContext(RefineContext);\n\n    const { warnWhen, setWarnWhen } = useContext(UnsavedWarnContext);\n\n    return {\n        warnWhenUnsavedChanges,\n        warnWhen: Boolean(warnWhen),\n        setWarnWhen: setWarnWhen ?? (() => undefined),\n    };\n};\n","import React, { ReactNode, useState } from \"react\";\n\nimport { IUnsavedWarnContext } from \"./IUnsavedWarnContext\";\n\nexport const UnsavedWarnContext = React.createContext<IUnsavedWarnContext>({});\n\nexport const UnsavedWarnContextProvider: React.FC<{ children: ReactNode }> = ({\n    children,\n}) => {\n    const [warnWhen, setWarnWhen] = useState(false);\n\n    return (\n        <UnsavedWarnContext.Provider value={{ warnWhen, setWarnWhen }}>\n            {children}\n        </UnsavedWarnContext.Provider>\n    );\n};\n","import { useContext } from \"react\";\n\nimport { RefineContext } from \"@contexts/refine\";\nimport { IRefineContextOptions } from \"../../interfaces\";\n\ntype UseSyncWithLocationType = () => {\n    syncWithLocation: IRefineContextOptions[\"syncWithLocation\"];\n};\n\n/**\n * List query parameter values can be edited manually by typing directly in the URL.\n * To activate this feature `syncWithLocation` needs to be set to `true`.\n *\n * @see {@link https://refine.dev/docs/api-reference/core/components/refine-config/#syncwithlocation} for more details.\n */\nexport const useSyncWithLocation: UseSyncWithLocationType = () => {\n    const { syncWithLocation } = useContext(RefineContext);\n\n    return { syncWithLocation };\n};\n","import { useContext } from \"react\";\nimport { RefineContext } from \"@contexts/refine\";\nimport { TitleProps } from \"../../interfaces\";\n\n/**\n * `useTitle` returns a component that calls the `<Title>` passed to the `<Refine>`.\n * In this way, it becomes easier for us to access this component in various parts of the application.\n *\n * @see {@link https://refine.dev/docs/api-reference/core/hooks/refine/useTitle} for more details.\n */\nexport const useTitle: () => React.FC<TitleProps> | undefined = () => {\n    const { Title } = useContext(RefineContext);\n\n    return Title;\n};\n","import { useContext } from \"react\";\n\nimport { RefineContext } from \"@contexts/refine\";\n\nexport const useRefineContext = () => {\n    const {\n        Footer,\n        Header,\n        Layout,\n        OffLayoutArea,\n        Sider,\n        Title,\n        hasDashboard,\n        mutationMode,\n        syncWithLocation,\n        undoableTimeout,\n        warnWhenUnsavedChanges,\n        DashboardPage,\n        LoginPage,\n        catchAll,\n        options,\n    } = useContext(RefineContext);\n\n    return {\n        Footer,\n        Header,\n        Layout,\n        OffLayoutArea,\n        Sider,\n        Title,\n        hasDashboard,\n        mutationMode,\n        syncWithLocation,\n        undoableTimeout,\n        warnWhenUnsavedChanges,\n        DashboardPage,\n        LoginPage,\n        catchAll,\n        options,\n    };\n};\n","import { useRefineContext } from \"@hooks/refine\";\n\n/**\n * A method that the internal uses\n * @internal\n */\nexport const useUserFriendlyName = () => {\n    const {\n        options: { textTransformers },\n    } = useRefineContext();\n\n    const getFriendlyName = (\n        name = \"\",\n        type: \"singular\" | \"plural\",\n    ): string => {\n        const humanizeName = textTransformers.humanize(name);\n        if (type === \"singular\") {\n            return textTransformers.singular(humanizeName);\n        }\n        return textTransformers.plural(humanizeName);\n    };\n\n    return getFriendlyName;\n};\n","const isNested = (obj: any) => typeof obj === \"object\" && obj !== null;\nconst isArray = (obj: any) => Array.isArray(obj);\n\nexport const flattenObjectKeys = (obj: any, prefix = \"\") => {\n    if (!isNested(obj)) {\n        return {\n            [prefix]: obj,\n        };\n    }\n\n    return Object.keys(obj).reduce((acc, key) => {\n        const currentPrefix = prefix.length ? prefix + \".\" : \"\";\n\n        if (isNested(obj[key]) && Object.keys(obj[key]).length) {\n            if (isArray(obj[key]) && obj[key].length) {\n                obj[key].forEach((item: unknown[], index: number) => {\n                    Object.assign(\n                        acc,\n                        flattenObjectKeys(\n                            item,\n                            currentPrefix + key + \".\" + index,\n                        ),\n                    );\n                });\n            } else {\n                Object.assign(\n                    acc,\n                    flattenObjectKeys(obj[key], currentPrefix + key),\n                );\n            }\n        } else {\n            acc[currentPrefix + key] = obj[key];\n        }\n        return acc;\n    }, {} as Record<string, unknown>);\n};\n","export const propertyPathToArray = (propertyPath: string) => {\n    return propertyPath\n        .split(\".\")\n        .map((item) => (!isNaN(Number(item)) ? Number(item) : item));\n};\n","export const file2Base64 = (file: any): Promise<string> => {\n    return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n\n        const resultHandler = () => {\n            if (reader.result) {\n                reader.removeEventListener(\"load\", resultHandler, false);\n\n                resolve(reader.result as string);\n            }\n        };\n\n        reader.addEventListener(\"load\", resultHandler, false);\n\n        reader.readAsDataURL(file.originFileObj as Blob);\n        reader.onerror = (error) => {\n            reader.removeEventListener(\"load\", resultHandler, false);\n            return reject(error);\n        };\n    });\n};\n","import { useRefineContext } from \"..\";\nimport { keys } from \"@definitions/index\";\n\nexport const useKeys = () => {\n    const {\n        options: { useNewQueryKeys },\n    } = useRefineContext();\n\n    return {\n        keys,\n        preferLegacyKeys: !useNewQueryKeys,\n    };\n};\n","import {\n    useQuery,\n    UseQueryResult,\n    UseQueryOptions,\n} from \"@tanstack/react-query\";\nimport { getXRay } from \"@refinedev/devtools-internal\";\n\nimport { useAuthBindingsContext, useLegacyAuthContext } from \"@contexts/auth\";\nimport { IdentityResponse } from \"../../../interfaces\";\nimport { useKeys } from \"@hooks/useKeys\";\n\nexport type UseGetIdentityLegacyProps<TData> = {\n    v3LegacyAuthProviderCompatible: true;\n    queryOptions?: UseQueryOptions<TData>;\n};\n\nexport type UseGetIdentityProps<TData = IdentityResponse> = {\n    v3LegacyAuthProviderCompatible?: false;\n    queryOptions?: UseQueryOptions<TData>;\n};\n\nexport type UseGetIdentityCombinedProps<TData = any> = {\n    v3LegacyAuthProviderCompatible: boolean;\n    queryOptions?: UseQueryOptions<TData> | UseQueryOptions<IdentityResponse>;\n};\n\nexport type UseGetIdentityLegacyReturnType<TData> = UseQueryResult<\n    TData,\n    unknown\n>;\n\nexport type UseGetIdentityReturnType<TData = IdentityResponse> = UseQueryResult<\n    TData,\n    unknown\n>;\n\nexport type UsePermissionsCombinedReturnType<TData = any> =\n    | UseQueryResult<TData, unknown>\n    | UseQueryResult<IdentityResponse, unknown>;\n\nexport function useGetIdentity<TData = any>(\n    props: UseGetIdentityLegacyProps<TData>,\n): UseGetIdentityLegacyReturnType<TData>;\n\nexport function useGetIdentity<TData = IdentityResponse>(\n    props?: UseGetIdentityProps<TData>,\n): UseGetIdentityReturnType<TData>;\n\nexport function useGetIdentity<TData = any>(\n    props?: UseGetIdentityCombinedProps<TData>,\n): UsePermissionsCombinedReturnType<TData>;\n\n/**\n * `useGetIdentity` calls the `getUserIdentity` method from the {@link https://refine.dev/docs/core/providers/auth-provider `authProvider`} under the hood.\n *\n * @see {@link https://refine.dev/docs/api-reference/core/hooks/auth/useGetIdentity} for more details.\n *\n * @typeParam TData - Result data of the query\n *\n */\nexport function useGetIdentity<TData = any>({\n    v3LegacyAuthProviderCompatible = false,\n    queryOptions,\n}: UseGetIdentityProps<TData> | UseGetIdentityLegacyProps<TData> = {}):\n    | UseGetIdentityReturnType<TData>\n    | UseGetIdentityLegacyReturnType<TData> {\n    const { getUserIdentity: legacyGetUserIdentity } = useLegacyAuthContext();\n    const { getIdentity } = useAuthBindingsContext();\n    const { keys, preferLegacyKeys } = useKeys();\n\n    const queryResponse = useQuery<TData>(\n        keys().auth().action(\"identity\").get(preferLegacyKeys),\n        // Enabled check for `getIdentity` is enough to be sure that it's defined in the query function but TS is not smart enough to know that.\n        (getIdentity as (params?: unknown) => Promise<TData>) ??\n            (() => Promise.resolve({})),\n        {\n            enabled: !v3LegacyAuthProviderCompatible && !!getIdentity,\n            retry: false,\n            ...(v3LegacyAuthProviderCompatible === true ? {} : queryOptions),\n            meta: {\n                ...(v3LegacyAuthProviderCompatible === true\n                    ? {}\n                    : queryOptions?.meta),\n                ...getXRay(\"useGetIdentity\", preferLegacyKeys),\n            },\n        },\n    );\n\n    const legacyQueryResponse = useQuery<TData>(\n        [\n            ...keys().auth().action(\"identity\").get(preferLegacyKeys),\n            \"v3LegacyAuthProviderCompatible\",\n        ],\n        // Enabled check for `getUserIdentity` is enough to be sure that it's defined in the query function but TS is not smart enough to know that.\n        legacyGetUserIdentity ?? (() => Promise.resolve({})),\n        {\n            enabled: v3LegacyAuthProviderCompatible && !!legacyGetUserIdentity,\n            retry: false,\n            ...(v3LegacyAuthProviderCompatible ? queryOptions : {}),\n            meta: {\n                ...(v3LegacyAuthProviderCompatible ? queryOptions?.meta : {}),\n                ...getXRay(\"useGetIdentity\", preferLegacyKeys),\n            },\n        },\n    );\n\n    return v3LegacyAuthProviderCompatible ? legacyQueryResponse : queryResponse;\n}\n","import {\n    useMutation,\n    UseMutationOptions,\n    UseMutationResult,\n} from \"@tanstack/react-query\";\nimport { getXRay } from \"@refinedev/devtools-internal\";\n\nimport { useGo, useNavigation, useNotification, useRouterType } from \"@hooks\";\nimport { useAuthBindingsContext, useLegacyAuthContext } from \"@contexts/auth\";\nimport {\n    RefineError,\n    OpenNotificationParams,\n    TLogoutData,\n} from \"../../../interfaces\";\nimport { AuthActionResponse } from \"src/interfaces/bindings/auth\";\nimport { useInvalidateAuthStore } from \"../useInvalidateAuthStore\";\nimport { useKeys } from \"@hooks/useKeys\";\n\ntype Variables = {\n    redirectPath?: string | false;\n};\n\nexport type UseLogoutLegacyProps<TVariables> = {\n    v3LegacyAuthProviderCompatible: true;\n    mutationOptions?: Omit<\n        UseMutationOptions<\n            TLogoutData,\n            Error | RefineError,\n            (TVariables & Variables) | void,\n            unknown\n        >,\n        \"mutationFn\" | \"onError\" | \"onSuccess\"\n    >;\n};\n\nexport type UseLogoutProps<TVariables> = {\n    v3LegacyAuthProviderCompatible?: false;\n    mutationOptions?: Omit<\n        UseMutationOptions<\n            AuthActionResponse,\n            Error | RefineError,\n            (TVariables & Variables) | void,\n            unknown\n        >,\n        \"mutationFn\"\n    >;\n};\n\nexport type UseLogoutCombinedProps<TVariables> = {\n    v3LegacyAuthProviderCompatible: boolean;\n    mutationOptions?: Omit<\n        UseMutationOptions<\n            AuthActionResponse | TLogoutData,\n            Error | RefineError,\n            (TVariables & Variables) | void,\n            unknown\n        >,\n        \"mutationFn\"\n    >;\n};\n\nexport type UseLogoutLegacyReturnType<TVariables> = UseMutationResult<\n    TLogoutData,\n    Error | RefineError,\n    (TVariables & Variables) | void,\n    unknown\n>;\n\nexport type UseLogoutReturnType<TVariables> = UseMutationResult<\n    AuthActionResponse,\n    Error | RefineError,\n    (TVariables & Variables) | void,\n    unknown\n>;\n\nexport type UseLogoutCombinedReturnType<TVariables> = UseMutationResult<\n    AuthActionResponse | TLogoutData,\n    Error | RefineError,\n    (TVariables & Variables) | void,\n    unknown\n>;\n\nexport function useLogout<TVariables = {}>(\n    props: UseLogoutLegacyProps<TVariables>,\n): UseLogoutLegacyReturnType<TVariables>;\n\nexport function useLogout<TVariables = {}>(\n    props?: UseLogoutProps<TVariables>,\n): UseLogoutReturnType<TVariables>;\n\nexport function useLogout<TVariables = {}>(\n    props?: UseLogoutCombinedProps<TVariables>,\n): UseLogoutCombinedReturnType<TVariables>;\n\n/**\n * `useLogout` calls the `logout` method from the {@link https://refine.dev/docs/api-reference/core/providers/auth-provider `authProvider`} under the hood.\n *\n * @see {@link https://refine.dev/docs/api-reference/core/hooks/auth/useLogout} for more details.\n *\n */\nexport function useLogout<TVariables = {}>({\n    v3LegacyAuthProviderCompatible,\n    mutationOptions,\n}: UseLogoutProps<TVariables> | UseLogoutLegacyProps<TVariables> = {}):\n    | UseLogoutLegacyReturnType<TVariables>\n    | UseLogoutReturnType<TVariables> {\n    const invalidateAuthStore = useInvalidateAuthStore();\n    const routerType = useRouterType();\n    const go = useGo();\n    const { push } = useNavigation();\n    const { open, close } = useNotification();\n    const { logout: legacyLogoutFromContext } = useLegacyAuthContext();\n    const { logout: logoutFromContext } = useAuthBindingsContext();\n    const { keys, preferLegacyKeys } = useKeys();\n\n    const mutation = useMutation<\n        AuthActionResponse,\n        Error | RefineError,\n        (TVariables & Variables) | void,\n        unknown\n    >(keys().auth().action(\"logout\").get(preferLegacyKeys), logoutFromContext, {\n        onSuccess: async (data, variables) => {\n            const { success, error, redirectTo } = data;\n            const { redirectPath } = variables ?? {};\n\n            const redirect = redirectPath ?? redirectTo;\n\n            if (success) {\n                close?.(\"useLogout-error\");\n            }\n\n            if (error || !success) {\n                open?.(buildNotification(error));\n            }\n\n            if (redirect !== false) {\n                if (routerType === \"legacy\") {\n                    push(redirect ?? \"/login\");\n                } else {\n                    if (redirect) {\n                        go({ to: redirect });\n                    }\n                }\n            }\n\n            await invalidateAuthStore();\n        },\n        onError: (error: any) => {\n            open?.(buildNotification(error));\n        },\n        ...(v3LegacyAuthProviderCompatible === true ? {} : mutationOptions),\n        meta: {\n            ...(v3LegacyAuthProviderCompatible === true\n                ? {}\n                : mutationOptions?.meta),\n            ...getXRay(\"useLogout\", preferLegacyKeys),\n        },\n    });\n\n    const v3LegacyAuthProviderCompatibleMutation = useMutation<\n        TLogoutData,\n        Error | RefineError,\n        (TVariables & Variables) | void,\n        unknown\n    >(\n        [\n            ...keys().auth().action(\"logout\").get(preferLegacyKeys),\n            \"v3LegacyAuthProviderCompatible\",\n        ],\n        legacyLogoutFromContext,\n        {\n            onSuccess: async (data, variables) => {\n                const redirectPath = variables?.redirectPath ?? data;\n\n                if (redirectPath === false) {\n                    return;\n                }\n\n                if (redirectPath) {\n                    if (routerType === \"legacy\") {\n                        push(redirectPath);\n                    } else {\n                        go({ to: redirectPath });\n                    }\n                    return;\n                }\n\n                if (routerType === \"legacy\") {\n                    push(\"/login\");\n                } else {\n                    go({ to: \"/login\" });\n                }\n\n                await invalidateAuthStore();\n            },\n            onError: (error: any) => {\n                open?.(buildNotification(error));\n            },\n            ...(v3LegacyAuthProviderCompatible ? mutationOptions : {}),\n            meta: {\n                ...(v3LegacyAuthProviderCompatible\n                    ? mutationOptions?.meta\n                    : {}),\n                ...getXRay(\"useLogout\", preferLegacyKeys),\n            },\n        },\n    );\n\n    return v3LegacyAuthProviderCompatible\n        ? v3LegacyAuthProviderCompatibleMutation\n        : mutation;\n}\n\nconst buildNotification = (\n    error?: Error | RefineError,\n): OpenNotificationParams => {\n    return {\n        key: \"useLogout-error\",\n        type: \"error\",\n        message: error?.name || \"Logout Error\",\n        description: error?.message || \"Something went wrong during logout\",\n    };\n};\n","import { useKeys } from \"@hooks/useKeys\";\nimport { useQueryClient } from \"@tanstack/react-query\";\n\nexport const useInvalidateAuthStore = () => {\n    const queryClient = useQueryClient();\n    const { keys, preferLegacyKeys } = useKeys();\n\n    const invalidate = async () => {\n        await Promise.all(\n            ([\"check\", \"identity\", \"permissions\"] as const).map((action) =>\n                queryClient.invalidateQueries(\n                    keys().auth().action(action).get(preferLegacyKeys),\n                ),\n            ),\n        );\n    };\n\n    return invalidate;\n};\n","import React from \"react\";\nimport {\n    useMutation,\n    UseMutationOptions,\n    UseMutationResult,\n} from \"@tanstack/react-query\";\nimport { getXRay } from \"@refinedev/devtools-internal\";\nimport qs from \"qs\";\n\nimport {\n    useNavigation,\n    useRouterContext,\n    useNotification,\n    useRouterType,\n    useParsed,\n    useGo,\n} from \"@hooks\";\nimport { useAuthBindingsContext, useLegacyAuthContext } from \"@contexts/auth\";\n\nimport {\n    RefineError,\n    OpenNotificationParams,\n    TLoginData,\n} from \"../../../interfaces\";\nimport { AuthActionResponse } from \"src/interfaces/bindings/auth\";\nimport { useInvalidateAuthStore } from \"../useInvalidateAuthStore\";\nimport { useKeys } from \"@hooks/useKeys\";\n\nexport type UseLoginLegacyProps<TVariables> = {\n    v3LegacyAuthProviderCompatible: true;\n    mutationOptions?: Omit<\n        UseMutationOptions<\n            TLoginData,\n            Error | RefineError,\n            TVariables,\n            unknown\n        >,\n        \"mutationFn\" | \"onError\" | \"onSuccess\"\n    >;\n};\n\nexport type UseLoginProps<TVariables> = {\n    v3LegacyAuthProviderCompatible?: false;\n    mutationOptions?: Omit<\n        UseMutationOptions<\n            AuthActionResponse,\n            Error | RefineError,\n            TVariables,\n            unknown\n        >,\n        \"mutationFn\"\n    >;\n};\n\nexport type UseLoginCombinedProps<TVariables> = {\n    v3LegacyAuthProviderCompatible: boolean;\n    mutationOptions?: Omit<\n        UseMutationOptions<\n            AuthActionResponse | TLoginData,\n            Error | RefineError,\n            TVariables,\n            unknown\n        >,\n        \"mutationFn\"\n    >;\n};\n\nexport type UseLoginLegacyReturnType<TVariables> = UseMutationResult<\n    TLoginData,\n    Error | RefineError,\n    TVariables,\n    unknown\n>;\n\nexport type UseLoginReturnType<TVariables> = UseMutationResult<\n    AuthActionResponse,\n    Error | RefineError,\n    TVariables,\n    unknown\n>;\n\nexport type UseLoginCombinedReturnType<TVariables> = UseMutationResult<\n    AuthActionResponse | TLoginData,\n    Error | RefineError,\n    TVariables,\n    unknown\n>;\n\nexport function useLogin<TVariables = {}>(\n    props: UseLoginLegacyProps<TVariables>,\n): UseLoginLegacyReturnType<TVariables>;\n\nexport function useLogin<TVariables = {}>(\n    props?: UseLoginProps<TVariables>,\n): UseLoginReturnType<TVariables>;\n\nexport function useLogin<TVariables = {}>(\n    props?: UseLoginCombinedProps<TVariables>,\n): UseLoginCombinedReturnType<TVariables>;\n\n/**\n * `useLogin` calls `login` method from {@link https://refine.dev/docs/api-reference/core/providers/auth-provider `authProvider`} under the hood.\n *\n * @see {@link https://refine.dev/docs/api-reference/core/hooks/auth/useLogin} for more details.\n *\n * @typeParam TData - Result data of the query\n * @typeParam TVariables - Values for mutation function. default `{}`\n *\n */\nexport function useLogin<TVariables = {}>({\n    v3LegacyAuthProviderCompatible,\n    mutationOptions,\n}: UseLoginProps<TVariables> | UseLoginLegacyProps<TVariables> = {}):\n    | UseLoginLegacyReturnType<TVariables>\n    | UseLoginReturnType<TVariables> {\n    const invalidateAuthStore = useInvalidateAuthStore();\n    const routerType = useRouterType();\n\n    const go = useGo();\n    const { replace } = useNavigation();\n\n    const parsed = useParsed();\n\n    const { useLocation } = useRouterContext();\n    const { search } = useLocation();\n\n    const { close, open } = useNotification();\n    const { login: legacyLoginFromContext } = useLegacyAuthContext();\n    const { login: loginFromContext } = useAuthBindingsContext();\n    const { keys, preferLegacyKeys } = useKeys();\n\n    const to = React.useMemo(() => {\n        if (routerType === \"legacy\") {\n            const legacySearch = qs.parse(search, {\n                ignoreQueryPrefix: true,\n            });\n            return legacySearch.to;\n        } else {\n            return parsed.params?.to;\n        }\n    }, [routerType, parsed.params, search]);\n\n    const mutation = useMutation<\n        AuthActionResponse,\n        Error | RefineError,\n        TVariables,\n        unknown\n    >(keys().auth().action(\"login\").get(preferLegacyKeys), loginFromContext, {\n        onSuccess: async ({ success, redirectTo, error }) => {\n            if (success) {\n                close?.(\"login-error\");\n            }\n\n            if (error || !success) {\n                open?.(buildNotification(error));\n            }\n\n            if (to && success) {\n                if (routerType === \"legacy\") {\n                    replace(to as string);\n                } else {\n                    go({ to: to as string, type: \"replace\" });\n                }\n            } else if (redirectTo) {\n                if (routerType === \"legacy\") {\n                    replace(redirectTo);\n                } else {\n                    go({ to: redirectTo, type: \"replace\" });\n                }\n            } else {\n                if (routerType === \"legacy\") {\n                    replace(\"/\");\n                }\n            }\n\n            await invalidateAuthStore();\n        },\n        onError: (error: any) => {\n            open?.(buildNotification(error));\n        },\n        ...(v3LegacyAuthProviderCompatible === true ? {} : mutationOptions),\n        meta: {\n            ...(v3LegacyAuthProviderCompatible === true\n                ? {}\n                : mutationOptions?.meta),\n            ...getXRay(\"useLogin\", preferLegacyKeys),\n        },\n    });\n\n    const v3LegacyAuthProviderCompatibleMutation = useMutation<\n        TLoginData,\n        Error | RefineError,\n        TVariables,\n        unknown\n    >(\n        [\n            ...keys().auth().action(\"login\").get(preferLegacyKeys),\n            \"v3LegacyAuthProviderCompatible\",\n        ],\n        legacyLoginFromContext,\n        {\n            onSuccess: async (redirectPathFromAuth) => {\n                if (to) {\n                    replace(to as string);\n                }\n\n                if (redirectPathFromAuth !== false && !to) {\n                    if (typeof redirectPathFromAuth === \"string\") {\n                        if (routerType === \"legacy\") {\n                            replace(redirectPathFromAuth);\n                        } else {\n                            go({ to: redirectPathFromAuth, type: \"replace\" });\n                        }\n                    } else {\n                        if (routerType === \"legacy\") {\n                            replace(\"/\");\n                        } else {\n                            go({ to: \"/\", type: \"replace\" });\n                        }\n                    }\n                }\n\n                await invalidateAuthStore();\n\n                close?.(\"login-error\");\n            },\n            onError: (error: any) => {\n                open?.(buildNotification(error));\n            },\n            ...(v3LegacyAuthProviderCompatible ? mutationOptions : {}),\n            meta: {\n                ...(v3LegacyAuthProviderCompatible\n                    ? mutationOptions?.meta\n                    : {}),\n                ...getXRay(\"useLogin\", preferLegacyKeys),\n            },\n        },\n    );\n\n    return v3LegacyAuthProviderCompatible\n        ? v3LegacyAuthProviderCompatibleMutation\n        : mutation;\n}\n\nconst buildNotification = (\n    error?: Error | RefineError,\n): OpenNotificationParams => {\n    return {\n        message: error?.name || \"Login Error\",\n        description: error?.message || \"Invalid credentials\",\n        key: \"login-error\",\n        type: \"error\",\n    };\n};\n","import {\n    useMutation,\n    UseMutationOptions,\n    UseMutationResult,\n} from \"@tanstack/react-query\";\nimport { getXRay } from \"@refinedev/devtools-internal\";\n\nimport { useNavigation, useRouterType, useGo, useNotification } from \"@hooks\";\nimport { useAuthBindingsContext, useLegacyAuthContext } from \"@contexts/auth\";\n\nimport {\n    AuthActionResponse,\n    RefineError,\n    OpenNotificationParams,\n    TLoginData,\n    TRegisterData,\n} from \"../../../interfaces\";\nimport { useInvalidateAuthStore } from \"../useInvalidateAuthStore\";\nimport { useKeys } from \"@hooks/useKeys\";\n\nexport type UseRegisterLegacyProps<TVariables> = {\n    v3LegacyAuthProviderCompatible: true;\n    mutationOptions?: Omit<\n        UseMutationOptions<\n            TRegisterData,\n            Error | RefineError,\n            TVariables,\n            unknown\n        >,\n        \"mutationFn\" | \"onError\" | \"onSuccess\"\n    >;\n};\n\nexport type UseRegisterProps<TVariables> = {\n    v3LegacyAuthProviderCompatible?: false;\n    mutationOptions?: Omit<\n        UseMutationOptions<\n            AuthActionResponse,\n            Error | RefineError,\n            TVariables,\n            unknown\n        >,\n        \"mutationFn\"\n    >;\n};\n\nexport type UseRegisterCombinedProps<TVariables> = {\n    v3LegacyAuthProviderCompatible: boolean;\n    mutationOptions?: Omit<\n        UseMutationOptions<\n            AuthActionResponse | TRegisterData,\n            Error | RefineError,\n            TVariables,\n            unknown\n        >,\n        \"mutationFn\"\n    >;\n};\n\nexport type UseRegisterLegacyReturnType<TVariables> = UseMutationResult<\n    TRegisterData,\n    Error | RefineError,\n    TVariables,\n    unknown\n>;\n\nexport type UseRegisterReturnType<TVariables> = UseMutationResult<\n    AuthActionResponse,\n    Error | RefineError,\n    TVariables,\n    unknown\n>;\n\nexport type UseRegisterCombinedReturnType<TVariables> = UseMutationResult<\n    AuthActionResponse | TLoginData,\n    Error | RefineError,\n    TVariables,\n    unknown\n>;\n\nexport function useRegister<TVariables = {}>(\n    props: UseRegisterLegacyProps<TVariables>,\n): UseRegisterLegacyReturnType<TVariables>;\n\nexport function useRegister<TVariables = {}>(\n    props?: UseRegisterProps<TVariables>,\n): UseRegisterReturnType<TVariables>;\n\nexport function useRegister<TVariables = {}>(\n    props?: UseRegisterCombinedProps<TVariables>,\n): UseRegisterCombinedReturnType<TVariables>;\n\n/**\n * `useRegister` calls `register` method from {@link https://refine.dev/docs/api-reference/core/providers/auth-provider `authProvider`} under the hood.\n *\n * @see {@link https://refine.dev/docs/api-reference/core/hooks/auth/useRegister} for more details.\n *\n * @typeParam TData - Result data of the query\n * @typeParam TVariables - Values for mutation function. default `{}`\n *\n */\nexport function useRegister<TVariables = {}>({\n    v3LegacyAuthProviderCompatible,\n    mutationOptions,\n}: UseRegisterProps<TVariables> | UseRegisterLegacyProps<TVariables> = {}):\n    | UseRegisterReturnType<TVariables>\n    | UseRegisterLegacyReturnType<TVariables> {\n    const invalidateAuthStore = useInvalidateAuthStore();\n    const routerType = useRouterType();\n    const go = useGo();\n    const { replace } = useNavigation();\n    const { register: legacyRegisterFromContext } = useLegacyAuthContext();\n    const { register: registerFromContext } = useAuthBindingsContext();\n    const { close, open } = useNotification();\n\n    const { keys, preferLegacyKeys } = useKeys();\n\n    const mutation = useMutation<\n        AuthActionResponse,\n        Error | RefineError,\n        TVariables,\n        unknown\n    >(\n        keys().auth().action(\"register\").get(preferLegacyKeys),\n        registerFromContext,\n        {\n            onSuccess: async ({ success, redirectTo, error }) => {\n                if (success) {\n                    close?.(\"register-error\");\n                }\n\n                if (error || !success) {\n                    open?.(buildNotification(error));\n                }\n\n                if (redirectTo) {\n                    if (routerType === \"legacy\") {\n                        replace(redirectTo);\n                    } else {\n                        go({ to: redirectTo, type: \"replace\" });\n                    }\n                } else {\n                    if (routerType === \"legacy\") {\n                        replace(\"/\");\n                    }\n                }\n\n                await invalidateAuthStore();\n            },\n            onError: (error: any) => {\n                open?.(buildNotification(error));\n            },\n            ...(v3LegacyAuthProviderCompatible === true ? {} : mutationOptions),\n            meta: {\n                ...(v3LegacyAuthProviderCompatible === true\n                    ? {}\n                    : mutationOptions?.meta),\n                ...getXRay(\"useRegister\", preferLegacyKeys),\n            },\n        },\n    );\n\n    const v3LegacyAuthProviderCompatibleMutation = useMutation<\n        TRegisterData,\n        Error | RefineError,\n        TVariables,\n        unknown\n    >(\n        [\n            ...keys().auth().action(\"register\").get(preferLegacyKeys),\n            \"v3LegacyAuthProviderCompatible\",\n        ],\n        legacyRegisterFromContext,\n        {\n            onSuccess: async (redirectPathFromAuth) => {\n                if (redirectPathFromAuth !== false) {\n                    if (redirectPathFromAuth) {\n                        if (routerType === \"legacy\") {\n                            replace(redirectPathFromAuth);\n                        } else {\n                            go({ to: redirectPathFromAuth, type: \"replace\" });\n                        }\n                    } else {\n                        if (routerType === \"legacy\") {\n                            replace(\"/\");\n                        } else {\n                            go({ to: \"/\", type: \"replace\" });\n                        }\n                    }\n\n                    await invalidateAuthStore();\n\n                    close?.(\"register-error\");\n                }\n            },\n            onError: (error: any) => {\n                open?.(buildNotification(error));\n            },\n            ...(v3LegacyAuthProviderCompatible ? mutationOptions : {}),\n            meta: {\n                ...(v3LegacyAuthProviderCompatible\n                    ? mutationOptions?.meta\n                    : {}),\n                ...getXRay(\"useRegister\", preferLegacyKeys),\n            },\n        },\n    );\n\n    return v3LegacyAuthProviderCompatible\n        ? v3LegacyAuthProviderCompatibleMutation\n        : mutation;\n}\n\nconst buildNotification = (\n    error?: Error | RefineError,\n): OpenNotificationParams => {\n    return {\n        message: error?.name || \"Register Error\",\n        description: error?.message || \"Error while registering\",\n        key: \"register-error\",\n        type: \"error\",\n    };\n};\n","import {\n    useMutation,\n    UseMutationOptions,\n    UseMutationResult,\n} from \"@tanstack/react-query\";\nimport { getXRay } from \"@refinedev/devtools-internal\";\n\nimport { useGo, useNavigation, useNotification, useRouterType } from \"@hooks\";\nimport { useAuthBindingsContext, useLegacyAuthContext } from \"@contexts/auth\";\n\nimport {\n    AuthActionResponse,\n    RefineError,\n    OpenNotificationParams,\n    TForgotPasswordData,\n} from \"../../../interfaces\";\nimport { useKeys } from \"@hooks/useKeys\";\n\nexport type UseForgotPasswordLegacyProps<TVariables> = {\n    v3LegacyAuthProviderCompatible: true;\n    mutationOptions?: Omit<\n        UseMutationOptions<\n            TForgotPasswordData,\n            Error | RefineError,\n            TVariables,\n            unknown\n        >,\n        \"mutationFn\" | \"onError\" | \"onSuccess\"\n    >;\n};\n\nexport type UseForgotPasswordProps<TVariables> = {\n    v3LegacyAuthProviderCompatible?: false;\n    mutationOptions?: Omit<\n        UseMutationOptions<\n            AuthActionResponse,\n            Error | RefineError,\n            TVariables,\n            unknown\n        >,\n        \"mutationFn\"\n    >;\n};\n\nexport type UseForgotPasswordCombinedProps<TVariables> = {\n    v3LegacyAuthProviderCompatible: boolean;\n    mutationOptions?: Omit<\n        UseMutationOptions<\n            AuthActionResponse | TForgotPasswordData,\n            Error | RefineError,\n            TVariables,\n            unknown\n        >,\n        \"mutationFn\"\n    >;\n};\n\nexport type UseForgotPasswordLegacyReturnType<TVariables> = UseMutationResult<\n    TForgotPasswordData,\n    Error | RefineError,\n    TVariables,\n    unknown\n>;\n\nexport type UseForgotPasswordReturnType<TVariables> = UseMutationResult<\n    AuthActionResponse,\n    Error | RefineError,\n    TVariables,\n    unknown\n>;\n\nexport type UseForgotPasswordCombinedReturnType<TVariables> = UseMutationResult<\n    AuthActionResponse | TForgotPasswordData,\n    Error | RefineError,\n    TVariables,\n    unknown\n>;\n\nexport function useForgotPassword<TVariables = {}>(\n    props: UseForgotPasswordLegacyProps<TVariables>,\n): UseForgotPasswordLegacyReturnType<TVariables>;\n\nexport function useForgotPassword<TVariables = {}>(\n    props?: UseForgotPasswordProps<TVariables>,\n): UseForgotPasswordReturnType<TVariables>;\n\nexport function useForgotPassword<TVariables = {}>(\n    props?: UseForgotPasswordCombinedProps<TVariables>,\n): UseForgotPasswordCombinedReturnType<TVariables>;\n\n/**\n * `useForgotPassword` calls `forgotPassword` method from {@link https://refine.dev/docs/api-reference/core/providers/auth-provider `authProvider`} under the hood.\n *\n * @see {@link https://refine.dev/docs/api-reference/core/hooks/auth/useForgotPassword} for more details.\n *\n * @typeParam TData - Result data of the query\n * @typeParam TVariables - Values for mutation function. default `{}`\n *\n */\nexport function useForgotPassword<TVariables = {}>({\n    v3LegacyAuthProviderCompatible,\n    mutationOptions,\n}:\n    | UseForgotPasswordProps<TVariables>\n    | UseForgotPasswordLegacyProps<TVariables> = {}):\n    | UseForgotPasswordReturnType<TVariables>\n    | UseForgotPasswordLegacyReturnType<TVariables> {\n    const routerType = useRouterType();\n    const go = useGo();\n    const { replace } = useNavigation();\n    const {\n        forgotPassword: v3LegacyAuthProviderCompatibleForgotPasswordFromContext,\n    } = useLegacyAuthContext();\n    const { forgotPassword: forgotPasswordFromContext } =\n        useAuthBindingsContext();\n    const { close, open } = useNotification();\n    const { keys, preferLegacyKeys } = useKeys();\n\n    const mutation = useMutation<\n        AuthActionResponse,\n        Error | RefineError,\n        TVariables,\n        unknown\n    >(\n        keys().auth().action(\"forgotPassword\").get(preferLegacyKeys),\n        forgotPasswordFromContext,\n        {\n            onSuccess: ({ success, redirectTo, error }) => {\n                if (success) {\n                    close?.(\"forgot-password-error\");\n                }\n\n                if (error || !success) {\n                    open?.(buildNotification(error));\n                }\n\n                if (redirectTo) {\n                    if (routerType === \"legacy\") {\n                        replace(redirectTo);\n                    } else {\n                        go({ to: redirectTo, type: \"replace\" });\n                    }\n                }\n            },\n            onError: (error: any) => {\n                open?.(buildNotification(error));\n            },\n            ...(v3LegacyAuthProviderCompatible === true ? {} : mutationOptions),\n            meta: {\n                ...(v3LegacyAuthProviderCompatible === true\n                    ? {}\n                    : mutationOptions?.meta),\n                ...getXRay(\"useForgotPassword\", preferLegacyKeys),\n            },\n        },\n    );\n\n    const v3LegacyAuthProviderCompatibleMutation = useMutation<\n        TForgotPasswordData,\n        Error | RefineError,\n        TVariables,\n        unknown\n    >(\n        [\n            ...keys().auth().action(\"forgotPassword\").get(preferLegacyKeys),\n            \"v3LegacyAuthProviderCompatible\",\n        ],\n        v3LegacyAuthProviderCompatibleForgotPasswordFromContext,\n        {\n            onSuccess: (redirectPathFromAuth) => {\n                if (redirectPathFromAuth !== false) {\n                    if (redirectPathFromAuth) {\n                        if (routerType === \"legacy\") {\n                            replace(redirectPathFromAuth);\n                        } else {\n                            go({ to: redirectPathFromAuth, type: \"replace\" });\n                        }\n                    }\n                }\n                close?.(\"forgot-password-error\");\n            },\n            onError: (error: any) => {\n                open?.(buildNotification(error));\n            },\n            ...(v3LegacyAuthProviderCompatible ? mutationOptions : {}),\n            meta: {\n                ...(v3LegacyAuthProviderCompatible\n                    ? mutationOptions?.meta\n                    : {}),\n                ...getXRay(\"useForgotPassword\", preferLegacyKeys),\n            },\n        },\n    );\n\n    return v3LegacyAuthProviderCompatible\n        ? v3LegacyAuthProviderCompatibleMutation\n        : mutation;\n}\n\nconst buildNotification = (\n    error?: Error | RefineError,\n): OpenNotificationParams => {\n    return {\n        message: error?.name || \"Forgot Password Error\",\n        description: error?.message || \"Error while resetting password\",\n        key: \"forgot-password-error\",\n        type: \"error\",\n    };\n};\n","import React from \"react\";\nimport {\n    useMutation,\n    UseMutationOptions,\n    UseMutationResult,\n} from \"@tanstack/react-query\";\nimport { getXRay } from \"@refinedev/devtools-internal\";\nimport qs from \"qs\";\n\nimport {\n    useNavigation,\n    useRouterType,\n    useGo,\n    useParsed,\n    useNotification,\n    useRouterContext,\n} from \"@hooks\";\nimport { useAuthBindingsContext, useLegacyAuthContext } from \"@contexts/auth\";\nimport {\n    AuthActionResponse,\n    RefineError,\n    OpenNotificationParams,\n    TUpdatePasswordData,\n    UpdatePasswordFormTypes,\n} from \"../../../interfaces\";\nimport { useKeys } from \"@hooks/useKeys\";\n\nexport type UseUpdatePasswordLegacyProps<\n    TVariables extends UpdatePasswordFormTypes,\n> = {\n    v3LegacyAuthProviderCompatible: true;\n    mutationOptions?: Omit<\n        UseMutationOptions<\n            TUpdatePasswordData,\n            Error | RefineError,\n            TVariables,\n            unknown\n        >,\n        \"mutationFn\" | \"onError\" | \"onSuccess\"\n    >;\n};\n\nexport type UseUpdatePasswordProps<TVariables extends UpdatePasswordFormTypes> =\n    {\n        v3LegacyAuthProviderCompatible?: false;\n        mutationOptions?: Omit<\n            UseMutationOptions<\n                AuthActionResponse,\n                Error | RefineError,\n                TVariables,\n                unknown\n            >,\n            \"mutationFn\"\n        >;\n    };\n\nexport type UseUpdatePasswordCombinedProps<\n    TVariables extends UpdatePasswordFormTypes,\n> = {\n    v3LegacyAuthProviderCompatible: boolean;\n    mutationOptions?: Omit<\n        UseMutationOptions<\n            AuthActionResponse | TUpdatePasswordData,\n            Error | RefineError,\n            TVariables,\n            unknown\n        >,\n        \"mutationFn\"\n    >;\n};\n\nexport type UseUpdatePasswordLegacyReturnType<\n    TVariables extends UpdatePasswordFormTypes,\n> = UseMutationResult<\n    TUpdatePasswordData,\n    Error | RefineError,\n    TVariables,\n    unknown\n>;\n\nexport type UseUpdatePasswordReturnType<\n    TVariables extends UpdatePasswordFormTypes,\n> = UseMutationResult<\n    AuthActionResponse,\n    Error | RefineError,\n    TVariables,\n    unknown\n>;\n\nexport type UseUpdatePasswordCombinedReturnType<\n    TVariables extends UpdatePasswordFormTypes,\n> = UseMutationResult<\n    AuthActionResponse | TUpdatePasswordData,\n    Error | RefineError,\n    TVariables,\n    unknown\n>;\n\nexport function useUpdatePassword<TVariables extends UpdatePasswordFormTypes>(\n    props: UseUpdatePasswordLegacyProps<TVariables>,\n): UseUpdatePasswordLegacyReturnType<TVariables>;\n\nexport function useUpdatePassword<TVariables extends UpdatePasswordFormTypes>(\n    props?: UseUpdatePasswordProps<TVariables>,\n): UseUpdatePasswordReturnType<TVariables>;\n\nexport function useUpdatePassword<TVariables extends UpdatePasswordFormTypes>(\n    props?: UseUpdatePasswordCombinedProps<TVariables>,\n): UseUpdatePasswordCombinedReturnType<TVariables>;\n\n/**\n * `useUpdatePassword` calls `updatePassword` method from {@link https://refine.dev/docs/api-reference/core/providers/auth-provider `authProvider`} under the hood.\n *\n * @see {@link https://refine.dev/docs/api-reference/core/hooks/auth/useUpdatePassword} for more details.\n *\n * @typeParam TData - Result data of the query\n * @typeParam TVariables - Values for mutation function. default `{}`\n *\n */\nexport function useUpdatePassword<\n    TVariables extends UpdatePasswordFormTypes = {},\n>({\n    v3LegacyAuthProviderCompatible,\n    mutationOptions,\n}:\n    | UseUpdatePasswordProps<TVariables>\n    | UseUpdatePasswordLegacyProps<TVariables> = {}):\n    | UseUpdatePasswordReturnType<TVariables>\n    | UseUpdatePasswordLegacyReturnType<TVariables> {\n    const routerType = useRouterType();\n\n    const go = useGo();\n    const { replace } = useNavigation();\n    const { updatePassword: legacyUpdatePasswordFromContext } =\n        useLegacyAuthContext();\n    const { updatePassword: updatePasswordFromContext } =\n        useAuthBindingsContext();\n    const { close, open } = useNotification();\n\n    const { keys, preferLegacyKeys } = useKeys();\n\n    const parsed = useParsed();\n    const { useLocation } = useRouterContext();\n    const { search } = useLocation();\n\n    const params = React.useMemo(() => {\n        if (routerType === \"legacy\") {\n            const queryStrings = qs.parse(search, {\n                ignoreQueryPrefix: true,\n            });\n            return queryStrings ?? {};\n        } else {\n            return parsed.params ?? {};\n        }\n    }, [search, parsed, routerType]);\n\n    const mutation = useMutation<\n        AuthActionResponse,\n        Error,\n        TVariables,\n        unknown\n    >(\n        keys().auth().action(\"updatePassword\").get(preferLegacyKeys),\n        async (variables) => {\n            return updatePasswordFromContext?.({\n                ...params,\n                ...variables,\n            }) as Promise<AuthActionResponse>;\n        },\n        {\n            onSuccess: ({ success, redirectTo, error }) => {\n                if (success) {\n                    close?.(\"update-password-error\");\n                }\n\n                if (error || !success) {\n                    open?.(buildNotification(error));\n                }\n\n                if (redirectTo) {\n                    if (routerType === \"legacy\") {\n                        replace(redirectTo);\n                    } else {\n                        go({ to: redirectTo, type: \"replace\" });\n                    }\n                }\n            },\n            onError: (error: any) => {\n                open?.(buildNotification(error));\n            },\n            ...(v3LegacyAuthProviderCompatible === true ? {} : mutationOptions),\n            meta: {\n                ...(v3LegacyAuthProviderCompatible === true\n                    ? {}\n                    : mutationOptions?.meta),\n                ...getXRay(\"useUpdatePassword\", preferLegacyKeys),\n            },\n        },\n    );\n\n    const v3LegacyAuthProviderCompatibleMutation = useMutation<\n        TUpdatePasswordData,\n        Error | RefineError,\n        TVariables,\n        unknown\n    >(\n        [\n            ...keys().auth().action(\"updatePassword\").get(preferLegacyKeys),\n            \"v3LegacyAuthProviderCompatible\",\n        ],\n        async (variables) => {\n            return legacyUpdatePasswordFromContext?.({\n                ...params,\n                ...variables,\n            });\n        },\n        {\n            onSuccess: (redirectPathFromAuth) => {\n                if (redirectPathFromAuth !== false) {\n                    if (redirectPathFromAuth) {\n                        if (routerType === \"legacy\") {\n                            replace(redirectPathFromAuth);\n                        } else {\n                            go({ to: redirectPathFromAuth, type: \"replace\" });\n                        }\n                    }\n                }\n                close?.(\"update-password-error\");\n            },\n            onError: (error: any) => {\n                open?.(buildNotification(error));\n            },\n            ...(v3LegacyAuthProviderCompatible ? mutationOptions : {}),\n            meta: {\n                ...(v3LegacyAuthProviderCompatible\n                    ? mutationOptions?.meta\n                    : {}),\n                ...getXRay(\"useUpdatePassword\", preferLegacyKeys),\n            },\n        },\n    );\n\n    return v3LegacyAuthProviderCompatible\n        ? v3LegacyAuthProviderCompatibleMutation\n        : mutation;\n}\n\nconst buildNotification = (\n    error?: Error | RefineError,\n): OpenNotificationParams => {\n    return {\n        message: error?.name || \"Update Password Error\",\n        description: error?.message || \"Error while updating password\",\n        key: \"update-password-error\",\n        type: \"error\",\n    };\n};\n","import { useQuery, UseQueryResult } from \"@tanstack/react-query\";\nimport { getXRay } from \"@refinedev/devtools-internal\";\n\nimport { useAuthBindingsContext, useLegacyAuthContext } from \"@contexts/auth\";\nimport { CheckResponse } from \"../../../interfaces\";\nimport { useKeys } from \"@hooks/useKeys\";\n\nexport type UseIsAuthenticatedLegacyProps = {\n    v3LegacyAuthProviderCompatible: true;\n    params?: any;\n};\n\nexport type UseIsAuthenticatedProps = {\n    v3LegacyAuthProviderCompatible?: false;\n    params?: any;\n};\n\nexport type UseIsAuthenticatedCombinedProps = {\n    v3LegacyAuthProviderCompatible: boolean;\n    params?: any;\n};\n\nexport type UseIsAuthenticatedLegacyReturnType = UseQueryResult<any, any>;\n\nexport type UseIsAuthenticatedReturnType = UseQueryResult<CheckResponse, any>;\n\nexport type UseIsAuthenticatedCombinedReturnType = UseQueryResult<\n    CheckResponse | any,\n    any\n>;\n\nexport function useIsAuthenticated(\n    props: UseIsAuthenticatedLegacyProps,\n): UseIsAuthenticatedLegacyReturnType;\n\nexport function useIsAuthenticated(\n    props?: UseIsAuthenticatedProps,\n): UseIsAuthenticatedReturnType;\n\nexport function useIsAuthenticated(\n    props?: UseIsAuthenticatedCombinedProps,\n): UseIsAuthenticatedCombinedReturnType;\n\n/**\n *  `useIsAuthenticated` calls the `checkAuth` method from the {@link https://refine.dev/docs/core/providers/auth-provider `authProvider`} under the hood.\n *\n * @see {@link https://refine.dev/docs/api-reference/core/hooks/auth/useAuthenticated} for more details.\n */\nexport function useIsAuthenticated({\n    v3LegacyAuthProviderCompatible = false,\n    params,\n}: UseIsAuthenticatedProps | UseIsAuthenticatedLegacyProps = {}):\n    | UseIsAuthenticatedReturnType\n    | UseIsAuthenticatedLegacyReturnType {\n    const { checkAuth } = useLegacyAuthContext();\n    const { check } = useAuthBindingsContext();\n    const { keys, preferLegacyKeys } = useKeys();\n\n    const queryResponse = useQuery(\n        keys().auth().action(\"check\").params(params).get(preferLegacyKeys),\n        async () => (await check?.(params)) ?? {},\n        {\n            retry: false,\n            enabled: !v3LegacyAuthProviderCompatible,\n            meta: {\n                ...getXRay(\"useIsAuthenticated\", preferLegacyKeys),\n            },\n        },\n    );\n\n    const legacyQueryResponse = useQuery(\n        [\n            ...keys()\n                .auth()\n                .action(\"check\")\n                .params(params)\n                .get(preferLegacyKeys),\n            \"v3LegacyAuthProviderCompatible\",\n        ],\n        async () => (await checkAuth?.(params)) ?? {},\n        {\n            retry: false,\n            enabled: v3LegacyAuthProviderCompatible,\n            meta: {\n                ...getXRay(\"useIsAuthenticated\", preferLegacyKeys),\n            },\n        },\n    );\n\n    return v3LegacyAuthProviderCompatible ? legacyQueryResponse : queryResponse;\n}\n\n/**\n * @deprecated `useAuthenticated` is deprecated with refine@4, use `useIsAuthenticated` instead, however, we still support `useAuthenticated` for backward compatibility.\n */\nexport const useAuthenticated = useIsAuthenticated;\n","import { useMutation, UseMutationResult } from \"@tanstack/react-query\";\nimport { getXRay } from \"@refinedev/devtools-internal\";\n\nimport { useAuthBindingsContext, useLegacyAuthContext } from \"@contexts/auth\";\nimport { OnErrorResponse } from \"../../../interfaces\";\nimport { useGo, useLogout, useNavigation, useRouterType } from \"@hooks\";\nimport { useKeys } from \"@hooks/useKeys\";\n\nexport type UseOnErrorLegacyProps = {\n    v3LegacyAuthProviderCompatible: true;\n};\n\nexport type UseOnErrorProps = {\n    v3LegacyAuthProviderCompatible?: false;\n};\n\nexport type UseOnErrorCombinedProps = {\n    v3LegacyAuthProviderCompatible: boolean;\n};\n\nexport type UseOnErrorLegacyReturnType = UseMutationResult<\n    void,\n    string | undefined,\n    any,\n    unknown\n>;\n\nexport type UseOnErrorReturnType = UseMutationResult<\n    OnErrorResponse,\n    unknown,\n    unknown,\n    unknown\n>;\nexport type UseOnErrorCombinedReturnType = UseMutationResult<\n    OnErrorResponse | void,\n    unknown,\n    unknown,\n    unknown\n>;\n\nexport function useOnError(\n    props: UseOnErrorLegacyProps,\n): UseOnErrorLegacyReturnType;\n\nexport function useOnError(props?: UseOnErrorProps): UseOnErrorReturnType;\n\nexport function useOnError(\n    props?: UseOnErrorCombinedProps,\n): UseOnErrorCombinedReturnType;\n\n/**\n * `useOnError` calls the `checkError` method from the {@link https://refine.dev/docs/core/providers/auth-provider `authProvider`} under the hood.\n *\n * @see {@link https://refine.dev/docs/api-reference/core/hooks/auth/useCheckError} for more details.\n *\n */\nexport function useOnError({\n    v3LegacyAuthProviderCompatible = false,\n}: UseOnErrorProps | UseOnErrorLegacyProps = {}):\n    | UseOnErrorReturnType\n    | UseOnErrorLegacyReturnType {\n    const routerType = useRouterType();\n    const go = useGo();\n    const { replace } = useNavigation();\n\n    const { checkError: legacyCheckErrorFromContext } = useLegacyAuthContext();\n    const { onError: onErrorFromContext } = useAuthBindingsContext();\n\n    const { keys, preferLegacyKeys } = useKeys();\n\n    const { mutate: legacyLogout } = useLogout({\n        v3LegacyAuthProviderCompatible: Boolean(v3LegacyAuthProviderCompatible),\n    });\n    const { mutate: logout } = useLogout({\n        v3LegacyAuthProviderCompatible: Boolean(v3LegacyAuthProviderCompatible),\n    });\n\n    const mutation = useMutation(\n        keys().auth().action(\"onError\").get(preferLegacyKeys),\n        onErrorFromContext,\n        {\n            onSuccess: ({ logout: shouldLogout, redirectTo }) => {\n                if (shouldLogout) {\n                    logout({ redirectPath: redirectTo });\n                    return;\n                }\n\n                if (redirectTo) {\n                    if (routerType === \"legacy\") {\n                        replace(redirectTo);\n                    } else {\n                        go({ to: redirectTo, type: \"replace\" });\n                    }\n                    return;\n                }\n            },\n            meta: {\n                ...getXRay(\"useOnError\", preferLegacyKeys),\n            },\n        },\n    );\n\n    const v3LegacyAuthProviderCompatibleMutation = useMutation(\n        [\n            ...keys().auth().action(\"onError\").get(preferLegacyKeys),\n            \"v3LegacyAuthProviderCompatible\",\n        ],\n        legacyCheckErrorFromContext,\n        {\n            onError: (redirectPath?: string) => {\n                legacyLogout({ redirectPath });\n            },\n            meta: {\n                ...getXRay(\"useOnError\", preferLegacyKeys),\n            },\n        },\n    );\n\n    return v3LegacyAuthProviderCompatible\n        ? v3LegacyAuthProviderCompatibleMutation\n        : mutation;\n}\n\n/**\n * @deprecated `useCheckError` is deprecated with refine@4, use `useOnError` instead, however, we still support `useCheckError` for backward compatibility.\n */\nexport const useCheckError = useOnError;\n","import { useAuthBindingsContext, useLegacyAuthContext } from \"@contexts/auth\";\n\n/**\n * A hook that the UI uses\n * @internal\n */\nexport const useIsExistAuthentication = (): boolean => {\n    const { isProvided: legacyIsProvided } = useLegacyAuthContext();\n    const { isProvided } = useAuthBindingsContext();\n\n    return Boolean(isProvided || legacyIsProvided);\n};\n","import { getXRay } from \"@refinedev/devtools-internal\";\nimport {\n    QueryObserverResult,\n    useQuery,\n    UseQueryOptions,\n} from \"@tanstack/react-query\";\n\nimport {\n    handlePaginationParams,\n    pickDataProvider,\n    pickNotDeprecated,\n    useActiveAuthProvider,\n} from \"@definitions/helpers\";\nimport {\n    useDataProvider,\n    useHandleNotification,\n    useMeta,\n    useOnError,\n    useResource,\n    useResourceSubscription,\n    useTranslate,\n} from \"@hooks\";\nimport { useKeys } from \"@hooks/useKeys\";\nimport {\n    BaseRecord,\n    CrudFilters,\n    CrudSorting,\n    GetListResponse,\n    HttpError,\n    LiveModeProps,\n    MetaQuery,\n    Pagination,\n    Prettify,\n    SuccessErrorNotification,\n} from \"../../interfaces\";\nimport {\n    useLoadingOvertime,\n    UseLoadingOvertimeOptionsProps,\n    UseLoadingOvertimeReturnType,\n} from \"../useLoadingOvertime\";\n\nexport interface UseListConfig {\n    pagination?: Pagination;\n    hasPagination?: boolean;\n    sort?: CrudSorting;\n    filters?: CrudFilters;\n}\n\nexport type BaseListProps = {\n    /**\n     * Configuration for pagination, sorting and filtering\n     * @type [`UseListConfig`](/docs/api-reference/core/hooks/data/useList/#config-parameters)\n     * @deprecated `config` property is deprecated. Use `pagination`, `hasPagination`, `sorters` and `filters` instead.\n     */\n    config?: UseListConfig;\n    /**\n     * Pagination properties\n     */\n    pagination?: Pagination;\n    /**\n     * Whether to use server-side pagination or not\n     * @deprecated `hasPagination` property is deprecated. Use `pagination.mode` instead.\n     */\n    hasPagination?: boolean;\n    /**\n     * Sorter parameters\n     */\n    sorters?: CrudSorting;\n    /**\n     * Filter parameters\n     */\n    filters?: CrudFilters;\n    /**\n     * Meta data query for `dataProvider`\n     */\n    meta?: MetaQuery;\n    /**\n     * Meta data query for `dataProvider`\n     * @deprecated `metaData` is deprecated with refine@4, refine will pass `meta` instead, however, we still support `metaData` for backward compatibility.\n     */\n    metaData?: MetaQuery;\n    /**\n     * If there is more than one `dataProvider`, you should use the `dataProviderName` that you will use\n     */\n    dataProviderName?: string;\n};\n\nexport type UseListProps<TQueryFnData, TError, TData> = {\n    /**\n     * Resource name for API data interactions\n     */\n    resource?: string;\n\n    /**\n     * Tanstack Query's [useQuery](https://tanstack.com/query/v4/docs/reference/useQuery) options\n     */\n    queryOptions?: UseQueryOptions<\n        GetListResponse<TQueryFnData>,\n        TError,\n        GetListResponse<TData>\n    >;\n} & BaseListProps &\n    SuccessErrorNotification<\n        GetListResponse<TData>,\n        TError,\n        Prettify<BaseListProps>\n    > &\n    LiveModeProps &\n    UseLoadingOvertimeOptionsProps;\n\n/**\n * `useList` is a modified version of `react-query`'s {@link https://react-query.tanstack.com/guides/queries `useQuery`} used for retrieving items from a `resource` with pagination, sort, and filter configurations.\n *\n * It uses the `getList` method as the query function from the `dataProvider` which is passed to `<Refine>`.\n *\n * @see {@link https://refine.dev/docs/api-reference/core/hooks/data/useList} for more details.\n *\n * @typeParam TQueryFnData - Result data returned by the query function. Extends {@link https://refine.dev/docs/api-reference/core/interfaceReferences#baserecord `BaseRecord`}\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/api-reference/core/interfaceReferences#httperror `HttpError`}\n * @typeParam TData - Result data returned by the `select` function. Extends {@link https://refine.dev/docs/api-reference/core/interfaceReferences#baserecord `BaseRecord`}. Defaults to `TQueryFnData`\n *\n */\n\nexport const useList = <\n    TQueryFnData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TData extends BaseRecord = TQueryFnData,\n>({\n    resource: resourceFromProp,\n    config,\n    filters,\n    hasPagination,\n    pagination,\n    sorters,\n    queryOptions,\n    successNotification,\n    errorNotification,\n    meta,\n    metaData,\n    liveMode,\n    onLiveEvent,\n    liveParams,\n    dataProviderName,\n    overtimeOptions,\n}: UseListProps<TQueryFnData, TError, TData> = {}): QueryObserverResult<\n    GetListResponse<TData>,\n    TError\n> &\n    UseLoadingOvertimeReturnType => {\n    const { resources, resource, identifier } = useResource(resourceFromProp);\n\n    const dataProvider = useDataProvider();\n    const translate = useTranslate();\n    const authProvider = useActiveAuthProvider();\n    const { mutate: checkError } = useOnError({\n        v3LegacyAuthProviderCompatible: Boolean(authProvider?.isLegacy),\n    });\n    const handleNotification = useHandleNotification();\n    const getMeta = useMeta();\n    const { keys, preferLegacyKeys } = useKeys();\n\n    const pickedDataProvider = pickDataProvider(\n        identifier,\n        dataProviderName,\n        resources,\n    );\n    const preferredMeta = pickNotDeprecated(meta, metaData);\n    const prefferedFilters = pickNotDeprecated(filters, config?.filters);\n    const prefferedSorters = pickNotDeprecated(sorters, config?.sort);\n    const prefferedHasPagination = pickNotDeprecated(\n        hasPagination,\n        config?.hasPagination,\n    );\n    const prefferedPagination = handlePaginationParams({\n        pagination,\n        configPagination: config?.pagination,\n        hasPagination: prefferedHasPagination,\n    });\n    const isServerPagination = prefferedPagination.mode === \"server\";\n\n    const combinedMeta = getMeta({ resource, meta: preferredMeta });\n\n    const notificationValues = {\n        meta: combinedMeta,\n        metaData: combinedMeta,\n        filters: prefferedFilters,\n        hasPagination: isServerPagination,\n        pagination: prefferedPagination,\n        sorters: prefferedSorters,\n        config: {\n            ...config,\n            sort: prefferedSorters,\n        },\n    };\n\n    const isEnabled =\n        queryOptions?.enabled === undefined || queryOptions?.enabled === true;\n\n    const { getList } = dataProvider(pickedDataProvider);\n\n    useResourceSubscription({\n        resource: identifier,\n        types: [\"*\"],\n        params: {\n            meta: combinedMeta,\n            metaData: combinedMeta,\n            pagination: prefferedPagination,\n            hasPagination: isServerPagination,\n            sort: prefferedSorters,\n            sorters: prefferedSorters,\n            filters: prefferedFilters,\n            subscriptionType: \"useList\",\n            ...liveParams,\n        },\n        channel: `resources/${resource?.name}`,\n        enabled: isEnabled,\n        liveMode,\n        onLiveEvent,\n        dataProviderName: pickedDataProvider,\n        meta: {\n            ...meta,\n            dataProviderName,\n        },\n    });\n\n    const queryResponse = useQuery<\n        GetListResponse<TQueryFnData>,\n        TError,\n        GetListResponse<TData>\n    >(\n        keys()\n            .data(pickedDataProvider)\n            .resource(identifier ?? \"\")\n            .action(\"list\")\n            .params({\n                ...(preferredMeta || {}),\n                filters: prefferedFilters,\n                hasPagination: isServerPagination,\n                ...(isServerPagination && {\n                    pagination: prefferedPagination,\n                }),\n                ...(sorters && {\n                    sorters,\n                }),\n                ...(config?.sort && {\n                    sort: config?.sort,\n                }),\n            })\n            .get(preferLegacyKeys),\n        ({ queryKey, pageParam, signal }) => {\n            return getList<TQueryFnData>({\n                resource: resource?.name ?? \"\",\n                pagination: prefferedPagination,\n                hasPagination: isServerPagination,\n                filters: prefferedFilters,\n                sort: prefferedSorters,\n                sorters: prefferedSorters,\n                meta: {\n                    ...combinedMeta,\n                    queryContext: {\n                        queryKey,\n                        pageParam,\n                        signal,\n                    },\n                },\n                metaData: {\n                    ...combinedMeta,\n                    queryContext: {\n                        queryKey,\n                        pageParam,\n                        signal,\n                    },\n                },\n            });\n        },\n        {\n            ...queryOptions,\n            enabled:\n                typeof queryOptions?.enabled !== \"undefined\"\n                    ? queryOptions?.enabled\n                    : !!resource?.name,\n            select: (rawData) => {\n                let data = rawData;\n\n                const { current, mode, pageSize } = prefferedPagination;\n\n                if (mode === \"client\") {\n                    data = {\n                        ...data,\n                        data: data.data.slice(\n                            (current - 1) * pageSize,\n                            current * pageSize,\n                        ),\n                        total: data.total,\n                    };\n                }\n\n                if (queryOptions?.select) {\n                    return queryOptions?.select?.(data);\n                }\n\n                return data as unknown as GetListResponse<TData>;\n            },\n            onSuccess: (data) => {\n                queryOptions?.onSuccess?.(data);\n\n                const notificationConfig =\n                    typeof successNotification === \"function\"\n                        ? successNotification(\n                              data,\n                              notificationValues,\n                              identifier,\n                          )\n                        : successNotification;\n\n                handleNotification(notificationConfig);\n            },\n            onError: (err: TError) => {\n                checkError(err);\n                queryOptions?.onError?.(err);\n\n                const notificationConfig =\n                    typeof errorNotification === \"function\"\n                        ? errorNotification(err, notificationValues, identifier)\n                        : errorNotification;\n\n                handleNotification(notificationConfig, {\n                    key: `${identifier}-useList-notification`,\n                    message: translate(\n                        \"notifications.error\",\n                        { statusCode: err.statusCode },\n                        `Error (status code: ${err.statusCode})`,\n                    ),\n                    description: err.message,\n                    type: \"error\",\n                });\n            },\n            meta: {\n                ...queryOptions?.meta,\n                ...getXRay(\"useList\", preferLegacyKeys),\n            },\n        },\n    );\n\n    const { elapsedTime } = useLoadingOvertime({\n        isLoading: queryResponse.isFetching,\n        interval: overtimeOptions?.interval,\n        onInterval: overtimeOptions?.onInterval,\n    });\n\n    return { ...queryResponse, overtime: { elapsedTime } };\n};\n","import { useEffect, useState } from \"react\";\nimport { useRefineContext } from \"..\";\n\nexport type UseLoadingOvertimeRefineContext = Omit<\n    UseLoadingOvertimeCoreProps,\n    \"isLoading\" | \"interval\"\n> &\n    Required<Pick<UseLoadingOvertimeCoreProps, \"interval\">>;\n\nexport type UseLoadingOvertimeOptionsProps = {\n    overtimeOptions?: UseLoadingOvertimeCoreOptions;\n};\n\nexport type UseLoadingOvertimeReturnType = {\n    overtime: {\n        elapsedTime?: number;\n    };\n};\n\ntype UseLoadingOvertimeCoreOptions = Omit<\n    UseLoadingOvertimeCoreProps,\n    \"isLoading\"\n>;\n\ntype UseLoadingOvertimeCoreReturnType = {\n    elapsedTime?: number;\n};\n\nexport type UseLoadingOvertimeCoreProps = {\n    /**\n     * The loading state. If true, the elapsed time will be calculated.\n     */\n    isLoading: boolean;\n\n    /**\n     * The interval in milliseconds. If the loading time exceeds this time, the `onInterval` callback will be called.\n     * If not specified, the `interval` value from the `overtime` option of the `RefineProvider` will be used.\n     *\n     * @default: 1000 (1 second)\n     */\n    interval?: number;\n\n    /**\n     * The callback function that will be called when the loading time exceeds the specified time.\n     * If not specified, the `onInterval` value from the `overtime` option of the `RefineProvider` will be used.\n     *\n     * @param elapsedInterval The elapsed time in milliseconds.\n     */\n    onInterval?: (elapsedInterval: number) => void;\n};\n\n/**\n * if you need to do something when the loading time exceeds the specified time, refine provides the `useLoadingOvertime` hook.\n * It returns the elapsed time in milliseconds.\n *\n * @example\n * const { elapsedTime } = useLoadingOvertime({\n *    isLoading,\n *    interval: 1000,\n *    onInterval(elapsedInterval) {\n *        console.log(\"loading overtime\", elapsedInterval);\n *    },\n * });\n */\nexport const useLoadingOvertime = ({\n    isLoading,\n    interval: intervalProp,\n    onInterval: onIntervalProp,\n}: UseLoadingOvertimeCoreProps): UseLoadingOvertimeCoreReturnType => {\n    const [elapsedTime, setElapsedTime] = useState<number | undefined>(\n        undefined,\n    );\n    // get overtime options from refine context\n    const { options } = useRefineContext();\n    const { overtime } = options;\n\n    // pick props or refine context options\n    const interval = intervalProp ?? overtime.interval;\n    const onInterval = onIntervalProp ?? overtime?.onInterval;\n\n    useEffect(() => {\n        let intervalFn: ReturnType<typeof setInterval>;\n\n        if (isLoading) {\n            intervalFn = setInterval(() => {\n                // increase elapsed time\n                setElapsedTime((prevElapsedTime) => {\n                    if (prevElapsedTime === undefined) {\n                        return interval;\n                    }\n\n                    return prevElapsedTime + interval;\n                });\n            }, interval);\n        }\n\n        return () => {\n            clearInterval(intervalFn);\n            // reset elapsed time\n            setElapsedTime(undefined);\n        };\n    }, [isLoading, interval]);\n\n    useEffect(() => {\n        // call onInterval callback\n        if (onInterval && elapsedTime) {\n            onInterval(elapsedTime);\n        }\n    }, [elapsedTime]);\n\n    return {\n        elapsedTime,\n    };\n};\n","import { getXRay } from \"@refinedev/devtools-internal\";\nimport {\n    QueryObserverResult,\n    useQuery,\n    UseQueryOptions,\n} from \"@tanstack/react-query\";\n\nimport {\n    pickDataProvider,\n    pickNotDeprecated,\n    useActiveAuthProvider,\n} from \"@definitions\";\nimport {\n    useDataProvider,\n    useHandleNotification,\n    useMeta,\n    useOnError,\n    useResource,\n    useResourceSubscription,\n    useTranslate,\n} from \"@hooks\";\nimport { useKeys } from \"@hooks/useKeys\";\nimport {\n    BaseKey,\n    BaseRecord,\n    GetOneResponse,\n    HttpError,\n    LiveModeProps,\n    MetaQuery,\n    Prettify,\n    SuccessErrorNotification,\n} from \"../../interfaces\";\nimport {\n    useLoadingOvertime,\n    UseLoadingOvertimeOptionsProps,\n    UseLoadingOvertimeReturnType,\n} from \"../useLoadingOvertime\";\n\nexport type UseOneProps<TQueryFnData, TError, TData> = {\n    /**\n     * Resource name for API data interactions\n     */\n    resource?: string;\n    /**\n     * id of the item in the resource\n     * @type [`BaseKey`](/docs/api-reference/core/interfaceReferences/#basekey)\n     */\n    id?: BaseKey;\n    /**\n     * react-query's [useQuery](https://tanstack.com/query/v4/docs/reference/useQuery) options\n     */\n    queryOptions?: UseQueryOptions<\n        GetOneResponse<TQueryFnData>,\n        TError,\n        GetOneResponse<TData>\n    >;\n    /**\n     * Metadata query for `dataProvider`,\n     */\n    meta?: MetaQuery;\n    /**\n     * Meta data query for `dataProvider`,\n     * @deprecated `metaData` is deprecated with refine@4, refine will pass `meta` instead, however, we still support `metaData` for backward compatibility.\n     */\n    metaData?: MetaQuery;\n    /**\n     * If there is more than one `dataProvider`, you should use the `dataProviderName` that you will use.\n     * @default `\"default\"``\n     */\n    dataProviderName?: string;\n} & SuccessErrorNotification<\n    GetOneResponse<TData>,\n    TError,\n    Prettify<{ id?: BaseKey } & MetaQuery>\n> &\n    LiveModeProps &\n    UseLoadingOvertimeOptionsProps;\n\n/**\n * `useOne` is a modified version of `react-query`'s {@link https://react-query.tanstack.com/guides/queries `useQuery`} used for retrieving single items from a `resource`.\n *\n * It uses `getOne` method as query function from the `dataProvider` which is passed to `<Refine>`.\n *\n * @see {@link https://refine.dev/docs/api-reference/core/hooks/data/useOne} for more details.\n *\n * @typeParam TQueryFnData - Result data returned by the query function. Extends {@link https://refine.dev/docs/api-reference/core/interfaceReferences#baserecord `BaseRecord`}\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/api-reference/core/interfaceReferences#httperror `HttpError`}\n * @typeParam TData - Result data returned by the `select` function. Extends {@link https://refine.dev/docs/api-reference/core/interfaceReferences#baserecord `BaseRecord`}. Defaults to `TQueryFnData`\n *\n */\n\nexport const useOne = <\n    TQueryFnData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TData extends BaseRecord = TQueryFnData,\n>({\n    resource: resourceFromProp,\n    id,\n    queryOptions,\n    successNotification,\n    errorNotification,\n    meta,\n    metaData,\n    liveMode,\n    onLiveEvent,\n    liveParams,\n    dataProviderName,\n    overtimeOptions,\n}: UseOneProps<TQueryFnData, TError, TData>): QueryObserverResult<\n    GetOneResponse<TData>, TError\n> &\n    UseLoadingOvertimeReturnType => {\n    const { resources, resource, identifier } = useResource(resourceFromProp);\n\n    const dataProvider = useDataProvider();\n    const translate = useTranslate();\n    const authProvider = useActiveAuthProvider();\n    const { mutate: checkError } = useOnError({\n        v3LegacyAuthProviderCompatible: Boolean(authProvider?.isLegacy),\n    });\n    const handleNotification = useHandleNotification();\n    const getMeta = useMeta();\n    const { keys, preferLegacyKeys } = useKeys();\n\n    const preferredMeta = pickNotDeprecated(meta, metaData);\n    const pickedDataProvider = pickDataProvider(\n        identifier,\n        dataProviderName,\n        resources,\n    );\n\n    const { getOne } = dataProvider(pickedDataProvider);\n\n    const combinedMeta = getMeta({ resource, meta: preferredMeta });\n\n    useResourceSubscription({\n        resource: identifier,\n        types: [\"*\"],\n        channel: `resources/${resource?.name}`,\n        params: {\n            ids: id ? [id] : [],\n            id: id,\n            meta: combinedMeta,\n            metaData: combinedMeta,\n            subscriptionType: \"useOne\",\n            ...liveParams,\n        },\n        enabled:\n            typeof queryOptions?.enabled !== \"undefined\"\n                ? queryOptions?.enabled\n                : typeof resource?.name !== \"undefined\" &&\n                  typeof id !== \"undefined\",\n        liveMode,\n        onLiveEvent,\n        dataProviderName: pickedDataProvider,\n        meta: {\n            ...meta,\n            dataProviderName,\n        },\n    });\n\n    const queryResponse = useQuery<\n        GetOneResponse<TQueryFnData>,\n        TError,\n        GetOneResponse<TData>\n    >(\n        keys()\n            .data(pickedDataProvider)\n            .resource(identifier ?? \"\")\n            .action(\"one\")\n            .id(id ?? \"\")\n            .params({\n                ...(preferredMeta || {}),\n            })\n            .get(preferLegacyKeys),\n        ({ queryKey, pageParam, signal }) =>\n            getOne<TQueryFnData>({\n                resource: resource?.name ?? \"\",\n                id: id!,\n                meta: {\n                    ...combinedMeta,\n                    queryContext: {\n                        queryKey,\n                        pageParam,\n                        signal,\n                    },\n                },\n                metaData: {\n                    ...combinedMeta,\n                    queryContext: {\n                        queryKey,\n                        pageParam,\n                        signal,\n                    },\n                },\n            }),\n        {\n            ...queryOptions,\n            enabled:\n                typeof queryOptions?.enabled !== \"undefined\"\n                    ? queryOptions?.enabled\n                    : typeof id !== \"undefined\",\n            onSuccess: (data) => {\n                queryOptions?.onSuccess?.(data);\n\n                const notificationConfig =\n                    typeof successNotification === \"function\"\n                        ? successNotification(\n                              data,\n                              {\n                                  id,\n                                  ...combinedMeta,\n                              },\n                              identifier,\n                          )\n                        : successNotification;\n\n                handleNotification(notificationConfig);\n            },\n            onError: (err: TError) => {\n                checkError(err);\n                queryOptions?.onError?.(err);\n\n                const notificationConfig =\n                    typeof errorNotification === \"function\"\n                        ? errorNotification(\n                              err,\n                              {\n                                  id,\n                                  ...combinedMeta,\n                              },\n                              identifier,\n                          )\n                        : errorNotification;\n\n                handleNotification(notificationConfig, {\n                    key: `${id}-${identifier}-getOne-notification`,\n                    message: translate(\n                        \"notifications.error\",\n                        { statusCode: err.statusCode },\n                        `Error (status code: ${err.statusCode})`,\n                    ),\n                    description: err.message,\n                    type: \"error\",\n                });\n            },\n            meta: {\n                ...queryOptions?.meta,\n                ...getXRay(\"useOne\", preferLegacyKeys),\n            },\n        },\n    );\n\n    const { elapsedTime } = useLoadingOvertime({\n        isLoading: queryResponse.isFetching,\n        interval: overtimeOptions?.interval,\n        onInterval: overtimeOptions?.onInterval,\n    });\n\n    return { ...queryResponse, overtime: { elapsedTime } };\n};\n","import { getXRay } from \"@refinedev/devtools-internal\";\nimport {\n    QueryObserverResult,\n    useQuery,\n    UseQueryOptions,\n} from \"@tanstack/react-query\";\n\nimport {\n    handleMultiple,\n    pickDataProvider,\n    pickNotDeprecated,\n    useActiveAuthProvider,\n} from \"@definitions/helpers\";\nimport {\n    useDataProvider,\n    useHandleNotification,\n    useMeta,\n    useOnError,\n    useResource,\n    useResourceSubscription,\n    useTranslate,\n} from \"@hooks\";\nimport { useKeys } from \"@hooks/useKeys\";\nimport {\n    BaseKey,\n    BaseRecord,\n    GetManyResponse,\n    HttpError,\n    LiveModeProps,\n    MetaQuery,\n    SuccessErrorNotification,\n} from \"../../interfaces\";\nimport {\n    useLoadingOvertime,\n    UseLoadingOvertimeOptionsProps,\n    UseLoadingOvertimeReturnType,\n} from \"../useLoadingOvertime\";\n\nexport type UseManyProps<TQueryFnData, TError, TData> = {\n    /**\n     * Resource name for API data interactions\n     */\n    resource: string;\n    /**\n     * ids of the item in the resource\n     * @type [`BaseKey[]`](/docs/api-reference/core/interfaceReferences/#basekey)\n     */\n    ids: BaseKey[];\n    /**\n     * react-query's [useQuery](https://tanstack.com/query/v4/docs/reference/useQuery) options\n     */\n    queryOptions?: UseQueryOptions<\n        GetManyResponse<TQueryFnData>,\n        TError,\n        GetManyResponse<TData>\n    >;\n    /**\n     * Metadata query for `dataProvider`,\n     */\n    meta?: MetaQuery;\n    /**\n     * Metadata query for `dataProvider`,\n     * @deprecated `metaData` is deprecated with refine@4, refine will pass `meta` instead, however, we still support `metaData` for backward compatibility.\n     */\n    metaData?: MetaQuery;\n    /**\n     * If there is more than one `dataProvider`, you should use the `dataProviderName` that you will use.\n     * @default \"default\"\n     */\n    dataProviderName?: string;\n} & SuccessErrorNotification<GetManyResponse<TData>, TError, BaseKey[]> &\n    LiveModeProps &\n    UseLoadingOvertimeOptionsProps;\n\n/**\n * `useMany` is a modified version of `react-query`'s {@link https://react-query.tanstack.com/guides/queries `useQuery`} used for retrieving multiple items from a `resource`.\n *\n * It uses `getMany` method as query function from the `dataProvider` which is passed to `<Refine>`.\n *\n * @see {@link https://refine.dev/docs/api-reference/core/hooks/data/useMany} for more details.\n *\n * @typeParam TQueryFnData - Result data returned by the query function. Extends {@link https://refine.dev/docs/api-reference/core/interfaceReferences#baserecord `BaseRecord`}\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/api-reference/core/interfaceReferences#httperror `HttpError`}\n * @typeParam TData - Result data returned by the `select` function. Extends {@link https://refine.dev/docs/api-reference/core/interfaceReferences#baserecord `BaseRecord`}. Defaults to `TQueryFnData`\n *\n */\n\nexport const useMany = <\n    TQueryFnData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TData extends BaseRecord = TQueryFnData,\n>({\n    resource: resourceFromProp,\n    ids,\n    queryOptions,\n    successNotification,\n    errorNotification,\n    meta,\n    metaData,\n    liveMode,\n    onLiveEvent,\n    liveParams,\n    dataProviderName,\n    overtimeOptions,\n}: UseManyProps<TQueryFnData, TError, TData>): QueryObserverResult<\n    GetManyResponse<TData>, TError\n> &\n    UseLoadingOvertimeReturnType => {\n    const { resources, resource, identifier } = useResource(resourceFromProp);\n    const dataProvider = useDataProvider();\n    const translate = useTranslate();\n    const authProvider = useActiveAuthProvider();\n    const { mutate: checkError } = useOnError({\n        v3LegacyAuthProviderCompatible: Boolean(authProvider?.isLegacy),\n    });\n    const handleNotification = useHandleNotification();\n    const getMeta = useMeta();\n    const { keys, preferLegacyKeys } = useKeys();\n\n    const preferredMeta = pickNotDeprecated(meta, metaData);\n    const pickedDataProvider = pickDataProvider(\n        identifier,\n        dataProviderName,\n        resources,\n    );\n    const isEnabled =\n        queryOptions?.enabled === undefined || queryOptions?.enabled === true;\n\n    const { getMany, getOne } = dataProvider(pickedDataProvider);\n\n    const combinedMeta = getMeta({ resource, meta: preferredMeta });\n\n    useResourceSubscription({\n        resource: identifier,\n        types: [\"*\"],\n        params: {\n            ids: ids,\n            meta: combinedMeta,\n            metaData: combinedMeta,\n            subscriptionType: \"useMany\",\n            ...liveParams,\n        },\n        channel: `resources/${resource.name}`,\n        enabled: isEnabled,\n        liveMode,\n        onLiveEvent,\n        dataProviderName: pickedDataProvider,\n        meta: {\n            ...meta,\n            dataProviderName,\n        },\n    });\n\n    const queryResponse = useQuery<\n        GetManyResponse<TQueryFnData>,\n        TError,\n        GetManyResponse<TData>\n    >(\n        keys()\n            .data(pickedDataProvider)\n            .resource(identifier)\n            .action(\"many\")\n            .ids(...ids)\n            .params({\n                ...(preferredMeta || {}),\n            })\n            .get(preferLegacyKeys),\n        ({ queryKey, pageParam, signal }) => {\n            if (getMany) {\n                return getMany({\n                    resource: resource?.name,\n                    ids,\n                    meta: {\n                        ...combinedMeta,\n                        queryContext: {\n                            queryKey,\n                            pageParam,\n                            signal,\n                        },\n                    },\n                    metaData: {\n                        ...combinedMeta,\n                        queryContext: {\n                            queryKey,\n                            pageParam,\n                            signal,\n                        },\n                    },\n                });\n            } else {\n                return handleMultiple(\n                    ids.map((id) =>\n                        getOne<TQueryFnData>({\n                            resource: resource?.name,\n                            id,\n                            meta: {\n                                ...combinedMeta,\n                                queryContext: {\n                                    queryKey,\n                                    pageParam,\n                                    signal,\n                                },\n                            },\n                            metaData: {\n                                ...combinedMeta,\n                                queryContext: {\n                                    queryKey,\n                                    pageParam,\n                                    signal,\n                                },\n                            },\n                        }),\n                    ),\n                );\n            }\n        },\n        {\n            ...queryOptions,\n            onSuccess: (data) => {\n                queryOptions?.onSuccess?.(data);\n\n                const notificationConfig =\n                    typeof successNotification === \"function\"\n                        ? successNotification(data, ids, identifier)\n                        : successNotification;\n\n                handleNotification(notificationConfig);\n            },\n            onError: (err: TError) => {\n                checkError(err);\n                queryOptions?.onError?.(err);\n\n                const notificationConfig =\n                    typeof errorNotification === \"function\"\n                        ? errorNotification(err, ids, identifier)\n                        : errorNotification;\n\n                handleNotification(notificationConfig, {\n                    key: `${ids[0]}-${identifier}-getMany-notification`,\n                    message: translate(\n                        \"notifications.error\",\n                        { statusCode: err.statusCode },\n                        `Error (status code: ${err.statusCode})`,\n                    ),\n                    description: err.message,\n                    type: \"error\",\n                });\n            },\n            meta: {\n                ...queryOptions?.meta,\n                ...getXRay(\"useMany\", preferLegacyKeys),\n            },\n        },\n    );\n\n    const { elapsedTime } = useLoadingOvertime({\n        isLoading: queryResponse.isFetching,\n        interval: overtimeOptions?.interval,\n        onInterval: overtimeOptions?.onInterval,\n    });\n\n    return { ...queryResponse, overtime: { elapsedTime } };\n};\n","import { getXRay } from \"@refinedev/devtools-internal\";\nimport {\n    useMutation,\n    UseMutationOptions,\n    UseMutationResult,\n    useQueryClient,\n} from \"@tanstack/react-query\";\n\nimport { ActionTypes } from \"@contexts/undoableQueue\";\nimport {\n    pickDataProvider,\n    pickNotDeprecated,\n    queryKeysReplacement,\n    useActiveAuthProvider,\n} from \"@definitions/helpers\";\nimport {\n    useCancelNotification,\n    useDataProvider,\n    useHandleNotification,\n    useInvalidate,\n    useLog,\n    useMeta,\n    useMutationMode,\n    useOnError,\n    usePublish,\n    useRefineContext,\n    useResource,\n    useTranslate,\n} from \"@hooks\";\nimport { useKeys } from \"@hooks/useKeys\";\nimport {\n    BaseKey,\n    BaseRecord,\n    GetListResponse,\n    GetManyResponse,\n    GetOneResponse,\n    HttpError,\n    IQueryKeys,\n    MetaQuery,\n    MutationMode,\n    OptimisticUpdateMapType,\n    PrevContext as UpdateContext,\n    PreviousQuery,\n    SuccessErrorNotification,\n    UpdateResponse,\n} from \"../../interfaces\";\nimport {\n    useLoadingOvertime,\n    UseLoadingOvertimeOptionsProps,\n    UseLoadingOvertimeReturnType,\n} from \"../useLoadingOvertime\";\n\nexport type UpdateParams<TData, TError, TVariables> = {\n    /**\n     * Resource name for API data interactions\n     */\n    resource: string;\n    /**\n     * id for mutation function\n     */\n    id: BaseKey;\n    /**\n     * [Determines when mutations are executed](/advanced-tutorials/mutation-mode.md)\n     */\n    mutationMode?: MutationMode;\n    /**\n     * Duration in ms to wait before executing the mutation when `mutationMode = \"undoable\"`\n     */\n    undoableTimeout?: number;\n    /**\n     * Provides a function to cancel the mutation when `mutationMode = \"undoable\"`\n     */\n    onCancel?: (cancelMutation: () => void) => void;\n    /**\n     * Values for mutation function\n     */\n    values: TVariables;\n    /**\n     * Metadata query for dataProvider\n     */\n    meta?: MetaQuery;\n    /**\n     * Metadata query for dataProvider\n     * @deprecated `metaData` is deprecated with refine@4, refine will pass `meta` instead, however, we still support `metaData` for backward compatibility.\n     */\n    metaData?: MetaQuery;\n    /**\n     * If there is more than one `dataProvider`, you should use the `dataProviderName` that you will use.\n     * @default \"default\"\n     */\n    dataProviderName?: string;\n    /**\n     *  You can use it to manage the invalidations that will occur at the end of the mutation.\n     */\n    invalidates?: Array<keyof IQueryKeys>;\n    /**\n     * You can use it to customize the optimistic update logic.\n     * @default {\n     *   list: true,\n     *   many: true,\n     *   detail: true,\n     * }\n     */\n    optimisticUpdateMap?: OptimisticUpdateMapType<TData, TVariables>;\n} & SuccessErrorNotification<\n    UpdateResponse<TData>,\n    TError,\n    { id: BaseKey; values: TVariables }\n>;\n\nexport type UseUpdateReturnType<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n> = UseMutationResult<\n    UpdateResponse<TData>,\n    TError,\n    UpdateParams<TData, TError, TVariables>,\n    UpdateContext<TData>\n> &\n    UseLoadingOvertimeReturnType;\n\nexport type UseUpdateProps<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n> = {\n    mutationOptions?: Omit<\n        UseMutationOptions<\n            UpdateResponse<TData>,\n            TError,\n            UpdateParams<TData, TError, TVariables>,\n            UpdateContext<TData>\n        >,\n        \"mutationFn\" | \"onError\" | \"onSuccess\" | \"onSettled\" | \"onMutate\"\n    >;\n} & UseLoadingOvertimeOptionsProps;\n\n/**\n * `useUpdate` is a modified version of `react-query`'s {@link https://react-query.tanstack.com/reference/useMutation `useMutation`} for update mutations.\n *\n * It uses `update` method as mutation function from the `dataProvider` which is passed to `<Refine>`.\n *\n * @see {@link https://refine.dev/docs/api-reference/core/hooks/data/useUpdate} for more details.\n *\n * @typeParam TData - Result data of the query extends {@link https://refine.dev/docs/api-reference/core/interfaceReferences#baserecord `BaseRecord`}\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/api-reference/core/interfaceReferences/#httperror `HttpError`}\n * @typeParam TVariables - Values for mutation function\n *\n */\nexport const useUpdate = <\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n>({\n    mutationOptions,\n    overtimeOptions,\n}: UseUpdateProps<TData, TError, TVariables> = {}): UseUpdateReturnType<\n    TData,\n    TError,\n    TVariables\n> => {\n    const { resources, select } = useResource();\n    const queryClient = useQueryClient();\n    const dataProvider = useDataProvider();\n\n    const {\n        mutationMode: mutationModeContext,\n        undoableTimeout: undoableTimeoutContext,\n    } = useMutationMode();\n    const translate = useTranslate();\n    const authProvider = useActiveAuthProvider();\n    const { mutate: checkError } = useOnError({\n        v3LegacyAuthProviderCompatible: Boolean(authProvider?.isLegacy),\n    });\n    const publish = usePublish();\n    const { log } = useLog();\n    const { notificationDispatch } = useCancelNotification();\n    const handleNotification = useHandleNotification();\n    const invalidateStore = useInvalidate();\n    const getMeta = useMeta();\n    const {\n        options: { textTransformers },\n    } = useRefineContext();\n    const { keys, preferLegacyKeys } = useKeys();\n\n    const mutation = useMutation<\n        UpdateResponse<TData>,\n        TError,\n        UpdateParams<TData, TError, TVariables>,\n        UpdateContext<TData>\n    >(\n        ({\n            id,\n            values,\n            resource: resourceName,\n            mutationMode,\n            undoableTimeout,\n            onCancel,\n            meta,\n            metaData,\n            dataProviderName,\n        }) => {\n            const { resource, identifier } = select(resourceName);\n\n            const combinedMeta = getMeta({\n                resource,\n                meta: pickNotDeprecated(meta, metaData),\n            });\n\n            const mutationModePropOrContext =\n                mutationMode ?? mutationModeContext;\n\n            const undoableTimeoutPropOrContext =\n                undoableTimeout ?? undoableTimeoutContext;\n\n            if (!(mutationModePropOrContext === \"undoable\")) {\n                return dataProvider(\n                    pickDataProvider(identifier, dataProviderName, resources),\n                ).update<TData, TVariables>({\n                    resource: resource.name,\n                    id,\n                    variables: values,\n                    meta: combinedMeta,\n                    metaData: combinedMeta,\n                });\n            }\n            const updatePromise = new Promise<UpdateResponse<TData>>(\n                (resolve, reject) => {\n                    const doMutation = () => {\n                        dataProvider(\n                            pickDataProvider(\n                                identifier,\n                                dataProviderName,\n                                resources,\n                            ),\n                        )\n                            .update<TData, TVariables>({\n                                resource: resource.name,\n                                id,\n                                variables: values,\n                                meta: combinedMeta,\n                                metaData: combinedMeta,\n                            })\n                            .then((result) => resolve(result))\n                            .catch((err) => reject(err));\n                    };\n\n                    const cancelMutation = () => {\n                        reject({ message: \"mutationCancelled\" });\n                    };\n\n                    if (onCancel) {\n                        onCancel(cancelMutation);\n                    }\n\n                    notificationDispatch({\n                        type: ActionTypes.ADD,\n                        payload: {\n                            id: id,\n                            resource: identifier,\n                            cancelMutation: cancelMutation,\n                            doMutation: doMutation,\n                            seconds: undoableTimeoutPropOrContext,\n                            isSilent: !!onCancel,\n                        },\n                    });\n                },\n            );\n            return updatePromise;\n        },\n        {\n            onMutate: async ({\n                resource: resourceName,\n                id,\n                mutationMode,\n                values,\n                dataProviderName,\n                meta,\n                metaData,\n                optimisticUpdateMap = { list: true, many: true, detail: true },\n            }) => {\n                const { identifier } = select(resourceName);\n\n                const preferredMeta = pickNotDeprecated(meta, metaData);\n\n                const queryKey = queryKeysReplacement(preferLegacyKeys)(\n                    identifier,\n                    pickDataProvider(identifier, dataProviderName, resources),\n                    preferredMeta,\n                );\n\n                const resourceKeys = keys()\n                    .data(\n                        pickDataProvider(\n                            identifier,\n                            dataProviderName,\n                            resources,\n                        ),\n                    )\n                    .resource(identifier);\n\n                const previousQueries: PreviousQuery<TData>[] =\n                    queryClient.getQueriesData(\n                        resourceKeys.get(preferLegacyKeys),\n                    );\n\n                const mutationModePropOrContext =\n                    mutationMode ?? mutationModeContext;\n\n                await queryClient.cancelQueries(\n                    resourceKeys.get(preferLegacyKeys),\n                    undefined,\n                    {\n                        silent: true,\n                    },\n                );\n\n                if (mutationModePropOrContext !== \"pessimistic\") {\n                    if (optimisticUpdateMap.list) {\n                        // Set the previous queries to the new ones:\n                        queryClient.setQueriesData(\n                            resourceKeys\n                                .action(\"list\")\n                                .params(preferredMeta ?? {})\n                                .get(preferLegacyKeys),\n                            (previous?: GetListResponse<TData> | null) => {\n                                if (\n                                    typeof optimisticUpdateMap.list ===\n                                    \"function\"\n                                ) {\n                                    return optimisticUpdateMap.list(\n                                        previous,\n                                        values,\n                                        id,\n                                    );\n                                }\n\n                                if (!previous) {\n                                    return null;\n                                }\n\n                                const data = previous.data.map(\n                                    (record: TData) => {\n                                        if (\n                                            record.id?.toString() ===\n                                            id?.toString()\n                                        ) {\n                                            return {\n                                                id,\n                                                ...record,\n                                                ...values,\n                                            } as unknown as TData;\n                                        }\n                                        return record;\n                                    },\n                                );\n\n                                return {\n                                    ...previous,\n                                    data,\n                                };\n                            },\n                        );\n                    }\n\n                    if (optimisticUpdateMap.many) {\n                        queryClient.setQueriesData(\n                            resourceKeys.action(\"many\").get(preferLegacyKeys),\n                            (previous?: GetManyResponse<TData> | null) => {\n                                if (\n                                    typeof optimisticUpdateMap.many ===\n                                    \"function\"\n                                ) {\n                                    return optimisticUpdateMap.many(\n                                        previous,\n                                        values,\n                                        id,\n                                    );\n                                }\n\n                                if (!previous) {\n                                    return null;\n                                }\n\n                                const data = previous.data.map(\n                                    (record: TData) => {\n                                        if (\n                                            record.id?.toString() ===\n                                            id?.toString()\n                                        ) {\n                                            record = {\n                                                id,\n                                                ...record,\n                                                ...values,\n                                            } as unknown as TData;\n                                        }\n                                        return record;\n                                    },\n                                );\n                                return {\n                                    ...previous,\n                                    data,\n                                };\n                            },\n                        );\n                    }\n\n                    if (optimisticUpdateMap.detail) {\n                        queryClient.setQueriesData(\n                            resourceKeys\n                                .action(\"one\")\n                                .id(id)\n                                .params(preferredMeta ?? {})\n                                .get(preferLegacyKeys),\n                            (previous?: GetOneResponse<TData> | null) => {\n                                if (\n                                    typeof optimisticUpdateMap.detail ===\n                                    \"function\"\n                                ) {\n                                    return optimisticUpdateMap.detail(\n                                        previous,\n                                        values,\n                                        id,\n                                    );\n                                }\n\n                                if (!previous) {\n                                    return null;\n                                }\n\n                                return {\n                                    ...previous,\n                                    data: {\n                                        ...previous.data,\n                                        ...values,\n                                    },\n                                };\n                            },\n                        );\n                    }\n                }\n\n                return {\n                    previousQueries,\n                    queryKey,\n                };\n            },\n            onSettled: (\n                _data,\n                _error,\n                {\n                    id,\n                    resource: resourceName,\n                    dataProviderName,\n                    invalidates = [\"list\", \"many\", \"detail\"],\n                },\n            ) => {\n                const { identifier } = select(resourceName);\n\n                invalidateStore({\n                    resource: identifier,\n                    dataProviderName: pickDataProvider(\n                        identifier,\n                        dataProviderName,\n                        resources,\n                    ),\n                    invalidates,\n                    id,\n                });\n\n                notificationDispatch({\n                    type: ActionTypes.REMOVE,\n                    payload: { id, resource: identifier },\n                });\n            },\n            onSuccess: (\n                data,\n                {\n                    id,\n                    resource: resourceName,\n                    successNotification,\n                    dataProviderName: dataProviderNameFromProp,\n                    values,\n                    meta,\n                    metaData,\n                },\n                context,\n            ) => {\n                const { resource, identifier } = select(resourceName);\n                const resourceSingular = textTransformers.singular(identifier);\n\n                const dataProviderName = pickDataProvider(\n                    identifier,\n                    dataProviderNameFromProp,\n                    resources,\n                );\n\n                const combinedMeta = getMeta({\n                    resource,\n                    meta: pickNotDeprecated(meta, metaData),\n                });\n\n                const notificationConfig =\n                    typeof successNotification === \"function\"\n                        ? successNotification(data, { id, values }, identifier)\n                        : successNotification;\n\n                handleNotification(notificationConfig, {\n                    key: `${id}-${identifier}-notification`,\n                    description: translate(\n                        \"notifications.success\",\n                        \"Successful\",\n                    ),\n                    message: translate(\n                        \"notifications.editSuccess\",\n                        {\n                            resource: translate(\n                                `${identifier}.${identifier}`,\n                                resourceSingular,\n                            ),\n                        },\n                        `Successfully updated ${resourceSingular}`,\n                    ),\n                    type: \"success\",\n                });\n\n                publish?.({\n                    channel: `resources/${resource.name}`,\n                    type: \"updated\",\n                    payload: {\n                        ids: data.data?.id ? [data.data.id] : undefined,\n                    },\n                    date: new Date(),\n                    meta: {\n                        ...combinedMeta,\n                        dataProviderName,\n                    },\n                });\n\n                let previousData: any;\n                if (context) {\n                    const queryData = queryClient.getQueryData<\n                        UpdateResponse<TData>\n                    >(context.queryKey.detail(id));\n\n                    previousData = Object.keys(values || {}).reduce<any>(\n                        (acc, item) => {\n                            acc[item] = queryData?.data?.[item];\n                            return acc;\n                        },\n                        {},\n                    );\n                }\n\n                const {\n                    fields: _fields,\n                    operation: _operation,\n                    variables: _variables,\n                    ...rest\n                } = combinedMeta || {};\n                log?.mutate({\n                    action: \"update\",\n                    resource: resource.name,\n                    data: values,\n                    previousData,\n                    meta: {\n                        id,\n                        dataProviderName,\n                        ...rest,\n                    },\n                });\n            },\n            onError: (\n                err: TError,\n                { id, resource: resourceName, errorNotification, values },\n                context,\n            ) => {\n                const { identifier } = select(resourceName);\n\n                // set back the queries to the context:\n                if (context) {\n                    for (const query of context.previousQueries) {\n                        queryClient.setQueryData(query[0], query[1]);\n                    }\n                }\n\n                if (err.message !== \"mutationCancelled\") {\n                    checkError?.(err);\n\n                    const resourceSingular =\n                        textTransformers.singular(identifier);\n\n                    const notificationConfig =\n                        typeof errorNotification === \"function\"\n                            ? errorNotification(err, { id, values }, identifier)\n                            : errorNotification;\n\n                    handleNotification(notificationConfig, {\n                        key: `${id}-${identifier}-notification`,\n                        message: translate(\n                            \"notifications.editError\",\n                            {\n                                resource: translate(\n                                    `${identifier}.${identifier}`,\n                                    resourceSingular,\n                                ),\n                                statusCode: err.statusCode,\n                            },\n                            `Error when updating ${resourceSingular} (status code: ${err.statusCode})`,\n                        ),\n                        description: err.message,\n                        type: \"error\",\n                    });\n                }\n            },\n            mutationKey: keys().data().mutation(\"update\").get(preferLegacyKeys),\n            ...mutationOptions,\n            meta: {\n                ...mutationOptions?.meta,\n                ...getXRay(\"useUpdate\", preferLegacyKeys),\n            },\n        },\n    );\n\n    const { elapsedTime } = useLoadingOvertime({\n        isLoading: mutation.isLoading,\n        interval: overtimeOptions?.interval,\n        onInterval: overtimeOptions?.onInterval,\n    });\n\n    return { ...mutation, overtime: { elapsedTime } };\n};\n","import React, { ReactNode, useReducer } from \"react\";\nimport isEqual from \"lodash/isEqual\";\n\nimport { UndoableQueue } from \"@components\";\n\nimport { IUndoableQueue, IUndoableQueueContext } from \"../../interfaces\";\nimport { ActionTypes } from \"./actionTypes\";\n\nexport const UndoableQueueContext = React.createContext<IUndoableQueueContext>({\n    notifications: [],\n    notificationDispatch: () => false,\n});\n\nconst initialState: IUndoableQueue[] = [];\n\nexport const undoableQueueReducer = (state: IUndoableQueue[], action: any) => {\n    switch (action.type) {\n        case ActionTypes.ADD:\n            const newState = state.filter(\n                (notificationItem: IUndoableQueue) => {\n                    return !(\n                        isEqual(notificationItem.id, action.payload.id) &&\n                        notificationItem.resource == action.payload.resource\n                    );\n                },\n            );\n\n            return [\n                ...newState,\n                {\n                    ...action.payload,\n                    isRunning: true,\n                },\n            ];\n        case ActionTypes.REMOVE:\n            return state.filter(\n                (notificationItem: IUndoableQueue) =>\n                    !(\n                        isEqual(notificationItem.id, action.payload.id) &&\n                        notificationItem.resource == action.payload.resource\n                    ),\n            );\n        case ActionTypes.DECREASE_NOTIFICATION_SECOND:\n            return state.map((notificationItem: IUndoableQueue) => {\n                if (\n                    isEqual(notificationItem.id, action.payload.id) &&\n                    notificationItem.resource == action.payload.resource\n                ) {\n                    return {\n                        ...notificationItem,\n                        seconds: action.payload.seconds - 1000,\n                    };\n                }\n                return notificationItem;\n            });\n        default:\n            return state;\n    }\n};\n\nexport const UndoableQueueContextProvider: React.FC<{\n    children: ReactNode;\n}> = ({ children }) => {\n    const [notifications, notificationDispatch] = useReducer(\n        undoableQueueReducer,\n        initialState,\n    );\n\n    const notificationData = { notifications, notificationDispatch };\n\n    return (\n        <UndoableQueueContext.Provider value={notificationData}>\n            {children}\n            {typeof window !== \"undefined\" &&\n                notifications.map((notification) => (\n                    <UndoableQueue\n                        key={`${notification.id}-${notification.resource}-queue`}\n                        notification={notification}\n                    />\n                ))}\n        </UndoableQueueContext.Provider>\n    );\n};\n","import {\n    pickDataProvider,\n    pickNotDeprecated,\n    useActiveAuthProvider,\n} from \"@definitions/helpers\";\nimport { getXRay } from \"@refinedev/devtools-internal\";\nimport {\n    useMutation,\n    UseMutationOptions,\n    UseMutationResult,\n} from \"@tanstack/react-query\";\n\nimport {\n    useDataProvider,\n    useHandleNotification,\n    useInvalidate,\n    useLog,\n    useMeta,\n    useOnError,\n    usePublish,\n    useRefineContext,\n    useResource,\n    useTranslate,\n} from \"@hooks\";\nimport { useKeys } from \"@hooks/useKeys\";\nimport {\n    BaseRecord,\n    CreateResponse,\n    HttpError,\n    IQueryKeys,\n    MetaQuery,\n    SuccessErrorNotification,\n} from \"../../interfaces\";\nimport {\n    useLoadingOvertime,\n    UseLoadingOvertimeOptionsProps,\n    UseLoadingOvertimeReturnType,\n} from \"../useLoadingOvertime\";\n\ntype useCreateParams<TData, TError, TVariables> = {\n    /**\n     * Resource name for API data interactions\n     */\n    resource: string;\n    /**\n     * Values for mutation function\n     */\n    values: TVariables;\n    /**\n     * Meta data for `dataProvider`\n     */\n    meta?: MetaQuery;\n    /**\n     * Meta data for `dataProvider`\n     * @deprecated `metaData` is deprecated with refine@4, refine will pass `meta` instead, however, we still support `metaData` for backward compatibility.\n     */\n    metaData?: MetaQuery;\n    /**\n     * If there is more than one `dataProvider`, you should use the `dataProviderName` that you will use.\n     */\n    dataProviderName?: string;\n    /**\n     * You can use it to manage the invalidations that will occur at the end of the mutation.\n     */\n    invalidates?: Array<keyof IQueryKeys>;\n} & SuccessErrorNotification<CreateResponse<TData>, TError, TVariables>;\n\nexport type UseCreateReturnType<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n> = UseMutationResult<\n    CreateResponse<TData>,\n    TError,\n    useCreateParams<TData, TError, TVariables>,\n    unknown\n>;\n\nexport type UseCreateProps<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n> = {\n    mutationOptions?: Omit<\n        UseMutationOptions<\n            CreateResponse<TData>,\n            TError,\n            useCreateParams<TData, TError, TVariables>,\n            unknown\n        >,\n        \"mutationFn\" | \"onError\" | \"onSuccess\"\n    >;\n} & UseLoadingOvertimeOptionsProps;\n\n/**\n * `useCreate` is a modified version of `react-query`'s {@link https://react-query.tanstack.com/reference/useMutation `useMutation`} for create mutations.\n *\n * It uses `create` method as mutation function from the `dataProvider` which is passed to `<Refine>`.\n *\n * @see {@link https://refine.dev/docs/api-reference/core/hooks/data/useCreate} for more details.\n *\n * @typeParam TData - Result data of the query extends {@link https://refine.dev/docs/api-reference/core/interfaceReferences#baserecord `BaseRecord`}\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/api-reference/core/interfaceReferences/#httperror `HttpError`}\n * @typeParam TVariables - Values for mutation function\n *\n */\n\nexport const useCreate = <\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n>({\n    mutationOptions,\n    overtimeOptions,\n}: UseCreateProps<TData, TError, TVariables> = {}): UseCreateReturnType<\n    TData,\n    TError,\n    TVariables\n> &\n    UseLoadingOvertimeReturnType => {\n    const authProvider = useActiveAuthProvider();\n    const { mutate: checkError } = useOnError({\n        v3LegacyAuthProviderCompatible: Boolean(authProvider?.isLegacy),\n    });\n    const dataProvider = useDataProvider();\n    const invalidateStore = useInvalidate();\n    const { resources, select } = useResource();\n    const translate = useTranslate();\n    const publish = usePublish();\n    const { log } = useLog();\n    const handleNotification = useHandleNotification();\n    const getMeta = useMeta();\n    const {\n        options: { textTransformers },\n    } = useRefineContext();\n    const { keys, preferLegacyKeys } = useKeys();\n\n    const mutation = useMutation<\n        CreateResponse<TData>,\n        TError,\n        useCreateParams<TData, TError, TVariables>,\n        unknown\n    >(\n        ({\n            resource: resourceName,\n            values,\n            meta,\n            metaData,\n            dataProviderName,\n        }: useCreateParams<TData, TError, TVariables>) => {\n            const { resource, identifier } = select(resourceName);\n\n            const combinedMeta = getMeta({\n                resource,\n                meta: pickNotDeprecated(meta, metaData),\n            });\n\n            return dataProvider(\n                pickDataProvider(identifier, dataProviderName, resources),\n            ).create<TData, TVariables>({\n                resource: resource.name,\n                variables: values,\n                meta: combinedMeta,\n                metaData: combinedMeta,\n            });\n        },\n        {\n            onSuccess: (\n                data,\n                {\n                    resource: resourceName,\n                    successNotification: successNotificationFromProp,\n                    dataProviderName: dataProviderNameFromProp,\n                    invalidates = [\"list\", \"many\"],\n                    values,\n                    meta,\n                    metaData,\n                },\n            ) => {\n                const { resource, identifier } = select(resourceName);\n                const resourceSingular = textTransformers.singular(identifier);\n\n                const dataProviderName = pickDataProvider(\n                    identifier,\n                    dataProviderNameFromProp,\n                    resources,\n                );\n\n                const combinedMeta = getMeta({\n                    resource,\n                    meta: pickNotDeprecated(meta, metaData),\n                });\n\n                const notificationConfig =\n                    typeof successNotificationFromProp === \"function\"\n                        ? successNotificationFromProp(data, values, identifier)\n                        : successNotificationFromProp;\n\n                handleNotification(notificationConfig, {\n                    key: `create-${identifier}-notification`,\n                    message: translate(\n                        \"notifications.createSuccess\",\n                        {\n                            resource: translate(\n                                `${identifier}.${identifier}`,\n                                resourceSingular,\n                            ),\n                        },\n                        `Successfully created ${resourceSingular}`,\n                    ),\n                    description: translate(\"notifications.success\", \"Success\"),\n                    type: \"success\",\n                });\n\n                invalidateStore({\n                    resource: identifier,\n                    dataProviderName,\n                    invalidates,\n                });\n\n                publish?.({\n                    channel: `resources/${resource.name}`,\n                    type: \"created\",\n                    payload: {\n                        ids: data?.data?.id ? [data.data.id] : undefined,\n                    },\n                    date: new Date(),\n                    meta: {\n                        ...combinedMeta,\n                        dataProviderName,\n                    },\n                });\n\n                const {\n                    fields: _fields,\n                    operation: _operation,\n                    variables: _variables,\n                    ...rest\n                } = combinedMeta || {};\n                log?.mutate({\n                    action: \"create\",\n                    resource: resource.name,\n                    data: values,\n                    meta: {\n                        dataProviderName,\n                        id: data?.data?.id ?? undefined,\n                        ...rest,\n                    },\n                });\n            },\n            onError: (\n                err: TError,\n                {\n                    resource: resourceName,\n                    errorNotification: errorNotificationFromProp,\n                    values,\n                },\n            ) => {\n                checkError(err);\n\n                const { identifier } = select(resourceName);\n\n                const resourceSingular = textTransformers.singular(identifier);\n\n                const notificationConfig =\n                    typeof errorNotificationFromProp === \"function\"\n                        ? errorNotificationFromProp(err, values, identifier)\n                        : errorNotificationFromProp;\n\n                handleNotification(notificationConfig, {\n                    key: `create-${identifier}-notification`,\n                    description: err.message,\n                    message: translate(\n                        \"notifications.createError\",\n                        {\n                            resource: translate(\n                                `${identifier}.${identifier}`,\n                                resourceSingular,\n                            ),\n                            statusCode: err.statusCode,\n                        },\n                        `There was an error creating ${resourceSingular} (status code: ${err.statusCode})`,\n                    ),\n                    type: \"error\",\n                });\n            },\n            mutationKey: keys().data().mutation(\"create\").get(preferLegacyKeys),\n            ...mutationOptions,\n            meta: {\n                ...mutationOptions?.meta,\n                ...getXRay(\"useCreate\", preferLegacyKeys),\n            },\n        },\n    );\n\n    const { elapsedTime } = useLoadingOvertime({\n        isLoading: mutation.isLoading,\n        interval: overtimeOptions?.interval,\n        onInterval: overtimeOptions?.onInterval,\n    });\n\n    return { ...mutation, overtime: { elapsedTime } };\n};\n","import { getXRay } from \"@refinedev/devtools-internal\";\nimport {\n    useMutation,\n    UseMutationOptions,\n    UseMutationResult,\n    useQueryClient,\n} from \"@tanstack/react-query\";\n\nimport { ActionTypes } from \"@contexts/undoableQueue\";\nimport {\n    pickDataProvider,\n    pickNotDeprecated,\n    queryKeysReplacement,\n    useActiveAuthProvider,\n} from \"@definitions/helpers\";\nimport {\n    useCancelNotification,\n    useDataProvider,\n    useHandleNotification,\n    useInvalidate,\n    useLog,\n    useMeta,\n    useMutationMode,\n    useOnError,\n    usePublish,\n    useRefineContext,\n    useResource,\n    useTranslate,\n} from \"@hooks\";\nimport { useKeys } from \"@hooks/useKeys\";\nimport {\n    BaseKey,\n    BaseRecord,\n    DeleteOneResponse,\n    GetListResponse,\n    HttpError,\n    IQueryKeys,\n    MetaQuery,\n    MutationMode,\n    PrevContext as DeleteContext,\n    PreviousQuery,\n    SuccessErrorNotification,\n} from \"../../interfaces\";\nimport {\n    useLoadingOvertime,\n    UseLoadingOvertimeOptionsProps,\n    UseLoadingOvertimeReturnType,\n} from \"../useLoadingOvertime\";\n\nexport type DeleteParams<TData, TError, TVariables> = {\n    /**\n     * id for mutation function\n     */\n    id: BaseKey;\n    /**\n     * Resource name for API data interactions\n     */\n    resource: string;\n    /**\n     * [Determines when mutations are executed](/advanced-tutorials/mutation-mode.md)\n     */\n    mutationMode?: MutationMode;\n    /**\n     * Duration in ms to wait before executing the mutation when `mutationMode = \"undoable\"`\n     */\n    undoableTimeout?: number;\n    /**\n     * Provides a function to cancel the mutation when `mutationMode = \"undoable\"`\n     */\n    onCancel?: (cancelMutation: () => void) => void;\n    /**\n     * Metadata query for dataProvider\n     */\n    meta?: MetaQuery;\n    /**\n     * @deprecated `metaData` is deprecated with refine@4, refine will pass `meta` instead, however, we still support `metaData` for backward compatibility.\n     */\n    metaData?: MetaQuery;\n    /**\n     * If there is more than one `dataProvider`, you should use the `dataProviderName` that you will use.\n     * @default \"default\"\n     */\n    dataProviderName?: string;\n    /**\n     *  You can use it to manage the invalidations that will occur at the end of the mutation.\n     */\n    invalidates?: Array<keyof IQueryKeys>;\n    /**\n     * Values for mutation function\n     */\n    values?: TVariables;\n} & SuccessErrorNotification<DeleteOneResponse<TData>, TError, BaseKey>;\n\nexport type UseDeleteReturnType<\n    TData extends BaseRecord = BaseRecord,\n    TError = HttpError,\n    TVariables = {},\n> = UseMutationResult<\n    DeleteOneResponse<TData>,\n    TError,\n    DeleteParams<TData, TError, TVariables>,\n    DeleteContext<TData>\n> &\n    UseLoadingOvertimeReturnType;\n\nexport type UseDeleteProps<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n> = {\n    mutationOptions?: Omit<\n        UseMutationOptions<\n            DeleteOneResponse<TData>,\n            TError,\n            DeleteParams<TData, TError, TVariables>,\n            DeleteContext<TData>\n        >,\n        \"mutationFn\" | \"onError\" | \"onSuccess\" | \"onSettled\" | \"onMutate\"\n    >;\n} & UseLoadingOvertimeOptionsProps;\n\n/**\n * `useDelete` is a modified version of `react-query`'s {@link https://react-query.tanstack.com/reference/useMutation `useMutation`} for delete mutations.\n *\n * It uses `deleteOne` method as mutation function from the `dataProvider` which is passed to `<Refine>`.\n *\n * @see {@link https://refine.dev/docs/api-reference/core/hooks/data/useDelete} for more details.\n *\n * @typeParam TData - Result data of the query extends {@link https://refine.dev/docs/api-reference/core/interfaceReferences#baserecord `BaseRecord`}\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/api-reference/core/interfaceReferences/#httperror `HttpError`}\n * @typeParam TVariables - Values for params. default `{}`\n *\n */\nexport const useDelete = <\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n>({\n    mutationOptions,\n    overtimeOptions,\n}: UseDeleteProps<TData, TError, TVariables> = {}): UseDeleteReturnType<\n    TData,\n    TError,\n    TVariables\n> => {\n    const authProvider = useActiveAuthProvider();\n    const { mutate: checkError } = useOnError({\n        v3LegacyAuthProviderCompatible: Boolean(authProvider?.isLegacy),\n    });\n    const dataProvider = useDataProvider();\n\n    const { resources, select } = useResource();\n    const queryClient = useQueryClient();\n\n    const {\n        mutationMode: mutationModeContext,\n        undoableTimeout: undoableTimeoutContext,\n    } = useMutationMode();\n\n    const { notificationDispatch } = useCancelNotification();\n    const translate = useTranslate();\n    const publish = usePublish();\n    const { log } = useLog();\n    const handleNotification = useHandleNotification();\n    const invalidateStore = useInvalidate();\n    const getMeta = useMeta();\n    const {\n        options: { textTransformers },\n    } = useRefineContext();\n    const { keys, preferLegacyKeys } = useKeys();\n\n    const mutation = useMutation<\n        DeleteOneResponse<TData>,\n        TError,\n        DeleteParams<TData, TError, TVariables>,\n        DeleteContext<TData>\n    >(\n        ({\n            id,\n            mutationMode,\n            undoableTimeout,\n            resource: resourceName,\n            onCancel,\n            meta,\n            metaData,\n            dataProviderName,\n            values,\n        }) => {\n            const { resource, identifier } = select(resourceName);\n\n            const combinedMeta = getMeta({\n                resource,\n                meta: pickNotDeprecated(meta, metaData),\n            });\n\n            const mutationModePropOrContext =\n                mutationMode ?? mutationModeContext;\n\n            const undoableTimeoutPropOrContext =\n                undoableTimeout ?? undoableTimeoutContext;\n\n            if (!(mutationModePropOrContext === \"undoable\")) {\n                return dataProvider(\n                    pickDataProvider(identifier, dataProviderName, resources),\n                ).deleteOne<TData, TVariables>({\n                    resource: resource.name,\n                    id,\n                    meta: combinedMeta,\n                    metaData: combinedMeta,\n                    variables: values,\n                });\n            }\n\n            const deletePromise = new Promise<DeleteOneResponse<TData>>(\n                (resolve, reject) => {\n                    const doMutation = () => {\n                        dataProvider(\n                            pickDataProvider(\n                                identifier,\n                                dataProviderName,\n                                resources,\n                            ),\n                        )\n                            .deleteOne<TData, TVariables>({\n                                resource: resource.name,\n                                id,\n                                meta: combinedMeta,\n                                metaData: combinedMeta,\n                                variables: values,\n                            })\n                            .then((result) => resolve(result))\n                            .catch((err) => reject(err));\n                    };\n\n                    const cancelMutation = () => {\n                        reject({ message: \"mutationCancelled\" });\n                    };\n\n                    if (onCancel) {\n                        onCancel(cancelMutation);\n                    }\n\n                    notificationDispatch({\n                        type: ActionTypes.ADD,\n                        payload: {\n                            id,\n                            resource: identifier,\n                            cancelMutation: cancelMutation,\n                            doMutation: doMutation,\n                            seconds: undoableTimeoutPropOrContext,\n                            isSilent: !!onCancel,\n                        },\n                    });\n                },\n            );\n            return deletePromise;\n        },\n        {\n            onMutate: async ({\n                id,\n                resource: resourceName,\n                mutationMode,\n                dataProviderName,\n                meta,\n                metaData,\n            }) => {\n                const { identifier } = select(resourceName);\n\n                const preferredMeta = pickNotDeprecated(meta, metaData);\n\n                const queryKey = queryKeysReplacement(preferLegacyKeys)(\n                    identifier,\n                    pickDataProvider(identifier, dataProviderName, resources),\n                    preferredMeta,\n                );\n\n                const resourceKeys = keys()\n                    .data(\n                        pickDataProvider(\n                            identifier,\n                            dataProviderName,\n                            resources,\n                        ),\n                    )\n                    .resource(identifier);\n\n                const mutationModePropOrContext =\n                    mutationMode ?? mutationModeContext;\n\n                await queryClient.cancelQueries(\n                    resourceKeys.get(preferLegacyKeys),\n                    undefined,\n                    {\n                        silent: true,\n                    },\n                );\n\n                const previousQueries: PreviousQuery<TData>[] =\n                    queryClient.getQueriesData(\n                        resourceKeys.get(preferLegacyKeys),\n                    );\n\n                if (mutationModePropOrContext !== \"pessimistic\") {\n                    // Set the previous queries to the new ones:\n                    queryClient.setQueriesData(\n                        resourceKeys\n                            .action(\"list\")\n                            .params(preferredMeta ?? {})\n                            .get(preferLegacyKeys),\n                        (previous?: GetListResponse<TData> | null) => {\n                            if (!previous) {\n                                return null;\n                            }\n                            const data = previous.data.filter(\n                                (record: TData) =>\n                                    record.id?.toString() !== id.toString(),\n                            );\n\n                            return {\n                                data,\n                                total: previous.total - 1,\n                            };\n                        },\n                    );\n\n                    queryClient.setQueriesData(\n                        resourceKeys.action(\"many\").get(preferLegacyKeys),\n                        (previous?: GetListResponse<TData> | null) => {\n                            if (!previous) {\n                                return null;\n                            }\n                            const data = previous.data.filter(\n                                (record: TData) => {\n                                    return (\n                                        record.id?.toString() !== id?.toString()\n                                    );\n                                },\n                            );\n\n                            return {\n                                ...previous,\n                                data,\n                            };\n                        },\n                    );\n                }\n\n                return {\n                    previousQueries,\n                    queryKey,\n                };\n            },\n            onSettled: (\n                _data,\n                _error,\n                {\n                    id,\n                    resource: resourceName,\n                    dataProviderName,\n                    invalidates = [\"list\", \"many\"],\n                },\n            ) => {\n                const { identifier } = select(resourceName);\n\n                // invalidate the cache for the list and many queries:\n                invalidateStore({\n                    resource: identifier,\n                    dataProviderName: pickDataProvider(\n                        identifier,\n                        dataProviderName,\n                        resources,\n                    ),\n                    invalidates,\n                });\n\n                notificationDispatch({\n                    type: ActionTypes.REMOVE,\n                    payload: { id, resource: identifier },\n                });\n            },\n            onSuccess: (\n                _data,\n                {\n                    id,\n                    resource: resourceName,\n                    successNotification,\n                    dataProviderName: dataProviderNameFromProp,\n                    meta,\n                    metaData,\n                },\n                context,\n            ) => {\n                const { resource, identifier } = select(resourceName);\n                const resourceSingular = textTransformers.singular(identifier);\n\n                const dataProviderName = pickDataProvider(\n                    identifier,\n                    dataProviderNameFromProp,\n                    resources,\n                );\n\n                const combinedMeta = getMeta({\n                    resource,\n                    meta: pickNotDeprecated(meta, metaData),\n                });\n\n                // Remove the queries from the cache:\n                queryClient.removeQueries(context?.queryKey.detail(id));\n\n                const notificationConfig =\n                    typeof successNotification === \"function\"\n                        ? successNotification(_data, id, identifier)\n                        : successNotification;\n\n                handleNotification(notificationConfig, {\n                    key: `${id}-${identifier}-notification`,\n                    description: translate(\"notifications.success\", \"Success\"),\n                    message: translate(\n                        \"notifications.deleteSuccess\",\n                        {\n                            resource: translate(\n                                `${identifier}.${identifier}`,\n                                resourceSingular,\n                            ),\n                        },\n                        `Successfully deleted a ${resourceSingular}`,\n                    ),\n                    type: \"success\",\n                });\n\n                publish?.({\n                    channel: `resources/${resource.name}`,\n                    type: \"deleted\",\n                    payload: {\n                        ids: [id],\n                    },\n                    date: new Date(),\n                    meta: {\n                        ...combinedMeta,\n                        dataProviderName,\n                    },\n                });\n\n                const {\n                    fields: _fields,\n                    operation: _operation,\n                    variables: _variables,\n                    ...rest\n                } = combinedMeta || {};\n                log?.mutate({\n                    action: \"delete\",\n                    resource: resource.name,\n                    meta: {\n                        id,\n                        dataProviderName,\n                        ...rest,\n                    },\n                });\n\n                // Remove the queries from the cache:\n                queryClient.removeQueries(context?.queryKey.detail(id));\n            },\n            onError: (\n                err: TError,\n                { id, resource: resourceName, errorNotification },\n                context,\n            ) => {\n                const { identifier } = select(resourceName);\n\n                // set back the queries to the context:\n                if (context) {\n                    for (const query of context.previousQueries) {\n                        queryClient.setQueryData(query[0], query[1]);\n                    }\n                }\n\n                if (err.message !== \"mutationCancelled\") {\n                    checkError(err);\n\n                    const resourceSingular =\n                        textTransformers.singular(identifier);\n\n                    const notificationConfig =\n                        typeof errorNotification === \"function\"\n                            ? errorNotification(err, id, identifier)\n                            : errorNotification;\n\n                    handleNotification(notificationConfig, {\n                        key: `${id}-${identifier}-notification`,\n                        message: translate(\n                            \"notifications.deleteError\",\n                            {\n                                resource: resourceSingular,\n                                statusCode: err.statusCode,\n                            },\n                            `Error (status code: ${err.statusCode})`,\n                        ),\n                        description: err.message,\n                        type: \"error\",\n                    });\n                }\n            },\n            mutationKey: keys().data().mutation(\"delete\").get(preferLegacyKeys),\n            ...mutationOptions,\n            meta: {\n                ...mutationOptions?.meta,\n                ...getXRay(\"useDelete\", preferLegacyKeys),\n            },\n        },\n    );\n\n    const { elapsedTime } = useLoadingOvertime({\n        isLoading: mutation.isLoading,\n        interval: overtimeOptions?.interval,\n        onInterval: overtimeOptions?.onInterval,\n    });\n\n    return { ...mutation, overtime: { elapsedTime } };\n};\n","import { getXRay } from \"@refinedev/devtools-internal\";\nimport {\n    useMutation,\n    UseMutationOptions,\n    UseMutationResult,\n} from \"@tanstack/react-query\";\n\nimport {\n    handleMultiple,\n    pickDataProvider,\n    pickNotDeprecated,\n} from \"@definitions\";\nimport {\n    useDataProvider,\n    useHandleNotification,\n    useInvalidate,\n    useLog,\n    useMeta,\n    usePublish,\n    useRefineContext,\n    useResource,\n    useTranslate,\n} from \"@hooks\";\nimport { useKeys } from \"@hooks/useKeys\";\nimport {\n    BaseRecord,\n    CreateManyResponse,\n    HttpError,\n    IQueryKeys,\n    MetaQuery,\n    SuccessErrorNotification,\n} from \"../../interfaces\";\nimport {\n    useLoadingOvertime,\n    UseLoadingOvertimeOptionsProps,\n    UseLoadingOvertimeReturnType,\n} from \"../useLoadingOvertime\";\n\ntype useCreateManyParams<TData, TError, TVariables> = {\n    resource: string;\n    values: TVariables[];\n    meta?: MetaQuery;\n    metaData?: MetaQuery;\n    dataProviderName?: string;\n    invalidates?: Array<keyof IQueryKeys>;\n} & SuccessErrorNotification<CreateManyResponse<TData>, TError, TVariables[]>;\n\nexport type UseCreateManyReturnType<\n    TData extends BaseRecord = BaseRecord,\n    TError = HttpError,\n    TVariables = {},\n> = UseMutationResult<\n    CreateManyResponse<TData>,\n    TError,\n    useCreateManyParams<TData, TError, TVariables>,\n    unknown\n>;\n\nexport type UseCreateManyProps<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n> = {\n    mutationOptions?: Omit<\n        UseMutationOptions<\n            CreateManyResponse<TData>,\n            TError,\n            useCreateManyParams<TData, TError, TVariables>\n        >,\n        \"mutationFn\" | \"onError\" | \"onSuccess\"\n    >;\n} & UseLoadingOvertimeOptionsProps;\n\n/**\n * `useCreateMany` is a modified version of `react-query`'s {@link https://react-query.tanstack.com/reference/useMutation `useMutation`} for multiple create mutations.\n *\n * It uses `createMany` method as mutation function from the `dataProvider` which is passed to `<Refine>`.\n *\n * @see {@link https://refine.dev/docs/api-reference/core/hooks/data/useCreateMany} for more details.\n *\n * @typeParam TData - Result data of the query extends {@link https://refine.dev/docs/core/interfaceReferences#baserecord `BaseRecord`}\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/core/interfaceReferences#httperror `HttpError`}\n * @typeParam TVariables - Values for mutation function\n *\n */\nexport const useCreateMany = <\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n>({\n    mutationOptions,\n    overtimeOptions,\n}: UseCreateManyProps<TData, TError, TVariables> = {}): UseCreateManyReturnType<\n    TData,\n    TError,\n    TVariables\n> &\n    UseLoadingOvertimeReturnType => {\n    const dataProvider = useDataProvider();\n    const { resources, select } = useResource();\n    const translate = useTranslate();\n    const publish = usePublish();\n    const handleNotification = useHandleNotification();\n    const invalidateStore = useInvalidate();\n    const { log } = useLog();\n    const getMeta = useMeta();\n    const {\n        options: { textTransformers },\n    } = useRefineContext();\n    const { keys, preferLegacyKeys } = useKeys();\n\n    const mutation = useMutation<\n        CreateManyResponse<TData>,\n        TError,\n        useCreateManyParams<TData, TError, TVariables>\n    >(\n        ({\n            resource: resourceName,\n            values,\n            meta,\n            metaData,\n            dataProviderName,\n        }: useCreateManyParams<TData, TError, TVariables>) => {\n            const { resource, identifier } = select(resourceName);\n\n            const combinedMeta = getMeta({\n                resource,\n                meta: pickNotDeprecated(meta, metaData),\n            });\n\n            const selectedDataProvider = dataProvider(\n                pickDataProvider(identifier, dataProviderName, resources),\n            );\n\n            if (selectedDataProvider.createMany) {\n                return selectedDataProvider.createMany<TData, TVariables>({\n                    resource: resource.name,\n                    variables: values,\n                    meta: combinedMeta,\n                    metaData: combinedMeta,\n                });\n            } else {\n                return handleMultiple(\n                    values.map((val) =>\n                        selectedDataProvider.create<TData, TVariables>({\n                            resource: resource.name,\n                            variables: val,\n                            meta: combinedMeta,\n                            metaData: combinedMeta,\n                        }),\n                    ),\n                );\n            }\n        },\n        {\n            onSuccess: (\n                response,\n                {\n                    resource: resourceName,\n                    successNotification,\n                    dataProviderName: dataProviderNameFromProp,\n                    invalidates = [\"list\", \"many\"],\n                    values,\n                    meta,\n                    metaData,\n                },\n            ) => {\n                const { resource, identifier } = select(resourceName);\n                const resourcePlural = textTransformers.plural(identifier);\n\n                const dataProviderName = pickDataProvider(\n                    identifier,\n                    dataProviderNameFromProp,\n                    resources,\n                );\n\n                const combinedMeta = getMeta({\n                    resource,\n                    meta: pickNotDeprecated(meta, metaData),\n                });\n\n                const notificationConfig =\n                    typeof successNotification === \"function\"\n                        ? successNotification(response, values, identifier)\n                        : successNotification;\n\n                handleNotification(notificationConfig, {\n                    key: `createMany-${identifier}-notification`,\n                    message: translate(\n                        \"notifications.createSuccess\",\n                        {\n                            resource: translate(\n                                `${identifier}.${identifier}`,\n                                identifier,\n                            ),\n                        },\n                        `Successfully created ${resourcePlural}`,\n                    ),\n                    description: translate(\"notifications.success\", \"Success\"),\n                    type: \"success\",\n                });\n\n                invalidateStore({\n                    resource: identifier,\n                    dataProviderName,\n                    invalidates,\n                });\n\n                const ids = response?.data\n                    .filter((item) => item?.id !== undefined)\n                    .map((item) => item.id!);\n                publish?.({\n                    channel: `resources/${resource.name}`,\n                    type: \"created\",\n                    payload: {\n                        ids,\n                    },\n                    date: new Date(),\n                    meta: {\n                        ...combinedMeta,\n                        dataProviderName,\n                    },\n                });\n\n                const {\n                    fields: _fields,\n                    operation: _operation,\n                    variables: _variables,\n                    ...rest\n                } = combinedMeta || {};\n                log?.mutate({\n                    action: \"createMany\",\n                    resource: resource.name,\n                    data: values,\n                    meta: {\n                        dataProviderName,\n                        ids,\n                        ...rest,\n                    },\n                });\n            },\n            onError: (\n                err: TError,\n                { resource: resourceName, errorNotification, values },\n            ) => {\n                const { identifier } = select(resourceName);\n\n                const notificationConfig =\n                    typeof errorNotification === \"function\"\n                        ? errorNotification(err, values, identifier)\n                        : errorNotification;\n\n                handleNotification(notificationConfig, {\n                    key: `createMany-${identifier}-notification`,\n                    description: err.message,\n                    message: translate(\n                        \"notifications.createError\",\n                        {\n                            resource: translate(\n                                `${identifier}.${identifier}`,\n                                identifier,\n                            ),\n                            statusCode: err.statusCode,\n                        },\n                        `There was an error creating ${identifier} (status code: ${err.statusCode}`,\n                    ),\n                    type: \"error\",\n                });\n            },\n            mutationKey: keys()\n                .data()\n                .mutation(\"createMany\")\n                .get(preferLegacyKeys),\n            ...mutationOptions,\n            meta: {\n                ...mutationOptions?.meta,\n                ...getXRay(\"useCreateMany\", preferLegacyKeys),\n            },\n        },\n    );\n\n    const { elapsedTime } = useLoadingOvertime({\n        isLoading: mutation.isLoading,\n        interval: overtimeOptions?.interval,\n        onInterval: overtimeOptions?.onInterval,\n    });\n\n    return { ...mutation, overtime: { elapsedTime } };\n};\n","import { getXRay } from \"@refinedev/devtools-internal\";\nimport {\n    useMutation,\n    UseMutationOptions,\n    UseMutationResult,\n    useQueryClient,\n} from \"@tanstack/react-query\";\n\nimport { ActionTypes } from \"@contexts/undoableQueue\";\nimport {\n    handleMultiple,\n    pickDataProvider,\n    pickNotDeprecated,\n    queryKeysReplacement,\n    useActiveAuthProvider,\n} from \"@definitions/helpers\";\nimport {\n    useCancelNotification,\n    useDataProvider,\n    useHandleNotification,\n    useInvalidate,\n    useLog,\n    useMeta,\n    useMutationMode,\n    useOnError,\n    usePublish,\n    useRefineContext,\n    useResource,\n    useTranslate,\n} from \"@hooks\";\nimport { useKeys } from \"@hooks/useKeys\";\nimport {\n    BaseKey,\n    BaseRecord,\n    GetListResponse,\n    GetManyResponse,\n    GetOneResponse,\n    HttpError,\n    IQueryKeys,\n    MetaQuery,\n    MutationMode,\n    OptimisticUpdateManyMapType,\n    PrevContext as UpdateContext,\n    QueryResponse,\n    SuccessErrorNotification,\n    UpdateManyResponse,\n} from \"../../interfaces\";\nimport {\n    useLoadingOvertime,\n    UseLoadingOvertimeOptionsProps,\n    UseLoadingOvertimeReturnType,\n} from \"../useLoadingOvertime\";\n\ntype UpdateManyParams<TData, TError, TVariables> = {\n    /**\n     * ids for mutation function\n     */\n    ids: BaseKey[];\n    /**\n     * Resource name for API data interactions\n     */\n    resource: string;\n    /**\n     * [Determines when mutations are executed](/advanced-tutorials/mutation-mode.md)\n     */\n    mutationMode?: MutationMode;\n    /**\n     * Duration in ms to wait before executing the mutation when `mutationMode = \"undoable\"`\n     */\n    undoableTimeout?: number;\n    /**\n     * Provides a function to cancel the mutation when `mutationMode = \"undoable\"`\n     */\n    onCancel?: (cancelMutation: () => void) => void;\n    /**\n     * Values for mutation function\n     */\n    values: TVariables;\n    /**\n     * meta data for `dataProvider`\n     */\n    meta?: MetaQuery;\n    /**\n     * meta data for `dataProvider`\n     * @deprecated `metaData` is deprecated with refine@4, refine will pass `meta` instead, however, we still support `metaData` for backward compatibility.\n     */\n    metaData?: MetaQuery;\n    /**\n     * If there is more than one `dataProvider`, you should use the `dataProviderName` that you will use.\n     * @default \"default\"\n     */\n    dataProviderName?: string;\n    /**\n     *  You can use it to manage the invalidations that will occur at the end of the mutation.\n     */\n    invalidates?: Array<keyof IQueryKeys>;\n    /**\n     * You can use it to manage the invalidations that will occur at the end of the mutation.\n     * @default {\n     *   list: true,\n     *   many: true,\n     *   detail: true,\n     * }\n     */\n    optimisticUpdateMap?: OptimisticUpdateManyMapType<TData, TVariables>;\n} & SuccessErrorNotification<\n    UpdateManyResponse<TData>,\n    TError,\n    { ids: BaseKey[]; values: TVariables }\n>;\n\ntype UseUpdateManyReturnType<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n> = UseMutationResult<\n    UpdateManyResponse<TData>,\n    TError,\n    UpdateManyParams<TData, TError, TVariables>,\n    UpdateContext<TData>\n> &\n    UseLoadingOvertimeReturnType;\n\nexport type UseUpdateManyProps<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n> = {\n    mutationOptions?: Omit<\n        UseMutationOptions<\n            UpdateManyResponse<TData>,\n            TError,\n            UpdateManyParams<TData, TError, TVariables>,\n            UpdateContext<TData>\n        >,\n        \"mutationFn\" | \"onError\" | \"onSuccess\" | \"onSettled\" | \"onMutate\"\n    >;\n} & UseLoadingOvertimeOptionsProps;\n\n/**\n * `useUpdateMany` is a modified version of `react-query`'s {@link https://react-query.tanstack.com/reference/useMutation `useMutation`} for multiple update mutations.\n *\n * It uses `updateMany` method as mutation function from the `dataProvider` which is passed to `<Refine>`.\n *\n * @see {@link https://refine.dev/docs/api-reference/core/hooks/data/useUpdateMany} for more details.\n *\n * @typeParam TData - Result data of the query extends {@link https://refine.dev/docs/core/interfaceReferences#baserecord `BaseRecord`}\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/core/interfaceReferences#httperror `HttpError`}\n * @typeParam TVariables - Values for mutation function\n *\n */\nexport const useUpdateMany = <\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n>({\n    mutationOptions,\n    overtimeOptions,\n}: UseUpdateManyProps<TData, TError, TVariables> = {}): UseUpdateManyReturnType<\n    TData,\n    TError,\n    TVariables\n> => {\n    const { resources, select } = useResource();\n    const queryClient = useQueryClient();\n    const dataProvider = useDataProvider();\n    const translate = useTranslate();\n    const {\n        mutationMode: mutationModeContext,\n        undoableTimeout: undoableTimeoutContext,\n    } = useMutationMode();\n    const authProvider = useActiveAuthProvider();\n    const { mutate: checkError } = useOnError({\n        v3LegacyAuthProviderCompatible: Boolean(authProvider?.isLegacy),\n    });\n    const { notificationDispatch } = useCancelNotification();\n    const publish = usePublish();\n    const handleNotification = useHandleNotification();\n    const invalidateStore = useInvalidate();\n    const { log } = useLog();\n    const getMeta = useMeta();\n    const {\n        options: { textTransformers },\n    } = useRefineContext();\n    const { keys, preferLegacyKeys } = useKeys();\n\n    const mutation = useMutation<\n        UpdateManyResponse<TData>,\n        TError,\n        UpdateManyParams<TData, TError, TVariables>,\n        UpdateContext<TData>\n    >(\n        ({\n            ids,\n            values,\n            resource: resourceName,\n            onCancel,\n            mutationMode,\n            undoableTimeout,\n            meta,\n            metaData,\n            dataProviderName,\n        }: UpdateManyParams<TData, TError, TVariables>) => {\n            const { resource, identifier } = select(resourceName);\n\n            const combinedMeta = getMeta({\n                resource,\n                meta: pickNotDeprecated(meta, metaData),\n            });\n\n            const mutationModePropOrContext =\n                mutationMode ?? mutationModeContext;\n\n            const undoableTimeoutPropOrContext =\n                undoableTimeout ?? undoableTimeoutContext;\n\n            const selectedDataProvider = dataProvider(\n                pickDataProvider(identifier, dataProviderName, resources),\n            );\n\n            const mutationFn = () => {\n                if (selectedDataProvider.updateMany) {\n                    return selectedDataProvider.updateMany<TData, TVariables>({\n                        resource: resource.name,\n                        ids,\n                        variables: values,\n                        meta: combinedMeta,\n                        metaData: combinedMeta,\n                    });\n                } else {\n                    return handleMultiple(\n                        ids.map((id) =>\n                            selectedDataProvider.update<TData, TVariables>({\n                                resource: resource.name,\n                                id,\n                                variables: values,\n                                meta: combinedMeta,\n                                metaData: combinedMeta,\n                            }),\n                        ),\n                    );\n                }\n            };\n\n            if (!(mutationModePropOrContext === \"undoable\")) {\n                return mutationFn();\n            }\n\n            const updatePromise = new Promise<UpdateManyResponse<TData>>(\n                (resolve, reject) => {\n                    const doMutation = () => {\n                        mutationFn()\n                            .then((result) => resolve(result))\n                            .catch((err) => reject(err));\n                    };\n\n                    const cancelMutation = () => {\n                        reject({ message: \"mutationCancelled\" });\n                    };\n\n                    if (onCancel) {\n                        onCancel(cancelMutation);\n                    }\n\n                    notificationDispatch({\n                        type: ActionTypes.ADD,\n                        payload: {\n                            id: ids,\n                            resource: identifier,\n                            cancelMutation: cancelMutation,\n                            doMutation: doMutation,\n                            seconds: undoableTimeoutPropOrContext,\n                            isSilent: !!onCancel,\n                        },\n                    });\n                },\n            );\n            return updatePromise;\n        },\n\n        {\n            onMutate: async ({\n                resource: resourceName,\n                ids,\n                values,\n                mutationMode,\n                dataProviderName,\n                meta,\n                metaData,\n                optimisticUpdateMap = { list: true, many: true, detail: true },\n            }) => {\n                const { identifier } = select(resourceName);\n                const preferredMeta = pickNotDeprecated(meta, metaData);\n\n                const queryKey = queryKeysReplacement(preferLegacyKeys)(\n                    identifier,\n                    pickDataProvider(identifier, dataProviderName, resources),\n                    pickNotDeprecated(meta, metaData),\n                );\n\n                const resourceKeys = keys()\n                    .data(\n                        pickDataProvider(\n                            identifier,\n                            dataProviderName,\n                            resources,\n                        ),\n                    )\n                    .resource(identifier);\n\n                const mutationModePropOrContext =\n                    mutationMode ?? mutationModeContext;\n\n                await queryClient.cancelQueries(\n                    resourceKeys.get(preferLegacyKeys),\n                    undefined,\n                    {\n                        silent: true,\n                    },\n                );\n\n                const previousQueries = queryClient.getQueriesData<\n                    QueryResponse<TData>\n                >(resourceKeys.get(preferLegacyKeys));\n\n                if (mutationModePropOrContext !== \"pessimistic\") {\n                    if (optimisticUpdateMap.list) {\n                        // Set the previous queries to the new ones:\n                        queryClient.setQueriesData(\n                            resourceKeys\n                                .action(\"list\")\n                                .params(preferredMeta ?? {})\n                                .get(preferLegacyKeys),\n                            (previous?: GetListResponse<TData> | null) => {\n                                if (\n                                    typeof optimisticUpdateMap.list ===\n                                    \"function\"\n                                ) {\n                                    return optimisticUpdateMap.list(\n                                        previous,\n                                        values,\n                                        ids,\n                                    );\n                                }\n\n                                if (!previous) {\n                                    return null;\n                                }\n\n                                const data = previous.data.map(\n                                    (record: TData) => {\n                                        if (\n                                            record.id !== undefined &&\n                                            ids\n                                                .filter(\n                                                    (id) => id !== undefined,\n                                                )\n                                                .map(String)\n                                                .includes(record.id.toString())\n                                        ) {\n                                            return {\n                                                ...record,\n                                                ...values,\n                                            };\n                                        }\n\n                                        return record;\n                                    },\n                                );\n\n                                return {\n                                    ...previous,\n                                    data,\n                                };\n                            },\n                        );\n                    }\n\n                    if (optimisticUpdateMap.many) {\n                        queryClient.setQueriesData(\n                            resourceKeys.action(\"many\").get(preferLegacyKeys),\n                            (previous?: GetManyResponse<TData> | null) => {\n                                if (\n                                    typeof optimisticUpdateMap.many ===\n                                    \"function\"\n                                ) {\n                                    return optimisticUpdateMap.many(\n                                        previous,\n                                        values,\n                                        ids,\n                                    );\n                                }\n\n                                if (!previous) {\n                                    return null;\n                                }\n\n                                const data = previous.data.map(\n                                    (record: TData) => {\n                                        if (\n                                            record.id !== undefined &&\n                                            ids\n                                                .filter(\n                                                    (id) => id !== undefined,\n                                                )\n                                                .map(String)\n                                                .includes(record.id.toString())\n                                        ) {\n                                            return {\n                                                ...record,\n                                                ...values,\n                                            };\n                                        }\n                                        return record;\n                                    },\n                                );\n                                return {\n                                    ...previous,\n                                    data,\n                                };\n                            },\n                        );\n                    }\n\n                    if (optimisticUpdateMap.detail) {\n                        for (const id of ids) {\n                            queryClient.setQueriesData(\n                                resourceKeys\n                                    .action(\"one\")\n                                    .id(id)\n                                    .params(preferredMeta ?? {})\n                                    .get(preferLegacyKeys),\n                                (previous?: GetOneResponse<TData> | null) => {\n                                    if (\n                                        typeof optimisticUpdateMap.detail ===\n                                        \"function\"\n                                    ) {\n                                        return optimisticUpdateMap.detail(\n                                            previous,\n                                            values,\n                                            id,\n                                        );\n                                    }\n\n                                    if (!previous) {\n                                        return null;\n                                    }\n\n                                    const data = {\n                                        ...previous.data,\n                                        ...values,\n                                    };\n                                    return {\n                                        ...previous,\n                                        data,\n                                    };\n                                },\n                            );\n                        }\n                    }\n                }\n\n                return {\n                    previousQueries,\n                    queryKey,\n                };\n            },\n            onSettled: (\n                _data,\n                _error,\n                { ids, resource: resourceName, dataProviderName },\n            ) => {\n                const { identifier } = select(resourceName);\n\n                // invalidate the cache for the list and many queries:\n                invalidateStore({\n                    resource: identifier,\n                    invalidates: [\"list\", \"many\"],\n                    dataProviderName: pickDataProvider(\n                        identifier,\n                        dataProviderName,\n                        resources,\n                    ),\n                });\n\n                ids.forEach((id) =>\n                    invalidateStore({\n                        resource: identifier,\n                        invalidates: [\"detail\"],\n                        dataProviderName: pickDataProvider(\n                            identifier,\n                            dataProviderName,\n                            resources,\n                        ),\n                        id,\n                    }),\n                );\n\n                notificationDispatch({\n                    type: ActionTypes.REMOVE,\n                    payload: { id: ids, resource: identifier },\n                });\n            },\n            onSuccess: (\n                data,\n                {\n                    ids,\n                    resource: resourceName,\n                    meta,\n                    metaData,\n                    dataProviderName: dataProviderNameFromProp,\n                    successNotification,\n                    values,\n                },\n                context,\n            ) => {\n                const { resource, identifier } = select(resourceName);\n                const resourceSingular = textTransformers.singular(identifier);\n\n                const dataProviderName = pickDataProvider(\n                    identifier,\n                    dataProviderNameFromProp,\n                    resources,\n                );\n\n                const combinedMeta = getMeta({\n                    resource,\n                    meta: pickNotDeprecated(meta, metaData),\n                });\n\n                const notificationConfig =\n                    typeof successNotification === \"function\"\n                        ? successNotification(data, { ids, values }, identifier)\n                        : successNotification;\n\n                handleNotification(notificationConfig, {\n                    key: `${ids}-${identifier}-notification`,\n                    description: translate(\n                        \"notifications.success\",\n                        \"Successful\",\n                    ),\n                    message: translate(\n                        \"notifications.editSuccess\",\n                        {\n                            resource: translate(\n                                `${identifier}.${identifier}`,\n                                identifier,\n                            ),\n                        },\n                        `Successfully updated ${resourceSingular}`,\n                    ),\n                    type: \"success\",\n                });\n\n                publish?.({\n                    channel: `resources/${resource.name}`,\n                    type: \"updated\",\n                    payload: {\n                        ids: ids.map(String),\n                    },\n                    date: new Date(),\n                    meta: {\n                        ...combinedMeta,\n                        dataProviderName,\n                    },\n                });\n\n                const previousData: any[] = [];\n                if (context) {\n                    ids.forEach((id) => {\n                        const queryData = queryClient.getQueryData<\n                            UpdateManyResponse<TData>\n                        >(context.queryKey.detail(id));\n\n                        previousData.push(\n                            Object.keys(values || {}).reduce<any>(\n                                (acc, item: any) => {\n                                    acc[item] = queryData?.data?.[item];\n                                    return acc;\n                                },\n                                {},\n                            ),\n                        );\n                    });\n                }\n\n                const {\n                    fields: _fields,\n                    operation: _operation,\n                    variables: _variables,\n                    ...rest\n                } = combinedMeta || {};\n                log?.mutate({\n                    action: \"updateMany\",\n                    resource: resource.name,\n                    data: values,\n                    previousData,\n                    meta: {\n                        ids,\n                        dataProviderName,\n                        ...rest,\n                    },\n                });\n            },\n            onError: (\n                err: TError,\n                { ids, resource: resourceName, errorNotification, values },\n                context,\n            ) => {\n                const { identifier } = select(resourceName);\n\n                // set back the queries to the context:\n                if (context) {\n                    for (const query of context.previousQueries) {\n                        queryClient.setQueryData(query[0], query[1]);\n                    }\n                }\n\n                if (err.message !== \"mutationCancelled\") {\n                    checkError?.(err);\n\n                    const resourceSingular =\n                        textTransformers.singular(identifier);\n\n                    const notificationConfig =\n                        typeof errorNotification === \"function\"\n                            ? errorNotification(\n                                  err,\n                                  { ids, values },\n                                  identifier,\n                              )\n                            : errorNotification;\n\n                    handleNotification(notificationConfig, {\n                        key: `${ids}-${identifier}-updateMany-error-notification`,\n                        message: translate(\n                            \"notifications.editError\",\n                            {\n                                resource: resourceSingular,\n                                statusCode: err.statusCode,\n                            },\n                            `Error when updating ${resourceSingular} (status code: ${err.statusCode})`,\n                        ),\n                        description: err.message,\n                        type: \"error\",\n                    });\n                }\n            },\n            mutationKey: keys()\n                .data()\n                .mutation(\"updateMany\")\n                .get(preferLegacyKeys),\n            ...mutationOptions,\n            meta: {\n                ...mutationOptions?.meta,\n                ...getXRay(\"useUpdateMany\", preferLegacyKeys),\n            },\n        },\n    );\n\n    const { elapsedTime } = useLoadingOvertime({\n        isLoading: mutation.isLoading,\n        interval: overtimeOptions?.interval,\n        onInterval: overtimeOptions?.onInterval,\n    });\n\n    return { ...mutation, overtime: { elapsedTime } };\n};\n","import { getXRay } from \"@refinedev/devtools-internal\";\nimport {\n    useMutation,\n    UseMutationOptions,\n    UseMutationResult,\n    useQueryClient,\n} from \"@tanstack/react-query\";\n\nimport { ActionTypes } from \"@contexts/undoableQueue\";\nimport {\n    handleMultiple,\n    pickDataProvider,\n    pickNotDeprecated,\n    queryKeysReplacement,\n    useActiveAuthProvider,\n} from \"@definitions\";\nimport {\n    useCancelNotification,\n    useDataProvider,\n    useHandleNotification,\n    useInvalidate,\n    useLog,\n    useMeta,\n    useMutationMode,\n    useOnError,\n    usePublish,\n    useRefineContext,\n    useResource,\n    useTranslate,\n} from \"@hooks\";\nimport { useKeys } from \"@hooks/useKeys\";\nimport {\n    BaseKey,\n    BaseRecord,\n    DeleteManyResponse,\n    GetListResponse,\n    HttpError,\n    IQueryKeys,\n    MetaQuery,\n    MutationMode,\n    PrevContext as DeleteContext,\n    PreviousQuery,\n    SuccessErrorNotification,\n} from \"../../interfaces\";\nimport {\n    useLoadingOvertime,\n    UseLoadingOvertimeOptionsProps,\n    UseLoadingOvertimeReturnType,\n} from \"../useLoadingOvertime\";\n\nexport type DeleteManyParams<TData, TError, TVariables> = {\n    /**\n     * ids for mutation function\n     */\n    ids: BaseKey[];\n    /**\n     * Resource name for API data interactions\n     */\n    resource: string;\n    /**\n     * [Determines when mutations are executed](/advanced-tutorials/mutation-mode.md)\n     */\n    mutationMode?: MutationMode;\n    /**\n     * Duration in ms to wait before executing the mutation when `mutationMode = \"undoable\"`\n     */\n    undoableTimeout?: number;\n    /**\n     * Provides a function to cancel the mutation when `mutationMode = \"undoable\"`\n     */\n    onCancel?: (cancelMutation: () => void) => void;\n    /**\n     * Metadata query for dataProvider\n     */\n    meta?: MetaQuery;\n    /**\n     * @deprecated `metaData` is deprecated with refine@4, refine will pass `meta` instead, however, we still support `metaData` for backward compatibility.\n     */\n    metaData?: MetaQuery;\n    /**\n     * If there is more than one `dataProvider`, you should use the `dataProviderName` that you will use.\n     * @default \"default\"\n     */\n    dataProviderName?: string;\n    /**\n     *  You can use it to manage the invalidations that will occur at the end of the mutation.\n     */\n    invalidates?: Array<keyof IQueryKeys>;\n    /**\n     * Values for mutation function\n     */\n    values?: TVariables;\n} & SuccessErrorNotification<DeleteManyResponse<TData>, TError, BaseKey[]>;\n\nexport type UseDeleteManyReturnType<\n    TData extends BaseRecord = BaseRecord,\n    TError = HttpError,\n    TVariables = {},\n> = UseMutationResult<\n    DeleteManyResponse<TData>,\n    TError,\n    DeleteManyParams<TData, TError, TVariables>,\n    unknown\n> &\n    UseLoadingOvertimeReturnType;\n\nexport type UseDeleteManyProps<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n> = {\n    mutationOptions?: Omit<\n        UseMutationOptions<\n            DeleteManyResponse<TData>,\n            TError,\n            DeleteManyParams<TData, TError, TVariables>,\n            DeleteContext<TData>\n        >,\n        \"mutationFn\" | \"onError\" | \"onSuccess\" | \"onSettled\" | \"onMutate\"\n    >;\n} & UseLoadingOvertimeOptionsProps;\n\n/**\n * `useDeleteMany` is a modified version of `react-query`'s {@link https://react-query.tanstack.com/reference/useMutation `useMutation`} for multiple delete mutations.\n *\n * It uses `deleteMany` method as mutation function from the `dataProvider` which is passed to `<Refine>`.\n *\n * @see {@link https://refine.dev/docs/api-reference/core/hooks/data/useDeleteMany} for more details.\n *\n * @typeParam TData - Result data of the query extends {@link https://refine.dev/docs/core/interfaceReferences#baserecord `BaseRecord`}\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/core/interfaceReferences#httperror `HttpError`}\n * @typeParam TVariables - Values for params. default `{}`\n *\n */\nexport const useDeleteMany = <\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n>({\n    mutationOptions,\n    overtimeOptions,\n}: UseDeleteManyProps<TData, TError, TVariables> = {}): UseDeleteManyReturnType<\n    TData,\n    TError,\n    TVariables\n> => {\n    const authProvider = useActiveAuthProvider();\n    const { mutate: checkError } = useOnError({\n        v3LegacyAuthProviderCompatible: Boolean(authProvider?.isLegacy),\n    });\n\n    const {\n        mutationMode: mutationModeContext,\n        undoableTimeout: undoableTimeoutContext,\n    } = useMutationMode();\n    const dataProvider = useDataProvider();\n    const { notificationDispatch } = useCancelNotification();\n    const translate = useTranslate();\n    const publish = usePublish();\n    const handleNotification = useHandleNotification();\n    const invalidateStore = useInvalidate();\n    const { log } = useLog();\n    const { resources, select } = useResource();\n    const queryClient = useQueryClient();\n    const getMeta = useMeta();\n    const {\n        options: { textTransformers },\n    } = useRefineContext();\n    const { keys, preferLegacyKeys } = useKeys();\n\n    const mutation = useMutation<\n        DeleteManyResponse<TData>,\n        TError,\n        DeleteManyParams<TData, TError, TVariables>,\n        DeleteContext<TData>\n    >(\n        ({\n            resource: resourceName,\n            ids,\n            mutationMode,\n            undoableTimeout,\n            onCancel,\n            meta,\n            metaData,\n            dataProviderName,\n            values,\n        }: DeleteManyParams<TData, TError, TVariables>) => {\n            const { resource, identifier } = select(resourceName);\n\n            const combinedMeta = getMeta({\n                resource,\n                meta: pickNotDeprecated(meta, metaData),\n            });\n\n            const mutationModePropOrContext =\n                mutationMode ?? mutationModeContext;\n\n            const undoableTimeoutPropOrContext =\n                undoableTimeout ?? undoableTimeoutContext;\n\n            const selectedDataProvider = dataProvider(\n                pickDataProvider(identifier, dataProviderName, resources),\n            );\n\n            const mutationFn = () => {\n                if (selectedDataProvider.deleteMany) {\n                    return selectedDataProvider.deleteMany<TData, TVariables>({\n                        resource: resource.name,\n                        ids,\n                        meta: combinedMeta,\n                        metaData: combinedMeta,\n                        variables: values,\n                    });\n                } else {\n                    return handleMultiple(\n                        ids.map((id) =>\n                            selectedDataProvider.deleteOne<TData, TVariables>({\n                                resource: resource.name,\n                                id,\n                                meta: combinedMeta,\n                                metaData: combinedMeta,\n                                variables: values,\n                            }),\n                        ),\n                    );\n                }\n            };\n\n            if (!(mutationModePropOrContext === \"undoable\")) {\n                return mutationFn();\n            }\n\n            const updatePromise = new Promise<DeleteManyResponse<TData>>(\n                (resolve, reject) => {\n                    const doMutation = () => {\n                        mutationFn()\n                            .then((result) => resolve(result))\n                            .catch((err) => reject(err));\n                    };\n\n                    const cancelMutation = () => {\n                        reject({ message: \"mutationCancelled\" });\n                    };\n\n                    if (onCancel) {\n                        onCancel(cancelMutation);\n                    }\n\n                    notificationDispatch({\n                        type: ActionTypes.ADD,\n                        payload: {\n                            id: ids,\n                            resource: identifier,\n                            cancelMutation: cancelMutation,\n                            doMutation: doMutation,\n                            seconds: undoableTimeoutPropOrContext,\n                            isSilent: !!onCancel,\n                        },\n                    });\n                },\n            );\n            return updatePromise;\n        },\n        {\n            onMutate: async ({\n                ids,\n                resource: resourceName,\n                mutationMode,\n                dataProviderName,\n                meta,\n                metaData,\n            }) => {\n                const { identifier } = select(resourceName);\n\n                const preferredMeta = pickNotDeprecated(meta, metaData);\n\n                const queryKey = queryKeysReplacement(preferLegacyKeys)(\n                    identifier,\n                    pickDataProvider(identifier, dataProviderName, resources),\n                    preferredMeta,\n                );\n\n                const resourceKeys = keys()\n                    .data(\n                        pickDataProvider(\n                            identifier,\n                            dataProviderName,\n                            resources,\n                        ),\n                    )\n                    .resource(identifier);\n\n                const mutationModePropOrContext =\n                    mutationMode ?? mutationModeContext;\n\n                await queryClient.cancelQueries(\n                    resourceKeys.get(preferLegacyKeys),\n                    undefined,\n                    {\n                        silent: true,\n                    },\n                );\n\n                const previousQueries: PreviousQuery<TData>[] =\n                    queryClient.getQueriesData(\n                        resourceKeys.get(preferLegacyKeys),\n                    );\n\n                if (mutationModePropOrContext !== \"pessimistic\") {\n                    // Set the previous queries to the new ones:\n                    queryClient.setQueriesData(\n                        resourceKeys\n                            .action(\"list\")\n                            .params(preferredMeta ?? {})\n                            .get(preferLegacyKeys),\n                        (previous?: GetListResponse<TData> | null) => {\n                            if (!previous) {\n                                return null;\n                            }\n\n                            const data = previous.data.filter(\n                                (item) =>\n                                    item.id &&\n                                    !ids\n                                        .map(String)\n                                        .includes(item.id.toString()),\n                            );\n\n                            return {\n                                data,\n                                total: previous.total - 1,\n                            };\n                        },\n                    );\n\n                    queryClient.setQueriesData(\n                        resourceKeys.action(\"many\").get(preferLegacyKeys),\n                        (previous?: GetListResponse<TData> | null) => {\n                            if (!previous) {\n                                return null;\n                            }\n\n                            const data = previous.data.filter(\n                                (record: TData) => {\n                                    if (record.id) {\n                                        return !ids\n                                            .map(String)\n                                            .includes(record.id.toString());\n                                    }\n                                    return false;\n                                },\n                            );\n\n                            return {\n                                ...previous,\n                                data,\n                            };\n                        },\n                    );\n\n                    for (const id of ids) {\n                        queryClient.setQueriesData(\n                            resourceKeys\n                                .action(\"one\")\n                                .id(id)\n                                .params(preferredMeta)\n                                .get(preferLegacyKeys),\n                            (previous?: any | null) => {\n                                if (!previous || previous.data.id == id) {\n                                    return null;\n                                }\n                                return {\n                                    ...previous,\n                                };\n                            },\n                        );\n                    }\n                }\n\n                return {\n                    previousQueries,\n                    queryKey,\n                };\n            },\n            // Always refetch after error or success:\n            onSettled: (\n                _data,\n                _error,\n                {\n                    resource: resourceName,\n                    ids,\n                    dataProviderName,\n                    invalidates = [\"list\", \"many\"],\n                },\n            ) => {\n                const { identifier } = select(resourceName);\n\n                // invalidate the cache for the list and many queries:\n                invalidateStore({\n                    resource: identifier,\n                    dataProviderName: pickDataProvider(\n                        identifier,\n                        dataProviderName,\n                        resources,\n                    ),\n                    invalidates,\n                });\n\n                notificationDispatch({\n                    type: ActionTypes.REMOVE,\n                    payload: { id: ids, resource: identifier },\n                });\n            },\n            onSuccess: (\n                _data,\n                {\n                    ids,\n                    resource: resourceName,\n                    meta,\n                    metaData,\n                    dataProviderName: dataProviderNameFromProp,\n                    successNotification,\n                },\n                context,\n            ) => {\n                const { resource, identifier } = select(resourceName);\n\n                const dataProviderName = pickDataProvider(\n                    identifier,\n                    dataProviderNameFromProp,\n                    resources,\n                );\n\n                const combinedMeta = getMeta({\n                    resource,\n                    meta: pickNotDeprecated(meta, metaData),\n                });\n\n                // Remove the queries from the cache:\n                ids.forEach((id) =>\n                    queryClient.removeQueries(context?.queryKey.detail(id)),\n                );\n\n                const notificationConfig =\n                    typeof successNotification === \"function\"\n                        ? successNotification(_data, ids, identifier)\n                        : successNotification;\n\n                handleNotification(notificationConfig, {\n                    key: `${ids}-${identifier}-notification`,\n                    description: translate(\"notifications.success\", \"Success\"),\n                    message: translate(\n                        \"notifications.deleteSuccess\",\n                        {\n                            resource: translate(\n                                `${identifier}.${identifier}`,\n                                identifier,\n                            ),\n                        },\n                        `Successfully deleted ${identifier}`,\n                    ),\n                    type: \"success\",\n                });\n\n                publish?.({\n                    channel: `resources/${resource.name}`,\n                    type: \"deleted\",\n                    payload: { ids },\n                    date: new Date(),\n                    meta: {\n                        ...combinedMeta,\n                        dataProviderName,\n                    },\n                });\n\n                const {\n                    fields: _fields,\n                    operation: _operation,\n                    variables: _variables,\n                    ...rest\n                } = combinedMeta || {};\n                log?.mutate({\n                    action: \"deleteMany\",\n                    resource: resource.name,\n                    meta: {\n                        ids,\n                        dataProviderName,\n                        ...rest,\n                    },\n                });\n\n                // Remove the queries from the cache:\n                ids.forEach((id) =>\n                    queryClient.removeQueries(context?.queryKey.detail(id)),\n                );\n            },\n            onError: (\n                err,\n                { ids, resource: resourceName, errorNotification },\n                context,\n            ) => {\n                const { identifier } = select(resourceName);\n\n                // set back the queries to the context:\n                if (context) {\n                    for (const query of context.previousQueries) {\n                        queryClient.setQueryData(query[0], query[1]);\n                    }\n                }\n\n                if (err.message !== \"mutationCancelled\") {\n                    checkError(err);\n                    const resourceSingular =\n                        textTransformers.singular(identifier);\n\n                    const notificationConfig =\n                        typeof errorNotification === \"function\"\n                            ? errorNotification(err, ids, identifier)\n                            : errorNotification;\n\n                    handleNotification(notificationConfig, {\n                        key: `${ids}-${identifier}-notification`,\n                        message: translate(\n                            \"notifications.deleteError\",\n                            {\n                                resource: resourceSingular,\n                                statusCode: err.statusCode,\n                            },\n                            `Error (status code: ${err.statusCode})`,\n                        ),\n                        description: err.message,\n                        type: \"error\",\n                    });\n                }\n            },\n            mutationKey: keys()\n                .data()\n                .mutation(\"deleteMany\")\n                .get(preferLegacyKeys),\n            ...mutationOptions,\n            meta: {\n                ...mutationOptions?.meta,\n                ...getXRay(\"useDeleteMany\", preferLegacyKeys),\n            },\n        },\n    );\n\n    const { elapsedTime } = useLoadingOvertime({\n        isLoading: mutation.isLoading,\n        interval: overtimeOptions?.interval,\n        onInterval: overtimeOptions?.onInterval,\n    });\n\n    return { ...mutation, overtime: { elapsedTime } };\n};\n","import { pickNotDeprecated } from \"@definitions/index\";\nimport { useDataProvider, useResource } from \"@hooks\";\n\nexport const useApiUrl = (dataProviderName?: string): string => {\n    const dataProvider = useDataProvider();\n    const { resource } = useResource();\n\n    const { getApiUrl } = dataProvider(\n        dataProviderName ??\n            pickNotDeprecated(resource?.meta, resource?.options)\n                ?.dataProviderName,\n    );\n\n    return getApiUrl();\n};\n","import {\n    QueryObserverResult,\n    useQuery,\n    UseQueryOptions,\n} from \"@tanstack/react-query\";\nimport { getXRay } from \"@refinedev/devtools-internal\";\n\nimport { pickNotDeprecated, useActiveAuthProvider } from \"@definitions/helpers\";\nimport {\n    useDataProvider,\n    useHandleNotification,\n    useMeta,\n    useOnError,\n    useTranslate,\n} from \"@hooks\";\nimport {\n    BaseRecord,\n    CrudFilters,\n    CrudSorting,\n    CustomResponse,\n    HttpError,\n    MetaQuery,\n    Prettify,\n    SuccessErrorNotification,\n} from \"../../interfaces\";\nimport {\n    useLoadingOvertime,\n    UseLoadingOvertimeOptionsProps,\n    UseLoadingOvertimeReturnType,\n} from \"../useLoadingOvertime\";\nimport { useKeys } from \"@hooks/useKeys\";\n\ninterface UseCustomConfig<TQuery, TPayload> {\n    /**\n     * @deprecated `sort` is deprecated, use `sorters` instead.\n     */\n    sort?: CrudSorting;\n    sorters?: CrudSorting;\n    filters?: CrudFilters;\n    query?: TQuery;\n    payload?: TPayload;\n    headers?: {};\n}\n\nexport type UseCustomProps<TQueryFnData, TError, TQuery, TPayload, TData> = {\n    /**\n     * request's URL\n     */\n    url: string;\n    /**\n     * request's method (`GET`, `POST`, etc.)\n     */\n    method: \"get\" | \"delete\" | \"head\" | \"options\" | \"post\" | \"put\" | \"patch\";\n    /**\n     * The config of your request. You can send headers, payload, query, filters and sorters using this field\n     */\n    config?: UseCustomConfig<TQuery, TPayload>;\n    /**\n     * react-query's [useQuery](https://tanstack.com/query/v4/docs/reference/useQuery) options\"\n     */\n    queryOptions?: UseQueryOptions<\n        CustomResponse<TQueryFnData>,\n        TError,\n        CustomResponse<TData>\n    >;\n    /**\n     * meta data for `dataProvider`\n     */\n    meta?: MetaQuery;\n    /**\n     * meta data for `dataProvider`\n     * @deprecated `metaData` is deprecated with refine@4, refine will pass `meta` instead, however, we still support `metaData` for backward compatibility.\n     */\n    metaData?: MetaQuery;\n    /**\n     * If there is more than one `dataProvider`, you should use the `dataProviderName` that you will use.\n     */\n    dataProviderName?: string;\n} & SuccessErrorNotification<\n    CustomResponse<TData>,\n    TError,\n    Prettify<UseCustomConfig<TQuery, TPayload> & MetaQuery>\n> &\n    UseLoadingOvertimeOptionsProps;\n\n/**\n * `useCustom` is a modified version of `react-query`'s {@link https://react-query.tanstack.com/guides/queries `useQuery`} used for custom requests.\n *\n * It uses the `custom` method from the `dataProvider` which is passed to `<Refine>`.\n *\n * @see {@link https://refine.dev/docs/api-reference/core/hooks/data/useCustom} for more details.\n *\n * @typeParam TQueryFnData - Result data returned by the query function. Extends {@link https://refine.dev/docs/api-reference/core/interfaceReferences#baserecord `BaseRecord`}\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/api-reference/core/interfaceReferences#httperror `HttpError`}\n * @typeParam TQuery - Values for query params\n * @typeParam TPayload - Values for params\n * @typeParam TData - Result data returned by the `select` function. Extends {@link https://refine.dev/docs/api-reference/core/interfaceReferences#baserecord `BaseRecord`}. Defaults to `TQueryFnData`\n *\n */\n\nexport const useCustom = <\n    TQueryFnData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TQuery = unknown,\n    TPayload = unknown,\n    TData extends BaseRecord = TQueryFnData,\n>({\n    url,\n    method,\n    config,\n    queryOptions,\n    successNotification,\n    errorNotification,\n    meta,\n    metaData,\n    dataProviderName,\n    overtimeOptions,\n}: UseCustomProps<\n    TQueryFnData,\n    TError,\n    TQuery,\n    TPayload,\n    TData\n>): QueryObserverResult<CustomResponse<TData>, TError> &\n    UseLoadingOvertimeReturnType => {\n    const dataProvider = useDataProvider();\n    const authProvider = useActiveAuthProvider();\n    const { mutate: checkError } = useOnError({\n        v3LegacyAuthProviderCompatible: Boolean(authProvider?.isLegacy),\n    });\n    const translate = useTranslate();\n    const handleNotification = useHandleNotification();\n    const getMeta = useMeta();\n    const { keys, preferLegacyKeys } = useKeys();\n\n    const preferredMeta = pickNotDeprecated(meta, metaData);\n\n    const { custom } = dataProvider(dataProviderName);\n\n    const combinedMeta = getMeta({ meta: preferredMeta });\n\n    if (custom) {\n        const queryResponse = useQuery<\n            CustomResponse<TQueryFnData>,\n            TError,\n            CustomResponse<TData>\n        >({\n            queryKey: keys()\n                .data(dataProviderName)\n                .mutation(\"custom\")\n                .params({\n                    method,\n                    url,\n                    ...config,\n                    ...(preferredMeta || {}),\n                })\n                .get(preferLegacyKeys),\n            queryFn: ({ queryKey, pageParam, signal }) =>\n                custom<TQueryFnData>({\n                    url,\n                    method,\n                    ...config,\n                    meta: {\n                        ...combinedMeta,\n                        queryContext: {\n                            queryKey,\n                            pageParam,\n                            signal,\n                        },\n                    },\n                    metaData: {\n                        ...combinedMeta,\n                        queryContext: {\n                            queryKey,\n                            pageParam,\n                            signal,\n                        },\n                    },\n                }),\n            ...queryOptions,\n            onSuccess: (data) => {\n                queryOptions?.onSuccess?.(data);\n\n                const notificationConfig =\n                    typeof successNotification === \"function\"\n                        ? successNotification(data, {\n                              ...config,\n                              ...combinedMeta,\n                          })\n                        : successNotification;\n\n                handleNotification(notificationConfig);\n            },\n            onError: (err: TError) => {\n                checkError(err);\n                queryOptions?.onError?.(err);\n\n                const notificationConfig =\n                    typeof errorNotification === \"function\"\n                        ? errorNotification(err, {\n                              ...config,\n                              ...combinedMeta,\n                          })\n                        : errorNotification;\n\n                handleNotification(notificationConfig, {\n                    key: `${method}-notification`,\n                    message: translate(\n                        \"notifications.error\",\n                        { statusCode: err.statusCode },\n                        `Error (status code: ${err.statusCode})`,\n                    ),\n                    description: err.message,\n                    type: \"error\",\n                });\n            },\n            meta: {\n                ...queryOptions?.meta,\n                ...getXRay(\"useCustom\", preferLegacyKeys),\n            },\n        });\n        const { elapsedTime } = useLoadingOvertime({\n            isLoading: queryResponse.isFetching,\n            interval: overtimeOptions?.interval,\n            onInterval: overtimeOptions?.onInterval,\n        });\n\n        return { ...queryResponse, overtime: { elapsedTime } };\n    } else {\n        throw Error(\"Not implemented custom on data provider.\");\n    }\n};\n","import {\n    useMutation,\n    UseMutationOptions,\n    UseMutationResult,\n} from \"@tanstack/react-query\";\nimport { getXRay } from \"@refinedev/devtools-internal\";\n\nimport {\n    useDataProvider,\n    useHandleNotification,\n    useTranslate,\n    useOnError,\n    useMeta,\n} from \"@hooks\";\nimport {\n    CreateResponse,\n    BaseRecord,\n    HttpError,\n    SuccessErrorNotification,\n    MetaQuery,\n    Prettify,\n} from \"../../interfaces\";\nimport { pickNotDeprecated, useActiveAuthProvider } from \"@definitions/helpers\";\nimport {\n    useLoadingOvertime,\n    UseLoadingOvertimeOptionsProps,\n    UseLoadingOvertimeReturnType,\n} from \"../useLoadingOvertime\";\nimport { useKeys } from \"@hooks/useKeys\";\n\ninterface UseCustomMutationConfig {\n    headers?: {};\n}\n\ntype useCustomMutationParams<TData, TError, TVariables> = {\n    url: string;\n    method: \"post\" | \"put\" | \"patch\" | \"delete\";\n    values: TVariables;\n    /**\n     * Meta data for `dataProvider`\n     */\n    meta?: MetaQuery;\n    /**\n     * Meta data for `dataProvider`\n     * @deprecated `metaData` is deprecated with refine@4, refine will pass `meta` instead, however, we still support `metaData` for backward compatibility.\n     */\n    metaData?: MetaQuery;\n    dataProviderName?: string;\n    config?: UseCustomMutationConfig;\n} & SuccessErrorNotification<\n    CreateResponse<TData>,\n    TError,\n    Prettify<UseCustomMutationConfig & MetaQuery>\n>;\n\nexport type UseCustomMutationReturnType<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n> = UseMutationResult<\n    CreateResponse<TData>,\n    TError,\n    useCustomMutationParams<TData, TError, TVariables>,\n    unknown\n>;\n\nexport type UseCustomMutationProps<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n> = {\n    mutationOptions?: Omit<\n        UseMutationOptions<\n            CreateResponse<TData>,\n            TError,\n            useCustomMutationParams<TData, TError, TVariables>,\n            unknown\n        >,\n        \"mutationFn\" | \"onError\" | \"onSuccess\"\n    >;\n} & UseLoadingOvertimeOptionsProps;\n\n/**\n * `useCustomMutation` is a modified version of `react-query`'s {@link https://react-query.tanstack.com/reference/useMutation `useMutation`} for create mutations.\n *\n * It uses the `custom` method from the `dataProvider` which is passed to `<Refine>`.\n *\n * @see {@link https://refine.dev/docs/api-reference/core/hooks/data/useCustomMutation} for more details.\n *\n * @typeParam TData - Result data of the query extends {@link https://refine.dev/docs/api-reference/core/interfaceReferences#baserecord `BaseRecord`}\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/api-reference/core/interfaceReferences/#httperror `HttpError`}\n * @typeParam TVariables - Values for mutation function\n *\n */\n\nexport const useCustomMutation = <\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n>({\n    mutationOptions,\n    overtimeOptions,\n}: UseCustomMutationProps<\n    TData,\n    TError,\n    TVariables\n> = {}): UseCustomMutationReturnType<TData, TError, TVariables> &\n    UseLoadingOvertimeReturnType => {\n    const authProvider = useActiveAuthProvider();\n    const { mutate: checkError } = useOnError({\n        v3LegacyAuthProviderCompatible: Boolean(authProvider?.isLegacy),\n    });\n    const handleNotification = useHandleNotification();\n    const dataProvider = useDataProvider();\n    const translate = useTranslate();\n    const getMeta = useMeta();\n    const { keys, preferLegacyKeys } = useKeys();\n\n    const mutation = useMutation<\n        CreateResponse<TData>,\n        TError,\n        useCustomMutationParams<TData, TError, TVariables>,\n        unknown\n    >(\n        ({\n            url,\n            method,\n            values,\n            meta,\n            metaData,\n            dataProviderName,\n            config,\n        }: useCustomMutationParams<TData, TError, TVariables>) => {\n            const combinedMeta = getMeta({\n                meta: pickNotDeprecated(meta, metaData),\n            });\n\n            const { custom } = dataProvider(dataProviderName);\n\n            if (custom) {\n                return custom<TData>({\n                    url,\n                    method,\n                    payload: values,\n                    meta: combinedMeta,\n                    metaData: combinedMeta,\n                    headers: { ...config?.headers },\n                });\n            }\n\n            throw Error(\"Not implemented custom on data provider.\");\n        },\n        {\n            onSuccess: (\n                data,\n                {\n                    successNotification: successNotificationFromProp,\n                    config,\n                    meta,\n                    metaData,\n                },\n            ) => {\n                const notificationConfig =\n                    typeof successNotificationFromProp === \"function\"\n                        ? successNotificationFromProp(data, {\n                              ...config,\n                              ...(pickNotDeprecated(meta, metaData) || {}),\n                          })\n                        : successNotificationFromProp;\n\n                handleNotification(notificationConfig);\n            },\n            onError: (\n                err: TError,\n                {\n                    errorNotification: errorNotificationFromProp,\n                    method,\n                    config,\n                    meta,\n                    metaData,\n                },\n            ) => {\n                checkError(err);\n\n                const notificationConfig =\n                    typeof errorNotificationFromProp === \"function\"\n                        ? errorNotificationFromProp(err, {\n                              ...config,\n                              ...(pickNotDeprecated(meta, metaData) || {}),\n                          })\n                        : errorNotificationFromProp;\n\n                handleNotification(notificationConfig, {\n                    key: `${method}-notification`,\n                    message: translate(\n                        \"notifications.error\",\n                        { statusCode: err.statusCode },\n                        `Error (status code: ${err.statusCode})`,\n                    ),\n                    description: err.message,\n                    type: \"error\",\n                });\n            },\n            mutationKey: keys()\n                .data()\n                .mutation(\"customMutation\")\n                .get(preferLegacyKeys),\n            ...mutationOptions,\n            meta: {\n                ...mutationOptions?.meta,\n                ...getXRay(\"useCustomMutation\", preferLegacyKeys),\n            },\n        },\n    );\n\n    const { elapsedTime } = useLoadingOvertime({\n        isLoading: mutation.isLoading,\n        interval: overtimeOptions?.interval,\n        onInterval: overtimeOptions?.onInterval,\n    });\n\n    return { ...mutation, overtime: { elapsedTime } };\n};\n","import { useCallback, useContext } from \"react\";\n\nimport { DataContext } from \"@contexts/data\";\nimport {\n    IDataContextProvider,\n    IDataMultipleContextProvider,\n} from \"../../interfaces\";\n\nexport const useDataProvider = (): ((\n    /**\n     * The name of the `data provider` you want to access\n     */\n    dataProviderName?: string,\n) => IDataContextProvider) => {\n    const context = useContext<IDataMultipleContextProvider>(DataContext);\n\n    const handleDataProvider = useCallback(\n        (dataProviderName?: string) => {\n            if (dataProviderName) {\n                const dataProvider = context[dataProviderName];\n                if (!dataProvider) {\n                    throw new Error(\n                        `\"${dataProviderName}\" Data provider not found`,\n                    );\n                }\n                return context[dataProviderName];\n            }\n            if (context.default) {\n                return context.default;\n            } else\n                throw new Error(\n                    `There is no \"default\" data provider. Please pass dataProviderName.`,\n                );\n        },\n        [context],\n    );\n\n    return handleDataProvider;\n};\n","import React from \"react\";\nimport { ReactNode } from \"react\";\n\nimport {\n    IDataContextProvider,\n    IDataMultipleContextProvider,\n} from \"../../interfaces\";\n\nexport const defaultDataProvider = () => {\n    return {\n        default: {\n            create: () => Promise.resolve({ data: { id: 1 } }),\n            createMany: () => Promise.resolve({ data: [] }),\n            deleteOne: () => Promise.resolve({ data: { id: 1 } }),\n            deleteMany: () => Promise.resolve({ data: [] }),\n            getList: () => Promise.resolve({ data: [], total: 0 }),\n            getMany: () => Promise.resolve({ data: [] }),\n            getOne: () => Promise.resolve({ data: { id: 1 } }),\n            update: () => Promise.resolve({ data: { id: 1 } }),\n            updateMany: () => Promise.resolve({ data: [] }),\n            custom: () => Promise.resolve({ data: {} }),\n            getApiUrl: () => \"\",\n        },\n    };\n};\n\nexport const DataContext = React.createContext<IDataMultipleContextProvider>(\n    defaultDataProvider() as IDataMultipleContextProvider,\n);\n\nexport const DataContextProvider: React.FC<\n    | IDataMultipleContextProvider\n    | (IDataContextProvider & {\n          children: ReactNode;\n      })\n> = ({ children, ...rest }) => {\n    let dataProviders;\n    if (!rest.getList || !rest.getOne) {\n        dataProviders = rest as IDataMultipleContextProvider;\n    } else {\n        dataProviders = {\n            default: rest,\n        } as IDataMultipleContextProvider;\n    }\n    return (\n        <DataContext.Provider value={dataProviders}>\n            {children}\n        </DataContext.Provider>\n    );\n};\n","import { getXRay } from \"@refinedev/devtools-internal\";\nimport {\n    InfiniteData,\n    InfiniteQueryObserverResult,\n    useInfiniteQuery,\n    UseInfiniteQueryOptions,\n} from \"@tanstack/react-query\";\n\nimport {\n    getNextPageParam,\n    getPreviousPageParam,\n    handlePaginationParams,\n    pickDataProvider,\n    pickNotDeprecated,\n    useActiveAuthProvider,\n} from \"@definitions/helpers\";\nimport {\n    useDataProvider,\n    useHandleNotification,\n    useMeta,\n    useOnError,\n    useResource,\n    useResourceSubscription,\n    useTranslate,\n} from \"@hooks\";\nimport {\n    BaseRecord,\n    CrudFilters,\n    CrudSorting,\n    GetListResponse,\n    HttpError,\n    LiveModeProps,\n    MetaQuery,\n    Pagination,\n    Prettify,\n    SuccessErrorNotification,\n} from \"../../interfaces\";\n\nimport { useKeys } from \"@hooks/useKeys\";\nimport {\n    useLoadingOvertime,\n    UseLoadingOvertimeOptionsProps,\n    UseLoadingOvertimeReturnType,\n} from \"../useLoadingOvertime\";\n\nexport interface UseInfiniteListConfig {\n    pagination?: Pagination;\n    hasPagination?: boolean;\n    sort?: CrudSorting;\n    filters?: CrudFilters;\n}\n\ntype BaseInfiniteListProps = {\n    /**\n     *  Metadata query for `dataProvider`\n     */\n    meta?: MetaQuery;\n    /**\n     *  Metadata query for `dataProvider`\n     *  @deprecated `metaData` is deprecated with refine@4, refine will pass `meta` instead, however, we still support `metaData` for backward compatibility.\n     */\n    metaData?: MetaQuery;\n    /**\n     * Configuration for pagination, sorting and filtering\n     * @type [`useInfiniteListConfig`](/docs/api-reference/core/hooks/data/useInfiniteList/#config-parameters)\n     * @deprecated `config` property is deprecated. Use `pagination`, `hasPagination`, `sorters` and `filters` instead.\n     */\n    config?: UseInfiniteListConfig;\n    /**\n     * Pagination properties\n     */\n    pagination?: Pagination;\n    /**\n     * Whether to use server-side pagination or not\n     * @deprecated `hasPagination` property is deprecated. Use `pagination.mode` instead.\n     */\n    hasPagination?: boolean;\n    /**\n     * Sorter parameters\n     */\n    sorters?: CrudSorting;\n    /**\n     * Filter parameters\n     */\n    filters?: CrudFilters;\n    /**\n     * If there is more than one `dataProvider`, you should use the `dataProviderName` that you will use\n     */\n    dataProviderName?: string;\n};\n\nexport type UseInfiniteListProps<TQueryFnData, TError, TData> = {\n    /**\n     * Resource name for API data interactions\n     */\n    resource: string;\n    /**\n     * Tanstack Query's [useInfiniteQuery](https://tanstack.com/query/v4/docs/react/reference/useInfiniteQuery) options\n     */\n    queryOptions?: UseInfiniteQueryOptions<\n        GetListResponse<TQueryFnData>,\n        TError,\n        GetListResponse<TData>\n    >;\n} & BaseInfiniteListProps &\n    SuccessErrorNotification<\n        InfiniteData<GetListResponse<TData>>,\n        TError,\n        Prettify<BaseInfiniteListProps>\n    > &\n    LiveModeProps &\n    UseLoadingOvertimeOptionsProps;\n\n/**\n * `useInfiniteList` is a modified version of `react-query`'s {@link https://tanstack.com/query/latest/docs/react/guides/infinite-queries `useInfiniteQuery`} used for retrieving items from a `resource` with pagination, sort, and filter configurations.\n *\n * It uses the `getList` method as the query function from the `dataProvider` which is passed to `<Refine>`.\n *\n * @see {@link https://refine.dev/docs/api-reference/core/hooks/data/useInfiniteList} for more details.\n *\n * @typeParam TQueryFnData - Result data returned by the query function. Extends {@link https://refine.dev/docs/api-reference/core/interfaceReferences#baserecord `BaseRecord`}\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/api-reference/core/interfaceReferences#httperror `HttpError`}\n * @typeParam TData - Result data returned by the `select` function. Extends {@link https://refine.dev/docs/api-reference/core/interfaceReferences#baserecord `BaseRecord`}. Defaults to `TQueryFnData`\n *\n */\n\nexport const useInfiniteList = <\n    TQueryFnData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TData extends BaseRecord = TQueryFnData,\n>({\n    resource: resourceFromProp,\n    config,\n    filters,\n    hasPagination,\n    pagination,\n    sorters,\n    queryOptions,\n    successNotification,\n    errorNotification,\n    meta,\n    metaData,\n    liveMode,\n    onLiveEvent,\n    liveParams,\n    dataProviderName,\n    overtimeOptions,\n}: UseInfiniteListProps<\n    TQueryFnData,\n    TError,\n    TData\n>): InfiniteQueryObserverResult<GetListResponse<TData>, TError> &\n    UseLoadingOvertimeReturnType => {\n    const { resources, resource, identifier } = useResource(resourceFromProp);\n\n    const dataProvider = useDataProvider();\n    const translate = useTranslate();\n    const authProvider = useActiveAuthProvider();\n    const { mutate: checkError } = useOnError({\n        v3LegacyAuthProviderCompatible: Boolean(authProvider?.isLegacy),\n    });\n    const handleNotification = useHandleNotification();\n    const getMeta = useMeta();\n    const { keys, preferLegacyKeys } = useKeys();\n\n    const pickedDataProvider = pickDataProvider(\n        identifier,\n        dataProviderName,\n        resources,\n    );\n    const preferredMeta = pickNotDeprecated(meta, metaData);\n    const prefferedFilters = pickNotDeprecated(filters, config?.filters);\n    const prefferedSorters = pickNotDeprecated(sorters, config?.sort);\n    const prefferedHasPagination = pickNotDeprecated(\n        hasPagination,\n        config?.hasPagination,\n    );\n    const prefferedPagination = handlePaginationParams({\n        pagination,\n        configPagination: config?.pagination,\n        hasPagination: prefferedHasPagination,\n    });\n    const isServerPagination = prefferedPagination.mode === \"server\";\n    const notificationValues = {\n        meta: preferredMeta,\n        metaData: preferredMeta,\n        filters: prefferedFilters,\n        hasPagination: isServerPagination,\n        pagination: prefferedPagination,\n        sorters: prefferedSorters,\n        config: {\n            ...config,\n            sort: prefferedSorters,\n        },\n    };\n\n    const isEnabled =\n        queryOptions?.enabled === undefined || queryOptions?.enabled === true;\n\n    const combinedMeta = getMeta({ resource, meta: preferredMeta });\n\n    const { getList } = dataProvider(pickedDataProvider);\n\n    useResourceSubscription({\n        resource: identifier,\n        types: [\"*\"],\n        params: {\n            meta: combinedMeta,\n            metaData: combinedMeta,\n            pagination: prefferedPagination,\n            hasPagination: isServerPagination,\n            sort: prefferedSorters,\n            sorters: prefferedSorters,\n            filters: prefferedFilters,\n            subscriptionType: \"useList\",\n            ...liveParams,\n        },\n        channel: `resources/${resource.name}`,\n        enabled: isEnabled,\n        liveMode,\n        onLiveEvent,\n        dataProviderName: pickedDataProvider,\n        meta: {\n            ...combinedMeta,\n            dataProviderName,\n        },\n    });\n\n    const queryResponse = useInfiniteQuery<\n        GetListResponse<TQueryFnData>,\n        TError,\n        GetListResponse<TData>\n    >(\n        keys()\n            .data(pickedDataProvider)\n            .resource(identifier)\n            .action(\"infinite\")\n            .params({\n                ...(preferredMeta || {}),\n                filters: prefferedFilters,\n                hasPagination: isServerPagination,\n                ...(isServerPagination && {\n                    pagination: prefferedPagination,\n                }),\n                ...(sorters && {\n                    sorters,\n                }),\n                ...(config?.sort && {\n                    sort: config?.sort,\n                }),\n            })\n            .get(preferLegacyKeys),\n        ({ queryKey, pageParam, signal }) => {\n            const paginationProperties = {\n                ...prefferedPagination,\n                current: pageParam,\n            };\n\n            return getList<TQueryFnData>({\n                resource: resource.name,\n                pagination: paginationProperties,\n                hasPagination: isServerPagination,\n                filters: prefferedFilters,\n                sort: prefferedSorters,\n                sorters: prefferedSorters,\n                meta: {\n                    ...combinedMeta,\n                    queryContext: {\n                        queryKey,\n                        pageParam,\n                        signal,\n                    },\n                },\n                metaData: {\n                    ...combinedMeta,\n                    queryContext: {\n                        queryKey,\n                        pageParam,\n                        signal,\n                    },\n                },\n            }).then(({ data, total, ...rest }) => {\n                return {\n                    data,\n                    total,\n                    pagination: paginationProperties,\n                    ...rest,\n                };\n            });\n        },\n        {\n            getNextPageParam: (lastPage) => getNextPageParam(lastPage),\n            getPreviousPageParam: (lastPage) => getPreviousPageParam(lastPage),\n            ...queryOptions,\n            onSuccess: (data) => {\n                queryOptions?.onSuccess?.(data);\n\n                const notificationConfig =\n                    typeof successNotification === \"function\"\n                        ? successNotification(\n                              data,\n                              notificationValues,\n                              identifier,\n                          )\n                        : successNotification;\n\n                handleNotification(notificationConfig);\n            },\n            onError: (err: TError) => {\n                checkError(err);\n                queryOptions?.onError?.(err);\n\n                const notificationConfig =\n                    typeof errorNotification === \"function\"\n                        ? errorNotification(err, notificationValues, identifier)\n                        : errorNotification;\n\n                handleNotification(notificationConfig, {\n                    key: `${identifier}-useInfiniteList-notification`,\n                    message: translate(\n                        \"notifications.error\",\n                        { statusCode: err.statusCode },\n                        `Error (status code: ${err.statusCode})`,\n                    ),\n                    description: err.message,\n                    type: \"error\",\n                });\n            },\n            meta: {\n                ...queryOptions?.meta,\n                ...getXRay(\"useInfiniteList\", preferLegacyKeys),\n            },\n        },\n    );\n\n    const { elapsedTime } = useLoadingOvertime({\n        isLoading: queryResponse.isFetching,\n        interval: overtimeOptions?.interval,\n        onInterval: overtimeOptions?.onInterval,\n    });\n\n    return { ...queryResponse, overtime: { elapsedTime } };\n};\n","import React from \"react\";\n\nimport { ILiveContext, ILiveContextProvider } from \"./ILiveContext\";\n\nexport const LiveContext = React.createContext<ILiveContext>(undefined);\n\nexport const LiveContextProvider: React.FC<ILiveContextProvider> = ({\n    liveProvider,\n    children,\n}) => {\n    return (\n        <LiveContext.Provider value={liveProvider}>\n            {children}\n        </LiveContext.Provider>\n    );\n};\n","import { useCallback } from \"react\";\nimport {\n    InvalidateOptions,\n    InvalidateQueryFilters,\n    useQueryClient,\n} from \"@tanstack/react-query\";\n\nimport { useResource } from \"@hooks/resource\";\nimport { pickDataProvider } from \"@definitions\";\nimport { BaseKey, IQueryKeys } from \"../../interfaces\";\nimport { useKeys } from \"@hooks/useKeys\";\n\nexport type UseInvalidateProp = {\n    resource?: string;\n    id?: BaseKey;\n    dataProviderName?: string;\n    invalidates: Array<keyof IQueryKeys> | false;\n    invalidationFilters?: InvalidateQueryFilters;\n    invalidationOptions?: InvalidateOptions;\n};\n\nexport const useInvalidate = (): ((\n    props: UseInvalidateProp,\n) => Promise<void>) => {\n    const { resources } = useResource();\n    const queryClient = useQueryClient();\n    const { keys, preferLegacyKeys } = useKeys();\n\n    const invalidate = useCallback(\n        async ({\n            resource,\n            dataProviderName,\n            invalidates,\n            id,\n            invalidationFilters = { type: \"all\", refetchType: \"active\" },\n            invalidationOptions = { cancelRefetch: false },\n        }: UseInvalidateProp) => {\n            if (invalidates === false) {\n                return;\n            }\n            const dp = pickDataProvider(resource, dataProviderName, resources);\n\n            const queryKey = keys()\n                .data(dp)\n                .resource(resource ?? \"\");\n\n            await Promise.all(\n                invalidates.map((key) => {\n                    switch (key) {\n                        case \"all\":\n                            return queryClient.invalidateQueries(\n                                keys().data(dp).get(preferLegacyKeys),\n                                invalidationFilters,\n                                invalidationOptions,\n                            );\n                        case \"list\":\n                            return queryClient.invalidateQueries(\n                                queryKey.action(\"list\").get(preferLegacyKeys),\n                                invalidationFilters,\n                                invalidationOptions,\n                            );\n                        case \"many\":\n                            return queryClient.invalidateQueries(\n                                queryKey.action(\"many\").get(preferLegacyKeys),\n                                invalidationFilters,\n                                invalidationOptions,\n                            );\n                        case \"resourceAll\":\n                            return queryClient.invalidateQueries(\n                                queryKey.get(preferLegacyKeys),\n                                invalidationFilters,\n                                invalidationOptions,\n                            );\n                        case \"detail\":\n                            return queryClient.invalidateQueries(\n                                queryKey\n                                    .action(\"one\")\n                                    .id(id || \"\")\n                                    .get(preferLegacyKeys),\n                                invalidationFilters,\n                                invalidationOptions,\n                            );\n                        default:\n                            return;\n                    }\n                }),\n            );\n\n            return;\n        },\n        [],\n    );\n\n    return invalidate;\n};\n","import { useContext } from \"react\";\n\nimport { ResourceContext } from \"@contexts/resource\";\nimport {\n    Action,\n    BaseKey,\n    IResourceItem,\n    ResourceRouterParams,\n} from \"../../../interfaces\";\nimport { useRouterContext, useResourceWithRoute } from \"@hooks\";\nimport { useRouterType } from \"../../../contexts/router-picker\";\nimport { useParsed } from \"../../router/use-parsed\";\nimport { pickResource } from \"../../../definitions/helpers/pick-resource\";\n\nexport type UseResourceLegacyProps = {\n    /**\n     * Determines which resource to use for redirection\n     * @deprecated resourceName deprecated. Use resourceNameOrRouteName instead # https://github.com/refinedev/refine/issues/1618\n     */\n    resourceName?: string;\n    /**\n     * Determines which resource to use for redirection\n     * @default Resource name that it reads from route\n     */\n    resourceNameOrRouteName?: string;\n    /**\n     * Adds id to the end of the URL\n     * @deprecated resourceName deprecated. Use resourceNameOrRouteName instead # https://github.com/refinedev/refine/issues/1618\n     */\n    recordItemId?: BaseKey;\n};\n\n/**\n * Matches the resource by identifier.\n * If not provided, the resource from the route will be returned.\n * If your resource does not explicitly define an identifier, the resource name will be used.\n */\nexport type UseResourceParam = string | undefined;\n\ntype SelectReturnType<T extends boolean> = T extends true\n    ? { resource: IResourceItem; identifier: string }\n    : { resource: IResourceItem; identifier: string } | undefined;\n\nexport type UseResourceReturnType = {\n    resources: IResourceItem[];\n    resource?: IResourceItem;\n    /**\n     * @deprecated Use `resource.name` instead when you need to get the resource name.\n     */\n    resourceName?: string;\n    id?: BaseKey;\n    action?: Action;\n    select: <T extends boolean = true>(\n        resourceName: string,\n        force?: T,\n    ) => SelectReturnType<T>;\n    identifier?: string;\n};\n\ntype UseResourceReturnTypeWithResource = UseResourceReturnType & {\n    resource: IResourceItem;\n    identifier: string;\n};\n\n/**\n * @deprecated Use `useResource` with `identifier` property instead. (`identifier` does not check by route name in new router)\n */\nexport function useResource(\n    props: UseResourceLegacyProps,\n): UseResourceReturnType;\nexport function useResource(): UseResourceReturnType;\nexport function useResource<TIdentifier = UseResourceParam>(\n    identifier: TIdentifier,\n): TIdentifier extends NonNullable<UseResourceParam>\n    ? UseResourceReturnTypeWithResource\n    : UseResourceReturnType;\n/**\n * `useResource` is used to get `resources` that are defined as property of the `<Refine>` component.\n *\n * @see {@link https://refine.dev/docs/api-reference/core/hooks/resource/useResource} for more details.\n */\nexport function useResource(\n    args?: UseResourceLegacyProps | UseResourceParam,\n): UseResourceReturnType {\n    const { resources } = useContext(ResourceContext);\n\n    const routerType = useRouterType();\n\n    const params = useParsed();\n\n    const oldProps = {\n        resourceName:\n            args && typeof args !== \"string\" ? args.resourceName : args,\n        resourceNameOrRouteName:\n            args && typeof args !== \"string\"\n                ? args.resourceNameOrRouteName\n                : args,\n        recordItemId:\n            args && typeof args !== \"string\" ? args.recordItemId : undefined,\n    };\n\n    const select = <T extends boolean = true>(\n        resourceName: string,\n        force = true,\n    ): SelectReturnType<T> => {\n        const isLegacy = routerType === \"legacy\";\n        const pickedResource = pickResource(resourceName, resources, isLegacy);\n\n        if (pickedResource) {\n            return {\n                resource: pickedResource,\n                identifier: pickedResource.identifier ?? pickedResource.name,\n            } as SelectReturnType<T>;\n        }\n\n        if (force) {\n            const resource: IResourceItem = {\n                name: resourceName,\n                identifier: resourceName,\n            };\n\n            const identifier = resource.identifier ?? resource.name;\n\n            return {\n                resource,\n                identifier,\n            } as SelectReturnType<T>;\n        }\n\n        return undefined as SelectReturnType<T>;\n    };\n\n    /**\n     * Legacy Router - Start\n     *\n     * using `useParams` and `route` to match resource and get params.\n     */\n    const resourceWithRoute = useResourceWithRoute();\n\n    const { useParams } = useRouterContext();\n\n    const legacyParams = useParams<Partial<ResourceRouterParams>>();\n\n    if (routerType === \"legacy\") {\n        const resourceKeyToCheck = oldProps.resourceNameOrRouteName\n            ? oldProps.resourceNameOrRouteName\n            : legacyParams.resource;\n\n        const legacyResource = resourceKeyToCheck\n            ? resourceWithRoute(resourceKeyToCheck)\n            : undefined;\n        const legacyId = oldProps?.recordItemId ?? legacyParams.id;\n        const legacyAction = legacyParams.action;\n        const legacyResourceName =\n            oldProps?.resourceName ?? legacyResource?.name;\n        const legacyIdentifier =\n            legacyResource?.identifier ?? legacyResource?.name;\n\n        return {\n            resources,\n            resource: legacyResource,\n            resourceName: legacyResourceName,\n            id: legacyId,\n            action: legacyAction,\n            select,\n            identifier: legacyIdentifier,\n        };\n    }\n    /** Legacy Router - End */\n\n    /** New Router */\n    let resource: IResourceItem | undefined = undefined;\n    // we try to pick the resource from props first\n    const identifier =\n        typeof args === \"string\" ? args : oldProps?.resourceNameOrRouteName;\n    if (identifier) {\n        const pickedFromProps = pickResource(identifier, resources);\n        if (pickedFromProps) {\n            resource = pickedFromProps;\n        } else {\n            resource = {\n                name: identifier as string,\n            };\n        }\n    } else if (params?.resource) {\n        resource = params.resource;\n    }\n\n    return {\n        resources,\n        resource,\n        resourceName: resource?.name,\n        id: params.id,\n        action: params.action,\n        select,\n        identifier: resource?.identifier ?? resource?.name,\n    };\n}\n","import React from \"react\";\n\nimport { IResourceContext } from \"./IResourceContext\";\nimport {\n    IResourceItem,\n    ResourceProps,\n} from \"../../interfaces/bindings/resource\";\nimport { useDeepMemo } from \"@hooks/deepMemo\";\nimport { legacyResourceTransform } from \"@definitions/helpers\";\n\nexport {\n    IResourceItem,\n    IResourceComponents,\n    IResourceComponentsProps,\n    IResourceContext,\n} from \"../../interfaces/bindings/resource\";\n\nexport const ResourceContext = React.createContext<IResourceContext>({\n    resources: [],\n});\n\nexport const ResourceContextProvider: React.FC<\n    React.PropsWithChildren<{ resources: ResourceProps[] }>\n> = ({ resources: providedResources, children }) => {\n    const resources: IResourceItem[] = useDeepMemo(() => {\n        return legacyResourceTransform(providedResources ?? []);\n    }, [providedResources]);\n\n    return (\n        <ResourceContext.Provider value={{ resources }}>\n            {children}\n        </ResourceContext.Provider>\n    );\n};\n","import React, { useMemo } from \"react\";\nimport { useMemoized } from \"@hooks/memoized\";\n\n/**\n * Hook that memoizes the given dependency array and checks the consecutive calls with deep equality and returns the same value as the first call if dependencies are not changed.\n * @internal\n */\nexport const useDeepMemo = <T,>(\n    fn: () => T,\n    dependencies: React.DependencyList,\n): T => {\n    const memoizedDependencies = useMemoized(dependencies);\n\n    const value = useMemo(fn, memoizedDependencies);\n\n    return value;\n};\n","import { useRef } from \"react\";\nimport isEqual from \"lodash/isEqual\";\n\n/**\n * Hook that memoizes the given value with deep equality.\n * @internal\n */\nexport const useMemoized = <T = unknown,>(value: T): T => {\n    const ref = useRef(value);\n\n    if (!isEqual(ref.current, value)) {\n        ref.current = value;\n    }\n\n    return ref.current;\n};\n","import React from \"react\";\n\n/**\n * This context is used to determine which router to use.\n *\n * This is a temporary solution until we remove the legacy router.\n */\n\nexport const RouterPickerContext = React.createContext<\"legacy\" | \"new\">(\"new\");\n\nexport const RouterPickerProvider = RouterPickerContext.Provider;\n\n/**\n * This is a temporary hook to determine which router to use.\n * It will be removed once the legacy router is removed.\n * @internal This is an internal hook.\n */\nexport const useRouterType = () => {\n    const value = React.useContext(RouterPickerContext);\n    return value;\n};\n","import React from \"react\";\nimport { useParse } from \"../use-parse\";\n\nexport const useParsed = <\n    TParams extends Record<string, any> = Record<string, any>,\n>() => {\n    const parse = useParse();\n\n    const parsed = React.useMemo(() => parse<TParams>(), [parse]);\n\n    return parsed;\n};\n","import React, { createContext, PropsWithChildren } from \"react\";\nimport { RouterBindings } from \"src/interfaces\";\n\nconst defaultBindings = {};\n\nexport const RouterBindingsContext =\n    createContext<RouterBindings>(defaultBindings);\n\nexport const RouterBindingsProvider: React.FC<\n    PropsWithChildren<{ router?: RouterBindings }>\n> = ({ children, router }) => {\n    return (\n        <RouterBindingsContext.Provider value={router ?? defaultBindings}>\n            {children}\n        </RouterBindingsContext.Provider>\n    );\n};\n","import { RouterBindingsContext } from \"@contexts/router\";\nimport React, { useContext } from \"react\";\nimport { ParseFunction, ParseResponse } from \"src/interfaces\";\n\ntype UseParseType = () => <\n    TParams extends Record<string, any> = Record<string, any>,\n>() => ParseResponse<TParams>;\n\nexport const useParse: UseParseType = () => {\n    const bindings = useContext(RouterBindingsContext);\n\n    const useParse = React.useMemo(\n        () =>\n            bindings?.parse ??\n            (() =>\n                (() => {\n                    return {};\n                }) as ParseFunction),\n        [bindings?.parse],\n    );\n\n    const parse = useParse();\n\n    return parse as ReturnType<UseParseType>;\n};\n","import { useContext, useCallback } from \"react\";\nimport { ResourceContext } from \"@contexts/resource\";\nimport { IResourceItem } from \"../../../interfaces\";\nimport { pickResource } from \"@definitions/helpers/pick-resource\";\n\nexport type UseResourceWithRouteReturnType = (route: string) => IResourceItem;\n\n/**\n * @deprecated Use `useResource` hook instead.\n * @internal This hook is for internal use only. And is kept for backward compatibility.\n */\nexport const useResourceWithRoute = (): UseResourceWithRouteReturnType => {\n    const { resources } = useContext(ResourceContext);\n\n    const resourceWithRoute = useCallback(\n        (route: string) => {\n            const picked = pickResource(route, resources, true);\n            if (picked) {\n                return picked;\n            }\n            return { name: route, route: route } as IResourceItem;\n        },\n        [resources],\n    );\n\n    return resourceWithRoute;\n};\n","import { LiveContext } from \"@contexts/live\";\nimport { RefineContext } from \"@contexts/refine\";\nimport { useInvalidate } from \"@hooks/invalidate\";\nimport { useResource } from \"@hooks/resource\";\nimport { useContext, useEffect } from \"react\";\nimport {\n    BaseKey,\n    CrudFilters,\n    CrudSorting,\n    ILiveContext,\n    IRefineContext,\n    LiveEvent,\n    LiveModeProps,\n    MetaQuery,\n    Pagination,\n} from \"../../../interfaces\";\n\nexport type UseResourceSubscriptionProps = {\n    channel: string;\n    params?: {\n        ids?: BaseKey[];\n        id?: BaseKey;\n        /**\n         * @deprecated `params.meta` is depcerated. Use `meta` directly from the root level instead.\n         */\n        meta?: MetaQuery;\n        /**\n         * @deprecated `metaData` is deprecated with refine@4, refine will pass `meta` instead, however, we still support `metaData` for backward compatibility.\n         */\n        metaData?: MetaQuery;\n        pagination?: Pagination;\n        /**\n         * @deprecated `hasPagination` is deprecated, use `pagination.mode` instead.\n         */\n        hasPagination?: boolean;\n        /**\n         * @deprecated `sort` is deprecated. Use `sorters` instead.\n         */\n        sort?: CrudSorting;\n        sorters?: CrudSorting;\n        filters?: CrudFilters;\n        subscriptionType: \"useList\" | \"useOne\" | \"useMany\";\n        [key: string]: any;\n    };\n    types: LiveEvent[\"type\"][];\n    resource?: string;\n    enabled?: boolean;\n    /**\n     * @deprecated use `meta.dataProviderName` instead.\n     */\n    dataProviderName?: string;\n    meta?: MetaQuery & { dataProviderName?: string };\n} & LiveModeProps;\n\nexport type PublishType = {\n    (event: LiveEvent): void;\n};\n\nexport const useResourceSubscription = ({\n    resource: resourceFromProp,\n    params,\n    channel,\n    types,\n    enabled = true,\n    liveMode: liveModeFromProp,\n    onLiveEvent,\n    dataProviderName: dataProviderNameFromProps,\n    meta,\n}: UseResourceSubscriptionProps): void => {\n    const { resource, identifier } = useResource(resourceFromProp);\n\n    const liveDataContext = useContext<ILiveContext>(LiveContext);\n    const {\n        liveMode: liveModeFromContext,\n        onLiveEvent: onLiveEventContextCallback,\n    } = useContext<IRefineContext>(RefineContext);\n\n    const liveMode = liveModeFromProp ?? liveModeFromContext;\n\n    const invalidate = useInvalidate();\n\n    const dataProviderName =\n        dataProviderNameFromProps ??\n        meta?.dataProviderName ??\n        resource?.meta?.dataProviderName;\n\n    useEffect(() => {\n        let subscription: any;\n\n        const callback = (event: LiveEvent) => {\n            if (liveMode === \"auto\") {\n                invalidate({\n                    resource: identifier,\n                    dataProviderName,\n                    invalidates: [\"resourceAll\"],\n                    invalidationFilters: {\n                        type: \"active\",\n                        refetchType: \"active\",\n                    },\n                    invalidationOptions: { cancelRefetch: false },\n                });\n            }\n\n            onLiveEvent?.(event);\n            onLiveEventContextCallback?.(event);\n        };\n\n        if (liveMode && liveMode !== \"off\" && enabled) {\n            subscription = liveDataContext?.subscribe({\n                channel,\n                params: {\n                    resource: resource?.name,\n                    ...params,\n                },\n                types,\n                callback,\n                dataProviderName,\n                meta: {\n                    ...meta,\n                    dataProviderName,\n                },\n            });\n        }\n\n        return () => {\n            if (subscription) {\n                liveDataContext?.unsubscribe(subscription);\n            }\n        };\n    }, [enabled]);\n};\n","import { useContext } from \"react\";\nimport { LiveModeProps, IRefineContext } from \"../../../interfaces\";\nimport { RefineContext } from \"@contexts/refine\";\n\nexport const useLiveMode = (\n    liveMode: LiveModeProps[\"liveMode\"],\n): LiveModeProps[\"liveMode\"] => {\n    const { liveMode: liveModeFromContext } =\n        useContext<IRefineContext>(RefineContext);\n\n    return liveMode ?? liveModeFromContext;\n};\n","import { useContext, useEffect } from \"react\";\n\nimport { LiveContext } from \"@contexts/live\";\nimport {\n    BaseKey,\n    CrudFilters,\n    CrudSorting,\n    ILiveContext,\n    LiveEvent,\n    MetaQuery,\n    Pagination,\n} from \"../../../interfaces\";\n\nexport type UseSubscriptionProps = {\n    /**\n     * Channel name to subscribe.\n     */\n    channel: string;\n    /**\n     * Callback that is run when new events from subscription arrive.\n     */\n    onLiveEvent: (event: LiveEvent) => void;\n    /**\n     * Type of events to subscribe. `\"*\"` means all events.\n     * @type Array<\"deleted\" | \"updated\" | \"created\" | \"*\" | string>\n     */\n    types?: LiveEvent[\"type\"][];\n    /**\n     * Determines subscription should subscribe or not.\n     * @type Array<\"deleted\" | \"updated\" | \"created\" | \"*\" | string>\n     */\n    enabled?: boolean;\n    params?: {\n        ids?: BaseKey[];\n        id?: BaseKey;\n        /**\n         * @deprecated `params.meta` is depcerated. Use `meta` directly from the root level instead.\n         */\n        meta?: MetaQuery;\n        /**\n         * @deprecated `metaData` is deprecated with refine@4, refine will pass `meta` instead, however, we still support `metaData` for backward compatibility.\n         */\n        metaData?: MetaQuery;\n        pagination?: Pagination;\n        /**\n         * @deprecated `hasPagination` is deprecated, use `pagination.mode` instead.\n         */\n        hasPagination?: boolean;\n        /**\n         * @deprecated `sort` is deprecated, use `sorters` instead.\n         */\n        sort?: CrudSorting;\n        sorters?: CrudSorting;\n        filters?: CrudFilters;\n        subscriptionType?: \"useList\" | \"useOne\" | \"useMany\";\n        resource?: string;\n        [key: string]: any;\n    };\n    /**\n     * @deprecated use `meta.dataProviderName` instead.\n     */\n    dataProviderName?: string;\n    meta?: MetaQuery & { dataProviderName?: string };\n};\n\nexport const useSubscription = ({\n    params,\n    channel,\n    types = [\"*\"],\n    enabled = true,\n    onLiveEvent,\n    dataProviderName = \"default\",\n    meta,\n}: UseSubscriptionProps): void => {\n    const liveDataContext = useContext<ILiveContext>(LiveContext);\n\n    useEffect(() => {\n        let subscription: any;\n\n        if (enabled) {\n            subscription = liveDataContext?.subscribe({\n                channel,\n                params,\n                types,\n                callback: onLiveEvent,\n                dataProviderName,\n                meta: {\n                    ...meta,\n                    dataProviderName,\n                },\n            });\n        }\n\n        return () => {\n            if (subscription) {\n                liveDataContext?.unsubscribe(subscription);\n            }\n        };\n    }, [enabled]);\n};\n","import { useContext } from \"react\";\n\nimport { LiveContext } from \"@contexts/live\";\nimport { ILiveContext } from \"../../../interfaces\";\n\nexport const usePublish: () => NonNullable<ILiveContext>[\"publish\"] = () => {\n    const liveContext = useContext<ILiveContext>(LiveContext);\n\n    return liveContext?.publish;\n};\n","import { useContext } from \"react\";\n\nimport { UndoableQueueContext } from \"@contexts/undoableQueue\";\nimport { IUndoableQueue, IUndoableQueueContext } from \"../../../interfaces\";\n\nexport type UseCancelNotificationType = () => {\n    notifications: IUndoableQueue[];\n    notificationDispatch: React.Dispatch<any>;\n};\n\nexport const useCancelNotification: UseCancelNotificationType = () => {\n    const { notifications, notificationDispatch } =\n        useContext<IUndoableQueueContext>(UndoableQueueContext);\n\n    return { notifications, notificationDispatch };\n};\n","import { useContext } from \"react\";\n\nimport { NotificationContext } from \"@contexts/notification\";\nimport { INotificationContext } from \"../../../interfaces\";\n\nexport const useNotification = (): INotificationContext => {\n    const { open, close } = useContext(NotificationContext);\n\n    return { open, close };\n};\n","import React, { createContext } from \"react\";\n\nimport { INotificationContext } from \"./INotificationContext\";\n\n/** @deprecated default value for notification context has no use and is an empty object.  */\nexport const defaultNotificationProvider: INotificationContext = {};\n\nexport const NotificationContext = createContext<INotificationContext>({});\n\nexport const NotificationContextProvider: React.FC<\n    INotificationContext & {\n        children?: React.ReactNode;\n    }\n> = ({ open, close, children }) => {\n    return (\n        <NotificationContext.Provider value={{ open, close }}>\n            {children}\n        </NotificationContext.Provider>\n    );\n};\n","import { useCallback } from \"react\";\n\nimport { OpenNotificationParams } from \"../../../interfaces\";\nimport { useNotification } from \"@hooks\";\n\nexport const useHandleNotification = (): typeof handleNotification => {\n    const { open } = useNotification();\n\n    const handleNotification = useCallback(\n        (\n            notification: OpenNotificationParams | false | undefined,\n            fallbackNotification?: OpenNotificationParams,\n        ) => {\n            if (notification !== false) {\n                if (notification) {\n                    open?.(notification);\n                } else if (fallbackNotification) {\n                    open?.(fallbackNotification);\n                }\n            }\n        },\n        [],\n    );\n\n    return handleNotification;\n};\n","import { useCallback, useContext } from \"react\";\nimport { TranslationContext } from \"@contexts/translation\";\n\n/**\n * If you need to change the locale at runtime, refine provides the `useSetLocale` hook.\n * It returns the changeLocale method from `i18nProvider` under the hood.\n *\n * @see {@link https://refine.dev/docs/api-reference/core/hooks/translate/useSetLocale} for more details.\n */\nexport const useSetLocale = () => {\n    const { i18nProvider } = useContext(TranslationContext);\n\n    return useCallback((lang: string) => i18nProvider?.changeLocale(lang), []);\n};\n","import React from \"react\";\n\nimport { ITranslationContext } from \"../../interfaces\";\n\n/** @deprecated default value for translation context has no use and is an empty object.  */\nexport const defaultProvider: ITranslationContext = {};\n\nexport const TranslationContext = React.createContext<ITranslationContext>({});\n\nexport const TranslationContextProvider: React.FC<\n    ITranslationContext & {\n        children?: React.ReactNode;\n    }\n> = ({ children, i18nProvider }) => {\n    return (\n        <TranslationContext.Provider\n            value={{\n                i18nProvider: i18nProvider,\n            }}\n        >\n            {children}\n        </TranslationContext.Provider>\n    );\n};\n","import { useContext, useMemo } from \"react\";\nimport { TranslationContext } from \"@contexts/translation\";\n\n/**\n * If you need to translate the texts in your own components, refine provides the `useTranslate` hook.\n * It returns the translate method from `i18nProvider` under the hood.\n *\n * @see {@link https://refine.dev/docs/api-reference/core/hooks/translate/useTranslate} for more details.\n */\nexport const useTranslate = () => {\n    const { i18nProvider } = useContext(TranslationContext);\n\n    const fn = useMemo(() => {\n        function translate(\n            key: string,\n            options?: any,\n            defaultMessage?: string,\n        ): string;\n        function translate(key: string, defaultMessage?: string): string;\n\n        function translate(\n            key: string,\n            options?: string | any,\n            defaultMessage?: string,\n        ) {\n            return (\n                i18nProvider?.translate(key, options, defaultMessage) ??\n                defaultMessage ??\n                (typeof options === \"string\" &&\n                typeof defaultMessage === \"undefined\"\n                    ? options\n                    : key)\n            );\n        }\n\n        return translate;\n    }, [i18nProvider]);\n\n    return fn;\n};\n","import { useContext, useCallback } from \"react\";\nimport { TranslationContext } from \"@contexts/translation\";\n\nexport type UseGetLocaleType = () => () => string | undefined;\n\n/**\n * If you need to know the current locale, refine provides the `useGetLocale` hook.\n * It returns the `getLocale` method from `i18nProvider` under the hood.\n *\n * @see {@link https://refine.dev/docs/api-reference/core/hooks/translate/useGetLocale} for more details.\n */\nexport const useGetLocale: UseGetLocaleType = () => {\n    const { i18nProvider } = useContext(TranslationContext);\n\n    return useCallback(() => i18nProvider?.getLocale(), []);\n};\n","import { useState } from \"react\";\nimport { useResource, useDataProvider, useMeta } from \"@hooks\";\nimport {\n    BaseRecord,\n    MapDataFn,\n    CrudSorting,\n    CrudFilters,\n    MetaQuery,\n} from \"../../interfaces\";\nimport {\n    useUserFriendlyName,\n    pickDataProvider,\n    pickNotDeprecated,\n} from \"@definitions\";\nimport { ExportToCsv, Options } from \"export-to-csv-fix-source-map\";\n\ntype UseExportOptionsType<\n    TData extends BaseRecord = BaseRecord,\n    TVariables = any,\n> = {\n    /**\n     * Resource name for API data interactions\n     * @default Resource name that it reads from route\n     * @deprecated `resourceName` is deprecated. Use `resource` instead.\n     */\n    resourceName?: string;\n    /**\n     * Resource name for API data interactions\n     * @default Resource name that it reads from route\n     */\n    resource?: string;\n    /**\n     * A mapping function that runs for every record. Mapped data will be included in the file contents\n     */\n    mapData?: MapDataFn<TData, TVariables>;\n    /**\n     *  Sorts records\n     *  @deprecated `sorter` is deprecated. Use `sorters` instead.\n     */\n    sorter?: CrudSorting;\n    /**\n     *  Sorts records\n     */\n    sorters?: CrudSorting;\n    /**\n     *  Filters records\n     */\n    filters?: CrudFilters;\n    maxItemCount?: number;\n    /**\n     *  Requests to fetch data are made as batches by page size. By default, it is 20. Used for `getList` method of `DataProvider`\n     */\n    pageSize?: number;\n    /**\n     *  Used for exporting options\n     *  @type [Options](https://github.com/alexcaza/export-to-csv)\n     */\n    exportOptions?: Options;\n    /**\n     *  Metadata query for `dataProvider`\n     */\n    meta?: MetaQuery;\n    /**\n     *  Metadata query for `dataProvider`\n     * @deprecated `metaData` is deprecated with refine@4, refine will pass `meta` instead, however, we still support `metaData` for backward compatibility.\n     */\n    metaData?: MetaQuery;\n    /**\n     * If there is more than one `dataProvider`, you should use the `dataProviderName` that you will use.\n     */\n    dataProviderName?: string;\n    /**\n     *  Callback to handle error events of this hook\n     */\n    onError?: (error: any) => void;\n};\n\ntype UseExportReturnType = {\n    isLoading: boolean;\n    triggerExport: () => Promise<void>;\n};\n\n/**\n * `useExport` hook allows you to make your resources exportable.\n *\n * @see {@link https://refine.dev/docs/api-reference/core/hooks/import-export/useExport} for more details.\n *\n * @typeParam TData - Result data of the query extends {@link https://refine.dev/docs/api-reference/core/interfaceReferences#baserecord `BaseRecord`}\n * @typeParam TVariables - Values for params.\n *\n */\nexport const useExport = <\n    TData extends BaseRecord = BaseRecord,\n    TVariables = any,\n>({\n    resourceName,\n    resource: resourceFromProps,\n    sorter,\n    sorters,\n    filters,\n    maxItemCount,\n    pageSize = 20,\n    mapData = (item) => item as any,\n    exportOptions,\n    meta,\n    metaData,\n    dataProviderName,\n    onError,\n}: UseExportOptionsType<TData, TVariables> = {}): UseExportReturnType => {\n    const [isLoading, setIsLoading] = useState(false);\n\n    const dataProvider = useDataProvider();\n    const getMeta = useMeta();\n    const { resource, resources, identifier } = useResource(\n        pickNotDeprecated(resourceFromProps, resourceName),\n    );\n    const getFriendlyName = useUserFriendlyName();\n\n    const filename = `${getFriendlyName(\n        identifier,\n        \"plural\",\n    )}-${new Date().toLocaleString()}`;\n\n    const { getList } = dataProvider(\n        pickDataProvider(identifier, dataProviderName, resources),\n    );\n\n    const combinedMeta = getMeta({\n        resource,\n        meta: pickNotDeprecated(meta, metaData),\n    });\n\n    const triggerExport = async () => {\n        setIsLoading(true);\n\n        let rawData: BaseRecord[] = [];\n\n        let current = 1;\n        let preparingData = true;\n        while (preparingData) {\n            try {\n                const { data, total } = await getList<TData>({\n                    resource: resource?.name ?? \"\",\n                    filters,\n                    sort: pickNotDeprecated(sorters, sorter),\n                    sorters: pickNotDeprecated(sorters, sorter),\n                    pagination: {\n                        current,\n                        pageSize,\n                        mode: \"server\",\n                    },\n                    meta: combinedMeta,\n                    metaData: combinedMeta,\n                });\n\n                current++;\n\n                rawData.push(...data);\n\n                if (maxItemCount && rawData.length >= maxItemCount) {\n                    rawData = rawData.slice(0, maxItemCount);\n                    preparingData = false;\n                }\n\n                if (total === rawData.length) {\n                    preparingData = false;\n                }\n            } catch (error) {\n                setIsLoading(false);\n                preparingData = false;\n\n                onError?.(error);\n\n                return;\n            }\n        }\n\n        const csvExporter = new ExportToCsv({\n            filename,\n            useKeysAsHeaders: true,\n            ...exportOptions,\n        });\n\n        csvExporter.generateCsv(rawData.map(mapData as any));\n\n        setIsLoading(false);\n    };\n\n    return {\n        isLoading,\n        triggerExport,\n    };\n};\n","import React, { Dispatch, SetStateAction } from \"react\";\nimport { QueryObserverResult, UseQueryOptions } from \"@tanstack/react-query\";\nimport warnOnce from \"warn-once\";\nimport debounce from \"lodash/debounce\";\n\nimport {\n    useWarnAboutChange,\n    useCreate,\n    useUpdate,\n    useRedirectionAfterSubmission,\n    useMutationMode,\n    useOne,\n    useRefineContext,\n    useMeta,\n    useInvalidate,\n} from \"@hooks\";\n\nimport {\n    BaseRecord,\n    CreateResponse,\n    GetOneResponse,\n    HttpError,\n    LiveModeProps,\n    RedirectAction,\n    SuccessErrorNotification,\n    UpdateResponse,\n    MutationMode,\n    BaseKey,\n    IQueryKeys,\n    FormAction,\n    MetaQuery,\n    AutoSaveProps,\n    AutoSaveReturnType,\n    OptimisticUpdateMapType,\n} from \"../../interfaces\";\nimport {\n    UpdateParams,\n    UseUpdateProps,\n    UseUpdateReturnType,\n} from \"../data/useUpdate\";\nimport { UseCreateProps, UseCreateReturnType } from \"../data/useCreate\";\nimport { redirectPage } from \"@definitions/helpers\";\nimport { useResource } from \"../resource/useResource\";\nimport { pickNotDeprecated } from \"@definitions/helpers\";\nimport {\n    useLoadingOvertime,\n    UseLoadingOvertimeOptionsProps,\n    UseLoadingOvertimeReturnType,\n} from \"../useLoadingOvertime\";\n\nexport type ActionParams = {\n    /**\n     * Type of the form mode\n     * @default Action that it reads from route otherwise \"create\" is used\n     */\n    action?: FormAction;\n};\n\ntype ActionFormProps<\n    TQueryFnData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n    TData extends BaseRecord = TQueryFnData,\n    TResponse extends BaseRecord = TData,\n    TResponseError extends HttpError = TError,\n> = {\n    /**\n     * Resource name for API data interactions\n     * @default Resource name that it reads from route\n     */\n    resource?: string;\n    /**\n     * Record id for fetching\n     * @default Id that it reads from the URL\n     */\n    id?: BaseKey;\n    /**\n     * Page to redirect after a succesfull mutation\n     * @type `\"show\" | \"edit\" | \"list\" | \"create\" | false`\n     * @default `\"list\"`\n     */\n    redirect?: RedirectAction;\n    /**\n     * Metadata query for dataProvider\n     */\n    meta?: MetaQuery;\n    /**\n     * Metadata query for dataProvider\n     * @deprecated `metaData` is deprecated with refine@4, refine will pass `meta` instead, however, we still support `metaData` for backward compatibility.\n     */\n    metaData?: MetaQuery;\n    /**\n     * Metadata to pass for the `useOne` query\n     */\n    queryMeta?: MetaQuery;\n    /**\n     * Metadata to pass for the mutation (`useCreate` for `create` and `clone` actions, `useUpdate` for `edit` action)\n     */\n    mutationMeta?: MetaQuery;\n    /**\n     * [Determines when mutations are executed](/advanced-tutorials/mutation-mode.md)\n     * @default `\"pessimistic\"*`\n     */\n    mutationMode?: MutationMode;\n    /**\n     * Called when a mutation is successful\n     */\n    onMutationSuccess?: (\n        data: CreateResponse<TResponse> | UpdateResponse<TResponse>,\n        variables: TVariables,\n        context: any,\n        isAutoSave?: boolean,\n    ) => void;\n    /**\n     * Called when a mutation encounters an error\n     */\n    onMutationError?: (\n        error: TResponseError,\n        variables: TVariables,\n        context: any,\n        isAutoSave?: boolean,\n    ) => void;\n    /**\n     * Duration to wait before executing mutations when `mutationMode = \"undoable\"`\n     * @default `5000*`\n     */\n    undoableTimeout?: number;\n    /**\n     * If there is more than one `dataProvider`, you should use the `dataProviderName` that you will use.\n     */\n    dataProviderName?: string;\n    /**\n     * You can use it to manage the invalidations that will occur at the end of the mutation.\n     * @type  `all`, `resourceAll`, `list`, `many`, `detail`, `false`\n     * @default `[\"list\", \"many\", \"detail\"]`\n     */\n    invalidates?: Array<keyof IQueryKeys>;\n    /**\n     * react-query's [useQuery](https://tanstack.com/query/v4/docs/reference/useQuery) options of useOne hook used while in edit mode.\n     */\n    queryOptions?: UseQueryOptions<\n        GetOneResponse<TQueryFnData>,\n        TError,\n        GetOneResponse<TData>\n    >;\n    /**\n     * react-query's [useMutation](https://tanstack.com/query/v4/docs/reference/useMutation) options of useCreate hook used while submitting in create and clone modes.\n     */\n    createMutationOptions?: UseCreateProps<\n        TResponse,\n        TResponseError,\n        TVariables\n    >[\"mutationOptions\"];\n    /**\n     * react-query's [useMutation](https://tanstack.com/query/v4/docs/reference/useMutation) options of useUpdate hook used while submitting in edit mode.\n     */\n    updateMutationOptions?: UseUpdateProps<\n        TResponse,\n        TResponseError,\n        TVariables\n    >[\"mutationOptions\"];\n    /**\n     * If you customize the [`optimisticUpdateMap`](https://refine.dev/docs/api-reference/core/hooks/data/useUpdateMany/#optimisticupdatemap) option, you can use it to manage the invalidations that will occur at the end of the mutation.\n     * @default {\n     *   list: true,\n     *   many: true,\n     *   detail: true,\n     * }\n     */\n    optimisticUpdateMap?: OptimisticUpdateMapType<TResponse, TVariables>;\n} & SuccessErrorNotification<\n    UpdateResponse<TResponse> | CreateResponse<TResponse>,\n    TResponseError,\n    { id: BaseKey; values: TVariables } | TVariables\n> &\n    ActionParams &\n    LiveModeProps;\n\nexport type UseFormProps<\n    TQueryFnData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n    TData extends BaseRecord = TQueryFnData,\n    TResponse extends BaseRecord = TData,\n    TResponseError extends HttpError = TError,\n> = ActionFormProps<\n    TQueryFnData,\n    TError,\n    TVariables,\n    TData,\n    TResponse,\n    TResponseError\n> &\n    ActionParams &\n    LiveModeProps &\n    UseLoadingOvertimeOptionsProps &\n    AutoSaveProps<TVariables>;\n\nexport type UseFormReturnType<\n    TQueryFnData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n    TData extends BaseRecord = TQueryFnData,\n    TResponse extends BaseRecord = TData,\n    TResponseError extends HttpError = TError,\n> = {\n    id?: BaseKey;\n    setId: Dispatch<SetStateAction<BaseKey | undefined>>;\n    queryResult?: QueryObserverResult<GetOneResponse<TData>, TError>;\n    mutationResult:\n        | UseUpdateReturnType<TResponse, TResponseError, TVariables>\n        | UseCreateReturnType<TResponse, TResponseError, TVariables>;\n    formLoading: boolean;\n    onFinish: (\n        values: TVariables,\n    ) => Promise<CreateResponse<TResponse> | UpdateResponse<TResponse> | void>;\n    redirect: (\n        redirect: RedirectAction,\n        idFromFunction?: BaseKey | undefined,\n        routeParams?: Record<string, string | number>,\n    ) => void;\n} & UseLoadingOvertimeReturnType &\n    AutoSaveReturnType<TResponse, TResponseError, TVariables>;\n\n/**\n * `useForm` is used to manage forms. It uses Ant Design {@link https://ant.design/components/form/ Form} data scope management under the hood and returns the required props for managing the form actions.\n *\n * @see {@link https://refine.dev/docs/api-reference/core/hooks/useForm} for more details.\n *\n * @typeParam TQueryFnData - Result data returned by the query function. Extends {@link https://refine.dev/docs/api-reference/core/interfaceReferences#baserecord `BaseRecord`}\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/api-reference/core/interfaceReferences#httperror `HttpError`}\n * @typeParam TVariables - Values for params. default `{}`\n * @typeParam TData - Result data returned by the `select` function. Extends {@link https://refine.dev/docs/api-reference/core/interfaceReferences#baserecord `BaseRecord`}. Defaults to `TQueryFnData`\n * @typeParam TResponse - Result data returned by the mutation function. Extends {@link https://refine.dev/docs/api-reference/core/interfaceReferences#baserecord `BaseRecord`}. Defaults to `TData`\n * @typeParam TResponseError - Custom error object that extends {@link https://refine.dev/docs/api-reference/core/interfaceReferences#httperror `HttpError`}. Defaults to `TError`\n *\n */\nexport const useForm = <\n    TQueryFnData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n    TData extends BaseRecord = TQueryFnData,\n    TResponse extends BaseRecord = TData,\n    TResponseError extends HttpError = TError,\n>({\n    resource: resourceFromProps,\n    action: actionFromProps,\n    id: idFromProps,\n    onMutationSuccess,\n    onMutationError,\n    redirect: redirectFromProps,\n    successNotification,\n    errorNotification,\n    meta,\n    metaData,\n    queryMeta,\n    mutationMeta,\n    mutationMode: mutationModeProp,\n    liveMode,\n    onLiveEvent,\n    liveParams,\n    undoableTimeout,\n    dataProviderName,\n    invalidates,\n    queryOptions,\n    createMutationOptions,\n    updateMutationOptions,\n    overtimeOptions,\n    autoSave,\n    optimisticUpdateMap,\n}: UseFormProps<\n    TQueryFnData,\n    TError,\n    TVariables,\n    TData,\n    TResponse,\n    TResponseError\n> = {}): UseFormReturnType<\n    TQueryFnData,\n    TError,\n    TVariables,\n    TData,\n    TResponse,\n    TResponseError\n> => {\n    const invalidate = useInvalidate();\n    const { options } = useRefineContext();\n    const getMeta = useMeta();\n\n    const {\n        resource,\n        id: idFromRoute,\n        action: actionFromRoute,\n        identifier,\n    } = useResource(resourceFromProps);\n    const { identifier: inferredIdentifier } = useResource();\n\n    /** We only accept `id` from URL params if `resource` is not explicitly passed. */\n    /** This is done to avoid sending wrong requests for custom `resource` and an async `id` */\n    const getDefaultId = () => {\n        const idFromPropsOrRoute = idFromProps ?? idFromRoute;\n\n        if (resourceFromProps && resourceFromProps !== inferredIdentifier) {\n            return idFromProps;\n        }\n\n        return idFromPropsOrRoute;\n    };\n    const defaultId = getDefaultId();\n\n    // id state is needed to determine selected record in a context for example useModal\n    const [id, setId] = React.useState<BaseKey | undefined>(defaultId);\n\n    /**\n     * In some cases, `id` from the router params is not available at the first render.\n     *\n     * (e.g. when using `Next.js` and client-side-rendering, `router` is not ready to use at the first render)\n     *\n     * We're watching for `defaultId` changes and setting `id` state if it's not equal to `defaultId`.\n     */\n    React.useEffect(() => {\n        setId(defaultId);\n    }, [defaultId]);\n\n    const getAction = () => {\n        if (actionFromProps) return actionFromProps;\n        else if (actionFromRoute === \"edit\" || actionFromRoute === \"clone\")\n            return actionFromRoute;\n        else return \"create\";\n    };\n    const action = getAction();\n\n    const combinedMeta = getMeta({\n        resource,\n        meta: pickNotDeprecated(meta, metaData),\n    });\n\n    const { mutationMode: mutationModeContext } = useMutationMode();\n    const mutationMode = mutationModeProp ?? mutationModeContext;\n\n    const isCreate = action === \"create\";\n    const isEdit = action === \"edit\";\n    const isClone = action === \"clone\";\n\n    warnOnce(\n        (isClone || isEdit) &&\n            Boolean(resourceFromProps) &&\n            !Boolean(idFromProps) &&\n            queryOptions?.enabled !== false,\n        `[useForm]: action: \"${action}\", resource: \"${identifier}\", id: ${id} \\n\\n` +\n            `If you don't use the \\`setId\\` method to set the \\`id\\`, you should pass the \\`id\\` prop to \\`useForm\\`. Otherwise, \\`useForm\\` will not be able to infer the \\`id\\` from the current URL. \\n\\n` +\n            `See https://refine.dev/docs/api-reference/core/hooks/useForm/#resource`,\n    );\n\n    /**\n     * Designated `redirect` route\n     */\n    const designatedRedirectAction = redirectPage({\n        redirectFromProps,\n        action,\n        redirectOptions: options.redirect,\n    });\n\n    const enableQuery = id !== undefined && (isEdit || isClone);\n\n    const queryResult = useOne<TQueryFnData, TError, TData>({\n        resource: identifier,\n        id: id ?? \"\",\n        queryOptions: {\n            enabled: enableQuery,\n            ...queryOptions,\n        },\n        liveMode,\n        onLiveEvent,\n        liveParams,\n        meta: { ...combinedMeta, ...queryMeta },\n        metaData: { ...combinedMeta, ...queryMeta },\n        dataProviderName,\n    });\n\n    const { isFetching: isFetchingQuery } = queryResult;\n\n    const mutationResultCreate = useCreate<\n        TResponse,\n        TResponseError,\n        TVariables\n    >({\n        mutationOptions: createMutationOptions,\n    });\n    const { mutate: mutateCreate, isLoading: isLoadingCreate } =\n        mutationResultCreate;\n\n    const mutationResultUpdate = useUpdate<\n        TResponse,\n        TResponseError,\n        TVariables\n    >({\n        mutationOptions: updateMutationOptions,\n    });\n    const { mutate: mutateUpdate, isLoading: isLoadingUpdate } =\n        mutationResultUpdate;\n\n    const autoSaveMutation = useUpdate<TResponse, TResponseError, TVariables>(\n        {},\n    );\n\n    const { setWarnWhen } = useWarnAboutChange();\n\n    const handleSubmitWithRedirect = useRedirectionAfterSubmission();\n\n    const onFinishCreate = async (values: TVariables) => {\n        setWarnWhen(false);\n\n        const onSuccess = (id?: BaseKey) => {\n            handleSubmitWithRedirect({\n                redirect: designatedRedirectAction,\n                resource,\n                id,\n                meta: pickNotDeprecated(meta, metaData),\n            });\n        };\n\n        if (mutationMode !== \"pessimistic\") {\n            setTimeout(() => {\n                onSuccess();\n            });\n        }\n\n        return new Promise<CreateResponse<TResponse> | void>(\n            (resolve, reject) => {\n                if (mutationMode !== \"pessimistic\") {\n                    resolve();\n                }\n\n                if (!resource) return;\n\n                return mutateCreate(\n                    {\n                        values,\n                        resource: identifier ?? resource.name,\n                        successNotification,\n                        errorNotification,\n                        meta: { ...combinedMeta, ...mutationMeta },\n                        metaData: { ...combinedMeta, ...mutationMeta },\n                        dataProviderName,\n                        invalidates,\n                    },\n                    {\n                        onSuccess: (data, _, context) => {\n                            if (onMutationSuccess) {\n                                onMutationSuccess(data, values, context);\n                            }\n\n                            const responseId = data?.data?.id;\n\n                            onSuccess(responseId);\n\n                            resolve(data);\n                        },\n                        onError: (error: TResponseError, _, context) => {\n                            if (onMutationError) {\n                                return onMutationError(error, values, context);\n                            }\n                            reject();\n                        },\n                    },\n                );\n            },\n        );\n    };\n\n    React.useEffect(() => {\n        return () => {\n            if (\n                autoSave?.invalidateOnUnmount &&\n                autoSaveMutation.status === \"success\"\n            ) {\n                invalidate({\n                    id,\n                    invalidates: invalidates || [\"list\", \"many\", \"detail\"],\n                    dataProviderName,\n                    resource: identifier,\n                });\n            }\n        };\n    }, [autoSave?.invalidateOnUnmount, autoSaveMutation.status]);\n\n    const onFinishAutoSaveMutation = (\n        values: TVariables,\n    ): Promise<UpdateResponse<TResponse> | void> | void => {\n        if (!resource || !isEdit) return;\n\n        const variables: UpdateParams<TResponse, TResponseError, TVariables> = {\n            id: id ?? \"\",\n            values,\n            resource: identifier ?? resource.name,\n            successNotification: false,\n            errorNotification: false,\n            meta: { ...combinedMeta, ...mutationMeta },\n            metaData: { ...combinedMeta, ...mutationMeta },\n            dataProviderName,\n            invalidates: [],\n            mutationMode: \"pessimistic\",\n        };\n\n        return autoSaveMutation.mutate(variables, {\n            onSuccess: (data, _, context) => {\n                if (onMutationSuccess) {\n                    onMutationSuccess(data, values, context, true);\n                }\n            },\n            onError: (error: TResponseError, _, context) => {\n                if (onMutationError) {\n                    return onMutationError(error, values, context, true);\n                }\n            },\n        });\n    };\n\n    const onFinishAutoSave = debounce((allValues) => {\n        return onFinishAutoSaveMutation(allValues);\n    }, autoSave?.debounce || 1000);\n\n    const onFinishUpdate = async (values: TVariables) => {\n        setWarnWhen(false);\n\n        if (!resource) return;\n\n        const variables: UpdateParams<TResponse, TResponseError, TVariables> = {\n            id: id ?? \"\",\n            values,\n            resource: identifier ?? resource.name,\n            mutationMode,\n            undoableTimeout,\n            successNotification,\n            errorNotification,\n            meta: { ...combinedMeta, ...mutationMeta },\n            metaData: { ...combinedMeta, ...mutationMeta },\n            dataProviderName,\n            invalidates,\n            optimisticUpdateMap,\n        };\n\n        const onSuccess = () => {\n            handleSubmitWithRedirect({\n                redirect: designatedRedirectAction,\n                resource,\n                id,\n                meta: pickNotDeprecated(meta, metaData),\n            });\n        };\n\n        // setWarnWhen is set to \"false\" at the start of the mutation. With the help of setTimeout we guarantee that the value false is set.\n        if (mutationMode !== \"pessimistic\") {\n            setTimeout(() => {\n                onSuccess();\n            });\n        }\n\n        // setTimeout is required to make onSuccess e.g. callbacks to work if component unmounts i.e. on route change\n        return new Promise<UpdateResponse<TResponse> | void>(\n            (resolve, reject) => {\n                if (mutationMode !== \"pessimistic\") {\n                    resolve();\n                }\n                return setTimeout(() => {\n                    mutateUpdate(variables, {\n                        onSuccess: (data, _, context) => {\n                            if (onMutationSuccess) {\n                                onMutationSuccess(data, values, context);\n                            }\n\n                            if (mutationMode === \"pessimistic\") {\n                                onSuccess();\n                            }\n\n                            resolve(data);\n                        },\n                        onError: (error: TResponseError, _, context) => {\n                            if (onMutationError) {\n                                return onMutationError(error, values, context);\n                            }\n                            reject();\n                        },\n                    });\n                });\n            },\n        );\n    };\n\n    const createResult = {\n        formLoading: isFetchingQuery || isLoadingCreate,\n        mutationResult: mutationResultCreate,\n        onFinish: onFinishCreate,\n    };\n\n    const editResult = {\n        formLoading: isFetchingQuery || isLoadingUpdate,\n        mutationResult: mutationResultUpdate,\n        onFinish: onFinishUpdate,\n    };\n\n    const result = isCreate || isClone ? createResult : editResult;\n\n    const { elapsedTime } = useLoadingOvertime({\n        isLoading: result.mutationResult.isLoading || queryResult.isFetching,\n        interval: overtimeOptions?.interval,\n        onInterval: overtimeOptions?.onInterval,\n    });\n\n    return {\n        ...result,\n        queryResult,\n        onFinishAutoSave,\n        autoSaveProps: {\n            status: autoSaveMutation.status,\n            data: autoSaveMutation.data,\n            error: autoSaveMutation.error,\n        },\n        id,\n        setId,\n        redirect: (redirect, idFromFunction?: BaseKey | undefined) => {\n            handleSubmitWithRedirect({\n                redirect:\n                    redirect !== undefined\n                        ? redirect\n                        : isEdit\n                        ? \"list\"\n                        : \"edit\",\n                resource,\n                id: idFromFunction ?? id,\n                meta: pickNotDeprecated(meta, metaData),\n            });\n        },\n        overtime: {\n            elapsedTime,\n        },\n    };\n};\n","import { useCallback } from \"react\";\n\nimport {\n    BaseKey,\n    IResourceItem,\n    MetaDataQuery,\n    RedirectAction,\n} from \"../../interfaces\";\nimport { useNavigation } from \"@hooks\";\n\nexport type UseRedirectionAfterSubmissionType = () => (options: {\n    redirect: RedirectAction;\n    resource?: IResourceItem;\n    id?: BaseKey;\n    meta?: MetaDataQuery;\n}) => void;\n\nexport const useRedirectionAfterSubmission: UseRedirectionAfterSubmissionType =\n    () => {\n        const { show, edit, list, create } = useNavigation();\n\n        const handleSubmitWithRedirect = useCallback(\n            ({\n                redirect,\n                resource,\n                id,\n                meta = {},\n            }: {\n                redirect: RedirectAction;\n                resource?: IResourceItem;\n                id?: BaseKey;\n                meta?: MetaDataQuery;\n            }) => {\n                if (redirect && resource) {\n                    if (!!resource.show && redirect === \"show\" && id) {\n                        return show(resource, id, undefined, meta);\n                    }\n\n                    if (!!resource.edit && redirect === \"edit\" && id) {\n                        return edit(resource, id, undefined, meta);\n                    }\n\n                    if (!!resource.create && redirect === \"create\") {\n                        return create(resource, undefined, meta);\n                    }\n\n                    return list(resource, \"push\", meta);\n                } else {\n                    return;\n                }\n            },\n            [],\n        );\n\n        return handleSubmitWithRedirect;\n    };\n","import { RouterBindingsContext } from \"@contexts/router\";\nimport { useResource } from \"@hooks/resource\";\nimport React, { useCallback, useContext } from \"react\";\nimport type {\n    Action,\n    BaseKey,\n    GoConfig as GoConfigBase,\n    IResourceItem,\n} from \"../../../interfaces\";\nimport { useGetToPath } from \"../use-get-to-path\";\n\ntype ResourceWithoutId = {\n    /**\n     *  The name or identifier of the resource.\n     */\n    resource: string;\n    action: Extract<Action, \"create\" | \"list\">;\n    id?: never;\n};\n\ntype ResourceWithId = {\n    /**\n     *  The name or identifier of the resource.\n     */\n    resource: string;\n    action: Extract<Action, \"edit\" | \"show\" | \"clone\">;\n    id: BaseKey;\n};\n\nexport type Resource = ResourceWithoutId | ResourceWithId;\n\nexport type GoConfigWithResource = Omit<GoConfigBase, \"to\"> & {\n    to?: GoConfigBase[\"to\"] | Resource;\n};\n\nexport const useGo = () => {\n    const bindings = useContext(RouterBindingsContext);\n    const { select: resourceSelect } = useResource();\n    const getToPath = useGetToPath();\n\n    const useGo = React.useMemo(\n        () => bindings?.go ?? (() => () => undefined),\n        [bindings?.go],\n    );\n\n    const goFromRouter = useGo();\n\n    const go = useCallback(\n        (config: GoConfigWithResource | GoConfigBase) => {\n            if (typeof config.to !== \"object\") {\n                return goFromRouter({ ...config, to: config.to });\n            }\n\n            // when config.to is an object, it means that we want to go to a resource.\n            // so we need to find the path for the resource.\n            const { resource } = resourceSelect(config.to.resource);\n            handleResourceErrors(config.to, resource);\n            const newTo = getToPath({\n                resource,\n                action: config.to.action,\n                meta: {\n                    id: config.to.id,\n                },\n            });\n\n            return goFromRouter({\n                ...config,\n                to: newTo,\n            });\n        },\n        [resourceSelect, goFromRouter],\n    );\n\n    return go;\n};\n\n/**\n * handle errors for resource\n * @internal\n */\nexport const handleResourceErrors = (to: Resource, resource: IResourceItem) => {\n    if (!to?.action || !to?.resource) {\n        throw new Error(`[useGo]: \"action\" or \"resource\" is required.`);\n    }\n\n    if ([\"edit\", \"show\", \"clone\"].includes(to?.action) && !to.id) {\n        throw new Error(\n            `[useGo]: [action: ${to.action}] requires an \"id\" for resource [resource: ${to.resource}]`,\n        );\n    }\n\n    const actionUrl = resource[to.action];\n    if (!actionUrl) {\n        throw new Error(\n            `[useGo]: [action: ${to.action}] is not defined for [resource: ${to.resource}]`,\n        );\n    }\n};\n","import React from \"react\";\nimport { useResource } from \"../../resource\";\nimport { Action, IResourceItem } from \"../../../interfaces\";\nimport { getActionRoutesFromResource } from \"../../../definitions/helpers/router\";\nimport { useParsed } from \"../use-parsed\";\nimport { composeRoute } from \"../../../definitions/helpers/router/compose-route\";\nimport { useRouterType } from \"./../../../contexts/router-picker\";\n\ntype UseToPathParams = {\n    resource?: IResourceItem;\n    action: Action;\n    meta?: Record<string, unknown>;\n    legacy?: boolean;\n};\n\ntype GetToPathFn = (params: UseToPathParams) => string | undefined;\n\n/**\n * Returns a function to get the route for a given action and resource.\n * If resource is not provided, it will use the resource from the route.\n * If the resource is not found, it will return undefined.\n * If the action is not found, it will return undefined.\n * `meta` can be provided to compose the routes with parameters. (Can be used for nested routes.)\n */\nexport const useGetToPath = (): GetToPathFn => {\n    const routerType = useRouterType();\n    const { resource: resourceFromRoute, resources } = useResource();\n    const parsed = useParsed();\n\n    const fn = React.useCallback(\n        ({ resource, action, meta }: UseToPathParams): string | undefined => {\n            const selectedResource = resource || resourceFromRoute;\n\n            if (!selectedResource) {\n                return undefined;\n            }\n\n            const actionRoutes = getActionRoutesFromResource(\n                selectedResource,\n                resources,\n                routerType === \"legacy\",\n            );\n\n            const actionRoute = actionRoutes.find(\n                (item) => item.action === action,\n            )?.route;\n\n            if (!actionRoute) {\n                return undefined;\n            }\n\n            const composed = composeRoute(\n                actionRoute,\n                selectedResource?.meta,\n                parsed,\n                meta,\n            );\n\n            return composed;\n        },\n        [resources, resourceFromRoute, parsed],\n    );\n\n    return fn;\n};\n","import { RouterBindingsContext } from \"@contexts/router\";\nimport React, { useContext } from \"react\";\n\nexport const useBack = () => {\n    const bindings = useContext(RouterBindingsContext);\n\n    const useBack = React.useMemo(\n        () => bindings?.back ?? (() => () => undefined),\n        [bindings?.back],\n    );\n\n    const back = useBack();\n\n    return back;\n};\n","import { useRouterContext, useResource } from \"@hooks\";\nimport { BaseKey, IResourceItem, MetaDataQuery } from \"../../interfaces\";\nimport { useGo } from \"@hooks/router/use-go\";\nimport { useParsed } from \"@hooks/router/use-parsed\";\nimport { useRouterType } from \"@contexts/router-picker\";\nimport { getActionRoutesFromResource } from \"@definitions/helpers/router\";\nimport { pickResource } from \"@definitions/helpers/pick-resource\";\nimport { composeRoute } from \"@definitions/helpers/router/compose-route\";\nimport { useBack } from \"@hooks/router/use-back\";\n\nexport type HistoryType = \"push\" | \"replace\";\n\n/**\n * `refine` uses {@link https://reactrouter.com/en/hooks/use-navigate `React Router`} and comes with all redirects out of the box.\n * It allows you to manage your routing operations in refine.\n * Using this hook, you can manage all the routing operations of your application very easily.\n *\n * @internal This is an internal hook of refine. Do not use it directly.\n *\n * @see {@link https://refine.dev/docs/api-reference/core/hooks/navigation/useNavigation} for more details.\n */\nexport const useNavigation = () => {\n    const { resources } = useResource();\n    const routerType = useRouterType();\n    const { useHistory } = useRouterContext();\n    const history = useHistory();\n    const parsed = useParsed();\n    const go = useGo();\n    const back = useBack();\n\n    const handleUrl = (url: string, type: HistoryType = \"push\") => {\n        if (routerType === \"legacy\") {\n            history[type](url);\n        } else {\n            go({ to: url, type });\n        }\n    };\n\n    const createUrl = (\n        resource: string | IResourceItem,\n        meta: MetaDataQuery = {},\n    ) => {\n        if (routerType === \"legacy\") {\n            const resourceItem =\n                typeof resource === \"string\"\n                    ? pickResource(resource, resources, true) ?? {\n                          name: resource,\n                          route: resource,\n                      }\n                    : resource;\n\n            const createActionRoute = getActionRoutesFromResource(\n                resourceItem,\n                resources,\n                true,\n            ).find((r) => r.action === \"create\");\n\n            if (!createActionRoute) {\n                return \"\";\n            }\n\n            return composeRoute(\n                createActionRoute.route,\n                resourceItem?.meta,\n                parsed,\n                meta,\n            );\n        } else {\n            const resourceItem =\n                typeof resource === \"string\"\n                    ? pickResource(resource, resources) ?? { name: resource }\n                    : resource;\n\n            const createActionRoute = getActionRoutesFromResource(\n                resourceItem,\n                resources,\n            ).find((r) => r.action === \"create\")?.route;\n\n            if (!createActionRoute) {\n                return \"\";\n            }\n\n            return go({\n                to: composeRoute(\n                    createActionRoute,\n                    resourceItem?.meta,\n                    parsed,\n                    meta,\n                ),\n                type: \"path\",\n            }) as string;\n        }\n    };\n\n    const editUrl = (\n        resource: string | IResourceItem,\n        id: BaseKey,\n        meta: MetaDataQuery = {},\n    ) => {\n        const encodedId = encodeURIComponent(id);\n        if (routerType === \"legacy\") {\n            const resourceItem =\n                typeof resource === \"string\"\n                    ? pickResource(resource, resources, true) ?? {\n                          name: resource,\n                          route: resource,\n                      }\n                    : resource;\n\n            const editActionRoute = getActionRoutesFromResource(\n                resourceItem,\n                resources,\n                true,\n            ).find((r) => r.action === \"edit\");\n\n            if (!editActionRoute) {\n                return \"\";\n            }\n\n            return composeRoute(\n                editActionRoute.route,\n                resourceItem?.meta,\n                parsed,\n                {\n                    ...meta,\n                    id: encodedId,\n                },\n            );\n        } else {\n            const resourceItem =\n                typeof resource === \"string\"\n                    ? pickResource(resource, resources) ?? { name: resource }\n                    : resource;\n\n            const editActionRoute = getActionRoutesFromResource(\n                resourceItem,\n                resources,\n            ).find((r) => r.action === \"edit\")?.route;\n\n            if (!editActionRoute) {\n                return \"\";\n            }\n\n            return go({\n                to: composeRoute(editActionRoute, resourceItem?.meta, parsed, {\n                    ...meta,\n                    id: encodedId,\n                }),\n                type: \"path\",\n            }) as string;\n        }\n    };\n\n    const cloneUrl = (\n        resource: string | IResourceItem,\n        id: BaseKey,\n        meta: MetaDataQuery = {},\n    ) => {\n        const encodedId = encodeURIComponent(id);\n\n        if (routerType === \"legacy\") {\n            const resourceItem =\n                typeof resource === \"string\"\n                    ? pickResource(resource, resources, true) ?? {\n                          name: resource,\n                          route: resource,\n                      }\n                    : resource;\n\n            const cloneActionRoute = getActionRoutesFromResource(\n                resourceItem,\n                resources,\n                true,\n            ).find((r) => r.action === \"clone\");\n\n            if (!cloneActionRoute) {\n                return \"\";\n            }\n\n            return composeRoute(\n                cloneActionRoute.route,\n                resourceItem?.meta,\n                parsed,\n                {\n                    ...meta,\n                    id: encodedId,\n                },\n            );\n        } else {\n            const resourceItem =\n                typeof resource === \"string\"\n                    ? pickResource(resource, resources) ?? { name: resource }\n                    : resource;\n\n            const cloneActionRoute = getActionRoutesFromResource(\n                resourceItem,\n                resources,\n            ).find((r) => r.action === \"clone\")?.route;\n\n            if (!cloneActionRoute) {\n                return \"\";\n            }\n\n            return go({\n                to: composeRoute(cloneActionRoute, resourceItem?.meta, parsed, {\n                    ...meta,\n                    id: encodedId,\n                }),\n                type: \"path\",\n            }) as string;\n        }\n    };\n\n    const showUrl = (\n        resource: string | IResourceItem,\n        id: BaseKey,\n        meta: MetaDataQuery = {},\n    ) => {\n        const encodedId = encodeURIComponent(id);\n        if (routerType === \"legacy\") {\n            const resourceItem =\n                typeof resource === \"string\"\n                    ? pickResource(resource, resources, true) ?? {\n                          name: resource,\n                          route: resource,\n                      }\n                    : resource;\n\n            const showActionRoute = getActionRoutesFromResource(\n                resourceItem,\n                resources,\n                true,\n            ).find((r) => r.action === \"show\");\n\n            if (!showActionRoute) {\n                return \"\";\n            }\n\n            return composeRoute(\n                showActionRoute.route,\n                resourceItem?.meta,\n                parsed,\n                {\n                    ...meta,\n                    id: encodedId,\n                },\n            );\n        } else {\n            const resourceItem =\n                typeof resource === \"string\"\n                    ? pickResource(resource, resources) ?? { name: resource }\n                    : resource;\n\n            const showActionRoute = getActionRoutesFromResource(\n                resourceItem,\n                resources,\n            ).find((r) => r.action === \"show\")?.route;\n\n            if (!showActionRoute) {\n                return \"\";\n            }\n\n            return go({\n                to: composeRoute(showActionRoute, resourceItem?.meta, parsed, {\n                    ...meta,\n                    id: encodedId,\n                }),\n                type: \"path\",\n            }) as string;\n        }\n    };\n\n    const listUrl = (\n        resource: string | IResourceItem,\n        meta: MetaDataQuery = {},\n    ) => {\n        if (routerType === \"legacy\") {\n            const resourceItem =\n                typeof resource === \"string\"\n                    ? pickResource(resource, resources, true) ?? {\n                          name: resource,\n                          route: resource,\n                      }\n                    : resource;\n\n            const listActionRoute = getActionRoutesFromResource(\n                resourceItem,\n                resources,\n                true,\n            ).find((r) => r.action === \"list\");\n\n            if (!listActionRoute) {\n                return \"\";\n            }\n\n            return composeRoute(\n                listActionRoute.route,\n                resourceItem?.meta,\n                parsed,\n                meta,\n            );\n        } else {\n            const resourceItem =\n                typeof resource === \"string\"\n                    ? pickResource(resource, resources) ?? { name: resource }\n                    : resource;\n\n            const listActionRoute = getActionRoutesFromResource(\n                resourceItem,\n                resources,\n            ).find((r) => r.action === \"list\")?.route;\n\n            if (!listActionRoute) {\n                return \"\";\n            }\n\n            return go({\n                to: composeRoute(\n                    listActionRoute,\n                    resourceItem?.meta,\n                    parsed,\n                    meta,\n                ),\n                type: \"path\",\n            }) as string;\n        }\n    };\n\n    const create = (\n        resource: string | IResourceItem,\n        type: HistoryType = \"push\",\n        meta: MetaDataQuery = {},\n    ) => {\n        handleUrl(createUrl(resource, meta), type);\n    };\n\n    const edit = (\n        resource: string | IResourceItem,\n        id: BaseKey,\n        type: HistoryType = \"push\",\n        meta: MetaDataQuery = {},\n    ) => {\n        handleUrl(editUrl(resource, id, meta), type);\n    };\n\n    const clone = (\n        resource: string | IResourceItem,\n        id: BaseKey,\n        type: HistoryType = \"push\",\n        meta: MetaDataQuery = {},\n    ) => {\n        handleUrl(cloneUrl(resource, id, meta), type);\n    };\n\n    const show = (\n        resource: string | IResourceItem,\n        id: BaseKey,\n        type: HistoryType = \"push\",\n        meta: MetaDataQuery = {},\n    ) => {\n        handleUrl(showUrl(resource, id, meta), type);\n    };\n\n    const list = (\n        resource: string | IResourceItem,\n        type: HistoryType = \"push\",\n        meta: MetaDataQuery = {},\n    ) => {\n        handleUrl(listUrl(resource, meta), type);\n    };\n\n    /**\n     * @deprecated Please use `useGo` hook instead.\n     */\n    const push = (path: string, ...rest: unknown[]) => {\n        if (routerType === \"legacy\") {\n            history.push(path, ...rest);\n        } else {\n            go({ to: path, type: \"push\" });\n        }\n    };\n\n    /**\n     * @deprecated Please use `useGo` hook instead.\n     */\n    const replace = (path: string, ...rest: unknown[]) => {\n        if (routerType === \"legacy\") {\n            history.replace(path, ...rest);\n        } else {\n            go({ to: path, type: \"replace\" });\n        }\n    };\n\n    /**\n     * @deprecated Please use `useBack` hook instead.\n     */\n    const goBack = () => {\n        if (routerType === \"legacy\") {\n            history.goBack();\n        } else {\n            back();\n        }\n    };\n\n    return {\n        create,\n        createUrl,\n        edit,\n        editUrl,\n        clone,\n        cloneUrl,\n        show,\n        showUrl,\n        list,\n        listUrl,\n        push,\n        replace,\n        goBack,\n    };\n};\n","import React, { useState } from \"react\";\nimport { QueryObserverResult, UseQueryOptions } from \"@tanstack/react-query\";\nimport warnOnce from \"warn-once\";\n\nimport { useMeta, useOne } from \"@hooks\";\n\nimport {\n    BaseRecord,\n    GetOneResponse,\n    SuccessErrorNotification,\n    MetaQuery,\n    LiveModeProps,\n    BaseKey,\n    HttpError,\n    Prettify,\n} from \"../../interfaces\";\nimport { useResource } from \"../resource/useResource\";\nimport { pickNotDeprecated } from \"@definitions/helpers\";\nimport {\n    useLoadingOvertime,\n    UseLoadingOvertimeOptionsProps,\n    UseLoadingOvertimeReturnType,\n} from \"../useLoadingOvertime\";\n\nexport type useShowReturnType<TData extends BaseRecord = BaseRecord, TError extends HttpError = HttpError> = {\n    queryResult: QueryObserverResult<GetOneResponse<TData>, TError>;\n    showId?: BaseKey;\n    setShowId: React.Dispatch<React.SetStateAction<BaseKey | undefined>>;\n} & UseLoadingOvertimeReturnType;\n\nexport type useShowProps<\n    TQueryFnData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TData extends BaseRecord = TQueryFnData,\n> = {\n    /**\n     * Resource name for API data interactions\n     * @default Reads `:resource` from the URL\n     */\n    resource?: string;\n    /**\n     * Data item ID for API data interactions\n     * @default Reads `:id` from the URL\n     */\n    id?: BaseKey;\n    /**\n     * react-query's [useQuery](https://tanstack.com/query/v4/docs/reference/useQuery) options\n     */\n    queryOptions?: UseQueryOptions<\n        GetOneResponse<TQueryFnData>,\n        TError,\n        GetOneResponse<TData>\n    >;\n    /**\n     * Additional meta data to pass to the data provider's `getOne`\n     */\n    meta?: MetaQuery;\n    /**\n     * Additional meta data to pass to the data provider's `getOne`\n     * @deprecated `metaData` is deprecated with refine@4, refine will pass `meta` instead, however, we still support `metaData` for backward compatibility.\n     */\n    metaData?: MetaQuery;\n    /**\n     * Target data provider name for API call to be made\n     * @default `\"default\"`\n     */\n    dataProviderName?: string;\n} & LiveModeProps &\n    SuccessErrorNotification<\n        GetOneResponse<TData>,\n        TError,\n        Prettify<{ id?: BaseKey } & MetaQuery>\n    > &\n    UseLoadingOvertimeOptionsProps;\n\n/**\n * `useShow` hook allows you to fetch the desired record.\n * It uses `getOne` method as query function from the dataProvider that is\n * passed to {@link https://refine.dev/docs/api-reference/core/components/refine-config/ `<Refine>`}.\n *\n * @see {@link https://refine.dev/docs/api-reference/core/hooks/show/useShow} for more details.\n *\n * @typeParam TQueryFnData - Result data returned by the query function. Extends {@link https://refine.dev/docs/api-reference/core/interfaceReferences#baserecord `BaseRecord`}\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/api-reference/core/interfaceReferences#httperror `HttpError`}\n * @typeParam TData - Result data returned by the `select` function. Extends {@link https://refine.dev/docs/api-reference/core/interfaceReferences#baserecord `BaseRecord`}. Defaults to `TQueryFnData`\n *\n */\n\nexport const useShow = <\n    TQueryFnData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TData extends BaseRecord = TQueryFnData,\n>({\n    resource: resourceFromProp,\n    id,\n    successNotification,\n    errorNotification,\n    meta,\n    metaData,\n    liveMode,\n    onLiveEvent,\n    dataProviderName,\n    queryOptions,\n    overtimeOptions,\n}: useShowProps<\n    TQueryFnData,\n    TError,\n    TData\n> = {}): useShowReturnType<TData, TError> => {\n    const {\n        resource,\n        id: idFromRoute,\n        identifier,\n    } = useResource(resourceFromProp);\n    const { identifier: inferredIdentifier } = useResource();\n    const getMeta = useMeta();\n\n    const getDefaultId = () => {\n        const idFromPropsOrRoute = id ?? idFromRoute;\n\n        if (resourceFromProp && resourceFromProp !== inferredIdentifier) {\n            return id;\n        }\n\n        return idFromPropsOrRoute;\n    };\n    const defaultId = getDefaultId();\n\n    const [showId, setShowId] = useState<BaseKey | undefined>(defaultId);\n\n    React.useEffect(() => {\n        setShowId(defaultId);\n    }, [defaultId]);\n\n    const combinedMeta = getMeta({\n        resource,\n        meta: pickNotDeprecated(meta, metaData),\n    });\n\n    warnOnce(\n        Boolean(resourceFromProp) && !Boolean(id),\n        `[useShow]: resource: \"${identifier}\", id: ${id} \\n\\n` +\n            `If you don't use the \\`setShowId\\` method to set the \\`showId\\`, you should pass the \\`id\\` prop to \\`useShow\\`. Otherwise, \\`useShow\\` will not be able to infer the \\`id\\` from the current URL. \\n\\n` +\n            `See https://refine.dev/docs/api-reference/core/hooks/show/useShow/#resource`,\n    );\n\n    const queryResult = useOne<TQueryFnData, TError, TData>({\n        resource: identifier,\n        id: showId ?? \"\",\n        queryOptions: {\n            enabled: showId !== undefined,\n            ...queryOptions,\n        },\n        successNotification,\n        errorNotification,\n        meta: combinedMeta,\n        metaData: combinedMeta,\n        liveMode,\n        onLiveEvent,\n        dataProviderName,\n    });\n\n    const { elapsedTime } = useLoadingOvertime({\n        isLoading: queryResult.isFetching,\n        interval: overtimeOptions?.interval,\n        onInterval: overtimeOptions?.onInterval,\n    });\n\n    return {\n        queryResult,\n        showId,\n        setShowId,\n        overtime: { elapsedTime },\n    };\n};\n","import { useEffect, useState } from \"react\";\nimport { parse, ParseConfig } from \"papaparse\";\nimport chunk from \"lodash/chunk\";\n\nimport { useCreate, useCreateMany, useMeta, useResource } from \"@hooks\";\nimport { MapDataFn, BaseRecord, HttpError, MetaQuery } from \"../../interfaces\";\nimport {\n    importCSVMapper,\n    sequentialPromises,\n    pickNotDeprecated,\n} from \"@definitions\";\nimport { UseCreateReturnType } from \"../../hooks/data/useCreate\";\nimport { UseCreateManyReturnType } from \"../../hooks/data/useCreateMany\";\n\nexport type ImportSuccessResult<TVariables, TData> = {\n    request: TVariables[];\n    type: \"success\";\n    response: TData[];\n};\n\nexport type ImportErrorResult<TVariables> = {\n    request: TVariables[];\n    type: \"error\";\n    response: HttpError[];\n};\n\nexport type OnFinishParams<TVariables, TData> = {\n    succeeded: ImportSuccessResult<TVariables, TData>[];\n    errored: ImportErrorResult<TVariables>[];\n};\n\nexport type OnProgressParams = {\n    totalAmount: number;\n    processedAmount: number;\n};\n\nexport type ImportOptions<\n    TItem,\n    TVariables = any,\n    TData extends BaseRecord = BaseRecord,\n> = {\n    /**\n     * Resource name for API data interactions.\n     * @default Resource name that it reads from route\n     * @deprecated `resourceName` is deprecated. Use `resource` instead.\n     */\n    resourceName?: string;\n    /**\n     * Resource name for API data interactions.\n     * @default Resource name that it reads from route\n     */\n    resource?: string;\n    /**\n     * A mapping function that runs for every record. Mapped data will be included in the file contents.\n     */\n    mapData?: MapDataFn<TItem, TVariables>;\n    /**\n     * Custom Papa Parse options.\n     * @type [`ParseConfig`](https://www.papaparse.com/docs)\n     */\n    paparseOptions?: ParseConfig;\n    /**\n     * Requests batch size. If it is 1, all records are sent one by one. By default, it is [`Number.MAX_SAFE_INTEGER`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER) to send all records in one batch. If it is more than 1, `createMany` should be implemented on DataProvider.\n     */\n    batchSize?: number;\n    /**\n     * Called with errors and successful responses when all requests are sent.\n     */\n    onFinish?: (results: OnFinishParams<TVariables, TData>) => void;\n    /**\n     *  Metadata query for `dataProvider`\n     */\n    meta?: MetaQuery;\n    /**\n     *  Metadata query for `dataProvider`\n     * @deprecated `metaData` is deprecated with refine@4, refine will pass `meta` instead, however, we still support `metaData` for backward compatibility.\n     */\n    metaData?: MetaQuery;\n    /**\n     *  A callback function that returns a current state of uploading process.\n     *\n     *  Ex: `percentage = onProgressParams.processedAmount / onProgressParams.totalAmount * 100`\n     */\n    onProgress?: (onProgressParams: OnProgressParams) => void;\n    /**\n     * If there is more than one `dataProvider`, you should use the `dataProviderName` that you will use.\n     */\n    dataProviderName?: string;\n};\n\nexport type CreatedValuesType<TVariables, TData> =\n    | ImportSuccessResult<TVariables, TData>\n    | ImportErrorResult<TVariables>;\n\nexport type HandleChangeType<TVariables, TData> = (onChangeParams: {\n    file: Partial<File>;\n}) => Promise<CreatedValuesType<TVariables, TData>[]>;\n\nexport type UseImportInputPropsType = {\n    type: \"file\";\n    accept: string;\n    onChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\n};\n\nexport type UseImportReturnType<\n    TData extends BaseRecord = BaseRecord,\n    TVariables = {},\n    TError extends HttpError = HttpError,\n> = {\n    inputProps: UseImportInputPropsType;\n    mutationResult:\n        | UseCreateReturnType<TData, TError, TVariables>\n        | UseCreateManyReturnType<TData, TError, TVariables>;\n    isLoading: boolean;\n    handleChange: HandleChangeType<TVariables, TData>;\n};\n\n/**\n * `useImport` hook allows you to handle your csv import logic easily.\n *\n * @see {@link https://refine.dev/docs/api-reference/core/hooks/import-export/useImport} for more details.\n *\n * @typeParam TItem - Interface of parsed csv data\n * @typeParam TData - Result data of the query extends {@link https://refine.dev/docs/api-reference/core/interfaceReferences#baserecord `BaseRecord`}\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/api-reference/core/interfaceReferences/#httperror `HttpError`}\n * @typeParam TVariables - Values for mutation function\n *\n */\nexport const useImport = <\n    TItem = any,\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = any,\n>({\n    resourceName,\n    resource: resourceFromProps,\n    mapData = (item) => item as unknown as TVariables,\n    paparseOptions,\n    batchSize = Number.MAX_SAFE_INTEGER,\n    onFinish,\n    meta,\n    metaData,\n    onProgress,\n    dataProviderName,\n}: ImportOptions<TItem, TVariables, TData> = {}): UseImportReturnType<\n    TData,\n    TVariables,\n    TError\n> => {\n    const [processedAmount, setProcessedAmount] = useState<number>(0);\n    const [totalAmount, setTotalAmount] = useState<number>(0);\n    const [isLoading, setIsLoading] = useState(false);\n\n    const { resource, identifier } = useResource(\n        resourceFromProps ?? resourceName,\n    );\n\n    const getMeta = useMeta();\n\n    const createMany = useCreateMany<TData, TError, TVariables>();\n    const create = useCreate<TData, TError, TVariables>();\n\n    const combinedMeta = getMeta({\n        resource,\n        meta: pickNotDeprecated(meta, metaData),\n    });\n\n    let mutationResult:\n        | UseCreateReturnType<TData, TError, TVariables>\n        | UseCreateManyReturnType<TData, TError, TVariables>;\n\n    if (batchSize === 1) {\n        mutationResult = create;\n    } else {\n        mutationResult = createMany;\n    }\n\n    const handleCleanup = () => {\n        setTotalAmount(0);\n        setProcessedAmount(0);\n        setIsLoading(false);\n    };\n\n    const handleFinish = (\n        createdValues: CreatedValuesType<TVariables, TData>[],\n    ) => {\n        const result = {\n            succeeded: createdValues.filter(\n                (item) => item.type === \"success\",\n            ) as unknown as ImportSuccessResult<TVariables, TData>[],\n            errored: createdValues.filter(\n                (item) => item.type === \"error\",\n            ) as unknown as ImportErrorResult<TVariables>[],\n        };\n\n        onFinish?.(result);\n        setIsLoading(false);\n    };\n\n    useEffect(() => {\n        onProgress?.({ totalAmount, processedAmount });\n    }, [totalAmount, processedAmount]);\n\n    const handleChange: HandleChangeType<TVariables, TData> = ({ file }) => {\n        handleCleanup();\n        return new Promise<CreatedValuesType<TVariables, TData>[]>(\n            (resolve) => {\n                setIsLoading(true);\n                parse(file as any, {\n                    complete: async ({ data }: { data: unknown[][] }) => {\n                        const values = importCSVMapper(data, mapData);\n\n                        setTotalAmount(values.length);\n\n                        if (batchSize === 1) {\n                            // Create Processor Functions\n                            const valueFns = values.map((value) => {\n                                const fn = async () => {\n                                    const response = await create.mutateAsync({\n                                        resource: identifier ?? \"\",\n                                        values: value,\n                                        successNotification: false,\n                                        errorNotification: false,\n                                        dataProviderName,\n                                        meta: combinedMeta,\n                                        metaData: combinedMeta,\n                                    });\n\n                                    return { response, value };\n                                };\n                                return fn;\n                            });\n                            // Sequentially run processor functions and process resolves/rejects\n                            const createdValues = await sequentialPromises(\n                                valueFns,\n                                ({ response, value }) => {\n                                    setProcessedAmount((currentAmount) => {\n                                        return currentAmount + 1;\n                                    });\n\n                                    return {\n                                        response: [response.data],\n                                        type: \"success\",\n                                        request: [value],\n                                    } as ImportSuccessResult<TVariables, TData>;\n                                },\n                                (error: HttpError, index) => {\n                                    return {\n                                        response: [error],\n                                        type: \"error\",\n                                        request: [values[index]],\n                                    } as ImportErrorResult<TVariables>;\n                                },\n                            );\n                            // Resolve with created values\n                            resolve(createdValues);\n                        } else {\n                            // Create Chunks\n                            const chunks = chunk(values, batchSize);\n                            // Create Chunk Processor Functions\n                            const chunkedFns = chunks.map((chunkedValues) => {\n                                const fn = async () => {\n                                    const response =\n                                        await createMany.mutateAsync({\n                                            resource: identifier ?? \"\",\n                                            values: chunkedValues,\n                                            successNotification: false,\n                                            errorNotification: false,\n                                            dataProviderName,\n                                            meta: combinedMeta,\n                                            metaData: combinedMeta,\n                                        });\n\n                                    return {\n                                        response,\n                                        value: chunkedValues,\n                                        currentBatchLength:\n                                            chunkedValues.length,\n                                    };\n                                };\n\n                                return fn;\n                            });\n                            // Sequentially run chunked functions and process resolves/rejects\n                            const createdValues = await sequentialPromises(\n                                chunkedFns,\n                                ({ response, currentBatchLength, value }) => {\n                                    setProcessedAmount((currentAmount) => {\n                                        return (\n                                            currentAmount + currentBatchLength\n                                        );\n                                    });\n\n                                    return {\n                                        response: response.data,\n                                        type: \"success\",\n                                        request: value,\n                                    } as ImportSuccessResult<TVariables, TData>;\n                                },\n                                (error: HttpError, index) => {\n                                    return {\n                                        response: [error],\n                                        type: \"error\",\n                                        request: chunks[index],\n                                    } as ImportErrorResult<TVariables>;\n                                },\n                            );\n                            // resolve with all created values\n                            resolve(createdValues);\n                        }\n                    },\n\n                    ...paparseOptions,\n                });\n            },\n        ).then((createdValues) => {\n            handleFinish(createdValues);\n            return createdValues;\n        });\n    };\n\n    return {\n        inputProps: {\n            type: \"file\",\n            accept: \".csv\",\n            onChange: (event: React.ChangeEvent<HTMLInputElement>) => {\n                if (event.target.files && event.target.files.length > 0) {\n                    handleChange({ file: event.target.files[0] });\n                }\n            },\n        },\n        mutationResult,\n        isLoading,\n        handleChange,\n    };\n};\n","import { useCallback, useState } from \"react\";\n\nexport type useModalReturnType = {\n    visible: boolean;\n    show: () => void;\n    close: () => void;\n};\n\nexport type useModalProps = {\n    /**\n     * Initial state of the modal\n     */\n    defaultVisible?: boolean;\n};\n\nexport const useModal = ({\n    defaultVisible = false,\n}: useModalProps = {}): useModalReturnType => {\n    const [visible, setVisible] = useState(defaultVisible);\n\n    const show = useCallback(() => setVisible(true), [visible]);\n    const close = useCallback(() => setVisible(false), [visible]);\n\n    return {\n        visible,\n        show,\n        close,\n    };\n};\n","import { Action, IResourceItem } from \"../../../interfaces\";\nimport { useGetToPath } from \"../use-get-to-path\";\n\ntype UseToPathParams = {\n    resource?: IResourceItem;\n    action: Action;\n    meta?: Record<string, unknown>;\n    legacy?: boolean;\n};\n\n/**\n * Returns the route for a given action and resource.\n * If resource is not provided, it will use the resource from the route.\n * If the resource is not found, it will return undefined.\n * If the action is not found, it will return undefined.\n * `meta` can be provided to compose the routes with parameters. (Can be used for nested routes.)\n */\nexport const useToPath = ({\n    resource,\n    action,\n    meta,\n    legacy,\n}: UseToPathParams): string | undefined => {\n    const getToPath = useGetToPath();\n\n    return getToPath({ resource, action, meta, legacy });\n};\n","import { RouterBindingsContext } from \"@contexts/router\";\nimport React, { useContext } from \"react\";\n\nexport const useLink = () => {\n    const bindings = useContext(RouterBindingsContext);\n\n    if (bindings?.Link) {\n        return bindings.Link;\n    }\n\n    const FallbackLink: Required<typeof bindings>[\"Link\"] = ({\n        to,\n        ...rest\n    }) => <a href={to} {...rest} />;\n\n    return FallbackLink;\n};\n","import { useContext } from \"react\";\nimport { RouterContext, defaultProvider } from \"@contexts/legacy-router\";\n\nexport const useRouterContext = () => {\n    const routerContextValues = useContext(RouterContext);\n\n    const { useHistory, useLocation, useParams, Prompt, Link, routes } =\n        routerContextValues ?? defaultProvider;\n\n    return {\n        useHistory,\n        useLocation,\n        useParams,\n        Prompt,\n        Link,\n        routes,\n    };\n};\n","import React from \"react\";\n\nimport { IRouterContext } from \"../../interfaces\";\n\nexport const defaultProvider: IRouterContext = {\n    useHistory: () => false,\n    useLocation: () => false,\n    useParams: () => ({} as any),\n    Prompt: () => null,\n    Link: () => null,\n};\n\nexport const LegacyRouterContext =\n    React.createContext<IRouterContext>(defaultProvider);\n\nexport const RouterContext = LegacyRouterContext;\n\nexport const LegacyRouterContextProvider: React.FC<\n    Partial<IRouterContext> & {\n        children?: React.ReactNode;\n    }\n> = ({\n    children,\n    useHistory,\n    useLocation,\n    useParams,\n    Prompt,\n    Link,\n    routes,\n}) => {\n    return (\n        <RouterContext.Provider\n            value={{\n                useHistory: useHistory ?? defaultProvider.useHistory,\n                useLocation: useLocation ?? defaultProvider.useLocation,\n                useParams: useParams ?? defaultProvider.useParams,\n                Prompt: Prompt ?? defaultProvider.Prompt,\n                Link: Link ?? defaultProvider.Link,\n                routes: routes ?? defaultProvider.routes,\n            }}\n        >\n            {children}\n        </RouterContext.Provider>\n    );\n};\n","import {\n    useQuery,\n    UseQueryOptions,\n    UseQueryResult,\n} from \"@tanstack/react-query\";\nimport { useContext } from \"react\";\n\nimport { AccessControlContext } from \"@contexts/accessControl\";\nimport { sanitizeResource } from \"@definitions/helpers/sanitize-resource\";\nimport { CanParams, CanReturnType } from \"../../../interfaces\";\nimport { useKeys } from \"@hooks/useKeys\";\nimport { getXRay } from \"@refinedev/devtools-internal\";\n\nexport type UseCanProps = CanParams & {\n    /**\n     * react-query's [useQuery](https://tanstack.com/query/v4/docs/reference/useQuery) options\n     */\n    queryOptions?: UseQueryOptions<CanReturnType>;\n};\n\n/**\n * `useCan` uses the `can` as the query function for `react-query`'s {@link https://react-query.tanstack.com/guides/queries `useQuery`}. It takes the parameters that `can` takes. It can also be configured with `queryOptions` for `useQuery`. Returns the result of `useQuery`.\n * @see {@link https://refine.dev/docs/api-reference/core/hooks/accessControl/useCan} for more details.\n *\n * @typeParam CanParams {@link https://refine.dev/docs/core/interfaceReferences#canparams}\n * @typeParam CanReturnType {@link https://refine.dev/docs/core/interfaceReferences#canreturntype}\n *\n */\nexport const useCan = ({\n    action,\n    resource,\n    params,\n    queryOptions,\n}: UseCanProps): UseQueryResult<CanReturnType> => {\n    const { can } = useContext(AccessControlContext);\n    const { keys, preferLegacyKeys } = useKeys();\n\n    /**\n     * Since `react-query` stringifies the query keys, it will throw an error for a circular dependency if we include `React.ReactNode` elements inside the keys.\n     * The feature in #2220(https://github.com/refinedev/refine/issues/2220) includes such change and to fix this, we need to remove `icon` property in the `resource`\n     */\n    const { resource: _resource, ...paramsRest } = params ?? {};\n\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    const sanitizedResource = sanitizeResource(_resource);\n\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n    const queryResponse = useQuery<CanReturnType>(\n        keys()\n            .access()\n            .resource(resource)\n            .action(action)\n            .params({\n                params: { ...paramsRest, resource: sanitizedResource },\n                enabled: queryOptions?.enabled,\n            })\n            .get(preferLegacyKeys),\n        // Enabled check for `can` is enough to be sure that it's defined in the query function but TS is not smart enough to know that.\n        () =>\n            can?.({\n                action,\n                resource,\n                params: { ...paramsRest, resource: sanitizedResource },\n            }) ?? Promise.resolve({ can: true }),\n        {\n            enabled: typeof can !== \"undefined\",\n            ...queryOptions,\n            meta: {\n                ...queryOptions?.meta,\n                ...getXRay(\"useCan\", preferLegacyKeys),\n            },\n            retry: false,\n        },\n    );\n\n    return typeof can === \"undefined\"\n        ? ({ data: { can: true } } as typeof queryResponse)\n        : queryResponse;\n};\n","import React from \"react\";\n\nimport {\n    IAccessControlContext,\n    IAccessControlContextReturnType,\n} from \"./IAccessControlContext\";\n\n/** @deprecated default value for access control context has no use and is an empty object. */\nexport const defaultAccessControlContext: IAccessControlContext = {};\n\nexport const AccessControlContext =\n    React.createContext<IAccessControlContextReturnType>({\n        options: {\n            buttons: { enableAccessControl: true, hideIfUnauthorized: false },\n        },\n    });\n\nexport { IAccessControlContext };\n\nexport const AccessControlContextProvider: React.FC<\n    IAccessControlContext & {\n        children?: React.ReactNode;\n    }\n> = ({ can, children, options }) => {\n    return (\n        <AccessControlContext.Provider\n            value={{\n                can,\n                options: options\n                    ? {\n                          ...options,\n                          buttons: {\n                              enableAccessControl: true,\n                              hideIfUnauthorized: false,\n                              ...options.buttons,\n                          },\n                      }\n                    : {\n                          buttons: {\n                              enableAccessControl: true,\n                              hideIfUnauthorized: false,\n                          },\n                      },\n            }}\n        >\n            {children}\n        </AccessControlContext.Provider>\n    );\n};\n","import { IResourceItem } from \"../../../interfaces/bindings/resource\";\n\n/**\n * Remove all properties that are non-serializable from a resource object.\n */\nexport const sanitizeResource = (\n    resource?: Partial<IResourceItem> &\n        Required<Pick<IResourceItem, \"name\">> & { children?: unknown },\n):\n    | (Partial<IResourceItem> & Required<Pick<IResourceItem, \"name\">>)\n    | undefined => {\n    if (!resource) {\n        return undefined;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const {\n        icon,\n        list,\n        edit,\n        create,\n        show,\n        clone,\n        children,\n        meta,\n        options,\n        ...restResource\n    } = resource;\n\n    const { icon: _metaIcon, ...restMeta } = meta ?? {};\n    const { icon: _optionsIcon, ...restOptions } = options ?? {};\n\n    return {\n        ...restResource,\n        ...(meta ? { meta: restMeta } : {}),\n        ...(options ? { options: restOptions } : {}),\n    };\n};\n","import React from \"react\";\n\nimport { AccessControlContext } from \"@contexts/accessControl\";\nimport { sanitizeResource } from \"@definitions/helpers/sanitize-resource\";\nimport { IAccessControlContext } from \"../../interfaces\";\n\nexport const useCanWithoutCache = (): IAccessControlContext => {\n    const { can: canFromContext } = React.useContext(AccessControlContext);\n\n    const can = React.useMemo(() => {\n        if (!canFromContext) {\n            return undefined;\n        }\n\n        const canWithSanitizedResource: NonNullable<\n            typeof canFromContext\n        > = async ({ params, ...rest }) => {\n            const sanitizedResource = params?.resource\n                ? sanitizeResource(params.resource)\n                : undefined;\n\n            return canFromContext({\n                ...rest,\n                ...(params\n                    ? {\n                          params: {\n                              ...params,\n                              resource: sanitizedResource,\n                          },\n                      }\n                    : {}),\n            });\n        };\n\n        return canWithSanitizedResource;\n    }, [canFromContext]);\n\n    return { can };\n};\n","import { useCallback, useMemo, useState } from \"react\";\nimport { QueryObserverResult, UseQueryOptions } from \"@tanstack/react-query\";\nimport uniqBy from \"lodash/uniqBy\";\nimport debounce from \"lodash/debounce\";\nimport get from \"lodash/get\";\n\nimport { useList, useMany, useMeta } from \"@hooks\";\nimport {\n    CrudSorting,\n    BaseOption,\n    BaseRecord,\n    GetManyResponse,\n    GetListResponse,\n    CrudFilters,\n    SuccessErrorNotification,\n    HttpError,\n    LiveModeProps,\n    BaseKey,\n    Pagination,\n    MetaQuery,\n    Prettify,\n} from \"../../interfaces\";\nimport { pickNotDeprecated } from \"@definitions/helpers\";\nimport { useResource } from \"../resource/useResource/index\";\nimport { BaseListProps } from \"../data/useList\";\nimport {\n    useLoadingOvertime,\n    UseLoadingOvertimeOptionsProps,\n    UseLoadingOvertimeReturnType,\n} from \"../useLoadingOvertime\";\n\nexport type UseSelectProps<TQueryFnData, TError, TData> = {\n    /**\n     * Resource name for API data interactions\n     */\n    resource: string;\n    /**\n     * Set the option's value\n     * @default `\"title\"`\n     */\n    optionLabel?: keyof TData extends string ? keyof TData : never;\n    /**\n     * Set the option's label value\n     * @default `\"id\"`\n     */\n    optionValue?: keyof TData extends string ? keyof TData : never;\n    /**\n     * Allow us to sort the options\n     * @deprecated Use `sorters` instead\n     */\n    sort?: CrudSorting;\n    /**\n     * Allow us to sort the options\n     */\n    sorters?: CrudSorting;\n    /**\n     * Resource name for API data interactions\n     */\n    filters?: CrudFilters;\n    /**\n     * Adds extra `options`\n     */\n    defaultValue?: BaseKey | BaseKey[];\n    /**\n     * The number of milliseconds to delay\n     * @default `300`\n     */\n    debounce?: number;\n    /**\n     * react-query [useQuery](https://react-query.tanstack.com/reference/useQuery) options\n     */\n    queryOptions?: UseQueryOptions<\n        GetListResponse<TQueryFnData>,\n        TError,\n        GetListResponse<TData>\n    >;\n    /**\n     * Pagination option from [`useList()`](/docs/api-reference/core/hooks/data/useList/)\n     * @type {  current?: number; pageSize?: number;}\n     * @default `undefined`\n     */\n    pagination?: Prettify<\n        Omit<Pagination, \"mode\"> & {\n            /**\n             * Whether to use server side pagination or not.\n             * @default \"off\"\n             */\n            mode?: Pagination[\"mode\"];\n        }\n    >;\n    /**\n     * Disabling pagination option from [`useList()`](/docs/api-reference/core/hooks/data/useList/)\n     * @type boolean\n     * @default `false`\n     * @deprecated `hasPagination` is deprecated, use `pagination.mode` instead.\n     */\n    hasPagination?: boolean;\n    /**\n     * react-query [useQuery](https://react-query.tanstack.com/reference/useQuery) options\n     */\n    defaultValueQueryOptions?: UseQueryOptions<\n        GetManyResponse<TQueryFnData>,\n        TError\n    >;\n    /**\n     * If defined, this callback allows us to override all filters for every search request.\n     * @default `undefined`\n     */\n    onSearch?: (value: string) => CrudFilters;\n    /**\n     * Additional meta data to pass to the `useMany` from the data provider\n     */\n    meta?: MetaQuery;\n    /**\n     * Additional meta data to pass to the `useMany` from the data provider\n     * @deprecated `metaData` is deprecated with refine@4, refine will pass `meta` instead, however, we still support `metaData` for backward compatibility.\n     */\n    metaData?: MetaQuery;\n    /**\n     * If there is more than one `dataProvider`, you should use the `dataProviderName` that you will use.\n     * @default `default`\n     */\n    dataProviderName?: string;\n    /**\n     * Amount of records to fetch in select box list.\n     * @deprecated use [`pagination`](https://refine.dev/docs/api-reference/core/interfaceReferences/#pagination) instead\n     * @default `undefined`\n     */\n    fetchSize?: number;\n} & SuccessErrorNotification<\n    GetListResponse<TData>,\n    TError,\n    Prettify<BaseListProps>\n> &\n    LiveModeProps &\n    UseLoadingOvertimeOptionsProps;\n\nexport type UseSelectReturnType<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TOption extends BaseOption = BaseOption,\n> = {\n    queryResult: QueryObserverResult<GetListResponse<TData>, TError>;\n    defaultValueQueryResult: QueryObserverResult<GetManyResponse<TData>>;\n    onSearch: (value: string) => void;\n    options: TOption[];\n} & UseLoadingOvertimeReturnType;\n\n/**\n * `useSelect` hook is used to fetch data from the dataProvider and return the options for the select box.\n *\n * It uses `getList` method as query function from the dataProvider that is\n * passed to {@link https://refine.dev/docs/api-reference/core/components/refine-config/ `<Refine>`}.\n *\n * @see {@link https://refine.dev/docs/api-reference/core/hooks/useSelect} for more details.\n *\n * @typeParam TQueryFnData - Result data returned by the query function. Extends {@link https://refine.dev/docs/api-reference/core/interfaceReferences#baserecord `BaseRecord`}\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/api-reference/core/interfaceReferences#httperror `HttpError`}\n * @typeParam TData - Result data returned by the `select` function. Extends {@link https://refine.dev/docs/api-reference/core/interfaceReferences#baserecord `BaseRecord`}. Defaults to `TQueryFnData`\n *\n */\n\nexport const useSelect = <\n    TQueryFnData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TData extends BaseRecord = TQueryFnData,\n    TOption extends BaseOption = BaseOption,\n>(\n    props: UseSelectProps<TQueryFnData, TError, TData>,\n): UseSelectReturnType<TData, TError, TOption> => {\n    const [search, setSearch] = useState<CrudFilters>([]);\n    const [options, setOptions] = useState<TOption[]>([]);\n    const [selectedOptions, setSelectedOptions] = useState<TOption[]>([]);\n\n    const {\n        resource: resourceFromProps,\n        sort,\n        sorters,\n        filters = [],\n        optionLabel = \"title\",\n        optionValue = \"id\",\n        debounce: debounceValue = 300,\n        successNotification,\n        errorNotification,\n        defaultValueQueryOptions: defaultValueQueryOptionsFromProps,\n        queryOptions,\n        fetchSize,\n        pagination,\n        hasPagination = false,\n        liveMode,\n        defaultValue = [],\n        onLiveEvent,\n        onSearch: onSearchFromProp,\n        liveParams,\n        meta,\n        metaData,\n        dataProviderName,\n        overtimeOptions,\n    } = props;\n\n    const { resource, identifier } = useResource(resourceFromProps);\n\n    const getMeta = useMeta();\n\n    const combinedMeta = getMeta({\n        resource,\n        meta: pickNotDeprecated(meta, metaData),\n    });\n\n    const defaultValues = Array.isArray(defaultValue)\n        ? defaultValue\n        : [defaultValue];\n\n    const defaultValueQueryOnSuccess = useCallback(\n        (data: GetManyResponse<TData>) => {\n            setSelectedOptions(\n                data.data.map(\n                    (item) =>\n                        ({\n                            label: get(item, optionLabel),\n                            value: get(item, optionValue),\n                        } as TOption),\n                ),\n            );\n        },\n        [optionLabel, optionValue],\n    );\n\n    const defaultValueQueryOptions =\n        defaultValueQueryOptionsFromProps ?? (queryOptions as any);\n\n    const defaultValueQueryResult = useMany<TQueryFnData, TError, TData>({\n        resource: identifier,\n        ids: defaultValues,\n        queryOptions: {\n            ...defaultValueQueryOptions,\n            enabled:\n                defaultValues.length > 0 &&\n                (defaultValueQueryOptions?.enabled ?? true),\n            onSuccess: (data) => {\n                defaultValueQueryOnSuccess(data);\n                defaultValueQueryOptions?.onSuccess?.(data);\n            },\n        },\n        meta: combinedMeta,\n        metaData: combinedMeta,\n        liveMode: \"off\",\n        dataProviderName,\n    });\n\n    const defaultQueryOnSuccess = useCallback(\n        (data: GetListResponse<TData>) => {\n            {\n                setOptions(\n                    data.data.map(\n                        (item) =>\n                            ({\n                                label: get(item, optionLabel),\n                                value: get(item, optionValue),\n                            } as TOption),\n                    ),\n                );\n            }\n        },\n        [optionLabel, optionValue],\n    );\n\n    const queryResult = useList<TQueryFnData, TError, TData>({\n        resource: identifier,\n        sorters: pickNotDeprecated(sorters, sort),\n        filters: filters.concat(search),\n        pagination: {\n            current: pagination?.current,\n            pageSize: pagination?.pageSize ?? fetchSize,\n            mode: pagination?.mode,\n        },\n        hasPagination,\n        queryOptions: {\n            ...queryOptions,\n            onSuccess: (data) => {\n                defaultQueryOnSuccess(data);\n                queryOptions?.onSuccess?.(data);\n            },\n        },\n        successNotification,\n        errorNotification,\n        meta: combinedMeta,\n        metaData: combinedMeta,\n        liveMode,\n        liveParams,\n        onLiveEvent,\n        dataProviderName,\n    });\n\n    const onSearch = (value: string) => {\n        if (onSearchFromProp) {\n            setSearch(onSearchFromProp(value));\n            return;\n        }\n\n        if (!value) {\n            setSearch([]);\n            return;\n        } else {\n            setSearch([\n                {\n                    field: optionLabel,\n                    operator: \"contains\",\n                    value,\n                },\n            ]);\n        }\n    };\n\n    const { elapsedTime } = useLoadingOvertime({\n        isLoading: queryResult.isFetching || defaultValueQueryResult.isFetching,\n        interval: overtimeOptions?.interval,\n        onInterval: overtimeOptions?.onInterval,\n    });\n\n    const combinedOptions = useMemo(\n        () => uniqBy([...options, ...selectedOptions], \"value\"),\n        [options, selectedOptions],\n    );\n\n    return {\n        queryResult,\n        defaultValueQueryResult,\n        options: combinedOptions,\n        onSearch: debounce(onSearch, debounceValue),\n        overtime: { elapsedTime },\n    };\n};\n","import React, { useState, useEffect } from \"react\";\nimport { QueryObserverResult, UseQueryOptions } from \"@tanstack/react-query\";\nimport qs from \"qs\";\nimport differenceWith from \"lodash/differenceWith\";\nimport isEqual from \"lodash/isEqual\";\nimport warnOnce from \"warn-once\";\n\nimport {\n    useRouterContext,\n    useSyncWithLocation,\n    useNavigation,\n    useList,\n    useLiveMode,\n    useRouterType,\n    useResource,\n    useParsed,\n    useMeta,\n} from \"@hooks\";\nimport {\n    stringifyTableParams,\n    parseTableParams,\n    unionFilters,\n    setInitialFilters,\n    setInitialSorters,\n    unionSorters,\n} from \"@definitions/table\";\nimport { pickNotDeprecated } from \"@definitions/helpers\";\n\nimport {\n    BaseRecord,\n    CrudFilters,\n    CrudSorting,\n    GetListResponse,\n    SuccessErrorNotification,\n    HttpError,\n    MetaQuery,\n    LiveModeProps,\n    Pagination,\n    Prettify,\n} from \"../../interfaces\";\nimport { useGo } from \"@hooks/router/use-go\";\nimport { BaseListProps } from \"../data/useList\";\nimport {\n    useLoadingOvertime,\n    UseLoadingOvertimeOptionsProps,\n    UseLoadingOvertimeReturnType,\n} from \"../useLoadingOvertime\";\n\ntype SetFilterBehavior = \"merge\" | \"replace\";\n\nexport type useTableProps<TQueryFnData, TError, TData> = {\n    /**\n     * Resource name for API data interactions\n     * @default Resource name that it reads from route\n     */\n    resource?: string;\n    /**\n     * Configuration for pagination\n     */\n    pagination?: Pagination;\n    /**\n     * Initial page index\n     * @default 1\n     * @deprecated `initialCurrent` property is deprecated. Use `pagination.current` instead.\n     */\n    initialCurrent?: number;\n    /**\n     * Initial number of items per page\n     * @default 10\n     * @deprecated `initialPageSize` property is deprecated. Use `pagination.pageSize` instead.\n     */\n    initialPageSize?: number;\n    /**\n     * Sort configs\n     */\n    sorters?: {\n        /**\n         * Initial sorter state\n         */\n        initial?: CrudSorting;\n        /**\n         * Default and unchangeable sorter state\n         *  @default `[]`\n         */\n        permanent?: CrudSorting;\n        /**\n         * Whether to use server side sorting or not.\n         * @default \"server\"\n         */\n        mode?: \"server\" | \"off\";\n    };\n    /**\n     * Initial sorter state\n     * @deprecated `initialSorter` property is deprecated. Use `sorters.initial` instead.\n     */\n    initialSorter?: CrudSorting;\n    /**\n     * Default and unchangeable sorter state\n     *  @default `[]`\n     *  @deprecated `permanentSorter` property is deprecated. Use `sorters.permanent` instead.\n     */\n    permanentSorter?: CrudSorting;\n    /**\n     * Filter configs\n     */\n    filters?: {\n        /**\n         * Initial filter state\n         */\n        initial?: CrudFilters;\n        /**\n         * Default and unchangeable filter state\n         *  @default `[]`\n         */\n        permanent?: CrudFilters;\n        /**\n         * Default behavior of the `setFilters` function\n         * @default `\"merge\"`\n         */\n        defaultBehavior?: SetFilterBehavior;\n        /**\n         * Whether to use server side filter or not.\n         * @default \"server\"\n         */\n        mode?: \"server\" | \"off\";\n    };\n    /**\n     * Initial filter state\n     * @deprecated `initialFilter` property is deprecated. Use `filters.initial` instead.\n     */\n    initialFilter?: CrudFilters;\n    /**\n     * Default and unchangeable filter state\n     * @default `[]`\n     * @deprecated `permanentFilter` property is deprecated. Use `filters.permanent` instead.\n     */\n    permanentFilter?: CrudFilters;\n    /**\n     * Default behavior of the `setFilters` function\n     * @default `\"merge\"`\n     * @deprecated `defaultSetFilterBehavior` property is deprecated. Use `filters.defaultBehavior` instead.\n     */\n    defaultSetFilterBehavior?: SetFilterBehavior;\n    /**\n     * Whether to use server side pagination or not.\n     * @default `true`\n     * @deprecated `hasPagination` property is deprecated. Use `pagination.mode` instead.\n     */\n    hasPagination?: boolean;\n    /**\n     * Sortings, filters, page index and records shown per page are tracked by browser history\n     * @default Value set in [Refine](/docs/api-reference/core/components/refine-config/#syncwithlocation). If a custom resource is given, it will be `false`\n     */\n    syncWithLocation?: boolean;\n    /**\n     * react-query's [useQuery](https://tanstack.com/query/v4/docs/reference/useQuery) options\n     */\n    queryOptions?: UseQueryOptions<\n        GetListResponse<TQueryFnData>,\n        TError,\n        GetListResponse<TData>\n    >;\n    /**\n     * Metadata query for dataProvider\n     */\n    meta?: MetaQuery;\n    /**\n     * Metadata query for dataProvider\n     * @deprecated `metaData` is deprecated with refine@4, refine will pass `meta` instead, however, we still support `metaData` for backward compatibility.\n     */\n    metaData?: MetaQuery;\n    /**\n     * If there is more than one `dataProvider`, you should use the `dataProviderName` that you will use.\n     */\n    dataProviderName?: string;\n} & SuccessErrorNotification<\n    GetListResponse<TData>,\n    TError,\n    Prettify<BaseListProps>\n> &\n    LiveModeProps &\n    UseLoadingOvertimeOptionsProps;\n\ntype ReactSetState<T> = React.Dispatch<React.SetStateAction<T>>;\n\ntype SyncWithLocationParams = {\n    pagination: { current?: number; pageSize?: number };\n    /**\n     * @deprecated `sorter` is deprecated. Use `sorters` instead.\n     */\n    sorter?: CrudSorting;\n    sorters: CrudSorting;\n    filters: CrudFilters;\n};\n\nexport type useTableReturnType<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n> = {\n    tableQueryResult: QueryObserverResult<GetListResponse<TData>, TError>;\n    /**\n     * @deprecated `sorter` is deprecated. Use `sorters` instead.\n     */\n    sorter: CrudSorting;\n    sorters: CrudSorting;\n    /**\n     * @deprecated `setSorter` is deprecated. Use `setSorters` instead.\n     */\n    setSorter: (sorter: CrudSorting) => void;\n    setSorters: (sorter: CrudSorting) => void;\n    filters: CrudFilters;\n    setFilters: ((filters: CrudFilters, behavior?: SetFilterBehavior) => void) &\n        ((setter: (prevFilters: CrudFilters) => CrudFilters) => void);\n    createLinkForSyncWithLocation: (params: SyncWithLocationParams) => string;\n    current: number;\n    setCurrent: ReactSetState<useTableReturnType[\"current\"]>;\n    pageSize: number;\n    setPageSize: ReactSetState<useTableReturnType[\"pageSize\"]>;\n    pageCount: number;\n} & UseLoadingOvertimeReturnType;\n\n/**\n * By using useTable, you are able to get properties that are compatible with\n * Ant Design {@link https://ant.design/components/table/ `<Table>`} component.\n * All features such as sorting, filtering and pagination comes as out of box.\n *\n * @see {@link https://refine.dev/docs/api-reference/core/hooks/useTable} for more details.\n *\n * @typeParam TQueryFnData - Result data returned by the query function. Extends {@link https://refine.dev/docs/api-reference/core/interfaceReferences#baserecord `BaseRecord`}\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/api-reference/core/interfaceReferences#httperror `HttpError`}\n * @typeParam TData - Result data returned by the `select` function. Extends {@link https://refine.dev/docs/api-reference/core/interfaceReferences#baserecord `BaseRecord`}. Defaults to `TQueryFnData`\n *\n */\n\nconst defaultPermanentFilter: CrudFilters = [];\nconst defaultPermanentSorter: CrudSorting = [];\n\nexport function useTable<\n    TQueryFnData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TData extends BaseRecord = TQueryFnData,\n>({\n    initialCurrent,\n    initialPageSize,\n    hasPagination = true,\n    pagination,\n    initialSorter,\n    permanentSorter = defaultPermanentSorter,\n    defaultSetFilterBehavior,\n    initialFilter,\n    permanentFilter = defaultPermanentFilter,\n    filters: filtersFromProp,\n    sorters: sortersFromProp,\n    syncWithLocation: syncWithLocationProp,\n    resource: resourceFromProp,\n    successNotification,\n    errorNotification,\n    queryOptions,\n    liveMode: liveModeFromProp,\n    onLiveEvent,\n    liveParams,\n    meta,\n    metaData,\n    dataProviderName,\n    overtimeOptions,\n}: useTableProps<TQueryFnData, TError, TData> = {}): useTableReturnType<\n    TData,\n    TError\n> {\n    const { syncWithLocation: syncWithLocationContext } = useSyncWithLocation();\n\n    const syncWithLocation = syncWithLocationProp ?? syncWithLocationContext;\n\n    const liveMode = useLiveMode(liveModeFromProp);\n\n    const routerType = useRouterType();\n    const { useLocation } = useRouterContext();\n    const { search, pathname } = useLocation();\n    const getMeta = useMeta();\n    const parsedParams = useParsed();\n\n    const isServerSideFilteringEnabled =\n        (filtersFromProp?.mode || \"server\") === \"server\";\n    const isServerSideSortingEnabled =\n        (sortersFromProp?.mode || \"server\") === \"server\";\n    const hasPaginationString = hasPagination === false ? \"off\" : \"server\";\n    const isPaginationEnabled =\n        (pagination?.mode ?? hasPaginationString) !== \"off\";\n    const prefferedCurrent = pickNotDeprecated(\n        pagination?.current,\n        initialCurrent,\n    );\n    const prefferedPageSize = pickNotDeprecated(\n        pagination?.pageSize,\n        initialPageSize,\n    );\n    const preferredMeta = pickNotDeprecated(meta, metaData);\n\n    /** `parseTableParams` is redundant with the new routing */\n    // We want to always parse the query string even when syncWithLocation is\n    // deactivated, for hotlinking to work properly\n    const { parsedCurrent, parsedPageSize, parsedSorter, parsedFilters } =\n        parseTableParams(search ?? \"?\");\n\n    const preferredInitialFilters = pickNotDeprecated(\n        filtersFromProp?.initial,\n        initialFilter,\n    );\n    const preferredPermanentFilters =\n        pickNotDeprecated(filtersFromProp?.permanent, permanentFilter) ??\n        defaultPermanentFilter;\n\n    const preferredInitialSorters = pickNotDeprecated(\n        sortersFromProp?.initial,\n        initialSorter,\n    );\n    const preferredPermanentSorters =\n        pickNotDeprecated(sortersFromProp?.permanent, permanentSorter) ??\n        defaultPermanentSorter;\n\n    const prefferedFilterBehavior =\n        pickNotDeprecated(\n            filtersFromProp?.defaultBehavior,\n            defaultSetFilterBehavior,\n        ) ?? \"merge\";\n\n    let defaultCurrent: number;\n    let defaultPageSize: number;\n    let defaultSorter: CrudSorting | undefined;\n    let defaultFilter: CrudFilters | undefined;\n\n    if (syncWithLocation) {\n        defaultCurrent =\n            parsedParams?.params?.current ||\n            parsedCurrent ||\n            prefferedCurrent ||\n            1;\n        defaultPageSize =\n            parsedParams?.params?.pageSize ||\n            parsedPageSize ||\n            prefferedPageSize ||\n            10;\n        defaultSorter =\n            parsedParams?.params?.sorters ||\n            (parsedSorter.length ? parsedSorter : preferredInitialSorters);\n        defaultFilter =\n            parsedParams?.params?.filters ||\n            (parsedFilters.length ? parsedFilters : preferredInitialFilters);\n    } else {\n        defaultCurrent = prefferedCurrent || 1;\n        defaultPageSize = prefferedPageSize || 10;\n        defaultSorter = preferredInitialSorters;\n        defaultFilter = preferredInitialFilters;\n    }\n\n    const { replace } = useNavigation();\n    /** New way of `replace` calls to the router is using `useGo` */\n    const go = useGo();\n\n    const { resource, identifier } = useResource(resourceFromProp);\n\n    const combinedMeta = getMeta({\n        resource,\n        meta: preferredMeta,\n    });\n\n    React.useEffect(() => {\n        warnOnce(\n            typeof identifier === \"undefined\",\n            `useTable: \\`resource\\` is not defined.`,\n        );\n    }, [identifier]);\n\n    const [sorters, setSorters] = useState<CrudSorting>(\n        setInitialSorters(preferredPermanentSorters, defaultSorter ?? []),\n    );\n    const [filters, setFilters] = useState<CrudFilters>(\n        setInitialFilters(preferredPermanentFilters, defaultFilter ?? []),\n    );\n    const [current, setCurrent] = useState<number>(defaultCurrent);\n    const [pageSize, setPageSize] = useState<number>(defaultPageSize);\n\n    const createLinkForSyncWithLocation = ({\n        pagination: { current, pageSize },\n        sorter,\n        filters,\n    }: SyncWithLocationParams) => {\n        if (routerType === \"new\") {\n            return (\n                go({\n                    type: \"path\",\n                    options: {\n                        keepHash: true,\n                        keepQuery: true,\n                    },\n                    query: {\n                        ...(isPaginationEnabled ? { current, pageSize } : {}),\n                        sorters: sorter,\n                        filters,\n                        ...currentQueryParams(),\n                    },\n                }) ?? \"\"\n            );\n        } else {\n            const currentQueryParams = qs.parse(search?.substring(1)); // remove first ? character\n\n            const stringifyParams = stringifyTableParams({\n                pagination: {\n                    pageSize,\n                    current,\n                },\n                sorters: sorters ?? sorter,\n                filters,\n                ...currentQueryParams,\n            });\n            return `${pathname ?? \"\"}?${stringifyParams ?? \"\"}`;\n        }\n    };\n\n    useEffect(() => {\n        if (search === \"\") {\n            setCurrent(defaultCurrent);\n            setPageSize(defaultPageSize);\n            setSorters(\n                setInitialSorters(\n                    preferredPermanentSorters,\n                    defaultSorter ?? [],\n                ),\n            );\n            setFilters(\n                setInitialFilters(\n                    preferredPermanentFilters,\n                    defaultFilter ?? [],\n                ),\n            );\n        }\n    }, [search]);\n\n    const currentQueryParams = (): object => {\n        if (routerType === \"new\") {\n            // We get QueryString parameters that are uncontrolled by refine.\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            const { sorters, filters, pageSize, current, ...rest } =\n                parsedParams?.params ?? {};\n\n            return rest;\n        } else {\n            // We get QueryString parameters that are uncontrolled by refine.\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            const { sorter, filters, pageSize, current, ...rest } = qs.parse(\n                search,\n                {\n                    ignoreQueryPrefix: true,\n                },\n            );\n\n            return rest;\n        }\n    };\n\n    useEffect(() => {\n        if (syncWithLocation) {\n            // Careful! This triggers render\n            const queryParams = currentQueryParams();\n\n            if (routerType === \"new\") {\n                go({\n                    type: \"replace\",\n                    options: {\n                        keepQuery: true,\n                    },\n                    query: {\n                        ...(isPaginationEnabled ? { pageSize, current } : {}),\n                        sorters: differenceWith(\n                            sorters,\n                            preferredPermanentSorters,\n                            isEqual,\n                        ),\n                        filters: differenceWith(\n                            filters,\n                            preferredPermanentFilters,\n                            isEqual,\n                        ),\n                        // ...queryParams,\n                    },\n                });\n            } else {\n                const stringifyParams = stringifyTableParams({\n                    ...(isPaginationEnabled\n                        ? {\n                              pagination: {\n                                  pageSize,\n                                  current,\n                              },\n                          }\n                        : {}),\n                    sorters: differenceWith(\n                        sorters,\n                        preferredPermanentSorters,\n                        isEqual,\n                    ),\n                    filters: differenceWith(\n                        filters,\n                        preferredPermanentFilters,\n                        isEqual,\n                    ),\n                    ...queryParams,\n                });\n                return replace?.(`${pathname}?${stringifyParams}`, undefined, {\n                    shallow: true,\n                });\n            }\n        }\n    }, [syncWithLocation, current, pageSize, sorters, filters]);\n\n    const queryResult = useList<TQueryFnData, TError, TData>({\n        resource: identifier,\n        hasPagination,\n        pagination: { current, pageSize, mode: pagination?.mode },\n        filters: isServerSideFilteringEnabled\n            ? unionFilters(preferredPermanentFilters, filters)\n            : undefined,\n        sorters: isServerSideSortingEnabled\n            ? unionSorters(preferredPermanentSorters, sorters)\n            : undefined,\n        queryOptions,\n        successNotification,\n        errorNotification,\n        meta: combinedMeta,\n        metaData: combinedMeta,\n        liveMode,\n        liveParams,\n        onLiveEvent,\n        dataProviderName,\n    });\n\n    const setFiltersAsMerge = (newFilters: CrudFilters) => {\n        setFilters((prevFilters) =>\n            unionFilters(preferredPermanentFilters, newFilters, prevFilters),\n        );\n    };\n\n    const setFiltersAsReplace = (newFilters: CrudFilters) => {\n        setFilters(unionFilters(preferredPermanentFilters, newFilters));\n    };\n\n    const setFiltersWithSetter = (\n        setter: (prevFilters: CrudFilters) => CrudFilters,\n    ) => {\n        setFilters((prev) =>\n            unionFilters(preferredPermanentFilters, setter(prev)),\n        );\n    };\n\n    const setFiltersFn: useTableReturnType<TQueryFnData>[\"setFilters\"] = (\n        setterOrFilters,\n        behavior: SetFilterBehavior = prefferedFilterBehavior,\n    ) => {\n        if (typeof setterOrFilters === \"function\") {\n            setFiltersWithSetter(setterOrFilters);\n        } else {\n            if (behavior === \"replace\") {\n                setFiltersAsReplace(setterOrFilters);\n            } else {\n                setFiltersAsMerge(setterOrFilters);\n            }\n        }\n    };\n\n    const setSortWithUnion = (newSorter: CrudSorting) => {\n        setSorters(() => unionSorters(preferredPermanentSorters, newSorter));\n    };\n\n    const { elapsedTime } = useLoadingOvertime({\n        isLoading: queryResult.isFetching,\n        interval: overtimeOptions?.interval,\n        onInterval: overtimeOptions?.onInterval,\n    });\n\n    return {\n        tableQueryResult: queryResult,\n        sorters,\n        setSorters: setSortWithUnion,\n        sorter: sorters,\n        setSorter: setSortWithUnion,\n        filters,\n        setFilters: setFiltersFn,\n        current,\n        setCurrent,\n        pageSize,\n        setPageSize,\n        pageCount: pageSize\n            ? Math.ceil((queryResult.data?.total ?? 0) / pageSize)\n            : 1,\n        createLinkForSyncWithLocation,\n        overtime: {\n            elapsedTime,\n        },\n    };\n}\n","import { useContext } from \"react\";\nimport {\n    useMutation,\n    UseMutationOptions,\n    UseMutationResult,\n    useQueryClient,\n} from \"@tanstack/react-query\";\n\nimport { AuditLogContext } from \"@contexts/auditLog\";\nimport { ResourceContext } from \"@contexts/resource\";\nimport { useGetIdentity } from \"@hooks/auth\";\nimport { BaseKey, LogParams } from \"../../../interfaces\";\nimport { hasPermission, pickNotDeprecated } from \"@definitions/helpers\";\nimport { pickResource } from \"@definitions/helpers/pick-resource\";\nimport { useActiveAuthProvider } from \"@definitions/helpers\";\nimport { useKeys } from \"@hooks/useKeys\";\nimport { getXRay } from \"@refinedev/devtools-internal\";\n\ntype LogRenameData =\n    | {\n          resource?: string;\n      }\n    | undefined;\n\nexport type UseLogReturnType<TLogData, TLogRenameData> = {\n    log: UseMutationResult<TLogData, Error, LogParams>;\n    rename: UseMutationResult<\n        TLogRenameData,\n        Error,\n        {\n            id: BaseKey;\n            name: string;\n        }\n    >;\n};\n\nexport type UseLogMutationProps<\n    TLogData,\n    TLogRenameData extends LogRenameData = LogRenameData,\n> = {\n    logMutationOptions?: Omit<\n        UseMutationOptions<TLogData, Error, LogParams, unknown>,\n        \"mutationFn\"\n    >;\n    renameMutationOptions?: Omit<\n        UseMutationOptions<\n            TLogRenameData,\n            Error,\n            { id: BaseKey; name: string },\n            unknown\n        >,\n        \"mutationFn\" | \"onSuccess\"\n    >;\n};\n\n/**\n * useLog is used to `create` a new and `rename` the existing audit log.\n * @see {@link https://refine.dev/docs/api-reference/core/hooks/audit-log/useLog} for more details.\n */\n\nexport const useLog = <\n    TLogData,\n    TLogRenameData extends LogRenameData = LogRenameData,\n>({\n    logMutationOptions,\n    renameMutationOptions,\n}: UseLogMutationProps<TLogData, TLogRenameData> = {}): UseLogReturnType<\n    TLogData,\n    TLogRenameData\n> => {\n    const queryClient = useQueryClient();\n    const auditLogContext = useContext(AuditLogContext);\n    const { keys, preferLegacyKeys } = useKeys();\n\n    const authProvider = useActiveAuthProvider();\n\n    const { resources } = useContext(ResourceContext);\n    const {\n        data: identityData,\n        refetch,\n        isLoading,\n    } = useGetIdentity({\n        v3LegacyAuthProviderCompatible: Boolean(authProvider?.isLegacy),\n        queryOptions: {\n            enabled: !!auditLogContext?.create,\n        },\n    });\n\n    const log = useMutation<TLogData, Error, LogParams, unknown>(\n        async (params) => {\n            const resource = pickResource(params.resource, resources);\n            const logPermissions = pickNotDeprecated(\n                resource?.meta?.audit,\n                resource?.options?.audit,\n                resource?.options?.auditLog?.permissions,\n            );\n\n            if (logPermissions) {\n                if (!hasPermission(logPermissions, params.action)) {\n                    return;\n                }\n            }\n\n            let authorData;\n            if (isLoading && !!auditLogContext?.create) {\n                authorData = await refetch();\n            }\n\n            return await auditLogContext.create?.({\n                ...params,\n                author: identityData ?? authorData?.data,\n            });\n        },\n        {\n            mutationKey: keys().audit().action(\"log\").get(),\n            ...logMutationOptions,\n            meta: {\n                ...logMutationOptions?.meta,\n                ...getXRay(\"useLog\", preferLegacyKeys),\n            },\n        },\n    );\n\n    const rename = useMutation<\n        TLogRenameData,\n        Error,\n        { id: BaseKey; name: string },\n        unknown\n    >(\n        async (params) => {\n            return await auditLogContext.update?.(params);\n        },\n        {\n            onSuccess: (data) => {\n                if (data?.resource) {\n                    queryClient.invalidateQueries(\n                        keys()\n                            .audit()\n                            .resource(data?.resource ?? \"\")\n                            .action(\"list\")\n                            .get(preferLegacyKeys),\n                    );\n                }\n            },\n            mutationKey: keys().audit().action(\"rename\").get(),\n            ...renameMutationOptions,\n            meta: {\n                ...renameMutationOptions?.meta,\n                ...getXRay(\"useLog\", preferLegacyKeys),\n            },\n        },\n    );\n\n    return { log, rename };\n};\n","import React from \"react\";\n\nimport { IAuditLogContext } from \"./IAuditLogContext\";\n\nexport const AuditLogContext = React.createContext<IAuditLogContext>({});\n\nexport const AuditLogContextProvider: React.FC<\n    IAuditLogContext & {\n        children: React.ReactNode;\n    }\n> = ({ create, get, update, children }) => {\n    return (\n        <AuditLogContext.Provider value={{ create, get, update }}>\n            {children}\n        </AuditLogContext.Provider>\n    );\n};\n","import { useContext } from \"react\";\nimport {\n    useQuery,\n    UseQueryResult,\n    UseQueryOptions,\n} from \"@tanstack/react-query\";\n\nimport { AuditLogContext } from \"@contexts/auditLog\";\nimport { HttpError, MetaQuery } from \"../../../interfaces\";\nimport { useKeys } from \"@hooks/useKeys\";\nimport { getXRay } from \"@refinedev/devtools-internal\";\n\nexport type UseLogProps<TQueryFnData, TError, TData> = {\n    resource: string;\n    action?: string;\n    meta?: Record<number | string, any>;\n    author?: Record<number | string, any>;\n    queryOptions?: UseQueryOptions<TQueryFnData, TError, TData>;\n    metaData?: MetaQuery;\n};\n\n/**\n * useLogList is used to get and filter audit logs.\n *\n * @see {@link https://refine.dev/docs/api-reference/core/hooks/audit-log/useLogList} for more details.\n *\n * @typeParam TQueryFnData - Result data returned by the query function.\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/api-reference/core/interfaceReferences#httperror `HttpError`}\n * @typeParam TData - Result data returned by the `select` function. Defaults to `TQueryFnData`\n *\n */\nexport const useLogList = <\n    TQueryFnData = any,\n    TError extends HttpError = HttpError,\n    TData = TQueryFnData,\n>({\n    resource,\n    action,\n    meta,\n    author,\n    metaData,\n    queryOptions,\n}: UseLogProps<TQueryFnData, TError, TData>): UseQueryResult<TData> => {\n    const { get } = useContext(AuditLogContext);\n    const { keys, preferLegacyKeys } = useKeys();\n\n    const queryResponse = useQuery<TQueryFnData, TError, TData>(\n        keys()\n            .audit()\n            .resource(resource)\n            .action(\"list\")\n            .params(meta)\n            .get(preferLegacyKeys),\n        () =>\n            get?.({\n                resource,\n                action,\n                author,\n                meta,\n                metaData,\n            }) ?? Promise.resolve([]),\n        {\n            enabled: typeof get !== \"undefined\",\n            ...queryOptions,\n            retry: false,\n            meta: {\n                ...queryOptions?.meta,\n                ...getXRay(\"useLogList\", preferLegacyKeys),\n            },\n        },\n    );\n\n    return queryResponse;\n};\n","import React, { useContext } from \"react\";\nimport warnOnce from \"warn-once\";\n\nimport { useRefineContext, useResource, useTranslate } from \"@hooks\";\nimport { TranslationContext } from \"@contexts/translation\";\nimport { pickNotDeprecated } from \"@definitions\";\n\nimport { IResourceItem } from \"../../interfaces\";\nimport { useRouterType } from \"@contexts/router-picker\";\nimport { getActionRoutesFromResource } from \"@definitions/helpers/router\";\nimport { pickResource } from \"../../definitions/helpers/pick-resource/index\";\nimport { composeRoute } from \"@definitions/helpers/router/compose-route\";\nimport { useParsed } from \"@hooks/router/use-parsed\";\n\nexport type BreadcrumbsType = {\n    label: string;\n    href?: string;\n    icon?: React.ReactNode;\n};\n\ntype UseBreadcrumbReturnType = {\n    breadcrumbs: BreadcrumbsType[];\n};\n\ntype UseBreadcrumbProps = {\n    /**\n     * Additional params to be used in the route generation process.\n     */\n    meta?: Record<string, string | number>;\n};\n\nexport const useBreadcrumb = ({\n    meta: metaFromProps = {},\n}: UseBreadcrumbProps = {}): UseBreadcrumbReturnType => {\n    const routerType = useRouterType();\n    const { i18nProvider } = useContext(TranslationContext);\n    const parsed = useParsed();\n    const translate = useTranslate();\n    const { resources, resource, action } = useResource();\n    const {\n        options: { textTransformers },\n    } = useRefineContext();\n\n    const breadcrumbs: BreadcrumbsType[] = [];\n\n    if (!resource?.name) {\n        return { breadcrumbs };\n    }\n\n    const addBreadcrumb = (parentName: string | IResourceItem) => {\n        const parentResource =\n            typeof parentName === \"string\"\n                ? pickResource(\n                      parentName,\n                      resources,\n                      routerType === \"legacy\",\n                  ) ?? { name: parentName }\n                : parentName;\n\n        if (parentResource) {\n            const grandParentName = pickNotDeprecated(\n                parentResource?.meta?.parent,\n                parentResource?.parentName,\n            );\n            if (grandParentName) {\n                addBreadcrumb(grandParentName);\n            }\n            const listActionOfResource = getActionRoutesFromResource(\n                parentResource,\n                resources,\n                routerType === \"legacy\",\n            ).find((r) => r.action === \"list\");\n\n            const hrefRaw = listActionOfResource?.resource?.list\n                ? listActionOfResource?.route\n                : undefined;\n\n            const href = hrefRaw\n                ? routerType === \"legacy\"\n                    ? hrefRaw\n                    : composeRoute(\n                          hrefRaw,\n                          parentResource?.meta,\n                          parsed,\n                          metaFromProps,\n                      )\n                : undefined;\n\n            breadcrumbs.push({\n                label:\n                    pickNotDeprecated(\n                        parentResource.meta?.label,\n                        parentResource.options?.label,\n                    ) ??\n                    translate(\n                        `${parentResource.name}.${parentResource.name}`,\n                        textTransformers.humanize(parentResource.name),\n                    ),\n                href: href,\n                icon: pickNotDeprecated(\n                    parentResource.meta?.icon,\n                    parentResource.options?.icon,\n                    parentResource.icon,\n                ),\n            });\n        }\n    };\n\n    addBreadcrumb(resource);\n\n    if (action && action !== \"list\") {\n        const key = `actions.${action}`;\n        const actionLabel = translate(key);\n        if (typeof i18nProvider !== \"undefined\" && actionLabel === key) {\n            warnOnce(\n                true,\n                `[useBreadcrumb]: Breadcrumb missing translate key for the \"${action}\" action. Please add \"actions.${action}\" key to your translation file.\\nFor more information, see https://refine.dev/docs/api-reference/core/hooks/useBreadcrumb/#i18n-support`,\n            );\n            breadcrumbs.push({\n                label: translate(\n                    `buttons.${action}`,\n                    textTransformers.humanize(action),\n                ),\n            });\n        } else {\n            breadcrumbs.push({\n                label: translate(key, textTransformers.humanize(action)),\n            });\n        }\n    }\n\n    return {\n        breadcrumbs,\n    };\n};\n","import React from \"react\";\nimport { useTranslate, useResource, useParsed, useRouterContext } from \"..\";\nimport { useUserFriendlyName, pickNotDeprecated } from \"@definitions\";\nimport { useRouterType } from \"../../contexts/router-picker\";\nimport { createResourceKey } from \"../../definitions/helpers/menu/create-resource-key\";\nimport { useGetToPath } from \"../router/use-get-to-path/index\";\nimport { getParentResource } from \"@definitions/helpers/router\";\nimport {\n    FlatTreeItem,\n    createTree,\n} from \"../../definitions/helpers/menu/create-tree\";\n\ntype UseMenuReturnType = {\n    defaultOpenKeys: string[];\n    selectedKey: string;\n    menuItems: TreeMenuItem[];\n};\n\nexport type UseMenuProps = {\n    meta?: Record<string, any>;\n    hideOnMissingParameter?: boolean;\n};\n\nexport type TreeMenuItem = FlatTreeItem & {\n    route?: string;\n    icon?: React.ReactNode;\n    label?: string;\n    children: TreeMenuItem[];\n};\n\nconst getCleanPath = (pathname: string) => {\n    return pathname\n        .split(\"?\")[0]\n        .split(\"#\")[0]\n        .replace(/(.+)(\\/$)/, \"$1\");\n};\n\n/**\n * `useMenu` is used to get menu items of the default sidebar.\n * These items include a link to dashboard page (if it exists) and links to the user defined resources\n * (passed as children to {@link https://refine.dev/docs/core/components/refine-config `<Refine>`}).\n * This hook can also be used to build custom menus, which is also used by default sidebar to show menu items.\n *\n * @see {@link https://refine.dev/docs/api-reference/core/hooks/ui/useMenu} for more details.\n */\nexport const useMenu = (\n    { meta, hideOnMissingParameter }: UseMenuProps = {\n        hideOnMissingParameter: true,\n    },\n): UseMenuReturnType => {\n    const translate = useTranslate();\n\n    const getToPath = useGetToPath();\n    const routerType = useRouterType();\n    const { resource, resources } = useResource();\n    const { pathname } = useParsed();\n    const { useLocation } = useRouterContext();\n    const { pathname: legacyPath } = useLocation();\n    const getFriendlyName = useUserFriendlyName();\n\n    const cleanPathname =\n        routerType === \"legacy\"\n            ? getCleanPath(legacyPath)\n            : pathname\n            ? getCleanPath(pathname)\n            : undefined;\n\n    const cleanRoute = `/${(cleanPathname ?? \"\").replace(/^\\//, \"\")}`;\n\n    const selectedKey = resource\n        ? createResourceKey(resource, resources, routerType === \"legacy\")\n        : cleanRoute ?? \"\";\n\n    const defaultOpenKeys = React.useMemo(() => {\n        if (!resource) return [];\n        let parent = getParentResource(resource, resources);\n        const keys = [createResourceKey(resource, resources)];\n        while (parent) {\n            keys.push(createResourceKey(parent, resources));\n            parent = getParentResource(parent, resources);\n        }\n        return keys;\n    }, []);\n\n    const prepareItem = React.useCallback(\n        (item: FlatTreeItem): TreeMenuItem | undefined => {\n            if (item?.meta?.hide ?? item?.options?.hide) return undefined;\n            if (!item?.list && item.children.length === 0) return undefined;\n\n            const composed = item.list\n                ? getToPath({\n                      resource: item,\n                      action: \"list\",\n                      legacy: routerType === \"legacy\",\n                      meta,\n                  })\n                : undefined;\n\n            if (\n                hideOnMissingParameter &&\n                composed &&\n                composed.match(/(\\/|^):(.+?)(\\/|$){1}/)\n            )\n                return undefined;\n\n            return {\n                ...item,\n                route: composed,\n                icon: pickNotDeprecated(\n                    item.meta?.icon,\n                    item.options?.icon,\n                    item.icon,\n                ),\n                label:\n                    pickNotDeprecated(\n                        item?.meta?.label,\n                        item?.options?.label,\n                    ) ??\n                    translate(\n                        `${item.name}.${item.name}`,\n                        getFriendlyName(item.name, \"plural\"),\n                    ),\n            };\n        },\n        [routerType, meta, translate, hideOnMissingParameter],\n    );\n\n    const treeItems = React.useMemo(() => {\n        const treeMenuItems = createTree(resources, routerType === \"legacy\");\n\n        // add paths to items and their nodes recursively\n        const prepare = (items: TreeMenuItem[]): TreeMenuItem[] => {\n            return items.flatMap((item) => {\n                const preparedNodes = prepare(item.children);\n                const newItem = prepareItem({\n                    ...item,\n                    children: preparedNodes,\n                });\n\n                if (!newItem) return [];\n\n                return [newItem];\n            });\n        };\n\n        return prepare(treeMenuItems);\n    }, [resources, routerType, prepareItem]);\n\n    return {\n        defaultOpenKeys,\n        selectedKey,\n        menuItems: treeItems,\n    };\n};\n","import { IResourceItem } from \"../../../interfaces\";\nimport {\n    getParentResource,\n    removeLeadingTrailingSlashes,\n} from \"../../helpers/router\";\n\nexport const createResourceKey = (\n    resource: IResourceItem,\n    resources: IResourceItem[],\n    legacy = false,\n) => {\n    const parents: IResourceItem[] = [];\n\n    let currentParentResource = getParentResource(resource, resources);\n    while (currentParentResource) {\n        parents.push(currentParentResource);\n        currentParentResource = getParentResource(\n            currentParentResource,\n            resources,\n        );\n    }\n    parents.reverse();\n\n    const key = [...parents, resource]\n        .map((r) =>\n            removeLeadingTrailingSlashes(\n                (legacy ? r.route : undefined) ?? r.identifier ?? r.name,\n            ),\n        )\n        .join(\"/\");\n\n    return `/${key.replace(/^\\//, \"\")}`;\n};\n","import { IResourceItem } from \"../../../contexts/resource\";\nimport { getParentResource } from \"../router\";\nimport { createResourceKey } from \"./create-resource-key\";\n\nexport type Tree = {\n    item: IResourceItem;\n    children: { [key: string]: Tree };\n};\n\nexport type FlatTreeItem = IResourceItem & {\n    key: string;\n    children: FlatTreeItem[];\n};\n\nexport const createTree = (\n    resources: IResourceItem[],\n    legacy = false,\n): FlatTreeItem[] => {\n    const root: Tree = {\n        item: {\n            name: \"__root__\",\n        },\n        children: {},\n    };\n\n    resources.forEach((resource) => {\n        const parents: IResourceItem[] = [];\n\n        let currentParent = getParentResource(resource, resources);\n        while (currentParent) {\n            parents.push(currentParent);\n            currentParent = getParentResource(currentParent, resources);\n        }\n        parents.reverse();\n\n        let currentTree = root;\n\n        parents.forEach((parent) => {\n            const key =\n                (legacy ? parent.route : undefined) ??\n                parent.identifier ??\n                parent.name;\n\n            if (!currentTree.children[key]) {\n                currentTree.children[key] = {\n                    item: parent,\n                    children: {},\n                };\n            }\n            currentTree = currentTree.children[key];\n        });\n\n        const key =\n            (legacy ? resource.route : undefined) ??\n            resource.identifier ??\n            resource.name;\n\n        if (!currentTree.children[key]) {\n            currentTree.children[key] = {\n                item: resource,\n                children: {},\n            };\n        }\n    });\n\n    const flatten = (tree: Tree): FlatTreeItem[] => {\n        const items: FlatTreeItem[] = [];\n\n        Object.keys(tree.children).forEach((key) => {\n            const itemKey = createResourceKey(\n                tree.children[key].item,\n                resources,\n                legacy,\n            );\n            const item: FlatTreeItem = {\n                ...tree.children[key].item,\n                key: itemKey,\n                children: flatten(tree.children[key]),\n            };\n            items.push(item);\n        });\n\n        return items;\n    };\n\n    return flatten(root);\n};\n","import { useParsed } from \"@hooks/router\";\nimport { sanitizeResource } from \"@definitions/helpers/sanitize-resource\";\nimport { IResourceItem, MetaQuery } from \"../../interfaces\";\n\n/**\n * Hook that returns a function to get meta.\n * The meta is a combination of the resource meta, hook meta and query params.\n * @internal\n */\nexport const useMeta = () => {\n    const { params } = useParsed();\n\n    const getMetaFn = ({\n        resource,\n        meta: metaFromProp,\n    }: {\n        resource?: IResourceItem;\n        meta?: MetaQuery;\n    } = {}) => {\n        const { meta } = sanitizeResource(resource) ?? { meta: {} };\n\n        // this fields came from the query params and should be removed from the meta because they are not part of the meta.\n        const {\n            filters: _filters,\n            sorters: _sorters,\n            current: _current,\n            pageSize: _pageSize,\n            ...additionalParams\n        } = params ?? {};\n\n        return { ...meta, ...additionalParams, ...metaFromProp };\n    };\n\n    return getMetaFn;\n};\n","import React, { useState } from \"react\";\n\nimport { useLogin, useTranslate } from \"@hooks\";\nimport { useActiveAuthProvider } from \"@definitions/helpers\";\nexport interface ILoginForm {\n    username: string;\n    password: string;\n}\n\n/**\n * @deprecated LoginPage is deprecated. Use AuthPage instead. @see {@link https://refine.dev/docs/core/components/auth-page} for more details.\n * **refine** has a default login page form which is served on `/login` route when the `authProvider` configuration is provided.\n *\n * @see {@link https://refine.dev/docs/api-reference/core/components/refine-config/#loginpage} for more details.\n */\nexport const LoginPage: React.FC = () => {\n    const [username, setUsername] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n\n    const translate = useTranslate();\n\n    const authProvider = useActiveAuthProvider();\n    const { mutate: login } = useLogin<ILoginForm>({\n        v3LegacyAuthProviderCompatible: Boolean(authProvider?.isLegacy),\n    });\n\n    return (\n        <>\n            <h1>{translate(\"pages.login.title\", \"Sign in your account\")}</h1>\n            <form\n                onSubmit={(e) => {\n                    e.preventDefault();\n                    login({ username, password });\n                }}\n            >\n                <table>\n                    <tbody>\n                        <tr>\n                            <td>\n                                {translate(\n                                    \"pages.login.username\",\n                                    undefined,\n                                    \"username\",\n                                )}\n                                :\n                            </td>\n                            <td>\n                                <input\n                                    type=\"text\"\n                                    size={20}\n                                    autoCorrect=\"off\"\n                                    spellCheck={false}\n                                    autoCapitalize=\"off\"\n                                    autoFocus\n                                    required\n                                    value={username}\n                                    onChange={(e) =>\n                                        setUsername(e.target.value)\n                                    }\n                                />\n                            </td>\n                        </tr>\n                        <tr>\n                            <td>\n                                {translate(\n                                    \"pages.login.password\",\n                                    undefined,\n                                    \"password\",\n                                )}\n                                :\n                            </td>\n                            <td>\n                                <input\n                                    type=\"password\"\n                                    required\n                                    size={20}\n                                    value={password}\n                                    onChange={(e) =>\n                                        setPassword(e.target.value)\n                                    }\n                                />\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n                <br />\n                <input type=\"submit\" value=\"login\" />\n            </form>\n        </>\n    );\n};\n","import React, {\n    DetailedHTMLProps,\n    HTMLAttributes,\n    FormHTMLAttributes,\n} from \"react\";\n\nimport {\n    LoginPage,\n    RegisterPage,\n    ForgotPasswordPage,\n    UpdatePasswordPage,\n} from \"./components\";\n\nimport { AuthPageProps } from \"../../../interfaces\";\n\nexport type DivPropsType = DetailedHTMLProps<\n    HTMLAttributes<HTMLDivElement>,\n    HTMLDivElement\n>;\nexport type FormPropsType = DetailedHTMLProps<\n    FormHTMLAttributes<HTMLFormElement>,\n    HTMLFormElement\n>;\n\nexport type AuthProps = AuthPageProps<\n    DivPropsType,\n    DivPropsType,\n    FormPropsType\n>;\n\n/**\n * **refine** has a default auth page form which is served on `/login` route when the `authProvider` configuration is provided.\n * @param title is not implemented yet.\n * @see {@link https://refine.dev/docs/api-reference/core/components/auth-page/} for more details.\n */\nexport const AuthPage: React.FC<AuthProps> = (props) => {\n    const { type } = props;\n    const renderView = () => {\n        switch (type) {\n            case \"register\":\n                return <RegisterPage {...props} />;\n            case \"forgotPassword\":\n                return <ForgotPasswordPage {...props} />;\n            case \"updatePassword\":\n                return <UpdatePasswordPage {...props} />;\n            default:\n                return <LoginPage {...props} />;\n        }\n    };\n\n    return <>{renderView()}</>;\n};\n","import React, { useState } from \"react\";\nimport { LoginPageProps, LoginFormTypes } from \"../../../../../interfaces\";\n\nimport { useRouterContext, useLink, useRouterType, useLogin } from \"@hooks\";\nimport { useTranslate } from \"@hooks/translate\";\n\nimport { DivPropsType, FormPropsType } from \"../..\";\nimport { useActiveAuthProvider } from \"@definitions/helpers\";\n\ntype LoginProps = LoginPageProps<DivPropsType, DivPropsType, FormPropsType>;\n\nexport const LoginPage: React.FC<LoginProps> = ({\n    providers,\n    registerLink,\n    forgotPasswordLink,\n    rememberMe,\n    contentProps,\n    wrapperProps,\n    renderContent,\n    formProps,\n    title = undefined,\n    hideForm,\n}) => {\n    const routerType = useRouterType();\n    const Link = useLink();\n    const { Link: LegacyLink } = useRouterContext();\n\n    const ActiveLink = routerType === \"legacy\" ? LegacyLink : Link;\n\n    const [email, setEmail] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n    const [remember, setRemember] = useState(false);\n\n    const translate = useTranslate();\n\n    const authProvider = useActiveAuthProvider();\n    const { mutate: login } = useLogin<LoginFormTypes>({\n        v3LegacyAuthProviderCompatible: Boolean(authProvider?.isLegacy),\n    });\n\n    const renderLink = (link: string, text?: string) => {\n        return <ActiveLink to={link}>{text}</ActiveLink>;\n    };\n\n    const renderProviders = () => {\n        if (providers) {\n            return providers.map((provider) => (\n                <div\n                    key={provider.name}\n                    style={{\n                        display: \"flex\",\n                        alignItems: \"center\",\n                        justifyContent: \"center\",\n                        marginBottom: \"1rem\",\n                    }}\n                >\n                    <button\n                        onClick={() =>\n                            login({\n                                providerName: provider.name,\n                            })\n                        }\n                        style={{\n                            display: \"flex\",\n                            alignItems: \"center\",\n                        }}\n                    >\n                        {provider?.icon}\n                        {provider.label ?? <label>{provider.label}</label>}\n                    </button>\n                </div>\n            ));\n        }\n        return null;\n    };\n\n    const content = (\n        <div {...contentProps}>\n            <h1 style={{ textAlign: \"center\" }}>\n                {translate(\"pages.login.title\", \"Sign in to your account\")}\n            </h1>\n            {renderProviders()}\n            {!hideForm && (\n                <>\n                    <hr />\n                    <form\n                        onSubmit={(e) => {\n                            e.preventDefault();\n                            login({ email, password, remember });\n                        }}\n                        {...formProps}\n                    >\n                        <div\n                            style={{\n                                display: \"flex\",\n                                flexDirection: \"column\",\n                                padding: 25,\n                            }}\n                        >\n                            <label htmlFor=\"email-input\">\n                                {translate(\"pages.login.fields.email\", \"Email\")}\n                            </label>\n                            <input\n                                id=\"email-input\"\n                                name=\"email\"\n                                type=\"text\"\n                                size={20}\n                                autoCorrect=\"off\"\n                                spellCheck={false}\n                                autoCapitalize=\"off\"\n                                required\n                                value={email}\n                                onChange={(e) => setEmail(e.target.value)}\n                            />\n                            <label htmlFor=\"password-input\">\n                                {translate(\n                                    \"pages.login.fields.password\",\n                                    \"Password\",\n                                )}\n                            </label>\n                            <input\n                                id=\"password-input\"\n                                type=\"password\"\n                                name=\"password\"\n                                required\n                                size={20}\n                                value={password}\n                                onChange={(e) => setPassword(e.target.value)}\n                            />\n                            {rememberMe ?? (\n                                <>\n                                    <label htmlFor=\"remember-me-input\">\n                                        {translate(\n                                            \"pages.login.buttons.rememberMe\",\n                                            \"Remember me\",\n                                        )}\n                                        <input\n                                            id=\"remember-me-input\"\n                                            name=\"remember\"\n                                            type=\"checkbox\"\n                                            size={20}\n                                            checked={remember}\n                                            value={remember.toString()}\n                                            onChange={() => {\n                                                setRemember(!remember);\n                                            }}\n                                        />\n                                    </label>\n                                </>\n                            )}\n                            <br />\n                            {forgotPasswordLink ??\n                                renderLink(\n                                    \"/forgot-password\",\n                                    translate(\n                                        \"pages.login.buttons.forgotPassword\",\n                                        \"Forgot password?\",\n                                    ),\n                                )}\n                            <input\n                                type=\"submit\"\n                                value={translate(\n                                    \"pages.login.signin\",\n                                    \"Sign in\",\n                                )}\n                            />\n                            {registerLink ?? (\n                                <span>\n                                    {translate(\n                                        \"pages.login.buttons.noAccount\",\n                                        \"Don’t have an account?\",\n                                    )}{\" \"}\n                                    {renderLink(\n                                        \"/register\",\n                                        translate(\n                                            \"pages.login.register\",\n                                            \"Sign up\",\n                                        ),\n                                    )}\n                                </span>\n                            )}\n                        </div>\n                    </form>\n                </>\n            )}\n            {registerLink !== false && hideForm && (\n                <div style={{ textAlign: \"center\" }}>\n                    {translate(\n                        \"pages.login.buttons.noAccount\",\n                        \"Don’t have an account?\",\n                    )}{\" \"}\n                    {renderLink(\n                        \"/register\",\n                        translate(\"pages.login.register\", \"Sign up\"),\n                    )}\n                </div>\n            )}\n        </div>\n    );\n\n    return (\n        <div {...wrapperProps}>\n            {renderContent ? renderContent(content, title) : content}\n        </div>\n    );\n};\n","import React, { useState } from \"react\";\nimport { RegisterPageProps } from \"../../../../../interfaces\";\n\nimport {\n    useTranslate,\n    useRouterContext,\n    useLink,\n    useRouterType,\n    useRegister,\n} from \"@hooks\";\n\nimport { DivPropsType, FormPropsType } from \"../..\";\nimport { useActiveAuthProvider } from \"@definitions/helpers\";\n\ntype RegisterProps = RegisterPageProps<\n    DivPropsType,\n    DivPropsType,\n    FormPropsType\n>;\n\nexport const RegisterPage: React.FC<RegisterProps> = ({\n    providers,\n    loginLink,\n    wrapperProps,\n    contentProps,\n    renderContent,\n    formProps,\n    title = undefined,\n    hideForm,\n}) => {\n    const routerType = useRouterType();\n    const Link = useLink();\n    const { Link: LegacyLink } = useRouterContext();\n\n    const ActiveLink = routerType === \"legacy\" ? LegacyLink : Link;\n\n    const [email, setEmail] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n\n    const translate = useTranslate();\n\n    const authProvider = useActiveAuthProvider();\n    const { mutate: register, isLoading } = useRegister({\n        v3LegacyAuthProviderCompatible: Boolean(authProvider?.isLegacy),\n    });\n\n    const renderLink = (link: string, text?: string) => {\n        return <ActiveLink to={link}>{text}</ActiveLink>;\n    };\n\n    const renderProviders = () => {\n        if (providers) {\n            return providers.map((provider) => (\n                <div\n                    key={provider.name}\n                    style={{\n                        display: \"flex\",\n                        alignItems: \"center\",\n                        justifyContent: \"center\",\n                        marginBottom: \"1rem\",\n                    }}\n                >\n                    <button\n                        onClick={() =>\n                            register({\n                                providerName: provider.name,\n                            })\n                        }\n                        style={{\n                            display: \"flex\",\n                            alignItems: \"center\",\n                        }}\n                    >\n                        {provider?.icon}\n                        {provider.label ?? <label>{provider.label}</label>}\n                    </button>\n                </div>\n            ));\n        }\n        return null;\n    };\n\n    const content = (\n        <div {...contentProps}>\n            <h1 style={{ textAlign: \"center\" }}>\n                {translate(\"pages.register.title\", \"Sign up for your account\")}\n            </h1>\n            {renderProviders()}\n            {!hideForm && (\n                <>\n                    <hr />\n                    <form\n                        onSubmit={(e) => {\n                            e.preventDefault();\n                            register({ email, password });\n                        }}\n                        {...formProps}\n                    >\n                        <div\n                            style={{\n                                display: \"flex\",\n                                flexDirection: \"column\",\n                                padding: 25,\n                            }}\n                        >\n                            <label htmlFor=\"email-input\">\n                                {translate(\n                                    \"pages.register.fields.email\",\n                                    \"Email\",\n                                )}\n                            </label>\n                            <input\n                                id=\"email-input\"\n                                name=\"email\"\n                                type=\"email\"\n                                size={20}\n                                autoCorrect=\"off\"\n                                spellCheck={false}\n                                autoCapitalize=\"off\"\n                                required\n                                value={email}\n                                onChange={(e) => setEmail(e.target.value)}\n                            />\n                            <label htmlFor=\"password-input\">\n                                {translate(\n                                    \"pages.register.fields.password\",\n                                    \"Password\",\n                                )}\n                            </label>\n                            <input\n                                id=\"password-input\"\n                                name=\"password\"\n                                type=\"password\"\n                                required\n                                size={20}\n                                value={password}\n                                onChange={(e) => setPassword(e.target.value)}\n                            />\n                            <input\n                                type=\"submit\"\n                                value={translate(\n                                    \"pages.register.buttons.submit\",\n                                    \"Sign up\",\n                                )}\n                                disabled={isLoading}\n                            />\n                            {loginLink ?? (\n                                <>\n                                    <span>\n                                        {translate(\n                                            \"pages.login.buttons.haveAccount\",\n                                            \"Have an account?\",\n                                        )}{\" \"}\n                                        {renderLink(\n                                            \"/login\",\n                                            translate(\n                                                \"pages.login.signin\",\n                                                \"Sign in\",\n                                            ),\n                                        )}\n                                    </span>\n                                </>\n                            )}\n                        </div>\n                    </form>\n                </>\n            )}\n            {loginLink !== false && hideForm && (\n                <div style={{ textAlign: \"center\" }}>\n                    {translate(\n                        \"pages.login.buttons.haveAccount\",\n                        \"Have an account?\",\n                    )}{\" \"}\n                    {renderLink(\n                        \"/login\",\n                        translate(\"pages.login.signin\", \"Sign in\"),\n                    )}\n                </div>\n            )}\n        </div>\n    );\n\n    return (\n        <div {...wrapperProps}>\n            {renderContent ? renderContent(content, title) : content}\n        </div>\n    );\n};\n","import React, { useState } from \"react\";\n\nimport {\n    useTranslate,\n    useRouterContext,\n    useLink,\n    useRouterType,\n    useForgotPassword,\n} from \"@hooks\";\n\nimport { DivPropsType, FormPropsType } from \"../..\";\nimport {\n    ForgotPasswordFormTypes,\n    ForgotPasswordPageProps,\n} from \"../../../../../interfaces\";\n\ntype ForgotPasswordProps = ForgotPasswordPageProps<\n    DivPropsType,\n    DivPropsType,\n    FormPropsType\n>;\n\nexport const ForgotPasswordPage: React.FC<ForgotPasswordProps> = ({\n    loginLink,\n    wrapperProps,\n    contentProps,\n    renderContent,\n    formProps,\n    title = undefined,\n}) => {\n    const translate = useTranslate();\n    const routerType = useRouterType();\n    const Link = useLink();\n    const { Link: LegacyLink } = useRouterContext();\n\n    const ActiveLink = routerType === \"legacy\" ? LegacyLink : Link;\n\n    const [email, setEmail] = useState(\"\");\n\n    const { mutate: forgotPassword, isLoading } =\n        useForgotPassword<ForgotPasswordFormTypes>();\n\n    const renderLink = (link: string, text?: string) => {\n        return <ActiveLink to={link}>{text}</ActiveLink>;\n    };\n\n    const content = (\n        <div {...contentProps}>\n            <h1 style={{ textAlign: \"center\" }}>\n                {translate(\n                    \"pages.forgotPassword.title\",\n                    \"Forgot your password?\",\n                )}\n            </h1>\n            <hr />\n            <form\n                onSubmit={(e) => {\n                    e.preventDefault();\n                    forgotPassword({ email });\n                }}\n                {...formProps}\n            >\n                <div\n                    style={{\n                        display: \"flex\",\n                        flexDirection: \"column\",\n                        padding: 25,\n                    }}\n                >\n                    <label htmlFor=\"email-input\">\n                        {translate(\n                            \"pages.forgotPassword.fields.email\",\n                            \"Email\",\n                        )}\n                    </label>\n                    <input\n                        id=\"email-input\"\n                        name=\"email\"\n                        type=\"mail\"\n                        autoCorrect=\"off\"\n                        spellCheck={false}\n                        autoCapitalize=\"off\"\n                        required\n                        value={email}\n                        onChange={(e) => setEmail(e.target.value)}\n                    />\n                    <input\n                        type=\"submit\"\n                        disabled={isLoading}\n                        value={translate(\n                            \"pages.forgotPassword.buttons.submit\",\n                            \"Send reset instructions\",\n                        )}\n                    />\n                    <br />\n                    {loginLink ?? (\n                        <span>\n                            {translate(\n                                \"pages.register.buttons.haveAccount\",\n                                \"Have an account? \",\n                            )}{\" \"}\n                            {renderLink(\n                                \"/login\",\n                                translate(\"pages.login.signin\", \"Sign in\"),\n                            )}\n                        </span>\n                    )}\n                </div>\n            </form>\n        </div>\n    );\n\n    return (\n        <div {...wrapperProps}>\n            {renderContent ? renderContent(content, title) : content}\n        </div>\n    );\n};\n","import React, { useState } from \"react\";\nimport {\n    UpdatePasswordFormTypes,\n    UpdatePasswordPageProps,\n} from \"../../../../../interfaces\";\n\nimport { useTranslate, useUpdatePassword } from \"@hooks\";\n\nimport { DivPropsType, FormPropsType } from \"../..\";\nimport { useActiveAuthProvider } from \"@definitions/helpers\";\n\ntype UpdatePasswordProps = UpdatePasswordPageProps<\n    DivPropsType,\n    DivPropsType,\n    FormPropsType\n>;\n\nexport const UpdatePasswordPage: React.FC<UpdatePasswordProps> = ({\n    wrapperProps,\n    contentProps,\n    renderContent,\n    formProps,\n    title = undefined,\n}) => {\n    const translate = useTranslate();\n\n    const authProvider = useActiveAuthProvider();\n    const { mutate: updatePassword, isLoading } =\n        useUpdatePassword<UpdatePasswordFormTypes>({\n            v3LegacyAuthProviderCompatible: Boolean(authProvider?.isLegacy),\n        });\n\n    const [newPassword, setNewPassword] = useState(\"\");\n    const [confirmPassword, setConfirmPassword] = useState(\"\");\n\n    const content = (\n        <div {...contentProps}>\n            <h1 style={{ textAlign: \"center\" }}>\n                {translate(\"pages.updatePassword.title\", \"Update Password\")}\n            </h1>\n            <hr />\n            <form\n                onSubmit={(e) => {\n                    e.preventDefault();\n                    updatePassword({\n                        password: newPassword,\n                        confirmPassword,\n                    });\n                }}\n                {...formProps}\n            >\n                <div\n                    style={{\n                        display: \"flex\",\n                        flexDirection: \"column\",\n                        padding: 25,\n                    }}\n                >\n                    <label htmlFor=\"password-input\">\n                        {translate(\n                            \"pages.updatePassword.fields.password\",\n                            \"New Password\",\n                        )}\n                    </label>\n                    <input\n                        id=\"password-input\"\n                        name=\"password\"\n                        type=\"password\"\n                        required\n                        size={20}\n                        value={newPassword}\n                        onChange={(e) => setNewPassword(e.target.value)}\n                    />\n                    <label htmlFor=\"confirm-password-input\">\n                        {translate(\n                            \"pages.updatePassword.fields.confirmPassword\",\n                            \"Confirm New Password\",\n                        )}\n                    </label>\n                    <input\n                        id=\"confirm-password-input\"\n                        name=\"confirmPassword\"\n                        type=\"password\"\n                        required\n                        size={20}\n                        value={confirmPassword}\n                        onChange={(e) => setConfirmPassword(e.target.value)}\n                    />\n                    <input\n                        type=\"submit\"\n                        disabled={isLoading}\n                        value={translate(\n                            \"pages.updatePassword.buttons.submit\",\n                            \"Update\",\n                        )}\n                    />\n                </div>\n            </form>\n        </div>\n    );\n\n    return (\n        <div {...wrapperProps}>\n            {renderContent ? renderContent(content, title) : content}\n        </div>\n    );\n};\n","import React from \"react\";\n\n/**\n * **refine** shows a default ready page on root route when no `resources` is passed to the `<Refine>` component as a property.\n *\n * @deprecated `ReadyPage` is deprecated and will be removed in the next major release.\n */\nexport const ReadyPage: React.FC = () => {\n    return (\n        <>\n            <h1>Welcome on board</h1>\n            <p>Your configuration is completed.</p>\n            <p>\n                Now you can get started by adding your resources to the{\" \"}\n                <code>`resources`</code> property of <code>{\"`<Refine>`\"}</code>\n            </p>\n            <div style={{ display: \"flex\", gap: 8 }}>\n                <a href=\"https://refine.dev\" target=\"_blank\" rel=\"noreferrer\">\n                    <button>Documentation</button>\n                </a>\n                <a\n                    href=\"https://refine.dev/examples\"\n                    target=\"_blank\"\n                    rel=\"noreferrer\"\n                >\n                    <button>Examples</button>\n                </a>\n                <a\n                    href=\"https://discord.gg/refine\"\n                    target=\"_blank\"\n                    rel=\"noreferrer\"\n                >\n                    <button>Community</button>\n                </a>\n            </div>\n        </>\n    );\n};\n","import React, { useState } from \"react\";\n\nimport { useMediaQuery } from \"@definitions/helpers\";\n\ntype CardInfo = {\n    title: string;\n    description: string;\n    link: string;\n    iconUrl: string;\n};\n\nconst cards: CardInfo[] = [\n    {\n        title: \"Documentation\",\n        description:\n            \"Learn about the technical details of using refine in your projects.\",\n        link: \"https://refine.dev/\",\n        iconUrl:\n            \"https://refine.ams3.cdn.digitaloceanspaces.com/welcome-page/book.svg\",\n    },\n    {\n        title: \"Tutorial\",\n        description:\n            \"Learn how to use refine by building a fully-functioning CRUD app, from scratch to full launch.\",\n        link: \"https://refine.dev/docs/tutorial/introduction/index/\",\n        iconUrl:\n            \"https://refine.ams3.cdn.digitaloceanspaces.com/welcome-page/hat.svg\",\n    },\n    {\n        title: \"Examples\",\n        description:\n            \"A collection of reference applications you can use as a starting point.\",\n        link: \"https://refine.dev/examples\",\n        iconUrl:\n            \"https://refine.ams3.cdn.digitaloceanspaces.com/welcome-page/application.svg\",\n    },\n    {\n        title: \"Community\",\n        description:\n            \"Join our Discord community and keep up with the latest news.\",\n        link: \"https://discord.gg/refine\",\n        iconUrl:\n            \"https://refine.ams3.cdn.digitaloceanspaces.com/welcome-page/discord.svg\",\n    },\n];\n\n/**\n * It is a page that welcomes you after the configuration is completed.\n */\nexport const WelcomePage: React.FC = () => {\n    const isTablet = useMediaQuery(\"(max-width: 1010px)\");\n    const isMobile = useMediaQuery(\"(max-width: 650px)\");\n\n    const getGridTemplateColumns = () => {\n        if (isMobile) {\n            return \"1, 280px\";\n        } else if (isTablet) {\n            return \"2, 280px\";\n        } else {\n            return \"4, 1fr\";\n        }\n    };\n\n    const getHeaderFontSize = () => {\n        if (isMobile) {\n            return \"32px\";\n        } else if (isTablet) {\n            return \"40px\";\n        } else {\n            return \"48px\";\n        }\n    };\n\n    const getSubHeaderFontSize = () => {\n        if (isMobile) {\n            return \"16px\";\n        } else if (isTablet) {\n            return \"20px\";\n        } else {\n            return \"24px\";\n        }\n    };\n\n    return (\n        <div\n            style={{\n                position: \"fixed\",\n                zIndex: 10,\n                inset: 0,\n                overflow: \"auto\",\n                width: \"100dvw\",\n                height: \"100dvh\",\n            }}\n        >\n            <div\n                style={{\n                    overflow: \"hidden\",\n                    position: \"relative\",\n                    backgroundSize: \"cover\",\n                    backgroundRepeat: \"no-repeat\",\n                    background: isMobile\n                        ? \"url(https://refine.ams3.cdn.digitaloceanspaces.com/website/static/assets/landing-noise.webp), radial-gradient(88.89% 50% at 50% 100%, rgba(38, 217, 127, 0.10) 0%, rgba(38, 217, 127, 0.00) 100%), radial-gradient(88.89% 50% at 50% 0%, rgba(71, 235, 235, 0.15) 0%, rgba(71, 235, 235, 0.00) 100%), #1D1E30\"\n                        : isTablet\n                        ? \"url(https://refine.ams3.cdn.digitaloceanspaces.com/website/static/assets/landing-noise.webp), radial-gradient(66.67% 50% at 50% 100%, rgba(38, 217, 127, 0.10) 0%, rgba(38, 217, 127, 0.00) 100%), radial-gradient(66.67% 50% at 50% 0%, rgba(71, 235, 235, 0.15) 0%, rgba(71, 235, 235, 0.00) 100%), #1D1E30\"\n                        : \"url(https://refine.ams3.cdn.digitaloceanspaces.com/website/static/assets/landing-noise.webp), radial-gradient(35.56% 50% at 50% 100%, rgba(38, 217, 127, 0.12) 0%, rgba(38, 217, 127, 0) 100%), radial-gradient(35.56% 50% at 50% 0%, rgba(71, 235, 235, 0.18) 0%, rgba(71, 235, 235, 0) 100%), #1D1E30\",\n                    minHeight: \"100%\",\n                    minWidth: \"100%\",\n                    fontFamily: \"Arial\",\n                    color: \"#FFFFFF\",\n                }}\n            >\n                <div\n                    style={{\n                        zIndex: 2,\n                        position: \"absolute\",\n                        width: isMobile ? \"400px\" : \"800px\",\n                        height: \"552px\",\n                        opacity: \"0.5\",\n                        background:\n                            \"url(https://refine.ams3.cdn.digitaloceanspaces.com/assets/welcome-page-hexagon.png)\",\n                        backgroundRepeat: \"no-repeat\",\n                        backgroundSize: \"contain\",\n                        top: \"0\",\n                        left: \"50%\",\n                        transform: \"translateX(-50%)\",\n                    }}\n                />\n                <div style={{ height: isMobile ? \"40px\" : \"80px\" }}></div>\n                <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n                    <div\n                        style={{\n                            backgroundRepeat: \"no-repeat\",\n                            backgroundSize: isMobile\n                                ? \"112px 58px\"\n                                : \"224px 116px\",\n                            backgroundImage:\n                                \"url(https://refine.ams3.cdn.digitaloceanspaces.com/assets/refine-logo.svg)\",\n                            width: isMobile ? 112 : 224,\n                            height: isMobile ? 58 : 116,\n                        }}\n                    />\n                </div>\n                <div\n                    style={{\n                        height: isMobile\n                            ? \"120px\"\n                            : isTablet\n                            ? \"270px\"\n                            : \"40vh\",\n                        minHeight: isMobile\n                            ? \"120px\"\n                            : isTablet\n                            ? \"270px\"\n                            : \"270px\",\n                    }}\n                ></div>\n                <div\n                    style={{\n                        display: \"flex\",\n                        flexDirection: \"column\",\n                        gap: \"16px\",\n                        textAlign: \"center\",\n                    }}\n                >\n                    <h1\n                        style={{\n                            fontSize: getHeaderFontSize(),\n                            fontWeight: 700,\n                            margin: \"0px\",\n                        }}\n                    >\n                        Welcome Aboard!\n                    </h1>\n                    <h4\n                        style={{\n                            fontSize: getSubHeaderFontSize(),\n                            fontWeight: 400,\n                            margin: \"0px\",\n                        }}\n                    >\n                        Your configuration is completed.\n                    </h4>\n                </div>\n                <div style={{ height: \"64px\" }}></div>\n                <div\n                    style={{\n                        display: \"grid\",\n                        gridTemplateColumns: `repeat(${getGridTemplateColumns()})`,\n                        justifyContent: \"center\",\n                        gap: \"48px\",\n                        paddingRight: \"16px\",\n                        paddingLeft: \"16px\",\n                        paddingBottom: \"32px\",\n                        maxWidth: \"976px\",\n                        margin: \"auto\",\n                    }}\n                >\n                    {cards.map((card) => (\n                        <Card key={`welcome-page-${card.title}`} card={card} />\n                    ))}\n                </div>\n            </div>\n        </div>\n    );\n};\n\ntype CardProps = {\n    card: CardInfo;\n};\n\nconst Card: React.FC<CardProps> = ({ card }) => {\n    const { title, description, iconUrl, link } = card;\n\n    const [isHover, setIsHover] = useState(false);\n\n    return (\n        <div\n            style={{\n                display: \"flex\",\n                flexDirection: \"column\",\n                gap: \"16px\",\n            }}\n        >\n            <div\n                style={{\n                    display: \"flex\",\n                    alignItems: \"center\",\n                }}\n            >\n                <a\n                    onPointerEnter={() => setIsHover(true)}\n                    onPointerLeave={() => setIsHover(false)}\n                    style={{\n                        display: \"flex\",\n                        alignItems: \"center\",\n                        color: \"#fff\",\n                        textDecoration: \"none\",\n                    }}\n                    href={link}\n                >\n                    <div\n                        style={{\n                            width: \"16px\",\n                            height: \"16px\",\n                            backgroundPosition: \"center\",\n                            backgroundSize: \"contain\",\n                            backgroundRepeat: \"no-repeat\",\n                            backgroundImage: `url(${iconUrl})`,\n                        }}\n                    />\n                    <span\n                        style={{\n                            fontSize: \"16px\",\n                            fontWeight: 700,\n                            marginLeft: \"13px\",\n                            marginRight: \"14px\",\n                        }}\n                    >\n                        {title}\n                    </span>\n                    <svg\n                        style={{\n                            transition:\n                                \"transform 0.5s ease-in-out, opacity 0.2s ease-in-out\",\n                            ...(isHover && {\n                                transform: \"translateX(4px)\",\n                                opacity: 1,\n                            }),\n                        }}\n                        width=\"12\"\n                        height=\"8\"\n                        fill=\"none\"\n                        opacity=\"0.5\"\n                        xmlns=\"http://www.w3.org/2000/svg\"\n                    >\n                        <path\n                            d=\"M7.293.293a1 1 0 0 1 1.414 0l3 3a1 1 0 0 1 0 1.414l-3 3a1 1 0 0 1-1.414-1.414L8.586 5H1a1 1 0 0 1 0-2h7.586L7.293 1.707a1 1 0 0 1 0-1.414Z\"\n                            fill=\"#fff\"\n                        />\n                    </svg>\n                </a>\n            </div>\n            <span\n                style={{\n                    fontSize: \"12px\",\n                    opacity: 0.5,\n                    lineHeight: \"16px\",\n                }}\n            >\n                {description}\n            </span>\n        </div>\n    );\n};\n","import React from \"react\";\nimport { QueryClient, QueryClientProvider } from \"@tanstack/react-query\";\nimport { useQuerySubscription } from \"@refinedev/devtools-internal\";\n\nimport { ReadyPage as DefaultReadyPage, RouteChangeHandler } from \"@components\";\nimport { Telemetry } from \"@components/telemetry\";\nimport { AccessControlContextProvider } from \"@contexts/accessControl\";\nimport { AuditLogContextProvider } from \"@contexts/auditLog\";\nimport {\n    AuthBindingsContextProvider,\n    LegacyAuthContextProvider,\n} from \"@contexts/auth\";\nimport { DataContextProvider } from \"@contexts/data\";\nimport { LegacyRouterContextProvider } from \"@contexts/legacy-router\";\nimport { LiveContextProvider } from \"@contexts/live\";\nimport { NotificationContextProvider } from \"@contexts/notification\";\nimport { RefineContextProvider } from \"@contexts/refine\";\nimport { ResourceContextProvider } from \"@contexts/resource\";\nimport { TranslationContextProvider } from \"@contexts/translation\";\nimport { UndoableQueueContextProvider } from \"@contexts/undoableQueue\";\nimport { UnsavedWarnContextProvider } from \"@contexts/unsavedWarn\";\nimport { handleRefineOptions } from \"@definitions\";\nimport { useDeepMemo } from \"@hooks/deepMemo\";\nimport { RouterBindings } from \"src/interfaces/bindings\";\n\nimport { RouterPickerProvider } from \"@contexts/router-picker\";\nimport { RouterBindingsProvider } from \"../../../contexts/router\";\nimport { useRouterMisuseWarning } from \"../../../hooks/router/use-router-misuse-warning/index\";\nimport {\n    AccessControlProvider,\n    AuditLogProvider,\n    AuthBindings,\n    DashboardPageProps,\n    I18nProvider,\n    IDataContextProvider,\n    IDataMultipleContextProvider,\n    ILiveContext,\n    INotificationContext,\n    IRefineOptions,\n    IRouterProvider,\n    LayoutProps,\n    LegacyAuthProvider,\n    LiveModeProps,\n    NotificationProvider,\n    TitleProps,\n} from \"../../../interfaces\";\nimport { ResourceProps } from \"../../../interfaces/bindings/resource\";\n\nexport interface RefineProps {\n    children?: React.ReactNode;\n    /**\n     * `resources` is the predefined interaction points for a refine app. A resource represents an entity in an endpoint in the API.\n     * While this is not a required property, it is used in resource detection and creation of routes for the app.\n     * @type [`ResourceProps[]`](https://refine.dev/docs/api-reference/core/components/refine-config/#resources)\n     */\n    resources?: ResourceProps[];\n    /**\n     * **refine** needs some router functions to create resource pages, handle navigation, etc. This provider allows you to use the router library you want\n     * @type [`IRouterProvider`](https://refine.dev/docs/api-reference/core/providers/router-provider/)\n     * @deprecated This property is deprecated and was the legacy way of routing. Please use `routerProvider` with new router bindings instead.\n     */\n    legacyRouterProvider?: IRouterProvider;\n    /**\n     * Router bindings for **refine**. A simple interface for **refine** to interact with your router in a flexible way.\n     * @type [`RouterBindings`](https://refine.dev/docs/api-reference/core/bindings/router/)\n     */\n    routerProvider?: RouterBindings;\n    /**\n     * A `dataProvider` is the place where a refine app communicates with an API. Data providers also act as adapters for refine, making it possible for it to consume different API's and data services.\n     * @type [`IDataContextProvider` | `IDataMultipleContextProvider`](https://refine.dev/docs/api-reference/core/providers/data-provider/)\n     */\n    dataProvider: IDataContextProvider | IDataMultipleContextProvider;\n    /**\n     * `authProvider` handles authentication logic like login, logout flow and checking user credentials. It is an object with methods that refine uses when necessary.\n     * @type [`AuthBindings`](https://refine.dev/docs/api-reference/core/providers/auth-provider/)\n     */\n    authProvider?: AuthBindings;\n    /**\n     * `legacyAuthProvider` handles authentication logic like login, logout flow and checking user credentials. It is an object with methods that refine uses when necessary.\n     * @type [`AuthProvider`](https://refine.dev/docs/api-reference/core/providers/auth-provider/)\n     * @deprecated `legacyAuthProvider` is deprecated with refine@4, use `authProvider` instead.\n     */\n    legacyAuthProvider?: LegacyAuthProvider;\n    /**\n     * **refine** lets you add Realtime support to your app via `liveProvider`. It can be used to update and show data in Realtime throughout your app.\n     * @type [`ILiveContext`](https://refine.dev/docs/api-reference/core/providers/live-provider/)\n     */\n    liveProvider?: ILiveContext;\n    /**\n     * `notificationProvider` handles notification logics. It is an object with methods that refine uses when necessary.\n     * @type [`NotificationProvider` | `(() => NotificationProvider)`](https://refine.dev/docs/api-reference/core/providers/notification-provider/)\n     */\n    notificationProvider?: NotificationProvider | (() => NotificationProvider);\n    /**\n     * `accessControlProvider` is the entry point for implementing access control for refine apps.\n     * @type [`AccessControlProvider`](https://refine.dev/docs/api-reference/core/providers/accessControl-provider/)\n     */\n    accessControlProvider?: AccessControlProvider;\n    /**\n     * **refine** allows you to track changes in your data and keep track of who made the changes.\n     * @type [`AuditLogProvider`](https://refine.dev/docs/api-reference/core/providers/audit-log-provider#overview)\n     */\n    auditLogProvider?: AuditLogProvider;\n    /**\n     * `i18nProvider` property lets you add i18n support to your app. Making you able to use any i18n framework.\n     * @type [`i18nProvider`](https://refine.dev/docs/api-reference/core/providers/i18n-provider/)\n     */\n    i18nProvider?: I18nProvider;\n    /**\n     * A custom error component.\n     * @type [`ReactNode`](https://refine.dev/docs/api-reference/core/components/refine-config/#catchall)\n     * @deprecated Please use the `catchAll` element in your routes instead.\n     */\n    catchAll?: React.ReactNode;\n    /**\n     * Custom login component can be passed to the `LoginPage` property.\n     * @type [`React.FC`](https://refine.dev/docs/api-reference/core/components/refine-config/#loginpage)\n     * @deprecated Please use the `LoginPage` component in your routes instead.\n     */\n    LoginPage?: React.FC;\n    /**\n     * A custom dashboard page can be passed to the `DashboardPage` prop which is accessible on root route.\n     * @type [`React.FC<DashboardPageProps>`](https://refine.dev/docs/api-reference/core/components/refine-config/#dashboardpage)\n     * @deprecated Please use the `DashboardPage` component in your routes instead.\n     */\n    DashboardPage?: React.FC<DashboardPageProps>;\n    /**\n     * Custom ready page component can be set by passing to `ReadyPage` property.\n     * @type [`React.FC`](https://refine.dev/docs/api-reference/core/components/refine-config/#readypage)\n     * @deprecated This component is only used with the legacy router and will be removed in the future.\n     */\n    ReadyPage?: React.FC;\n    /**\n     * Default layout can be customized by passing the `Layout` property.\n     * @type [`React.FC<LayoutProps>`](https://refine.dev/docs/api-reference/core/components/refine-config/#layout)\n     * @deprecated Please use the `Layout` component as a children instead of a prop.\n     */\n    Layout?: React.FC<LayoutProps>;\n    /**\n     * The default sidebar can be customized by using refine hooks and passing custom components to `Sider` property.\n     * @type [`React.FC`](https://refine.dev/docs/api-reference/core/components/refine-config/#sider)\n     * @deprecated Please pass the `Sider` component to your `Layout` component.\n     */\n    Sider?: React.FC;\n    /**\n     * The default app header can be customized by passing the `Header` property.\n     * @type [`React.FC`](https://refine.dev/docs/api-reference/core/components/refine-config/#header)\n     * @deprecated Please pass the `Header` component to your `Layout` component.\n     */\n    Header?: React.FC;\n    /**\n     *The default app footer can be customized by passing the `Footer` property.\n     * @type [`React.FC`](https://refine.dev/docs/api-reference/core/components/refine-config/#footer)\n     * @deprecated Please pass the `Footer` component to your `Layout` component.\n     */\n    Footer?: React.FC;\n    /**\n     * The component wanted to be placed out of app layout structure can be set by passing to `OffLayoutArea` prop.\n     * @type [`React.FC`](https://refine.dev/docs/api-reference/core/components/refine-config/#offlayoutarea)\n     * @deprecated Please use your `OffLayoutArea` component as a children instead of a prop.\n     */\n    OffLayoutArea?: React.FC;\n    /**\n     * TThe app title can be set by passing the `Title` property.\n     * @type [`React.FC<TitleProps>`](https://refine.dev/docs/api-reference/core/components/refine-config/#title)\n     * @deprecated Please pass the `Title` component to your `Layout` component.\n     */\n    Title?: React.FC<TitleProps>;\n    /**\n     * Callback to handle all live events.\n     * @type [`(event: LiveEvent) => void`](https://refine.dev/docs/api-reference/core/providers/live-provider/#onliveevent)\n     */\n    onLiveEvent?: LiveModeProps[\"onLiveEvent\"];\n    /**\n     * `options` is used to configure the app.\n     * @type [`IRefineOptions`](https://refine.dev/docs/api-reference/core/components/refine-config/#options)\n     * */\n    options?: IRefineOptions;\n}\n\n/**\n * {@link https://refine.dev/docs/api-reference/core/components/refine-config `<Refine> component`} is the entry point of a refine app.\n * It is where the highest level of configuration of the app occurs.\n * Only a dataProvider is required to bootstrap the app. After adding a dataProvider, resources can be added as property.\n *\n * @see {@link https://refine.dev/docs/api-reference/core/components/refine-config} for more details.\n */\nexport const Refine: React.FC<RefineProps> = ({\n    legacyAuthProvider,\n    authProvider,\n    dataProvider,\n    legacyRouterProvider,\n    routerProvider,\n    notificationProvider,\n    accessControlProvider,\n    auditLogProvider,\n    resources,\n    DashboardPage,\n    ReadyPage,\n    LoginPage,\n    catchAll,\n    children,\n    liveProvider,\n    i18nProvider,\n    Title,\n    Layout,\n    Sider,\n    Header,\n    Footer,\n    OffLayoutArea,\n    onLiveEvent,\n    options,\n}) => {\n    const {\n        optionsWithDefaults,\n        disableTelemetryWithDefault,\n        reactQueryWithDefaults,\n    } = handleRefineOptions({\n        options,\n    });\n\n    const queryClient = useDeepMemo(() => {\n        if (reactQueryWithDefaults.clientConfig instanceof QueryClient) {\n            return reactQueryWithDefaults.clientConfig;\n        }\n\n        return new QueryClient({\n            ...reactQueryWithDefaults.clientConfig,\n            defaultOptions: {\n                ...reactQueryWithDefaults.clientConfig.defaultOptions,\n                queries: {\n                    refetchOnWindowFocus: false,\n                    keepPreviousData: true,\n                    ...reactQueryWithDefaults.clientConfig.defaultOptions\n                        ?.queries,\n                },\n            },\n        });\n    }, [reactQueryWithDefaults.clientConfig]);\n\n    useQuerySubscription(queryClient);\n\n    const useNotificationProviderValues = React.useMemo(() => {\n        return typeof notificationProvider === \"function\"\n            ? notificationProvider\n            : () => notificationProvider ?? ({} as INotificationContext);\n    }, [notificationProvider]);\n\n    const notificationProviderContextValues = useNotificationProviderValues();\n\n    /**\n     * Warn our users if they are using the old way of routing in the wrong prop.\n     */\n    useRouterMisuseWarning(routerProvider);\n    /** */\n\n    /**\n     * `<ReadyPage />` is only used in the legacy routing and is not used in the new routing.\n     * If `legacyRouterProvider` is provided and `routerProvider` is not, we'll check for the `resources` prop to be empty.\n     * If `resources` is empty, then we'll render `<ReadyPage />` component.\n     */\n    if (\n        legacyRouterProvider &&\n        !routerProvider &&\n        (resources ?? []).length === 0\n    ) {\n        return ReadyPage ? <ReadyPage /> : <DefaultReadyPage />;\n    }\n\n    /** Router\n     *\n     * Handle routing from `RouterBindingsProvider` and `router` prop for the brand new way\n     * If `router` is not provided, then we'r checking for `routerProvider` prop\n     * If `routerProvider` is provided, then `RouterContextProvider` is used\n     * If none of them is provided, then `RouterBindingsProvider` is used because it supports undefined router\n     *\n     * `RouterContextProvider` is skipped whenever possible and by this way,\n     * we can achieve backward compability only when its provided by user\n     *\n     */\n    const { RouterComponent = React.Fragment } = !routerProvider\n        ? legacyRouterProvider ?? {}\n        : {};\n    /** */\n\n    return (\n        <QueryClientProvider client={queryClient}>\n            <NotificationContextProvider {...notificationProviderContextValues}>\n                <LegacyAuthContextProvider\n                    {...(legacyAuthProvider ?? {})}\n                    isProvided={Boolean(legacyAuthProvider)}\n                >\n                    <AuthBindingsContextProvider\n                        {...(authProvider ?? {})}\n                        isProvided={Boolean(authProvider)}\n                    >\n                        <DataContextProvider {...dataProvider}>\n                            <LiveContextProvider liveProvider={liveProvider}>\n                                <RouterPickerProvider\n                                    value={\n                                        legacyRouterProvider && !routerProvider\n                                            ? \"legacy\"\n                                            : \"new\"\n                                    }\n                                >\n                                    <RouterBindingsProvider\n                                        router={routerProvider}\n                                    >\n                                        <LegacyRouterContextProvider\n                                            {...legacyRouterProvider}\n                                        >\n                                            <ResourceContextProvider\n                                                resources={resources ?? []}\n                                            >\n                                                <TranslationContextProvider\n                                                    i18nProvider={i18nProvider}\n                                                >\n                                                    <AccessControlContextProvider\n                                                        {...(accessControlProvider ??\n                                                            {})}\n                                                    >\n                                                        <AuditLogContextProvider\n                                                            {...(auditLogProvider ??\n                                                                {})}\n                                                        >\n                                                            <UndoableQueueContextProvider>\n                                                                <RefineContextProvider\n                                                                    mutationMode={\n                                                                        optionsWithDefaults.mutationMode\n                                                                    }\n                                                                    warnWhenUnsavedChanges={\n                                                                        optionsWithDefaults.warnWhenUnsavedChanges\n                                                                    }\n                                                                    syncWithLocation={\n                                                                        optionsWithDefaults.syncWithLocation\n                                                                    }\n                                                                    Title={\n                                                                        Title\n                                                                    }\n                                                                    undoableTimeout={\n                                                                        optionsWithDefaults.undoableTimeout\n                                                                    }\n                                                                    catchAll={\n                                                                        catchAll\n                                                                    }\n                                                                    DashboardPage={\n                                                                        DashboardPage\n                                                                    }\n                                                                    LoginPage={\n                                                                        LoginPage\n                                                                    }\n                                                                    Layout={\n                                                                        Layout\n                                                                    }\n                                                                    Sider={\n                                                                        Sider\n                                                                    }\n                                                                    Footer={\n                                                                        Footer\n                                                                    }\n                                                                    Header={\n                                                                        Header\n                                                                    }\n                                                                    OffLayoutArea={\n                                                                        OffLayoutArea\n                                                                    }\n                                                                    hasDashboard={\n                                                                        !!DashboardPage\n                                                                    }\n                                                                    liveMode={\n                                                                        optionsWithDefaults.liveMode\n                                                                    }\n                                                                    onLiveEvent={\n                                                                        onLiveEvent\n                                                                    }\n                                                                    options={\n                                                                        optionsWithDefaults\n                                                                    }\n                                                                >\n                                                                    <UnsavedWarnContextProvider>\n                                                                        <RouterComponent>\n                                                                            {\n                                                                                children\n                                                                            }\n                                                                            {!disableTelemetryWithDefault && (\n                                                                                <Telemetry />\n                                                                            )}\n                                                                            <RouteChangeHandler />\n                                                                        </RouterComponent>\n                                                                    </UnsavedWarnContextProvider>\n                                                                </RefineContextProvider>\n                                                            </UndoableQueueContextProvider>\n                                                        </AuditLogContextProvider>\n                                                    </AccessControlContextProvider>\n                                                </TranslationContextProvider>\n                                            </ResourceContextProvider>\n                                        </LegacyRouterContextProvider>\n                                    </RouterBindingsProvider>\n                                </RouterPickerProvider>\n                            </LiveContextProvider>\n                        </DataContextProvider>\n                    </AuthBindingsContextProvider>\n                </LegacyAuthContextProvider>\n            </NotificationContextProvider>\n        </QueryClientProvider>\n    );\n};\n","import React from \"react\";\n\nimport { useTelemetryData } from \"@hooks/useTelemetryData\";\n\nimport { ITelemetryData } from \"../../interfaces/telemetry\";\n\nconst encode = (payload: ITelemetryData): string | undefined => {\n    try {\n        const stringifiedPayload = JSON.stringify(payload || {});\n\n        if (typeof btoa !== \"undefined\") {\n            return btoa(stringifiedPayload);\n        }\n\n        return Buffer.from(stringifiedPayload).toString(\"base64\");\n    } catch (err) {\n        return undefined;\n    }\n};\n\nconst throughImage = (src: string) => {\n    const img = new Image();\n\n    img.src = src;\n};\n\nconst throughFetch = (src: string) => {\n    fetch(src);\n};\n\nconst transport = (src: string) => {\n    if (typeof Image !== \"undefined\") {\n        throughImage(src);\n    } else if (typeof fetch !== \"undefined\") {\n        throughFetch(src);\n    }\n};\n\nexport const Telemetry: React.FC<{}> = () => {\n    const payload = useTelemetryData();\n    const sent = React.useRef(false);\n\n    React.useEffect(() => {\n        if (sent.current) {\n            return;\n        }\n        const encoded = encode(payload);\n\n        if (!encoded) {\n            return;\n        }\n\n        transport(`https://telemetry.refine.dev/telemetry?payload=${encoded}`);\n        sent.current = true;\n    }, []);\n\n    return null;\n};\n","import { useContext } from \"react\";\n\nimport { AuditLogContext } from \"@contexts/auditLog\";\nimport { LiveContext } from \"@contexts/live\";\nimport { RouterContext } from \"@contexts/legacy-router\";\nimport { DataContext } from \"@contexts/data\";\nimport { TranslationContext } from \"@contexts/translation\";\nimport { NotificationContext } from \"@contexts/notification\";\nimport { AccessControlContext } from \"@contexts/accessControl\";\nimport { useResource } from \"@hooks/resource\";\n\nimport { ITelemetryData } from \"../../interfaces/telemetry\";\nimport { useIsExistAuthentication, useRefineContext } from \"..\";\n\n// It reads and updates from package.json during build. ref: tsup.config.ts\nconst REFINE_VERSION = \"4.46.0\";\n\nexport const useTelemetryData = (): ITelemetryData => {\n    const auth = useIsExistAuthentication();\n    const auditLogContext = useContext(AuditLogContext);\n    const liveContext = useContext(LiveContext);\n    const routerContext = useContext(RouterContext);\n    const dataContext = useContext(DataContext);\n    const { i18nProvider } = useContext(TranslationContext);\n    const notificationContext = useContext(NotificationContext);\n    const accessControlContext = useContext(AccessControlContext);\n    const { resources } = useResource();\n    const refineOptions = useRefineContext();\n\n    const auditLog =\n        !!auditLogContext.create ||\n        !!auditLogContext.get ||\n        !!auditLogContext.update;\n\n    const live =\n        !!liveContext?.publish ||\n        !!liveContext?.subscribe ||\n        !!liveContext?.unsubscribe;\n\n    const router =\n        !!routerContext.useHistory ||\n        !!routerContext.Link ||\n        !!routerContext.Prompt ||\n        !!routerContext.useLocation ||\n        !!routerContext.useParams;\n\n    const data = !!dataContext;\n\n    const i18n =\n        !!i18nProvider?.changeLocale ||\n        !!i18nProvider?.getLocale ||\n        !!i18nProvider?.translate;\n\n    const notification =\n        !!notificationContext.close || !!notificationContext.open;\n\n    const accessControl = !!accessControlContext.can;\n\n    const projectId = refineOptions?.options?.projectId;\n\n    return {\n        providers: {\n            auth,\n            auditLog,\n            live,\n            router,\n            data,\n            i18n,\n            notification,\n            accessControl,\n        },\n        version: REFINE_VERSION,\n        resourceCount: resources.length,\n        projectId,\n    };\n};\n","import { IRouterProvider, RouterBindings } from \"src/interfaces\";\n\nexport const checkRouterPropMisuse = (\n    value: IRouterProvider | RouterBindings,\n) => {\n    // check if `routerProvider` prop is passed with legacy properties.\n    // If yes, console.warn the user to use `legacyRuterProvider` prop instead.\n    const bindings = [\"go\", \"parse\", \"back\", \"Link\"];\n\n    // check if `value` contains properties other than `bindings`\n    const otherProps = Object.keys(value).filter(\n        (key) => !bindings.includes(key),\n    );\n\n    const hasOtherProps = otherProps.length > 0;\n\n    if (hasOtherProps) {\n        console.warn(\n            `Unsupported properties are found in \\`routerProvider\\` prop. You provided \\`${otherProps.join(\n                \", \",\n            )}\\`. Supported properties are \\`${bindings.join(\n                \", \",\n            )}\\`. You may wanted to use \\`legacyRouterProvider\\` prop instead.`,\n        );\n\n        return true;\n    }\n\n    return false;\n};\n","import { checkRouterPropMisuse } from \"@definitions/helpers/check-router-prop-misuse\";\nimport React from \"react\";\nimport { RouterBindings } from \"src/interfaces\";\n\nexport const useRouterMisuseWarning = (value?: RouterBindings) => {\n    const warned = React.useRef(false);\n\n    React.useEffect(() => {\n        if (warned.current === false) {\n            if (value) {\n                const warn = checkRouterPropMisuse(value);\n                if (warn) {\n                    warned.current = true;\n                }\n            }\n        }\n    }, [value]);\n};\n","import React, { useEffect, useState } from \"react\";\n\nimport { ActionTypes } from \"@contexts/undoableQueue\";\nimport { useCancelNotification, useNotification, useTranslate } from \"@hooks\";\nimport { IUndoableQueue } from \"../../interfaces\";\n\nimport { userFriendlySecond } from \"@definitions/helpers\";\n\nexport const UndoableQueue: React.FC<{\n    notification: IUndoableQueue;\n}> = ({ notification }) => {\n    const translate = useTranslate();\n\n    const { notificationDispatch } = useCancelNotification();\n    const { open } = useNotification();\n\n    const [timeoutId, setTimeoutId] = useState<number | undefined>();\n\n    const cancelNotification = () => {\n        if (notification.isRunning === true) {\n            if (notification.seconds === 0) {\n                notification.doMutation();\n            }\n            if (!notification.isSilent) {\n                open?.({\n                    key: `${notification.id}-${notification.resource}-notification`,\n                    type: \"progress\",\n                    message: translate(\n                        \"notifications.undoable\",\n                        {\n                            seconds: userFriendlySecond(notification.seconds),\n                        },\n                        `You have ${userFriendlySecond(\n                            notification.seconds,\n                        )} seconds to undo`,\n                    ),\n                    cancelMutation: notification.cancelMutation,\n                    undoableTimeout: userFriendlySecond(notification.seconds),\n                });\n            }\n\n            if (notification.seconds > 0) {\n                if (timeoutId) {\n                    clearTimeout(timeoutId);\n                }\n\n                const newTimeoutId = setTimeout(() => {\n                    notificationDispatch({\n                        type: ActionTypes.DECREASE_NOTIFICATION_SECOND,\n                        payload: {\n                            id: notification.id,\n                            seconds: notification.seconds,\n                            resource: notification.resource,\n                        },\n                    });\n                }, 1000) as unknown as number;\n\n                setTimeoutId(newTimeoutId);\n            }\n        }\n    };\n\n    useEffect(() => {\n        cancelNotification();\n    }, [notification]);\n\n    return null;\n};\n","import React, { useEffect } from \"react\";\n\nimport {\n    useRefineContext,\n    useRouterContext,\n    useTranslate,\n    useWarnAboutChange,\n} from \"@hooks\";\nimport { LayoutProps, TitleProps } from \"../../interfaces\";\n\nexport interface LayoutWrapperProps {\n    /**\n     * Outer component that renders other components\n     * @default *\n     */\n    Layout?: React.FC<LayoutProps>;\n    /**\n     * [Custom sider to use](/api-reference/core/components/refine-config.md#sider)\n     * @default *\n     */\n    Sider?: React.FC;\n    /**\n     * [Custom header to use](/api-reference/core/components/refine-config.md#header)\n     * @default *\n     */\n    Header?: React.FC;\n    /**\n     * [Custom title to use](/api-reference/core/components/refine-config.md#title)\n     * @default *\n     */\n    Title?: React.FC<TitleProps>;\n    /**\n     * [Custom footer to use](/api-reference/core/components/refine-config.md#footer)\n     * @default *\n     */\n    Footer?: React.FC;\n    /**\n     * [Custom off layout area to use](/api-reference/core/components/refine-config.md#offlayoutarea)\n     * @default *\n     */\n    OffLayoutArea?: React.FC;\n    children: React.ReactNode;\n}\n\n/**\n * `<LayoutWrapper>` wraps its contents in **refine's** layout with all customizations made in {@link https://refine.dev/docs/core/components/refine-config `<Refine>`} component.\n * It is the default layout used in resource pages.\n * It can be used in custom pages to use global layout.\n *\n * @see {@link https://refine.dev/docs/core/components/layout-wrapper} for more details.\n *\n * @deprecated This component is obsolete and only works with the legacy router providers.\n */\nexport const LayoutWrapper: React.FC<LayoutWrapperProps> = ({\n    children,\n    Layout: LayoutFromProps,\n    Sider: SiderFromProps,\n    Header: HeaderFromProps,\n    Title: TitleFromProps,\n    Footer: FooterFromProps,\n    OffLayoutArea: OffLayoutAreaFromProps,\n}) => {\n    const { Layout, Footer, Header, Sider, Title, OffLayoutArea } =\n        useRefineContext();\n\n    const LayoutToRender = LayoutFromProps ?? Layout;\n\n    return (\n        <LayoutToRender\n            Sider={SiderFromProps ?? Sider}\n            Header={HeaderFromProps ?? Header}\n            Footer={FooterFromProps ?? Footer}\n            Title={TitleFromProps ?? Title}\n            OffLayoutArea={OffLayoutAreaFromProps ?? OffLayoutArea}\n        >\n            {children}\n            <UnsavedPrompt />\n        </LayoutToRender>\n    );\n};\n\nconst UnsavedPrompt: React.FC = () => {\n    const { Prompt } = useRouterContext();\n\n    const translate = useTranslate();\n\n    const { warnWhen, setWarnWhen } = useWarnAboutChange();\n\n    const warnWhenListener = (e: {\n        preventDefault: () => void;\n        returnValue: string;\n    }) => {\n        e.preventDefault();\n\n        e.returnValue = translate(\n            \"warnWhenUnsavedChanges\",\n            \"Are you sure you want to leave? You have unsaved changes.\",\n        );\n\n        return e.returnValue;\n    };\n\n    useEffect(() => {\n        if (warnWhen) {\n            window.addEventListener(\"beforeunload\", warnWhenListener);\n        }\n\n        return window.removeEventListener(\"beforeunload\", warnWhenListener);\n    }, [warnWhen]);\n\n    return (\n        <Prompt\n            when={warnWhen}\n            message={translate(\n                \"warnWhenUnsavedChanges\",\n                \"Are you sure you want to leave? You have unsaved changes.\",\n            )}\n            setWarnWhen={setWarnWhen}\n        />\n    );\n};\n","import React from \"react\";\n\nimport {\n    useGo,\n    useNavigation,\n    useParsed,\n    useRouterContext,\n    useRouterType,\n    useIsAuthenticated,\n} from \"@hooks\";\nimport { useActiveAuthProvider } from \"@definitions/index\";\nimport { GoConfig } from \"src/interfaces\";\n\nexport type AuthenticatedCommonProps = {\n    /**\n     * Unique key to identify the component.\n     * This is required if you have multiple `Authenticated` components at the same level.\n     * @required\n     */\n    key: React.Key;\n    /**\n     * Whether to redirect user if not logged in or not.\n     * If not set, user will be redirected to `redirectTo` property of the `check` function's response.\n     * This behavior is only available for new auth providers.\n     * Legacy auth providers will redirect to `/login` by default if this property is not set.\n     * If set to a string, user will be redirected to that string.\n     *\n     * This property only works if `fallback` is **not set**.\n     */\n    redirectOnFail?: string | true;\n    /**\n     * Whether to append current path to search params of the redirect url at `to` property.\n     *\n     * By default, `to` parameter is used by successful invocations of the `useLogin` hook.\n     * If `to` present, it will be used as the redirect url after successful login.\n     */\n    appendCurrentPathToQuery?: boolean;\n    /**\n     * Content to show if user is not logged in.\n     */\n    fallback?: React.ReactNode;\n    /**\n     * Content to show while checking whether user is logged in or not.\n     */\n    loading?: React.ReactNode;\n    /**\n     * Content to show if user is logged in\n     */\n    children?: React.ReactNode;\n};\n\nexport type LegacyAuthenticatedProps = {\n    v3LegacyAuthProviderCompatible: true;\n} & AuthenticatedCommonProps;\n\nexport type AuthenticatedProps = {\n    v3LegacyAuthProviderCompatible?: false;\n} & AuthenticatedCommonProps;\n\n/**\n * `<Authenticated>` is the component form of {@link https://refine.dev/docs/api-reference/core/hooks/auth/useAuthenticated `useAuthenticated`}. It internally uses `useAuthenticated` to provide it's functionality.\n *\n * @requires {@link https://react.dev/learn/rendering-lists#why-does-react-need-keys `key`} prop if you have multiple components at the same level.\n * In React, components don't automatically unmount and remount with prop changes, which is generally good for performance. However, for specific cases this can cause issues like unwanted content rendering (`fallback` or `children`). To solve this, assigning unique `key` values to each instance of component is necessary, forcing React to unmount and remount the component, rather than just updating its props.\n * @example\n *```tsx\n * <Authenticated key=\"dashboard\">\n *   <h1>Dashboard Page</h1>\n * </Authenticated>\n *```\n *\n * @see {@link https://refine.dev/docs/core/components/auth/authenticated `<Authenticated>`} component for more details.\n */\nexport function Authenticated(\n    props: LegacyAuthenticatedProps,\n): JSX.Element | null;\n\n/**\n * `<Authenticated>` is the component form of {@link https://refine.dev/docs/api-reference/core/hooks/auth/useAuthenticated `useAuthenticated`}. It internally uses `useAuthenticated` to provide it's functionality.\n *\n * @requires {@link https://react.dev/learn/rendering-lists#why-does-react-need-keys `key`} prop if you have multiple components at the same level.\n * In React, components don't automatically unmount and remount with prop changes, which is generally good for performance. However, for specific cases this can cause issues like unwanted content rendering (`fallback` or `children`). To solve this, assigning unique `key` values to each instance of component is necessary, forcing React to unmount and remount the component, rather than just updating its props.\n * @example\n *```tsx\n * <Authenticated key=\"dashboard\">\n *   <h1>Dashboard Page</h1>\n * </Authenticated>\n *```\n *\n * @see {@link https://refine.dev/docs/core/components/auth/authenticated `<Authenticated>`} component for more details.\n */\nexport function Authenticated(props: AuthenticatedProps): JSX.Element | null;\n\nexport function Authenticated({\n    redirectOnFail = true,\n    appendCurrentPathToQuery = true,\n    children,\n    fallback: fallbackContent,\n    loading: loadingContent,\n}: AuthenticatedProps | LegacyAuthenticatedProps): JSX.Element | null {\n    const activeAuthProvider = useActiveAuthProvider();\n    const routerType = useRouterType();\n\n    const hasAuthProvider = Boolean(activeAuthProvider?.isProvided);\n    const isLegacyAuth = Boolean(activeAuthProvider?.isLegacy);\n    const isLegacyRouter = routerType === \"legacy\";\n\n    const parsed = useParsed();\n    const go = useGo();\n    const { useLocation } = useRouterContext();\n    const legacyLocation = useLocation();\n\n    const {\n        isFetching,\n        isSuccess,\n        data: {\n            authenticated: isAuthenticatedStatus,\n            redirectTo: authenticatedRedirect,\n        } = {},\n    } = useIsAuthenticated({\n        v3LegacyAuthProviderCompatible: isLegacyAuth,\n    });\n\n    // Authentication status\n    const isAuthenticated = hasAuthProvider\n        ? isLegacyAuth\n            ? isSuccess\n            : isAuthenticatedStatus\n        : true;\n\n    // when there is no auth provider\n    if (!hasAuthProvider) {\n        return <>{children ?? null}</>;\n    }\n\n    // when checking authentication status\n    if (isFetching) {\n        return <>{loadingContent ?? null}</>;\n    }\n\n    // when user is authenticated return children\n    if (isAuthenticated) {\n        return <>{children ?? null}</>;\n    }\n    // when user is not authenticated redirect or render fallbackContent\n    else {\n        // render fallbackContent if it is exist\n        if (typeof fallbackContent !== \"undefined\") {\n            return <>{fallbackContent ?? null}</>;\n        }\n        // if there is no fallbackContent, redirect page\n\n        // Redirect url to use. use redirectOnFail if it is set.\n        // Otherwise use redirectTo property of the check function's response.\n        // If both are not set, use `/login` as the default redirect url. (only for legacy auth providers)\n        const appliedRedirect = isLegacyAuth\n            ? typeof redirectOnFail === \"string\"\n                ? redirectOnFail\n                : \"/login\"\n            : typeof redirectOnFail === \"string\"\n            ? redirectOnFail\n            : (authenticatedRedirect as string | undefined);\n\n        // Current pathname to append to the redirect url.\n        // User will be redirected to this url after successful mutation. (like login)\n        const pathname = `${\n            isLegacyRouter ? legacyLocation?.pathname : parsed.pathname\n        }`.replace(/(\\?.*|#.*)$/, \"\");\n        // Redirect if appliedRedirect is set, otherwise return null.\n        //  Uses `replace` for legacy router and `go` for new router.\n        if (appliedRedirect) {\n            if (isLegacyRouter) {\n                const toQuery = appendCurrentPathToQuery\n                    ? `?to=${encodeURIComponent(pathname)}`\n                    : \"\";\n                return <RedirectLegacy to={`${appliedRedirect}${toQuery}`} />;\n            } else {\n                return (\n                    <Redirect\n                        config={{\n                            to: appliedRedirect,\n                            query: appendCurrentPathToQuery\n                                ? {\n                                      to: parsed.params?.to\n                                          ? parsed.params.to\n                                          : go({\n                                                to: pathname,\n                                                options: { keepQuery: true },\n                                                type: \"path\",\n                                            }),\n                                  }\n                                : undefined,\n                            type: \"replace\",\n                        }}\n                    />\n                );\n            }\n        }\n\n        return null;\n    }\n}\n\nconst Redirect = ({ config }: { config: GoConfig }) => {\n    const go = useGo();\n\n    React.useEffect(() => {\n        go(config);\n    }, [go, config]);\n\n    return null;\n};\n\nconst RedirectLegacy = ({ to }: { to: string }) => {\n    const { replace } = useNavigation();\n\n    React.useEffect(() => {\n        replace(to);\n    }, [replace, to]);\n\n    return null;\n};\n","import { useEffect } from \"react\";\nimport { useRouterContext } from \"@hooks\";\nimport { useLegacyAuthContext } from \"@contexts/auth\";\n\nexport const RouteChangeHandler: React.FC = () => {\n    const { useLocation } = useRouterContext();\n\n    const { checkAuth } = useLegacyAuthContext();\n    const location = useLocation();\n\n    useEffect(() => {\n        checkAuth?.().catch(() => false);\n    }, [location?.pathname]);\n\n    return null;\n};\n","import React, { useEffect } from \"react\";\n\nimport { useCan, useResource } from \"@hooks\";\nimport { BaseKey, IResourceItem, ITreeMenu } from \"../../interfaces\";\n\ntype CanParams = {\n    resource?: IResourceItem & { children?: ITreeMenu[] };\n    id?: BaseKey;\n    [key: string]: any;\n};\n\ntype OnUnauthorizedProps = {\n    resource?: string;\n    reason?: string;\n    action: string;\n    params: CanParams;\n};\n\ntype CanAccessBaseProps = {\n    /**\n     * Resource name for API data interactions\n     */\n    resource?: string;\n    /**\n     * Intended action on resource\n     */\n    action: string;\n    /**\n     * Parameters associated with the resource\n     * @type { resource?: [IResourceItem](https://refine.dev/docs/api-reference/core/interfaceReferences/#canparams), id?: [BaseKey](https://refine.dev/docs/api-reference/core/interfaceReferences/#basekey), [key: string]: any }\n     */\n    params?: CanParams;\n    /**\n     * Content to show if access control returns `false`\n     */\n    fallback?: React.ReactNode;\n    /**\n     * Callback function to be called if access control returns `can: false`\n     */\n    onUnauthorized?: (props: OnUnauthorizedProps) => void;\n    children: React.ReactNode;\n};\n\ntype CanAccessWithoutParamsProps = {\n    [key in Exclude<\n        keyof CanAccessBaseProps,\n        \"fallback\" | \"children\"\n    >]?: undefined;\n} & {\n    [key in \"fallback\" | \"children\"]?: CanAccessBaseProps[key];\n};\n\nexport type CanAccessProps = CanAccessBaseProps | CanAccessWithoutParamsProps;\n\nexport const CanAccess: React.FC<CanAccessProps> = ({\n    resource: resourceFromProp,\n    action: actionFromProp,\n    params: paramsFromProp,\n    fallback,\n    onUnauthorized,\n    children,\n    ...rest\n}) => {\n    const {\n        resource,\n        id: idFromRoute,\n        action: actionFromRoute,\n    } = useResource(resourceFromProp);\n    const { identifier } = useResource();\n\n    const getDefaultId = () => {\n        const idFromPropsOrRoute = paramsFromProp?.id ?? idFromRoute;\n\n        if (resourceFromProp && resourceFromProp !== identifier) {\n            return paramsFromProp?.id;\n        }\n\n        return idFromPropsOrRoute;\n    };\n    const defaultId = getDefaultId();\n\n    const resourceName = resourceFromProp ?? resource?.name;\n    const action = actionFromProp ?? actionFromRoute ?? \"\";\n    const params = paramsFromProp ?? {\n        id: defaultId,\n        resource: resource,\n    };\n\n    const { data } = useCan({\n        resource: resourceName,\n        action,\n        params,\n    });\n\n    useEffect(() => {\n        if (onUnauthorized && data?.can === false) {\n            onUnauthorized({\n                resource: resourceName,\n                action,\n                reason: data?.reason,\n                params,\n            });\n        }\n    }, [data?.can]);\n\n    if (data?.can) {\n        if (React.isValidElement(children)) {\n            const Children = React.cloneElement(children, rest);\n            return Children;\n        }\n\n        return <>{children}</>;\n    }\n\n    if (data?.can === false) {\n        return <>{fallback ?? null}</>;\n    }\n\n    return null;\n};\n","import React, { SVGProps, useEffect } from \"react\";\nimport { CSSRules } from \"./styles\";\n\nconst text =\n    \"If you find Refine useful, you can contribute to its growth by giving it a star on GitHub\";\n\nexport const GitHubBanner = () => {\n    useEffect(() => {\n        const styleTag = document.createElement(\"style\");\n        document.head.appendChild(styleTag);\n        CSSRules.forEach((rule) =>\n            styleTag.sheet?.insertRule(rule, styleTag.sheet.cssRules.length),\n        );\n    }, []);\n\n    return (\n        <div\n            className=\"banner bg-top-announcement\"\n            style={{\n                width: \"100%\",\n                height: \"48px\",\n            }}\n        >\n            <div\n                style={{\n                    position: \"relative\",\n                    display: \"flex\",\n                    justifyContent: \"center\",\n                    alignItems: \"center\",\n                    paddingLeft: \"200px\",\n                    width: \"100%\",\n                    maxWidth: \"100vw\",\n                    height: \"100%\",\n                    borderBottom: \"1px solid #47ebeb26\",\n                }}\n            >\n                <div\n                    className=\"top-announcement-mask\"\n                    style={{\n                        position: \"absolute\",\n                        left: 0,\n                        top: 0,\n                        width: \"100%\",\n                        height: \"100%\",\n                        borderBottom: \"1px solid #47ebeb26\",\n                    }}\n                >\n                    <div\n                        style={{\n                            position: \"relative\",\n                            width: \"960px\",\n                            height: \"100%\",\n                            display: \"flex\",\n                            justifyContent: \"space-between\",\n                            margin: \"0 auto\",\n                        }}\n                    >\n                        <div\n                            style={{\n                                width: \"calc(50% - 300px)\",\n                                height: \"100%\",\n                                position: \"relative\",\n                            }}\n                        >\n                            <GlowSmall\n                                style={{\n                                    animationDelay: \"1.5s\",\n                                    position: \"absolute\",\n                                    top: \"2px\",\n                                    right: \"220px\",\n                                }}\n                                id={\"1\"}\n                            />\n                            <GlowSmall\n                                style={{\n                                    animationDelay: \"1s\",\n                                    position: \"absolute\",\n                                    top: \"8px\",\n                                    right: \"100px\",\n                                    transform: \"rotate(180deg)\",\n                                }}\n                                id={\"2\"}\n                            />\n                            <GlowBig\n                                style={{\n                                    position: \"absolute\",\n                                    right: \"10px\",\n                                }}\n                                id={\"3\"}\n                            />\n                        </div>\n\n                        <div\n                            style={{\n                                width: \"calc(50% - 300px)\",\n                                height: \"100%\",\n                                position: \"relative\",\n                            }}\n                        >\n                            <GlowSmall\n                                style={{\n                                    animationDelay: \"2s\",\n                                    position: \"absolute\",\n                                    top: \"6px\",\n                                    right: \"180px\",\n                                    transform: \"rotate(180deg)\",\n                                }}\n                                id={\"4\"}\n                            />\n                            <GlowSmall\n                                style={{\n                                    animationDelay: \"0.5s\",\n                                    transitionDelay: \"1.3s\",\n                                    position: \"absolute\",\n                                    top: \"2px\",\n                                    right: \"40px\",\n                                }}\n                                id={\"5\"}\n                            />\n                            <GlowBig\n                                style={{\n                                    position: \"absolute\",\n                                    right: \"-70px\",\n                                }}\n                                id={\"6\"}\n                            />\n                        </div>\n                    </div>\n                </div>\n                <Text text={text} />\n            </div>\n        </div>\n    );\n};\n\nconst Text = ({ text }: { text: string }) => {\n    return (\n        <a\n            className=\"gh-link\"\n            href=\"https://s.refine.dev/github-support\"\n            target=\"_blank\"\n            rel=\"noreferrer\"\n            style={{\n                position: \"absolute\",\n                height: \"100%\",\n                padding: \"0 60px\",\n                display: \"flex\",\n                flexWrap: \"nowrap\",\n                whiteSpace: \"nowrap\",\n                justifyContent: \"center\",\n                alignItems: \"center\",\n                backgroundImage:\n                    \"linear-gradient(90deg, rgba(31, 63, 72, 0.00) 0%, #1F3F48 10%, #1F3F48 90%, rgba(31, 63, 72, 0.00) 100%)\",\n            }}\n        >\n            <div\n                style={{\n                    color: \"#fff\",\n                    display: \"flex\",\n                    flexDirection: \"row\",\n                    gap: \"8px\",\n                }}\n            >\n                <span\n                    style={{\n                        display: \"flex\",\n                        flexDirection: \"row\",\n                        justifyContent: \"center\",\n                        alignItems: \"center\",\n                    }}\n                >\n                    ⭐️\n                </span>\n                <span\n                    className=\"text\"\n                    style={{\n                        fontSize: \"16px\",\n                        lineHeight: \"24px\",\n                    }}\n                >\n                    {text}\n                </span>\n                <span\n                    style={{\n                        display: \"flex\",\n                        flexDirection: \"row\",\n                        justifyContent: \"center\",\n                        alignItems: \"center\",\n                    }}\n                >\n                    ⭐️\n                </span>\n            </div>\n        </a>\n    );\n};\n\nconst GlowSmall = ({ style, ...props }: SVGProps<SVGSVGElement>) => {\n    return (\n        <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            width={80}\n            height={40}\n            fill=\"none\"\n            style={{\n                opacity: 1,\n                animation:\n                    \"top-announcement-glow 1s ease-in-out infinite alternate\",\n                ...style,\n            }}\n        >\n            <circle\n                cx={40}\n                r={40}\n                fill={`url(#${props.id}-a)`}\n                fillOpacity={0.5}\n            />\n            <defs>\n                <radialGradient\n                    id={`${props.id}-a`}\n                    cx={0}\n                    cy={0}\n                    r={1}\n                    gradientTransform=\"matrix(0 40 -40 0 40 0)\"\n                    gradientUnits=\"userSpaceOnUse\"\n                >\n                    <stop stopColor=\"#47EBEB\" />\n                    <stop offset={1} stopColor=\"#47EBEB\" stopOpacity={0} />\n                </radialGradient>\n            </defs>\n        </svg>\n    );\n};\n\nconst GlowBig = ({ style, ...props }: SVGProps<SVGSVGElement>) => (\n    <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        width={120}\n        height={48}\n        fill=\"none\"\n        {...props}\n        style={{\n            opacity: 1,\n            animation:\n                \"top-announcement-glow 1s ease-in-out infinite alternate\",\n            ...style,\n        }}\n    >\n        <circle\n            cx={60}\n            cy={24}\n            r={60}\n            fill={`url(#${props.id}-a)`}\n            fillOpacity={0.5}\n        />\n        <defs>\n            <radialGradient\n                id={`${props.id}-a`}\n                cx={0}\n                cy={0}\n                r={1}\n                gradientTransform=\"matrix(0 60 -60 0 60 24)\"\n                gradientUnits=\"userSpaceOnUse\"\n            >\n                <stop stopColor=\"#47EBEB\" />\n                <stop offset={1} stopColor=\"#47EBEB\" stopOpacity={0} />\n            </radialGradient>\n        </defs>\n    </svg>\n);\n","export const CSSRules = [\n    `\n    .bg-top-announcement {\n        border-bottom: 1px solid rgba(71, 235, 235, 0.15);\n        background: radial-gradient(\n                218.19% 111.8% at 0% 0%,\n                rgba(71, 235, 235, 0.1) 0%,\n                rgba(71, 235, 235, 0.2) 100%\n            ),\n            #14141f;\n    }\n    `,\n    `\n    .top-announcement-mask {\n        mask-image: url(https://refine.ams3.cdn.digitaloceanspaces.com/website/static/assets/hexagon.svg);\n        -webkit-mask-image: url(https://refine.ams3.cdn.digitaloceanspaces.com/website/static/assets/hexagon.svg);\n        mask-repeat: repeat;\n        -webkit-mask-repeat: repeat;\n        background: rgba(71, 235, 235, 0.25);\n    }\n    `,\n    `\n    .banner {\n        display: flex;\n        @media (max-width: 1000px) {\n            display: none;\n        }\n    }`,\n    `\n    .gh-link, .gh-link:hover, .gh-link:active, .gh-link:visited, .gh-link:focus {\n        text-decoration: none;\n        z-index: 9;\n    }\n    `,\n    `\n    @keyframes top-announcement-glow {\n        0% {\n            opacity: 1;\n        }\n\n        100% {\n            opacity: 0;\n        }\n    }\n    `,\n];\n","import React from \"react\";\nimport { AutoSaveIndicatorProps } from \"../../interfaces\";\nimport { useTranslate } from \"@hooks/translate\";\n\nexport const AutoSaveIndicator: React.FC<AutoSaveIndicatorProps> = ({\n    status,\n    elements: {\n        success = <Message key=\"autoSave.success\" defaultMessage=\"saved\" />,\n        error = (\n            <Message key=\"autoSave.error\" defaultMessage=\"auto save failure\" />\n        ),\n        loading = <Message key=\"autoSave.loading\" defaultMessage=\"saving...\" />,\n        idle = (\n            <Message key=\"autoSave.idle\" defaultMessage=\"waiting for changes\" />\n        ),\n    } = {},\n}) => {\n    switch (status) {\n        case \"success\":\n            return <>{success}</>;\n        case \"error\":\n            return <>{error}</>;\n        case \"loading\":\n            return <>{loading}</>;\n        default:\n            return <>{idle}</>;\n    }\n};\n\nconst Message = ({\n    key,\n    defaultMessage,\n}: {\n    key: string;\n    defaultMessage: string;\n}) => {\n    const translate = useTranslate();\n\n    return <span>{translate(key, defaultMessage)}</span>;\n};\n","export type { RefineBreadcrumbProps } from \"./types\";\n\nexport type {\n    RefineButtonCommonProps,\n    RefineButtonDataProps,\n    RefineButtonLinkingProps,\n    RefineButtonResourceProps,\n    RefineButtonSingleProps,\n    RefineCloneButtonProps,\n    RefineCreateButtonProps,\n    RefineDeleteButtonProps,\n    RefineEditButtonProps,\n    RefineExportButtonProps,\n    RefineImportButtonProps,\n    RefineListButtonProps,\n    RefineRefreshButtonProps,\n    RefineSaveButtonProps,\n    RefineShowButtonProps,\n} from \"./types\";\n\nexport type {\n    RefineCrudCreateProps,\n    RefineCrudEditProps,\n    RefineCrudListProps,\n    RefineCrudShowProps,\n    ActionButtonRenderer,\n} from \"./types\";\n\nexport type { RefineErrorPageProps, RefineReadyPageProps } from \"./types\";\n\nexport type {\n    RefineFieldBooleanProps,\n    RefineFieldCommonProps,\n    RefineFieldDateProps,\n    RefineFieldEmailProps,\n    RefineFieldFileProps,\n    RefineFieldImageProps,\n    RefineFieldUrlProps,\n    RefineFieldMarkdownProps,\n    RefineFieldNumberProps,\n    RefineFieldTagProps,\n    RefineFieldTextProps,\n    RefineFieldTooltipProps,\n} from \"./types\";\n\nexport type {\n    RefineLayoutFooterProps,\n    RefineLayoutHeaderProps,\n    RefineLayoutLayoutProps,\n    RefineLayoutSiderProps,\n    RefineLayoutTitleProps,\n    RefineThemedLayoutSiderProps,\n    RefineThemedLayoutHeaderProps,\n    RefineThemedLayoutProps,\n    RefineLayoutThemedTitleProps,\n    RefineThemedLayoutV2Props,\n    RefineThemedLayoutV2SiderProps,\n    RefineThemedLayoutV2HeaderProps,\n} from \"./types\";\n\nexport { RefineButtonTestIds } from \"./ids\";\nexport * from \"./classNames\";\n","export const RefineButtonTestIds = {\n    CloneButton: \"refine-clone-button\",\n    DeleteButton: \"refine-delete-button\",\n    EditButton: \"refine-edit-button\",\n    SaveButton: \"refine-save-button\",\n    CreateButton: \"refine-create-button\",\n    ImportButton: \"refine-import-button\",\n    ExportButton: \"refine-export-button\",\n    ListButton: \"refine-list-button\",\n    RefreshButton: \"refine-refresh-button\",\n    ShowButton: \"refine-show-button\",\n};\n","export const RefinePageHeaderClassNames = {\n    Title: \"refine-pageHeader-title\",\n    SubTitle: \"refine-pageHeader-subTitle\",\n};\n\nexport const RefineButtonClassNames = {\n    CloneButton: \"refine-clone-button\",\n    DeleteButton: \"refine-delete-button\",\n    EditButton: \"refine-edit-button\",\n    SaveButton: \"refine-save-button\",\n    CreateButton: \"refine-create-button\",\n    ImportButton: \"refine-import-button\",\n    ExportButton: \"refine-export-button\",\n    ListButton: \"refine-list-button\",\n    RefreshButton: \"refine-refresh-button\",\n    ShowButton: \"refine-show-button\",\n};\n","export * from \"./hooks\";\nexport * from \"./providers\";\nexport * from \"./components\";\nexport * from \"./contexts\";\n\nexport {\n    getDefaultSortOrder,\n    getDefaultFilter,\n    mapAntdSorterToCrudSorting,\n    mapAntdFilterToCrudFilter,\n} from \"./definitions/table\";\nexport { getValueFromEvent } from \"./definitions/upload\";\n\nexport * from \"./definitions/themes\";\n","import React from \"react\";\nimport { FormInstance, FormProps, Form, ButtonProps } from \"antd\";\nimport { useForm as useFormSF } from \"sunflower-antd\";\nimport {\n    AutoSaveProps,\n    flattenObjectKeys,\n    propertyPathToArray,\n} from \"@refinedev/core\";\n\nimport {\n    HttpError,\n    BaseRecord,\n    useForm as useFormCore,\n    UseFormReturnType as UseFormReturnTypeCore,\n    useWarnAboutChange,\n    UseFormProps as UseFormPropsCore,\n    CreateResponse,\n    UpdateResponse,\n    pickNotDeprecated,\n    useTranslate,\n    useRefineContext,\n} from \"@refinedev/core\";\n\nexport type UseFormProps<\n    TQueryFnData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n    TData extends BaseRecord = TQueryFnData,\n    TResponse extends BaseRecord = TData,\n    TResponseError extends HttpError = TError,\n> = UseFormPropsCore<\n    TQueryFnData,\n    TError,\n    TVariables,\n    TData,\n    TResponse,\n    TResponseError\n> & {\n    submitOnEnter?: boolean;\n    /**\n     * Shows notification when unsaved changes exist\n     */\n    warnWhenUnsavedChanges?: boolean;\n    /**\n     * Disables server-side validation\n     * @default false\n     * @see {@link https://refine.dev/docs/advanced-tutorials/forms/server-side-form-validation/}\n     */\n    disableServerSideValidation?: boolean;\n} & AutoSaveProps<TVariables>;\n\nexport type UseFormReturnType<\n    TQueryFnData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n    TData extends BaseRecord = TQueryFnData,\n    TResponse extends BaseRecord = TData,\n    TResponseError extends HttpError = TError,\n> = UseFormReturnTypeCore<\n    TQueryFnData,\n    TError,\n    TVariables,\n    TData,\n    TResponse,\n    TResponseError\n> & {\n    form: FormInstance<TVariables>;\n    formProps: FormProps<TVariables>;\n    saveButtonProps: ButtonProps & {\n        onClick: () => void;\n    };\n    onFinish: (\n        values?: TVariables,\n    ) => Promise<CreateResponse<TResponse> | UpdateResponse<TResponse> | void>;\n};\n\n/**\n * `useForm` is used to manage forms. It uses Ant Design {@link https://ant.design/components/form/ Form} data scope management under the hood and returns the required props for managing the form actions.\n *\n * @see {@link https://refine.dev/docs/api-reference/core/hooks/useForm} for more details.\n *\n * @typeParam TData - Result data of the query extends {@link https://refine.dev/docs/api-reference/core/interfaceReferences#baserecord `BaseRecord`}\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/api-reference/core/interfaceReferences/#httperror `HttpError`}\n * @typeParam TVariables - Values for params. default `{}`\n * @typeParam TData - Result data returned by the `select` function. Extends {@link https://refine.dev/docs/api-reference/core/interfaceReferences#baserecord `BaseRecord`}. Defaults to `TQueryFnData`\n * @typeParam TResponse - Result data returned by the mutation function. Extends {@link https://refine.dev/docs/api-reference/core/interfaceReferences#baserecord `BaseRecord`}. Defaults to `TData`\n * @typeParam TResponseError - Custom error object that extends {@link https://refine.dev/docs/api-reference/core/interfaceReferences#httperror `HttpError`}. Defaults to `TError`\n *\n *\n */\nexport const useForm = <\n    TQueryFnData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n    TData extends BaseRecord = TQueryFnData,\n    TResponse extends BaseRecord = TData,\n    TResponseError extends HttpError = TError,\n>({\n    action,\n    resource,\n    onMutationSuccess: onMutationSuccessProp,\n    onMutationError: onMutationErrorProp,\n    autoSave,\n    submitOnEnter = false,\n    warnWhenUnsavedChanges: warnWhenUnsavedChangesProp,\n    redirect,\n    successNotification,\n    errorNotification,\n    meta,\n    metaData,\n    queryMeta,\n    mutationMeta,\n    liveMode,\n    liveParams,\n    mutationMode,\n    dataProviderName,\n    onLiveEvent,\n    invalidates,\n    undoableTimeout,\n    queryOptions,\n    createMutationOptions,\n    updateMutationOptions,\n    id: idFromProps,\n    overtimeOptions,\n    optimisticUpdateMap,\n    disableServerSideValidation: disableServerSideValidationProp = false,\n}: UseFormProps<\n    TQueryFnData,\n    TError,\n    TVariables,\n    TData,\n    TResponse,\n    TResponseError\n> = {}): UseFormReturnType<\n    TQueryFnData,\n    TError,\n    TVariables,\n    TData,\n    TResponse,\n    TResponseError\n> => {\n    const { options } = useRefineContext();\n    const disableServerSideValidation =\n        options?.disableServerSideValidation || disableServerSideValidationProp;\n\n    const translate = useTranslate();\n\n    const [formAnt] = Form.useForm();\n    const formSF = useFormSF<TResponse, TVariables>({\n        form: formAnt,\n    });\n    const { form } = formSF;\n\n    const useFormCoreResult = useFormCore<\n        TQueryFnData,\n        TError,\n        TVariables,\n        TData,\n        TResponse,\n        TResponseError\n    >({\n        onMutationSuccess: onMutationSuccessProp\n            ? onMutationSuccessProp\n            : undefined,\n        onMutationError: async (error, _variables, _context) => {\n            if (disableServerSideValidation) {\n                onMutationErrorProp?.(error, _variables, _context);\n                return;\n            }\n\n            // antd form expects error object to be in a specific format.\n            let parsedErrors: {\n                name: string | number | (string | number)[];\n                errors?: string[] | undefined;\n            }[] = [];\n\n            // reset antd errors before setting new errors\n            const fieldsValue = form.getFieldsValue() as unknown as object;\n\n            const fields = Object.keys(flattenObjectKeys(fieldsValue));\n\n            parsedErrors = fields.map((field) => {\n                return {\n                    name: propertyPathToArray(field),\n                    errors: undefined,\n                };\n            });\n\n            form.setFields(parsedErrors);\n\n            const errors = error?.errors;\n            // parse errors to antd form errors\n            for (const key in errors) {\n                const fieldError = errors[key];\n\n                let newError: string[] = [];\n\n                if (Array.isArray(fieldError)) {\n                    newError = fieldError;\n                }\n\n                if (typeof fieldError === \"string\") {\n                    newError = [fieldError];\n                }\n\n                if (typeof fieldError === \"boolean\" && fieldError) {\n                    newError = [\"Field is not valid.\"];\n                }\n\n                if (typeof fieldError === \"object\" && \"key\" in fieldError) {\n                    const translatedMessage = translate(\n                        fieldError.key,\n                        fieldError.message,\n                    );\n\n                    newError = [translatedMessage];\n                }\n\n                parsedErrors.push({\n                    name: propertyPathToArray(key),\n                    errors: newError,\n                });\n            }\n\n            form.setFields([...parsedErrors]);\n\n            onMutationErrorProp?.(error, _variables, _context);\n        },\n        redirect,\n        action,\n        resource,\n        successNotification,\n        errorNotification,\n        meta: pickNotDeprecated(meta, metaData),\n        metaData: pickNotDeprecated(meta, metaData),\n        queryMeta,\n        mutationMeta,\n        liveMode,\n        liveParams,\n        mutationMode,\n        dataProviderName,\n        onLiveEvent,\n        invalidates,\n        undoableTimeout,\n        queryOptions,\n        createMutationOptions,\n        updateMutationOptions,\n        id: idFromProps,\n        overtimeOptions,\n        optimisticUpdateMap,\n        autoSave,\n    });\n\n    const { formLoading, onFinish, queryResult, id, onFinishAutoSave } =\n        useFormCoreResult;\n\n    const {\n        warnWhenUnsavedChanges: warnWhenUnsavedChangesRefine,\n        setWarnWhen,\n    } = useWarnAboutChange();\n    const warnWhenUnsavedChanges =\n        warnWhenUnsavedChangesProp ?? warnWhenUnsavedChangesRefine;\n\n    React.useEffect(() => {\n        form.resetFields();\n    }, [queryResult?.data?.data, id]);\n\n    const onKeyUp = (event: React.KeyboardEvent<HTMLFormElement>) => {\n        if (submitOnEnter && event.key === \"Enter\") {\n            form.submit();\n        }\n    };\n\n    const onValuesChange = (changeValues: object, allValues: any) => {\n        if (changeValues && warnWhenUnsavedChanges) {\n            setWarnWhen(true);\n        }\n\n        if (autoSave?.enabled) {\n            setWarnWhen(false);\n\n            const onFinishFromProps =\n                autoSave?.onFinish ?? ((values) => values);\n\n            return onFinishAutoSave(onFinishFromProps(allValues));\n        }\n\n        return changeValues;\n    };\n\n    const saveButtonProps = {\n        disabled: formLoading,\n        onClick: () => {\n            form.submit();\n        },\n    };\n\n    return {\n        form: formSF.form,\n        formProps: {\n            ...formSF.formProps,\n            onFinish: (values: TVariables) =>\n                onFinish(values).catch((error) => error),\n            onKeyUp,\n            onValuesChange,\n            initialValues: queryResult?.data?.data,\n        },\n        saveButtonProps,\n        ...useFormCoreResult,\n        onFinish: async (values?: TVariables) => {\n            return await onFinish(values ?? formSF.form.getFieldsValue(true));\n        },\n    };\n};\n","import React, { useCallback } from \"react\";\nimport { FormInstance, FormProps, ModalProps } from \"antd\";\n\nimport {\n    useTranslate,\n    useWarnAboutChange,\n    HttpError,\n    UseFormProps as UseFormPropsCore,\n    BaseRecord,\n    LiveModeProps,\n    BaseKey,\n    useUserFriendlyName,\n    useResource,\n    FormWithSyncWithLocationParams,\n    useParsed,\n    useGo,\n    useInvalidate,\n} from \"@refinedev/core\";\nimport { useForm, UseFormProps, UseFormReturnType } from \"../useForm\";\nimport { useModal } from \"@hooks/modal\";\n\nexport type useModalFormFromSFReturnType<TResponse, TVariables> = {\n    open: boolean;\n    form: FormInstance<TVariables>;\n    show: (id?: BaseKey) => void;\n    close: () => void;\n    modalProps: ModalProps;\n    formProps: FormProps<TVariables>;\n    formLoading: boolean;\n    defaultFormValuesLoading: boolean;\n    formValues: {};\n    initialValues: {};\n    formResult: undefined;\n    submit: (values?: TVariables) => Promise<TResponse>;\n    /** @deprecated Please use `open` instead. */\n    visible: boolean;\n};\n\ntype useModalFormConfig = {\n    action: \"show\" | \"edit\" | \"create\" | \"clone\";\n};\n\nexport type UseModalFormReturnType<\n    TQueryFnData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n    TData extends BaseRecord = TQueryFnData,\n    TResponse extends BaseRecord = TData,\n    TResponseError extends HttpError = TError,\n> = Omit<\n    UseFormReturnType<\n        TQueryFnData,\n        TError,\n        TVariables,\n        TData,\n        TResponse,\n        TResponseError\n    >,\n    \"saveButtonProps\" | \"deleteButtonProps\"\n> &\n    useModalFormFromSFReturnType<TResponse, TVariables>;\n\nexport type UseModalFormProps<\n    TQueryFnData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n    TData extends BaseRecord = TQueryFnData,\n    TResponse extends BaseRecord = TData,\n    TResponseError extends HttpError = TError,\n> = UseFormPropsCore<\n    TQueryFnData,\n    TError,\n    TVariables,\n    TData,\n    TResponse,\n    TResponseError\n> &\n    UseFormProps<\n        TQueryFnData,\n        TError,\n        TVariables,\n        TData,\n        TResponse,\n        TResponseError\n    > &\n    useModalFormConfig &\n    LiveModeProps &\n    FormWithSyncWithLocationParams & {\n        defaultVisible?: boolean;\n        autoSubmitClose?: boolean;\n        autoResetForm?: boolean;\n    };\n/**\n * `useModalForm` hook allows you to manage a form within a modal. It returns Ant Design {@link https://ant.design/components/form/ Form} and {@link https://ant.design/components/modal/ Modal} components props.\n *\n * @see {@link https://refine.dev/docs/api-reference/antd/hooks/form/useModalForm} for more details.\n *\n * @typeParam TData - Result data of the query extends {@link https://refine.dev/docs/api-reference/core/interfaceReferences#baserecord `BaseRecord`}\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/api-reference/core/interfaceReferences/#httperror `HttpError`}\n * @typeParam TVariables - Values for params. default `{}`\n *\n *\n */\nexport const useModalForm = <\n    TQueryFnData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n    TData extends BaseRecord = TQueryFnData,\n    TResponse extends BaseRecord = TData,\n    TResponseError extends HttpError = TError,\n>({\n    syncWithLocation,\n    defaultVisible = false,\n    autoSubmitClose = true,\n    autoResetForm = true,\n    autoSave,\n    invalidates,\n    ...rest\n}: UseModalFormProps<\n    TQueryFnData,\n    TError,\n    TVariables,\n    TData,\n    TResponse,\n    TResponseError\n>): UseModalFormReturnType<\n    TQueryFnData,\n    TError,\n    TVariables,\n    TData,\n    TResponse,\n    TResponseError\n> => {\n    const [initiallySynced, setInitiallySynced] = React.useState(false);\n    const invalidate = useInvalidate();\n\n    const {\n        resource,\n        action: actionFromParams,\n        identifier,\n    } = useResource(rest.resource);\n\n    const parsed = useParsed();\n    const go = useGo();\n    const getUserFriendlyName = useUserFriendlyName();\n\n    const action = rest.action ?? actionFromParams ?? \"\";\n\n    const syncingId = !(\n        typeof syncWithLocation === \"object\" &&\n        syncWithLocation?.syncId === false\n    );\n\n    const syncWithLocationKey =\n        typeof syncWithLocation === \"object\" && \"key\" in syncWithLocation\n            ? syncWithLocation.key\n            : resource && action && syncWithLocation\n            ? `modal-${identifier}-${action}`\n            : undefined;\n\n    const useFormProps = useForm<\n        TQueryFnData,\n        TError,\n        TVariables,\n        TData,\n        TResponse,\n        TResponseError\n    >({\n        meta: {\n            ...(syncWithLocationKey\n                ? { [syncWithLocationKey]: undefined }\n                : {}),\n            ...rest.meta,\n        },\n        autoSave,\n        invalidates,\n        ...rest,\n    });\n\n    const { form, formProps, id, setId, formLoading, onFinish, autoSaveProps } =\n        useFormProps;\n\n    const translate = useTranslate();\n\n    const { warnWhen, setWarnWhen } = useWarnAboutChange();\n\n    const { show, close, modalProps } = useModal({\n        modalProps: {\n            open: defaultVisible,\n        },\n    });\n\n    const visible = modalProps.open || false;\n    const sunflowerUseModal: useModalFormFromSFReturnType<\n        TResponse,\n        TVariables\n    > = {\n        modalProps,\n        form,\n        formLoading,\n        formProps,\n        formResult: undefined,\n        formValues: form.getFieldsValue,\n        defaultFormValuesLoading: false,\n        initialValues: {},\n        submit: onFinish as any,\n        close,\n        open: modalProps.open || false,\n        show,\n        visible,\n    };\n\n    React.useEffect(() => {\n        if (initiallySynced === false && syncWithLocationKey) {\n            const openStatus = parsed?.params?.[syncWithLocationKey]?.open;\n\n            if (typeof openStatus === \"boolean\") {\n                if (openStatus) {\n                    show();\n                }\n            } else if (typeof openStatus === \"string\") {\n                if (openStatus === \"true\") {\n                    show();\n                }\n            }\n\n            if (syncingId) {\n                const idFromParams = parsed?.params?.[syncWithLocationKey]?.id;\n                if (idFromParams) {\n                    setId?.(idFromParams);\n                }\n            }\n\n            setInitiallySynced(true);\n        }\n    }, [syncWithLocationKey, parsed, syncingId, setId]);\n\n    React.useEffect(() => {\n        if (initiallySynced === true) {\n            if (visible && syncWithLocationKey) {\n                go({\n                    query: {\n                        [syncWithLocationKey]: {\n                            ...parsed?.params?.[syncWithLocationKey],\n                            open: true,\n                            ...(syncingId && id && { id }),\n                        },\n                    },\n                    options: { keepQuery: true },\n                    type: \"replace\",\n                });\n            } else if (syncWithLocationKey && !visible) {\n                go({\n                    query: {\n                        [syncWithLocationKey]: undefined,\n                    },\n                    options: { keepQuery: true },\n                    type: \"replace\",\n                });\n            }\n        }\n    }, [id, visible, show, syncWithLocationKey, syncingId]);\n\n    const saveButtonPropsSF = {\n        disabled: formLoading,\n        loading: formLoading,\n        onClick: () => {\n            form.submit();\n        },\n    };\n\n    const handleClose = useCallback(() => {\n        if (autoSaveProps.status === \"success\" && autoSave?.invalidateOnClose) {\n            invalidate({\n                id,\n                invalidates: invalidates || [\"list\", \"many\", \"detail\"],\n                dataProviderName: rest.dataProviderName,\n                resource: identifier,\n            });\n        }\n\n        if (warnWhen) {\n            const warnWhenConfirm = window.confirm(\n                translate(\n                    \"warnWhenUnsavedChanges\",\n                    \"Are you sure you want to leave? You have unsaved changes.\",\n                ),\n            );\n\n            if (warnWhenConfirm) {\n                setWarnWhen(false);\n            } else {\n                return;\n            }\n        }\n\n        setId?.(undefined);\n        sunflowerUseModal.close();\n    }, [warnWhen, autoSaveProps.status]);\n\n    const handleShow = useCallback(\n        (showId?: BaseKey) => {\n            if (typeof showId !== \"undefined\") {\n                setId?.(showId);\n            }\n            const needsIdToOpen = action === \"edit\" || action === \"clone\";\n            const hasId =\n                typeof showId !== \"undefined\" || typeof id !== \"undefined\";\n            if (needsIdToOpen ? hasId : true) {\n                sunflowerUseModal.show();\n            }\n        },\n        [id],\n    );\n\n    const { visible: _visible, ...otherModalProps } = modalProps;\n    const newModalProps = { open: _visible, ...otherModalProps };\n\n    return {\n        ...useFormProps,\n        ...sunflowerUseModal,\n        show: handleShow,\n        close: handleClose,\n        open: visible,\n        formProps: {\n            ...formProps,\n            ...useFormProps.formProps,\n            onValuesChange: formProps?.onValuesChange,\n            onKeyUp: formProps?.onKeyUp,\n            onFinish: async (values) => {\n                await onFinish(values);\n\n                if (autoSubmitClose) {\n                    close();\n                }\n\n                if (autoResetForm) {\n                    form.resetFields();\n                }\n            },\n        },\n        modalProps: {\n            ...newModalProps,\n            width: \"1000px\",\n            okButtonProps: saveButtonPropsSF,\n            title: translate(\n                `${identifier}.titles.${rest.action}`,\n                `${getUserFriendlyName(\n                    `${rest.action} ${\n                        resource?.meta?.label ??\n                        resource?.options?.label ??\n                        resource?.label ??\n                        identifier\n                    }`,\n                    \"singular\",\n                )}`,\n            ),\n            okText: translate(\"buttons.save\", \"Save\"),\n            cancelText: translate(\"buttons.cancel\", \"Cancel\"),\n            onCancel: handleClose,\n            forceRender: true,\n        },\n        formLoading,\n    };\n};\n","import { ModalProps } from \"antd\";\nimport {\n    useModal as useCoreModal,\n    useModalReturnType as useCoreModelReturnType,\n} from \"@refinedev/core\";\n\nexport type useModalReturnType = {\n    modalProps: ModalProps;\n} & Omit<useCoreModelReturnType, \"visible\">;\n\nexport type useModalProps = {\n    /**\n     * Default props for Ant Design {@link https://ant.design/components/modal/ `<Modal>`} component.\n     */\n    modalProps?: ModalProps;\n};\n\n/**\n * By using `useModal` you get props for your records from API in accordance with Ant Design {@link https://ant.design/components/modal/ `<Modal>`} component.\n *\n * @see {@link https://refine.dev/docs/api-reference/antd/hooks/ui/useModal} for more details.\n */\nexport const useModal = ({\n    modalProps = {},\n}: useModalProps = {}): useModalReturnType => {\n    const { show, close, visible } = useCoreModal({\n        defaultVisible: modalProps.open,\n    });\n\n    return {\n        modalProps: {\n            ...modalProps,\n            onCancel: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n                modalProps.onCancel?.(e);\n                close();\n            },\n            open: visible,\n            visible,\n        },\n        show,\n        close,\n    };\n};\n","import React, { useCallback } from \"react\";\nimport { UseFormConfig } from \"sunflower-antd\";\nimport { FormInstance, FormProps, DrawerProps, ButtonProps } from \"antd\";\nimport {\n    useTranslate,\n    useWarnAboutChange,\n    UseFormProps as UseFormPropsCore,\n    HttpError,\n    LiveModeProps,\n    BaseRecord,\n    FormWithSyncWithLocationParams,\n    BaseKey,\n    useResource,\n    useParsed,\n    useGo,\n    useModal,\n    useInvalidate,\n} from \"@refinedev/core\";\n\nimport { useForm, UseFormProps, UseFormReturnType } from \"../useForm\";\nimport { DeleteButtonProps } from \"../../../components\";\n\nexport interface UseDrawerFormConfig extends UseFormConfig {\n    action: \"show\" | \"edit\" | \"create\" | \"clone\";\n}\n\nexport type UseDrawerFormProps<\n    TQueryFnData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n    TData extends BaseRecord = TQueryFnData,\n    TResponse extends BaseRecord = TData,\n    TResponseError extends HttpError = TError,\n> = UseFormPropsCore<\n    TQueryFnData,\n    TError,\n    TVariables,\n    TData,\n    TResponse,\n    TResponseError\n> &\n    UseFormProps<\n        TQueryFnData,\n        TError,\n        TVariables,\n        TData,\n        TResponse,\n        TResponseError\n    > &\n    UseDrawerFormConfig &\n    LiveModeProps &\n    FormWithSyncWithLocationParams & {\n        defaultVisible?: boolean;\n        autoSubmitClose?: boolean;\n        autoResetForm?: boolean;\n    };\n\nexport type UseDrawerFormReturnType<\n    TQueryFnData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n    TData extends BaseRecord = TQueryFnData,\n    TResponse extends BaseRecord = TData,\n    TResponseError extends HttpError = TError,\n> = UseFormReturnType<\n    TQueryFnData,\n    TError,\n    TVariables,\n    TData,\n    TResponse,\n    TResponseError\n> & {\n    formProps: FormProps<TVariables> & {\n        form: FormInstance<TVariables>;\n    };\n    show: (id?: BaseKey) => void;\n    close: () => void;\n    drawerProps: DrawerProps;\n    saveButtonProps: ButtonProps;\n    deleteButtonProps: DeleteButtonProps;\n    formLoading: boolean;\n};\n\n/**\n * `useDrawerForm` hook allows you to manage a form within a drawer. It returns Ant Design {@link https://ant.design/components/form/ Form} and {@link https://ant.design/components/drawer/ Drawer} components props.\n *\n * @see {@link https://refine.dev/docs/api-reference/antd/hooks/form/useDrawerForm} for more details.\n *\n * @typeParam TData - Result data of the query extends {@link https://refine.dev/docs/api-reference/core/interfaceReferences#baserecord `BaseRecord`}\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/api-reference/core/interfaceReferences/#httperror `HttpError`}\n * @typeParam TVariables - Values for params. default `{}`\n *\n *\n */\n\nexport const useDrawerForm = <\n    TQueryFnData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n    TData extends BaseRecord = TQueryFnData,\n    TResponse extends BaseRecord = TData,\n    TResponseError extends HttpError = TError,\n>({\n    syncWithLocation,\n    defaultVisible = false,\n    autoSubmitClose = true,\n    autoResetForm = true,\n    autoSave,\n    invalidates,\n    ...rest\n}: UseDrawerFormProps<\n    TQueryFnData,\n    TError,\n    TVariables,\n    TData,\n    TResponse,\n    TResponseError\n>): UseDrawerFormReturnType<\n    TQueryFnData,\n    TError,\n    TVariables,\n    TData,\n    TResponse,\n    TResponseError\n> => {\n    const invalidate = useInvalidate();\n    const [initiallySynced, setInitiallySynced] = React.useState(false);\n\n    const { visible, show, close } = useModal({\n        defaultVisible,\n    });\n\n    const {\n        resource,\n        action: actionFromParams,\n        identifier,\n    } = useResource(rest.resource);\n\n    const parsed = useParsed();\n    const go = useGo();\n\n    const action = rest.action ?? actionFromParams ?? \"\";\n\n    const syncingId = !(\n        typeof syncWithLocation === \"object\" &&\n        syncWithLocation?.syncId === false\n    );\n\n    const syncWithLocationKey =\n        typeof syncWithLocation === \"object\" && \"key\" in syncWithLocation\n            ? syncWithLocation.key\n            : resource && action && syncWithLocation\n            ? `drawer-${resource?.identifier ?? resource?.name}-${action}`\n            : undefined;\n\n    const useFormProps = useForm<\n        TQueryFnData,\n        TError,\n        TVariables,\n        TData,\n        TResponse,\n        TResponseError\n    >({\n        meta: {\n            ...(syncWithLocationKey\n                ? { [syncWithLocationKey]: undefined }\n                : {}),\n            ...rest.meta,\n        },\n        autoSave,\n        invalidates,\n        ...rest,\n    });\n\n    const { form, formProps, formLoading, id, setId, onFinish, autoSaveProps } =\n        useFormProps;\n\n    React.useEffect(() => {\n        if (initiallySynced === false && syncWithLocationKey) {\n            const openStatus = parsed?.params?.[syncWithLocationKey]?.open;\n            if (typeof openStatus === \"boolean\") {\n                openStatus ? show() : close();\n            } else if (typeof openStatus === \"string\") {\n                if (openStatus === \"true\") {\n                    show();\n                }\n            }\n\n            if (syncingId) {\n                const idFromParams = parsed?.params?.[syncWithLocationKey]?.id;\n                if (idFromParams) {\n                    setId?.(idFromParams);\n                }\n            }\n\n            setInitiallySynced(true);\n        }\n    }, [syncWithLocationKey, parsed, syncingId, setId, initiallySynced]);\n\n    React.useEffect(() => {\n        if (initiallySynced === true) {\n            if (visible && syncWithLocationKey) {\n                go({\n                    query: {\n                        [syncWithLocationKey]: {\n                            ...parsed?.params?.[syncWithLocationKey],\n                            open: true,\n                            ...(syncingId && id && { id }),\n                        },\n                    },\n                    options: { keepQuery: true },\n                    type: \"replace\",\n                });\n            } else if (syncWithLocationKey && !visible) {\n                go({\n                    query: {\n                        [syncWithLocationKey]: undefined,\n                    },\n                    options: { keepQuery: true },\n                    type: \"replace\",\n                });\n            }\n        }\n    }, [\n        id,\n        visible,\n        show,\n        close,\n        syncWithLocationKey,\n        syncingId,\n        initiallySynced,\n    ]);\n\n    const translate = useTranslate();\n\n    const { warnWhen, setWarnWhen } = useWarnAboutChange();\n\n    const saveButtonProps = {\n        disabled: formLoading,\n        onClick: () => {\n            form.submit();\n        },\n        loading: formLoading,\n    };\n\n    const deleteButtonProps = {\n        recordItemId: id,\n        onSuccess: () => {\n            setId?.(undefined);\n            close();\n        },\n    };\n\n    const handleClose = useCallback(() => {\n        if (autoSaveProps.status === \"success\" && autoSave?.invalidateOnClose) {\n            invalidate({\n                id,\n                invalidates: invalidates || [\"list\", \"many\", \"detail\"],\n                dataProviderName: rest.dataProviderName,\n                resource: identifier,\n            });\n        }\n\n        if (warnWhen) {\n            const warnWhenConfirm = window.confirm(\n                translate(\n                    \"warnWhenUnsavedChanges\",\n                    \"Are you sure you want to leave? You have unsaved changes.\",\n                ),\n            );\n\n            if (warnWhenConfirm) {\n                setWarnWhen(false);\n            } else {\n                return;\n            }\n        }\n\n        close();\n        setId?.(undefined);\n    }, [warnWhen]);\n\n    const handleShow = useCallback(\n        (showId?: BaseKey) => {\n            if (typeof showId !== \"undefined\") {\n                setId?.(showId);\n            }\n            const needsIdToOpen = action === \"edit\" || action === \"clone\";\n            const hasId =\n                typeof showId !== \"undefined\" || typeof id !== \"undefined\";\n            if (needsIdToOpen ? hasId : true) {\n                show();\n            }\n        },\n        [id],\n    );\n\n    return {\n        ...useFormProps,\n        show: handleShow,\n        close: handleClose,\n        formProps: {\n            form,\n            ...useFormProps.formProps,\n            onValuesChange: formProps?.onValuesChange,\n            onKeyUp: formProps?.onKeyUp,\n            onFinish: async (values) => {\n                await onFinish(values);\n\n                if (autoSubmitClose) {\n                    close();\n                }\n\n                if (autoResetForm) {\n                    form.resetFields();\n                }\n            },\n        },\n        drawerProps: {\n            width: \"500px\",\n            onClose: handleClose,\n            open: visible,\n            forceRender: true,\n        },\n        saveButtonProps,\n        deleteButtonProps,\n        formLoading,\n    };\n};\n","import {\n    useStepsForm as useStepsFormSF,\n    UseStepsFormConfig,\n} from \"sunflower-antd\";\nimport { FormInstance, FormProps } from \"antd\";\n\nimport {\n    HttpError,\n    UseFormProps as UseFormPropsCore,\n    BaseRecord,\n} from \"@refinedev/core\";\n\nimport { useForm, UseFormProps, UseFormReturnType } from \"../useForm\";\n\nexport type UseStepsFormFromSFReturnType<TResponse, TVariables> = {\n    current: number;\n    gotoStep: (step: number) => Promise<TVariables> | true;\n    stepsProps: {\n        current: number;\n        onChange: (currentStep: number) => void;\n    };\n    formProps: FormProps<TVariables>;\n    formLoading: boolean;\n    defaultFormValuesLoading: boolean;\n    formValues: {};\n    initialValues: {};\n    formResult: undefined;\n    form: FormInstance<TVariables>;\n    submit: (values?: TVariables) => Promise<TResponse>;\n};\n\nexport type UseStepsFormReturnType<\n    TQueryFnData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n    TData extends BaseRecord = TQueryFnData,\n    TResponse extends BaseRecord = TData,\n    TResponseError extends HttpError = TError,\n> = UseFormReturnType<\n    TQueryFnData,\n    TError,\n    TVariables,\n    TData,\n    TResponse,\n    TResponseError\n> &\n    UseStepsFormFromSFReturnType<TResponse, TVariables>;\n\nexport type UseStepsFormProps<\n    TQueryFnData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n    TData extends BaseRecord = TQueryFnData,\n    TResponse extends BaseRecord = TData,\n    TResponseError extends HttpError = TError,\n> = UseFormPropsCore<\n    TQueryFnData,\n    TError,\n    TVariables,\n    TData,\n    TResponse,\n    TResponseError\n> &\n    UseFormProps<\n        TQueryFnData,\n        TError,\n        TVariables,\n        TData,\n        TResponse,\n        TResponseError\n    > &\n    UseStepsFormConfig;\n\n/**\n * `useStepsForm` hook allows you to split your form under an Ant Design based {@link https://ant.design/components/steps/ Steps} component and provides you with a few useful functionalities that will help you manage your form.\n *\n * @see {@link https://refine.dev/docs/api-reference/antd/hooks/form/useStepsForm} for more details.\n *\n * @typeParam TData - Result data of the query extends {@link https://refine.dev/docs/api-reference/core/interfaceReferences#baserecord `BaseRecord`}\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/api-reference/core/interfaceReferences/#httperror `HttpError`}\n * @typeParam TVariables - Values for params. default `{}`\n *\n *\n */\nexport const useStepsForm = <\n    TQueryFnData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n    TData extends BaseRecord = TQueryFnData,\n    TResponse extends BaseRecord = TData,\n    TResponseError extends HttpError = TError,\n>(\n    props: UseStepsFormProps<\n        TQueryFnData,\n        TError,\n        TVariables,\n        TData,\n        TResponse,\n        TResponseError\n    > = {},\n): UseStepsFormReturnType<\n    TQueryFnData,\n    TError,\n    TVariables,\n    TData,\n    TResponse,\n    TResponseError\n> => {\n    const useFormProps = useForm<\n        TQueryFnData,\n        TError,\n        TVariables,\n        TData,\n        TResponse,\n        TResponseError\n    >({\n        ...props,\n    });\n    const { form, formProps } = useFormProps;\n\n    const stepsPropsSunflower = useStepsFormSF<TResponse, TVariables>({\n        isBackValidate: false,\n        form: form,\n        submit: (values: any) => {\n            formProps?.onFinish?.(values);\n        },\n        ...props,\n    });\n\n    return {\n        ...useFormProps,\n        ...stepsPropsSunflower,\n        formLoading: useFormProps.formLoading,\n        formProps: {\n            ...stepsPropsSunflower.formProps,\n            ...useFormProps.formProps,\n            onValuesChange: formProps?.onValuesChange,\n            onKeyUp: formProps?.onKeyUp,\n        },\n        saveButtonProps: {\n            ...useFormProps.saveButtonProps,\n            onClick: () => stepsPropsSunflower.submit(),\n        },\n    };\n};\n","import React, { Children, createElement, Fragment } from \"react\";\nimport { Grid, FormProps, Form, TablePaginationConfig, TableProps } from \"antd\";\nimport { useForm as useFormSF } from \"sunflower-antd\";\n\nimport { SorterResult } from \"antd/lib/table/interface\";\n\nimport {\n    useLiveMode,\n    BaseRecord,\n    CrudFilters,\n    HttpError,\n    useTable as useTableCore,\n    useTableProps as useTablePropsCore,\n    useTableReturnType as useTableCoreReturnType,\n    pickNotDeprecated,\n} from \"@refinedev/core\";\n\nimport {\n    mapAntdSorterToCrudSorting,\n    mapAntdFilterToCrudFilter,\n} from \"@definitions/table\";\nimport { PaginationLink } from \"./paginationLink\";\n\nexport type useTableProps<TQueryFnData, TError, TSearchVariables, TData> =\n    useTablePropsCore<TQueryFnData, TError, TData> & {\n        onSearch?: (\n            data: TSearchVariables,\n        ) => CrudFilters | Promise<CrudFilters>;\n    };\n\nexport type useTableReturnType<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TSearchVariables = unknown,\n> = useTableCoreReturnType<TData, TError> & {\n    searchFormProps: FormProps<TSearchVariables>;\n    tableProps: TableProps<TData>;\n};\n\n/**\n * By using useTable, you are able to get properties that are compatible with\n * Ant Design {@link https://ant.design/components/table/ `<Table>`} component.\n * All features such as sorting, filtering and pagination comes as out of box.\n *\n * @see {@link https://refine.dev/docs/api-reference/antd/hooks/table/useTable/} for more details.\n *\n * @typeParam TQueryFnData - Result data returned by the query function. Extends {@link https://refine.dev/docs/api-reference/core/interfaceReferences#baserecord `BaseRecord`}\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/api-reference/core/interfaceReferences#httperror `HttpError`}\n * @typeParam TSearchVariables - Values for search params\n * @typeParam TData - Result data returned by the `select` function. Extends {@link https://refine.dev/docs/api-reference/core/interfaceReferences#baserecord `BaseRecord`}. Defaults to `TQueryFnData`\n *\n */\n\nexport const useTable = <\n    TQueryFnData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TSearchVariables = unknown,\n    TData extends BaseRecord = TQueryFnData,\n>({\n    onSearch,\n    initialCurrent,\n    initialPageSize,\n    hasPagination = true,\n    pagination,\n    initialSorter,\n    permanentSorter,\n    initialFilter,\n    permanentFilter,\n    defaultSetFilterBehavior,\n    filters: filtersFromProp,\n    sorters: sortersFromProp,\n    syncWithLocation,\n    resource,\n    successNotification,\n    errorNotification,\n    queryOptions,\n    liveMode: liveModeFromProp,\n    onLiveEvent,\n    liveParams,\n    meta,\n    metaData,\n    dataProviderName,\n}: useTableProps<\n    TQueryFnData,\n    TError,\n    TSearchVariables,\n    TData\n> = {}): useTableReturnType<TData, TError, TSearchVariables> => {\n    const {\n        tableQueryResult,\n        current,\n        setCurrent,\n        pageSize,\n        setPageSize,\n        filters,\n        setFilters,\n        sorters,\n        setSorters,\n        sorter,\n        setSorter,\n        createLinkForSyncWithLocation,\n        pageCount,\n        overtime,\n    } = useTableCore<TQueryFnData, TError, TData>({\n        permanentSorter,\n        permanentFilter,\n        initialCurrent,\n        initialPageSize,\n        pagination,\n        hasPagination,\n        filters: filtersFromProp,\n        sorters: sortersFromProp,\n        initialSorter,\n        initialFilter,\n        syncWithLocation,\n        resource,\n        defaultSetFilterBehavior,\n        successNotification,\n        errorNotification,\n        queryOptions,\n        liveMode: liveModeFromProp,\n        onLiveEvent,\n        liveParams,\n        meta: pickNotDeprecated(meta, metaData),\n        metaData: pickNotDeprecated(meta, metaData),\n        dataProviderName,\n    });\n    const breakpoint = Grid.useBreakpoint();\n    const [form] = Form.useForm<TSearchVariables>();\n    const formSF = useFormSF<any, TSearchVariables>({\n        form: form,\n    });\n    const liveMode = useLiveMode(liveModeFromProp);\n\n    const hasPaginationString = hasPagination === false ? \"off\" : \"server\";\n    const isPaginationEnabled =\n        (pagination?.mode ?? hasPaginationString) !== \"off\";\n\n    const preferredInitialFilters = pickNotDeprecated(\n        filtersFromProp?.initial,\n        initialFilter,\n    );\n\n    const { data, isFetched, isLoading } = tableQueryResult;\n\n    const onChange = (\n        paginationState: TablePaginationConfig,\n        tableFilters: Record<\n            string,\n            (string | number | boolean) | (string | number | boolean)[] | null\n        >,\n        sorter: SorterResult<any> | SorterResult<any>[],\n    ) => {\n        if (tableFilters && Object.keys(tableFilters).length > 0) {\n            // Map Antd:Filter -> refine:CrudFilter\n            const crudFilters = mapAntdFilterToCrudFilter(\n                tableFilters,\n                filters,\n                preferredInitialFilters,\n            );\n            setFilters(crudFilters);\n        }\n\n        if (sorter && Object.keys(sorter).length > 0) {\n            // Map Antd:Sorter -> refine:CrudSorting\n            const crudSorting = mapAntdSorterToCrudSorting(sorter);\n            setSorters(crudSorting);\n        }\n\n        if (isPaginationEnabled) {\n            setCurrent?.(paginationState.current || 1);\n            setPageSize?.(paginationState.pageSize || 10);\n        }\n    };\n\n    const onFinish = async (value: TSearchVariables) => {\n        if (onSearch) {\n            const searchFilters = await onSearch(value);\n            setFilters(searchFilters);\n\n            if (isPaginationEnabled) {\n                setCurrent?.(1);\n            }\n        }\n    };\n\n    const antdPagination = (): false | TablePaginationConfig => {\n        if (isPaginationEnabled) {\n            return {\n                itemRender: (page, type, element) => {\n                    const link = createLinkForSyncWithLocation({\n                        pagination: {\n                            pageSize,\n                            current: page,\n                        },\n                        sorters,\n                        filters,\n                    });\n\n                    if (type === \"page\") {\n                        return createElement(PaginationLink, {\n                            to: link,\n                            element: `${page}`,\n                        });\n                    }\n                    if (type === \"next\" || type === \"prev\") {\n                        return createElement(PaginationLink, {\n                            to: link,\n                            element: element,\n                        });\n                    }\n\n                    if (type === \"jump-next\" || type === \"jump-prev\") {\n                        const elementChildren = (element as React.ReactElement)\n                            ?.props?.children;\n\n                        return createElement(PaginationLink, {\n                            to: link,\n                            element:\n                                Children.count(elementChildren) > 1\n                                    ? createElement(\n                                          Fragment,\n                                          {},\n                                          elementChildren,\n                                      )\n                                    : elementChildren,\n                        });\n                    }\n\n                    return element;\n                },\n                pageSize,\n                current,\n                simple: !breakpoint.sm,\n                position: !breakpoint.sm ? [\"bottomCenter\"] : [\"bottomRight\"],\n                total: data?.total,\n            };\n        }\n\n        return false;\n    };\n\n    return {\n        searchFormProps: {\n            ...formSF.formProps,\n            onFinish,\n        },\n        tableProps: {\n            dataSource: data?.data,\n            loading: liveMode === \"auto\" ? isLoading : !isFetched,\n            onChange,\n            pagination: antdPagination(),\n            scroll: { x: true },\n        },\n        tableQueryResult,\n        sorters,\n        sorter,\n        filters,\n        setSorters,\n        setSorter,\n        setFilters,\n        current,\n        setCurrent,\n        pageSize,\n        setPageSize,\n        pageCount,\n        createLinkForSyncWithLocation,\n        overtime,\n    };\n};\n","import {\n    CrudFilters,\n    CrudOperators,\n    CrudSorting,\n    CrudFilter,\n    getDefaultFilter as getDefaultFilterCore,\n    getDefaultSortOrder as getDefaultSortOrderCore,\n    ConditionalFilter,\n    LogicalFilter,\n} from \"@refinedev/core\";\nimport { SortOrder, SorterResult } from \"antd/lib/table/interface\";\n\nexport const getDefaultSortOrder = (\n    columnName: string,\n    sorter?: CrudSorting,\n): SortOrder | undefined => {\n    const sort = getDefaultSortOrderCore(columnName, sorter);\n\n    if (sort) {\n        return `${sort}end`;\n    }\n\n    return undefined;\n};\n\n/**\n * @deprecated getDefaultFilter moved to `@refinedev/core`. Use from `@refinedev/core`\n */\nexport const getDefaultFilter = (\n    columnName: string,\n    filters?: CrudFilters,\n    operatorType: CrudOperators = \"eq\",\n): CrudFilter[\"value\"] | undefined => {\n    return getDefaultFilterCore(columnName, filters, operatorType);\n};\n\nexport const mapAntdSorterToCrudSorting = (\n    sorter: SorterResult<any> | SorterResult<any>[],\n): CrudSorting => {\n    const crudSorting: CrudSorting = [];\n    if (Array.isArray(sorter)) {\n        sorter\n            .sort((a, b) => {\n                return ((a.column?.sorter as { multiple?: number }).multiple ??\n                    0) <\n                    ((b.column?.sorter as { multiple?: number }).multiple ?? 0)\n                    ? -1\n                    : 0;\n            })\n            .map((item) => {\n                if (item.field && item.order) {\n                    const field = Array.isArray(item.field)\n                        ? item.field.join(\".\")\n                        : `${item.field}`;\n\n                    crudSorting.push({\n                        field: `${item.columnKey ?? field}`,\n                        order: item.order.replace(\"end\", \"\") as \"asc\" | \"desc\",\n                    });\n                }\n            });\n    } else {\n        if (sorter.field && sorter.order) {\n            const field = Array.isArray(sorter.field)\n                ? sorter.field.join(\".\")\n                : `${sorter.field}`;\n\n            crudSorting.push({\n                field: `${sorter.columnKey ?? field}`,\n                order: sorter.order.replace(\"end\", \"\") as \"asc\" | \"desc\",\n            });\n        }\n    }\n\n    return crudSorting;\n};\n\nexport const mapAntdFilterToCrudFilter = (\n    tableFilters: Record<\n        string,\n        (string | number | boolean) | (string | number | boolean)[] | null\n    >,\n    prevFilters: CrudFilters,\n    initialFilters?: CrudFilters,\n): CrudFilters => {\n    const crudFilters: CrudFilters = [];\n    const mapInitialFilter: Record<string, CrudFilter> = (\n        initialFilters ?? []\n    ).reduce((acc, item) => {\n        const field =\n            (item as ConditionalFilter).key || (item as LogicalFilter).field;\n        return { ...acc, [field]: item };\n    }, {});\n\n    Object.keys(tableFilters).map((field) => {\n        const value = tableFilters[field];\n        const operator =\n            prevFilters\n                .filter((i) => i.operator !== \"or\")\n                .find((p: any) => p.field === field)?.operator ||\n            mapInitialFilter[field]?.operator;\n\n        if (operator !== \"or\" && operator !== \"and\") {\n            crudFilters.push({\n                field,\n                operator: operator ?? (Array.isArray(value) ? \"in\" : \"eq\"),\n                value,\n            });\n        }\n    });\n\n    return crudFilters;\n};\n","import { useLink, useRouterContext, useRouterType } from \"@refinedev/core\";\nimport React, { ReactNode } from \"react\";\n\ninterface PaginationLinkProps {\n    to: string;\n    element: ReactNode;\n}\n\nexport const PaginationLink = ({ to, element }: PaginationLinkProps) => {\n    const { Link: LegacyLink } = useRouterContext();\n    const routerType = useRouterType();\n    const Link = useLink();\n\n    const ActiveLink = routerType === \"legacy\" ? LegacyLink : Link;\n\n    return (\n        <ActiveLink\n            to={to}\n            replace={false}\n            onClick={(e: React.PointerEvent<HTMLButtonElement>) => {\n                e.preventDefault();\n            }}\n        >\n            {element}\n        </ActiveLink>\n    );\n};\n","import { useTable } from \"@hooks\";\nimport { BaseKey, BaseRecord, HttpError, UseFormProps } from \"@refinedev/core\";\nimport { ButtonProps } from \"antd\";\n\nimport { useTableProps, useTableReturnType } from \"../useTable\";\nimport { UseFormReturnType, useForm } from \"../../form/useForm\";\n\nexport type useEditableTableReturnType<\n    TQueryFnData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n    TSearchVariables = unknown,\n    TData extends BaseRecord = TQueryFnData,\n> = useTableReturnType<TData, TError, TSearchVariables> &\n    UseFormReturnType<TQueryFnData, TError, TVariables> & {\n        saveButtonProps: ButtonProps & {\n            onClick: () => void;\n        };\n        cancelButtonProps: ButtonProps & {\n            onClick: () => void;\n        };\n        editButtonProps: (id: BaseKey) => ButtonProps & {\n            onClick: () => void;\n        };\n        isEditing: (id: BaseKey) => boolean;\n    };\n\ntype useEditableTableProps<\n    TQueryFnData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n    TSearchVariables = unknown,\n    TData extends BaseRecord = TQueryFnData,\n> = Omit<\n    useTableProps<TQueryFnData, TError, TSearchVariables, TData>,\n    \"successNotification\" | \"errorNotification\"\n> &\n    UseFormProps<TQueryFnData, TError, TVariables> & {\n        /**\n         * When true, row will be closed after successful submit.\n         */\n        autoSubmitClose?: boolean;\n    };\n\n/**\n * `useEditeableTable` allows you to implement edit feature on the table with ease,\n * on top of all the features that {@link https://refine.dev/docs/api-reference/core/hooks/useTable/ `useTable`} provides.\n * `useEditableTable` return properties that can be used on Ant Design's {@link https://ant.design/components/table/ `<Table>`}\n * and {@link https://ant.design/components/form/ `<Form>`} components.\n *\n * @see {@link https://refine.dev/docs/api-reference/antd/hooks/table/useTable/} for more details.\n *\n * @typeParam TQueryFnData - Result data returned by the query function. Extends {@link https://refine.dev/docs/api-reference/core/interfaceReferences#baserecord `BaseRecord`}\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/api-reference/core/interfaceReferences#httperror `HttpError`}\n * @typeParam TVariables - Values for params\n * @typeParam TSearchVariables - Values for search params\n * @typeParam TData - Result data returned by the `select` function. Extends {@link https://refine.dev/docs/api-reference/core/interfaceReferences#baserecord `BaseRecord`}. Defaults to `TQueryFnData`\n *\n */\nexport const useEditableTable = <\n    TQueryFnData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n    TSearchVariables = unknown,\n    TData extends BaseRecord = TQueryFnData,\n>({\n    autoSubmitClose = true,\n    ...props\n}: useEditableTableProps<\n    TQueryFnData,\n    TError,\n    TVariables,\n    TSearchVariables,\n    TData\n> = {}): useEditableTableReturnType<\n    TQueryFnData,\n    TError,\n    TVariables,\n    TSearchVariables,\n    TData\n> => {\n    const table = useTable<TQueryFnData, TError, TSearchVariables, TData>({\n        ...props,\n        successNotification: undefined,\n        errorNotification: undefined,\n    });\n    const edit = useForm<TQueryFnData, TError, TVariables>({\n        ...props,\n        action: \"edit\",\n        redirect: false,\n    });\n\n    const { id: editId, setId, saveButtonProps } = edit;\n\n    const cancelButtonProps = {\n        onClick: () => {\n            setId(undefined);\n        },\n    };\n\n    const editButtonProps = (id: BaseKey) => {\n        return {\n            onClick: () => setId(id),\n        };\n    };\n\n    const isEditing = (id: BaseKey) => id === editId;\n\n    return {\n        ...table,\n        ...edit,\n        formProps: {\n            ...edit.formProps,\n            onFinish: async (values) => {\n                const result = await edit.onFinish(values);\n                if (autoSubmitClose) {\n                    setId(undefined);\n                }\n                return result;\n            },\n        },\n        saveButtonProps,\n        cancelButtonProps,\n        editButtonProps,\n        isEditing,\n    };\n};\n","import { SelectProps } from \"antd/lib/select\";\nimport { QueryObserverResult } from \"@tanstack/react-query\";\n\nimport {\n    useSelect as useSelectCore,\n    BaseRecord,\n    GetManyResponse,\n    GetListResponse,\n    HttpError,\n    UseSelectProps,\n    BaseOption,\n} from \"@refinedev/core\";\n\nexport type UseSelectReturnType<\n    TData extends BaseRecord = BaseRecord,\n    TOption extends BaseOption = BaseOption,\n> = {\n    selectProps: SelectProps<TOption>;\n    queryResult: QueryObserverResult<GetListResponse<TData>>;\n    defaultValueQueryResult: QueryObserverResult<GetManyResponse<TData>>;\n};\n\n/**\n * `useSelect` hook allows you to manage an Ant Design {@link https://ant.design/components/select/ Select} component when records in a resource needs to be used as select options.\n *\n * @see {@link https://refine.dev/docs/api-reference/antd/hooks/field/useSelect/} for more details.\n *\n * @typeParam TQueryFnData - Result data returned by the query function. Extends {@link https://refine.dev/docs/api-reference/core/interfaceReferences#baserecord `BaseRecord`}\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/api-reference/core/interfaceReferences#httperror `HttpError`}\n * @typeParam TData - Result data returned by the `select` function. Extends {@link https://refine.dev/docs/api-reference/core/interfaceReferences#baserecord `BaseRecord`}. Defaults to `TQueryFnData`\n *\n */\n\nexport const useSelect = <\n    TQueryFnData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TData extends BaseRecord = TQueryFnData,\n    TOption extends BaseOption = BaseOption,\n>(\n    props: UseSelectProps<TQueryFnData, TError, TData>,\n): UseSelectReturnType<TData, TOption> => {\n    const { queryResult, defaultValueQueryResult, onSearch, options } =\n        useSelectCore<TQueryFnData, TError, TData, TOption>(props);\n\n    return {\n        selectProps: {\n            options,\n            onSearch,\n            loading: defaultValueQueryResult.isFetching,\n            showSearch: true,\n            filterOption: false,\n        },\n        queryResult,\n        defaultValueQueryResult,\n    };\n};\n","import { QueryObserverResult } from \"@tanstack/react-query\";\nimport type { Checkbox } from \"antd\";\n\nimport {\n    BaseRecord,\n    GetListResponse,\n    HttpError,\n    UseSelectProps,\n    useSelect,\n    BaseKey,\n    pickNotDeprecated,\n    BaseOption,\n} from \"@refinedev/core\";\n\nexport type UseCheckboxGroupReturnType<\n    TData extends BaseRecord = BaseRecord,\n    TOption extends BaseOption = BaseOption,\n> = {\n    checkboxGroupProps: Omit<\n        React.ComponentProps<typeof Checkbox.Group>,\n        \"options\"\n    > & {\n        options: TOption[];\n    };\n    queryResult: QueryObserverResult<GetListResponse<TData>>;\n};\n\ntype UseCheckboxGroupProps<TQueryFnData, TError, TData> = Omit<\n    UseSelectProps<TQueryFnData, TError, TData>,\n    \"defaultValue\"\n> & {\n    /**\n     * Sets the default value\n     */\n    defaultValue?: BaseKey[];\n};\n\n/**\n * `useCheckboxGroup` hook allows you to manage an Ant Design {@link https://ant.design/components/checkbox/#components-checkbox-demo-group Checkbox.Group} component when records in a resource needs to be used as checkbox options.\n *\n * @see {@link https://refine.dev/docs/api-reference/antd/hooks/field/useCheckboxGroup/} for more details\n *\n * @typeParam TQueryFnData - Result data returned by the query function. Extends {@link https://refine.dev/docs/api-reference/core/interfaceReferences#baserecord `BaseRecord`}\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/api-reference/core/interfaceReferences#httperror `HttpError`}\n * @typeParam TData - Result data returned by the `select` function. Extends {@link https://refine.dev/docs/api-reference/core/interfaceReferences#baserecord `BaseRecord`}. Defaults to `TQueryFnData`\n *\n */\n\nexport const useCheckboxGroup = <\n    TQueryFnData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TData extends BaseRecord = TQueryFnData,\n    TOption extends BaseOption = BaseOption,\n>({\n    resource,\n    sort,\n    sorters,\n    filters,\n    optionLabel,\n    optionValue,\n    queryOptions,\n    fetchSize,\n    pagination,\n    liveMode,\n    defaultValue,\n    onLiveEvent,\n    liveParams,\n    meta,\n    metaData,\n    dataProviderName,\n}: UseCheckboxGroupProps<\n    TQueryFnData,\n    TError,\n    TData\n>): UseCheckboxGroupReturnType<TData, TOption> => {\n    const { queryResult, options } = useSelect<\n        TQueryFnData,\n        TError,\n        TData,\n        TOption\n    >({\n        resource,\n        sort,\n        sorters,\n        filters,\n        optionLabel,\n        optionValue,\n        queryOptions,\n        fetchSize,\n        pagination,\n        liveMode,\n        defaultValue,\n        onLiveEvent,\n        liveParams,\n        meta: pickNotDeprecated(meta, metaData),\n        metaData: pickNotDeprecated(meta, metaData),\n        dataProviderName,\n    });\n    return {\n        checkboxGroupProps: {\n            options,\n            defaultValue,\n        },\n        queryResult,\n    };\n};\n","import { QueryObserverResult } from \"@tanstack/react-query\";\nimport type { Radio } from \"antd\";\n\nimport {\n    BaseKey,\n    BaseOption,\n    BaseRecord,\n    GetListResponse,\n    HttpError,\n    pickNotDeprecated,\n    useSelect,\n    UseSelectProps,\n} from \"@refinedev/core\";\n\nexport type UseRadioGroupReturnType<\n    TData extends BaseRecord = BaseRecord,\n    TOption extends BaseOption = BaseOption,\n> = {\n    radioGroupProps: Omit<\n        React.ComponentProps<typeof Radio.Group>,\n        \"options\"\n    > & {\n        options: TOption[];\n    };\n    queryResult: QueryObserverResult<GetListResponse<TData>>;\n};\n\ntype UseRadioGroupProps<TQueryFnData, TError, TData> = Omit<\n    UseSelectProps<TQueryFnData, TError, TData>,\n    \"defaultValue\"\n> & {\n    /**\n     * Sets the default value\n     */\n    defaultValue?: BaseKey;\n};\n\n/**\n * `useRadioGroup` hook allows you to manage an Ant Design {@link https://ant.design/components/radio/#components-radio-demo-radiogroup-with-name Radio.Group} component when records in a resource needs to be used as radio options.\n *\n * @see {@link https://refine.dev/docs/api-reference/antd/hooks/field/useRadioGroup/} for more details.\n *\n * @typeParam TQueryFnData - Result data returned by the query function. Extends {@link https://refine.dev/docs/api-reference/core/interfaceReferences#baserecord `BaseRecord`}\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/api-reference/core/interfaceReferences#httperror `HttpError`}\n * @typeParam TData - Result data returned by the `select` function. Extends {@link https://refine.dev/docs/api-reference/core/interfaceReferences#baserecord `BaseRecord`}. Defaults to `TQueryFnData`\n *\n */\n\nexport const useRadioGroup = <\n    TQueryFnData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TData extends BaseRecord = TQueryFnData,\n    TOption extends BaseOption = BaseOption,\n>({\n    resource,\n    sort,\n    sorters,\n    filters,\n    optionLabel,\n    optionValue,\n    queryOptions,\n    fetchSize,\n    pagination,\n    liveMode,\n    defaultValue,\n    onLiveEvent,\n    liveParams,\n    meta,\n    metaData,\n    dataProviderName,\n}: UseRadioGroupProps<TQueryFnData, TError, TData>): UseRadioGroupReturnType<\n    TData,\n    TOption\n> => {\n    const { queryResult, options } = useSelect<\n        TQueryFnData,\n        TError,\n        TData,\n        TOption\n    >({\n        resource,\n        sort,\n        sorters,\n        filters,\n        optionLabel,\n        optionValue,\n        queryOptions,\n        fetchSize,\n        pagination,\n        liveMode,\n        defaultValue,\n        onLiveEvent,\n        liveParams,\n        meta: pickNotDeprecated(meta, metaData),\n        metaData: pickNotDeprecated(meta, metaData),\n        dataProviderName,\n    });\n\n    return {\n        radioGroupProps: {\n            options,\n            defaultValue,\n        },\n        queryResult,\n    };\n};\n","import React from \"react\";\nimport { ButtonProps, notification, UploadProps, Progress } from \"antd\";\nimport {\n    useTranslate,\n    useResource,\n    BaseRecord,\n    HttpError,\n    useImport as useImportCore,\n    UseImportReturnType,\n    ImportOptions,\n    pickNotDeprecated,\n} from \"@refinedev/core\";\n\n/**\n * `useImport` hook allows you to handle your csv import logic easily.\n *\n * @see {@link https://refine.dev/docs/api-reference/antd/hooks/import/useImport} for more details.\n *\n * @typeParam TItem - Interface of parsed csv data\n * @typeParam TData - Result data of the query extends {@link https://refine.dev/docs/api-reference/core/interfaceReferences#baserecord `BaseRecord`}\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/api-reference/core/interfaceReferences/#httperror `HttpError`}\n * @typeParam TVariables - Values for mutation function\n *\n */\nexport const useImport = <\n    TItem = any,\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = any,\n>({\n    resource: resourceFromProp,\n    resourceName,\n    mapData = (item) => item as unknown as TVariables,\n    paparseOptions,\n    batchSize = Number.MAX_SAFE_INTEGER,\n    onFinish,\n    meta,\n    metaData,\n    dataProviderName,\n    onProgress: onProgressFromProp,\n}: ImportOptions<TItem, TVariables, TData> = {}): Omit<\n    UseImportReturnType<TData, TVariables, TError>,\n    \"handleChange\" | \"inputProps\"\n> & {\n    uploadProps: UploadProps;\n    buttonProps: ButtonProps;\n} => {\n    const t = useTranslate();\n\n    const { resource } = useResource(resourceFromProp ?? resourceName);\n\n    const { mutationResult, isLoading, handleChange } = useImportCore<\n        TItem,\n        TData,\n        TError,\n        TVariables\n    >({\n        resource: resource?.identifier ?? resource?.name,\n        mapData,\n        paparseOptions,\n        batchSize,\n        meta: pickNotDeprecated(meta, metaData),\n        metaData: pickNotDeprecated(meta, metaData),\n        dataProviderName,\n        onFinish,\n        onProgress:\n            onProgressFromProp ??\n            (({ totalAmount, processedAmount }) => {\n                if (totalAmount > 0 && processedAmount > 0) {\n                    const description = (\n                        <div\n                            style={{\n                                display: \"flex\",\n                                alignItems: \"center\",\n                                justifyContent: \"space-between\",\n                                marginTop: \"-7px\",\n                            }}\n                        >\n                            <Progress\n                                type=\"circle\"\n                                percent={Math.floor(\n                                    (processedAmount / totalAmount) * 100,\n                                )}\n                                size={50}\n                                strokeColor=\"#1890ff\"\n                                status=\"normal\"\n                            />\n                            <span style={{ marginLeft: 8, width: \"100%\" }}>\n                                {t(\n                                    \"notifications.importProgress\",\n                                    {\n                                        processed: processedAmount,\n                                        total: totalAmount,\n                                    },\n                                    `Importing: ${processedAmount}/${totalAmount}`,\n                                )}\n                            </span>\n                        </div>\n                    );\n\n                    notification.open({\n                        description,\n                        message: null,\n                        key: `${resource}-import`,\n                        duration: 0,\n                    });\n\n                    if (processedAmount >= totalAmount) {\n                    }\n\n                    if (processedAmount === totalAmount) {\n                        setTimeout(() => {\n                            notification.destroy(`${resource}-import`);\n                        }, 4500);\n                    }\n                }\n            }),\n    });\n\n    return {\n        uploadProps: {\n            onChange: handleChange,\n            beforeUpload: () => false,\n            showUploadList: false,\n            accept: \".csv\",\n        },\n        buttonProps: {\n            type: \"default\",\n            loading: isLoading,\n        },\n        mutationResult,\n        isLoading,\n    };\n};\n","import { Children, createElement, Fragment } from \"react\";\nimport { ListProps, FormProps, Form, Grid } from \"antd\";\n\nimport {\n    BaseRecord,\n    CrudFilters,\n    HttpError,\n    useTable as useTableCore,\n    useTableProps as useTablePropsCore,\n    useTableReturnType,\n    pickNotDeprecated,\n} from \"@refinedev/core\";\nimport { useLiveMode } from \"@refinedev/core\";\nimport { PaginationLink } from \"@hooks/table/useTable/paginationLink\";\nimport { PaginationConfig } from \"antd/lib/pagination\";\n\nexport type useSimpleListProps<TQueryFnData, TError, TSearchVariables, TData> =\n    useTablePropsCore<TQueryFnData, TError, TData> & {\n        onSearch?: (\n            data: TSearchVariables,\n        ) => CrudFilters | Promise<CrudFilters>;\n    };\n\nexport type useSimpleListReturnType<\n    TQueryFnData extends BaseRecord = BaseRecord,\n    TSearchVariables = unknown,\n    TData extends BaseRecord = TQueryFnData,\n> = Omit<useTableReturnType<TData>, \"tableQueryResult\"> & {\n    listProps: ListProps<TData>;\n    queryResult: useTableReturnType[\"tableQueryResult\"];\n    searchFormProps: FormProps<TSearchVariables>;\n};\n\n/**\n * By using `useSimpleList` you get props for your records from API in accordance with Ant Design {@link https://ant.design/components/list/ `<List>`} component.\n * All features such as pagination, sorting come out of the box.\n *\n * @see {@link https://refine.dev/docs/api-reference/antd/hooks/list/useSimpleList} for more details.\n *\n * @typeParam TQueryFnData - Result data returned by the query function. Extends {@link https://refine.dev/docs/api-reference/core/interfaceReferences#baserecord `BaseRecord`}\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/api-reference/core/interfaceReferences#httperror `HttpError`}\n * @typeParam TSearchVariables - Antd form values\n * @typeParam TData - Result data returned by the `select` function. Extends {@link https://refine.dev/docs/api-reference/core/interfaceReferences#baserecord `BaseRecord`}. Defaults to `TQueryFnData`\n *\n */\n\nexport const useSimpleList = <\n    TQueryFnData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TSearchVariables = unknown,\n    TData extends BaseRecord = TQueryFnData,\n>({\n    resource,\n    initialCurrent,\n    initialPageSize,\n    pagination,\n    hasPagination = true,\n    initialSorter,\n    permanentSorter,\n    initialFilter,\n    permanentFilter,\n    defaultSetFilterBehavior,\n    filters: filtersFromProp,\n    sorters: sortersFromProp,\n    onSearch,\n    queryOptions,\n    syncWithLocation,\n    successNotification,\n    errorNotification,\n    liveMode: liveModeFromProp,\n    onLiveEvent,\n    liveParams,\n    meta,\n    metaData,\n    dataProviderName,\n}: useSimpleListProps<\n    TQueryFnData,\n    TError,\n    TSearchVariables,\n    TData\n> = {}): useSimpleListReturnType<TData, TSearchVariables> => {\n    const {\n        sorters,\n        sorter,\n        filters,\n        current,\n        pageSize,\n        pageCount,\n        setFilters,\n        setCurrent,\n        setPageSize,\n        setSorter,\n        setSorters,\n        createLinkForSyncWithLocation,\n        tableQueryResult: queryResult,\n        overtime,\n    } = useTableCore({\n        resource,\n        initialSorter,\n        permanentSorter,\n        initialFilter,\n        permanentFilter,\n        filters: filtersFromProp,\n        sorters: sortersFromProp,\n        defaultSetFilterBehavior,\n        initialCurrent,\n        initialPageSize,\n        queryOptions,\n        successNotification,\n        errorNotification,\n        liveMode: liveModeFromProp,\n        onLiveEvent,\n        liveParams,\n        meta: pickNotDeprecated(meta, metaData),\n        metaData: pickNotDeprecated(meta, metaData),\n        syncWithLocation,\n        dataProviderName,\n        pagination,\n        hasPagination,\n    });\n\n    const hasPaginationString = hasPagination === false ? \"off\" : \"server\";\n    const isPaginationEnabled =\n        (pagination?.mode ?? hasPaginationString) !== \"off\";\n\n    const breakpoint = Grid.useBreakpoint();\n\n    const liveMode = useLiveMode(liveModeFromProp);\n\n    const [form] = Form.useForm<TSearchVariables>();\n\n    const { data, isFetched, isLoading } = queryResult;\n\n    const onChange = (page: number, pageSize?: number): void => {\n        if (isPaginationEnabled) {\n            setCurrent(page);\n            setPageSize(pageSize || 10);\n        }\n    };\n\n    const onFinish = async (values: TSearchVariables) => {\n        if (onSearch) {\n            const searchFilters = await onSearch(values);\n            if (isPaginationEnabled) {\n                setCurrent?.(1);\n            }\n            return setFilters(searchFilters);\n        }\n    };\n\n    const antdPagination = (): false | PaginationConfig => {\n        if (isPaginationEnabled) {\n            return {\n                itemRender: (page, type, element) => {\n                    const link = createLinkForSyncWithLocation({\n                        pagination: {\n                            pageSize,\n                            current: page,\n                        },\n                        sorters,\n                        filters,\n                    });\n\n                    if (type === \"page\") {\n                        return createElement(PaginationLink, {\n                            to: link,\n                            element: `${page}`,\n                        });\n                    }\n                    if (type === \"next\" || type === \"prev\") {\n                        return createElement(PaginationLink, {\n                            to: link,\n                            element: element,\n                        });\n                    }\n\n                    if (type === \"jump-next\" || type === \"jump-prev\") {\n                        const elementChildren = (element as React.ReactElement)\n                            ?.props?.children;\n\n                        return createElement(PaginationLink, {\n                            to: link,\n                            element:\n                                Children.count(elementChildren) > 1\n                                    ? createElement(\n                                          Fragment,\n                                          {},\n                                          elementChildren,\n                                      )\n                                    : elementChildren,\n                        });\n                    }\n\n                    return element;\n                },\n                pageSize,\n                current,\n                simple: !breakpoint.sm,\n                total: data?.total,\n                onChange,\n            };\n        }\n\n        return false;\n    };\n\n    return {\n        searchFormProps: {\n            form,\n            onFinish,\n        },\n        listProps: {\n            dataSource: data?.data,\n            loading: liveMode === \"auto\" ? isLoading : !isFetched,\n            pagination: antdPagination(),\n        },\n        queryResult,\n        filters,\n        setFilters,\n        sorter,\n        setSorter,\n        sorters,\n        setSorters,\n        current,\n        setCurrent,\n        pageSize,\n        setPageSize,\n        pageCount,\n        createLinkForSyncWithLocation,\n        overtime,\n    };\n};\n","import { useCallback, useMemo, useState } from \"react\";\nimport { UploadChangeParam } from \"antd/lib/upload\";\n\nexport type UseFileUploadStateType = () => {\n    isLoading: boolean;\n    onChange: (info: UploadChangeParam) => void;\n};\n\nexport const useFileUploadState: UseFileUploadStateType = () => {\n    const [isLoading, setIsloading] = useState(false);\n\n    const onChange = useCallback((info: UploadChangeParam) => {\n        const fileListLoadings = mapStatusToLoading(info.fileList);\n\n        if (fileListLoadings.includes(true)) {\n            setIsloading(true);\n        } else {\n            setIsloading(false);\n        }\n    }, []);\n\n    return useMemo(() => ({ isLoading, onChange }), [isLoading]);\n};\n\nconst mapStatusToLoading = (files: UploadChangeParam[\"fileList\"]) => {\n    return files.map((file) => {\n        switch (file.status) {\n            case \"uploading\":\n                return true;\n            default:\n                return false;\n        }\n    });\n};\n","import { useContext } from \"react\";\n\nimport { ThemedLayoutContext } from \"@contexts\";\n\nexport type UseSiderVisibleType = {\n    siderVisible: boolean;\n    drawerSiderVisible: boolean;\n    setSiderVisible: (visible: boolean) => void;\n    setDrawerSiderVisible: (visible: boolean) => void;\n};\n\n/**\n * @deprecated Please use `useThemedLayoutContext` instead.\n */\nexport const useSiderVisible = (): UseSiderVisibleType => {\n    const {\n        mobileSiderOpen,\n        siderCollapsed,\n        setMobileSiderOpen,\n        setSiderCollapsed,\n    } = useContext(ThemedLayoutContext);\n\n    return {\n        siderVisible: mobileSiderOpen,\n        setSiderVisible: setMobileSiderOpen,\n        drawerSiderVisible: siderCollapsed,\n        setDrawerSiderVisible: setSiderCollapsed,\n    };\n};\n","import React, { ReactNode, useState } from \"react\";\n\nimport { IThemedLayoutContext } from \"./IThemedLayoutContext\";\n\nexport const ThemedLayoutContext = React.createContext<IThemedLayoutContext>({\n    siderCollapsed: false,\n    mobileSiderOpen: false,\n    setSiderCollapsed: () => undefined,\n    setMobileSiderOpen: () => undefined,\n});\n\nexport const ThemedLayoutContextProvider: React.FC<{\n    children: ReactNode;\n    initialSiderCollapsed?: boolean;\n}> = ({ children, initialSiderCollapsed }) => {\n    const [siderCollapsed, setSiderCollapsed] = useState(\n        initialSiderCollapsed ?? false,\n    );\n    const [mobileSiderOpen, setMobileSiderOpen] = useState(false);\n\n    return (\n        <ThemedLayoutContext.Provider\n            value={{\n                siderCollapsed,\n                mobileSiderOpen,\n                setSiderCollapsed,\n                setMobileSiderOpen,\n            }}\n        >\n            {children}\n        </ThemedLayoutContext.Provider>\n    );\n};\n","import { useContext } from \"react\";\n\nimport { ThemedLayoutContext } from \"@contexts\";\nimport { IThemedLayoutContext } from \"@contexts/themedLayoutContext/IThemedLayoutContext\";\n\nexport type UseThemedLayoutContextType = IThemedLayoutContext;\n\nexport const useThemedLayoutContext = (): UseThemedLayoutContextType => {\n    const {\n        mobileSiderOpen,\n        siderCollapsed,\n        setMobileSiderOpen,\n        setSiderCollapsed,\n    } = useContext(ThemedLayoutContext);\n\n    return {\n        mobileSiderOpen,\n        siderCollapsed,\n        setMobileSiderOpen,\n        setSiderCollapsed,\n    };\n};\n","import { NotificationProvider } from \"@refinedev/core\";\nimport { App, notification as staticNotification } from \"antd\";\nimport React from \"react\";\n\nimport { UndoableNotification } from \"@components/undoableNotification\";\n\n/**\n * @deprecated `notificationProvider` is deprecated due to not being compatible with theme changes in Ant Design. Please use `useNotificationProvider` export as your notification provider.\n * @see https://refine.dev/docs/api-reference/antd/theming/#usenotificationprovider-compatible-with-theme\n */\n\nexport const notificationProvider: NotificationProvider = {\n    open: ({\n        key,\n        message,\n        description,\n        type,\n        cancelMutation,\n        undoableTimeout,\n    }) => {\n        if (type === \"progress\") {\n            staticNotification.open({\n                key,\n                description: (\n                    <UndoableNotification\n                        notificationKey={key}\n                        message={message}\n                        cancelMutation={() => {\n                            cancelMutation?.();\n                            staticNotification.destroy(key ?? \"\");\n                        }}\n                        undoableTimeout={undoableTimeout}\n                    />\n                ),\n                message: null,\n                duration: 0,\n                closeIcon: <></>,\n            });\n        } else {\n            staticNotification.open({\n                key,\n                description: message,\n                message: description ?? null,\n                type,\n            });\n        }\n    },\n    close: (key) => staticNotification.destroy(key),\n};\n\nexport const useNotificationProvider = (): NotificationProvider => {\n    const { notification: notificationFromContext } = App.useApp();\n    const notification =\n        \"open\" in notificationFromContext\n            ? notificationFromContext\n            : staticNotification;\n\n    const notificationProvider: NotificationProvider = {\n        open: ({\n            key,\n            message,\n            description,\n            type,\n            cancelMutation,\n            undoableTimeout,\n        }) => {\n            if (type === \"progress\") {\n                notification.open({\n                    key,\n                    description: (\n                        <UndoableNotification\n                            notificationKey={key}\n                            message={message}\n                            cancelMutation={() => {\n                                cancelMutation?.();\n                                notification.destroy(key ?? \"\");\n                            }}\n                            undoableTimeout={undoableTimeout}\n                        />\n                    ),\n                    message: null,\n                    duration: 0,\n                    closeIcon: <></>,\n                });\n            } else {\n                notification.open({\n                    key,\n                    description: message,\n                    message: description ?? null,\n                    type,\n                });\n            }\n        },\n        close: (key) => notification.destroy(key),\n    };\n\n    return notificationProvider;\n};\n","import React from \"react\";\nimport { Button, Progress } from \"antd\";\nimport { OpenNotificationParams } from \"@refinedev/core\";\nimport { UndoOutlined } from \"@ant-design/icons\";\n\nexport type UndoableNotificationProps = {\n    notificationKey: OpenNotificationParams[\"key\"];\n    message: OpenNotificationParams[\"message\"];\n    cancelMutation: OpenNotificationParams[\"cancelMutation\"];\n    undoableTimeout: OpenNotificationParams[\"undoableTimeout\"];\n};\n\nexport const UndoableNotification: React.FC<UndoableNotificationProps> = ({\n    message,\n    cancelMutation,\n    undoableTimeout,\n}) => (\n    <div\n        style={{\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"space-between\",\n            marginTop: \"-7px\",\n        }}\n    >\n        <Progress\n            type=\"circle\"\n            percent={(undoableTimeout ?? 0) * 20}\n            format={(time) => time && time / 20}\n            size={50}\n            strokeColor=\"#1890ff\"\n            status=\"normal\"\n        />\n        <span style={{ marginLeft: 8, width: \"100%\" }}>{message}</span>\n        <Button\n            style={{ flexShrink: 0 }}\n            onClick={cancelMutation}\n            disabled={undoableTimeout === 0}\n            icon={<UndoOutlined />}\n        ></Button>\n    </div>\n);\n","import React from \"react\";\nimport { Grid, Layout as AntdLayout } from \"antd\";\n\nimport { Sider as DefaultSider } from \"./sider\";\nimport { Header as DefaultHeader } from \"./header\";\nimport { RefineLayoutLayoutProps } from \"./types\";\n\n/**\n * @deprecated use `<ThemedLayout>` instead with 100% backward compatibility.\n * @see https://refine.dev/docs/api-reference/antd/components/antd-themed-layout\n **/\nexport const Layout: React.FC<RefineLayoutLayoutProps> = ({\n    children,\n    Header,\n    Sider,\n    Title,\n    Footer,\n    OffLayoutArea,\n}) => {\n    const breakpoint = Grid.useBreakpoint();\n    const SiderToRender = Sider ?? DefaultSider;\n    const HeaderToRender = Header ?? DefaultHeader;\n    const isSmall = typeof breakpoint.sm === \"undefined\" ? true : breakpoint.sm;\n\n    return (\n        <AntdLayout style={{ minHeight: \"100vh\" }}>\n            <SiderToRender Title={Title} />\n            <AntdLayout>\n                <HeaderToRender />\n                <AntdLayout.Content>\n                    <div\n                        style={{\n                            minHeight: 360,\n                            padding: isSmall ? 24 : 12,\n                        }}\n                    >\n                        {children}\n                    </div>\n                    {OffLayoutArea && <OffLayoutArea />}\n                </AntdLayout.Content>\n                {Footer && <Footer />}\n            </AntdLayout>\n        </AntdLayout>\n    );\n};\n","import React, { useState } from \"react\";\nimport { Layout, Menu, Grid, ConfigProvider, Drawer, Button } from \"antd\";\nimport {\n    DashboardOutlined,\n    LogoutOutlined,\n    UnorderedListOutlined,\n    BarsOutlined,\n} from \"@ant-design/icons\";\nimport {\n    useTranslate,\n    useLogout,\n    useTitle,\n    CanAccess,\n    ITreeMenu,\n    useIsExistAuthentication,\n    useRouterContext,\n    useMenu,\n    useRefineContext,\n    useLink,\n    useRouterType,\n    useActiveAuthProvider,\n    pickNotDeprecated,\n    useWarnAboutChange,\n} from \"@refinedev/core\";\n\nimport { Title as DefaultTitle } from \"@components\";\n\nimport { drawerButtonStyles } from \"./styles\";\nimport { RefineLayoutSiderProps } from \"../types\";\n\nconst { SubMenu } = Menu;\n\nexport const Sider: React.FC<RefineLayoutSiderProps> = ({\n    Title: TitleFromProps,\n    render,\n    meta,\n}) => {\n    const [collapsed, setCollapsed] = useState<boolean>(false);\n    const [drawerOpen, setDrawerOpen] = useState<boolean>(false);\n    const isExistAuthentication = useIsExistAuthentication();\n    const routerType = useRouterType();\n    const NewLink = useLink();\n    const { warnWhen, setWarnWhen } = useWarnAboutChange();\n    const { Link: LegacyLink } = useRouterContext();\n    const Link = routerType === \"legacy\" ? LegacyLink : NewLink;\n    const TitleFromContext = useTitle();\n    const translate = useTranslate();\n    const { menuItems, selectedKey, defaultOpenKeys } = useMenu({ meta });\n    const breakpoint = Grid.useBreakpoint();\n    const { hasDashboard } = useRefineContext();\n    const authProvider = useActiveAuthProvider();\n    const { mutate: mutateLogout } = useLogout({\n        v3LegacyAuthProviderCompatible: Boolean(authProvider?.isLegacy),\n    });\n\n    const isMobile =\n        typeof breakpoint.lg === \"undefined\" ? false : !breakpoint.lg;\n\n    const RenderToTitle = TitleFromProps ?? TitleFromContext ?? DefaultTitle;\n\n    const renderTreeView = (tree: ITreeMenu[], selectedKey?: string) => {\n        return tree.map((item: ITreeMenu) => {\n            const {\n                icon,\n                label,\n                route,\n                key,\n                name,\n                children,\n                parentName,\n                meta,\n                options,\n            } = item;\n\n            if (children.length > 0) {\n                return (\n                    <CanAccess\n                        key={item.key}\n                        resource={name.toLowerCase()}\n                        action=\"list\"\n                        params={{\n                            resource: item,\n                        }}\n                    >\n                        <SubMenu\n                            key={item.key}\n                            icon={icon ?? <UnorderedListOutlined />}\n                            title={label}\n                        >\n                            {renderTreeView(children, selectedKey)}\n                        </SubMenu>\n                    </CanAccess>\n                );\n            }\n            const isSelected = key === selectedKey;\n            const isRoute = !(\n                pickNotDeprecated(meta?.parent, options?.parent, parentName) !==\n                    undefined && children.length === 0\n            );\n            return (\n                <CanAccess\n                    key={item.key}\n                    resource={name.toLowerCase()}\n                    action=\"list\"\n                    params={{\n                        resource: item,\n                    }}\n                >\n                    <Menu.Item\n                        key={item.key}\n                        style={{\n                            fontWeight: isSelected ? \"bold\" : \"normal\",\n                        }}\n                        icon={icon ?? (isRoute && <UnorderedListOutlined />)}\n                    >\n                        <Link to={route ?? \"\"}>{label}</Link>\n                        {!collapsed && isSelected && (\n                            <div className=\"ant-menu-tree-arrow\" />\n                        )}\n                    </Menu.Item>\n                </CanAccess>\n            );\n        });\n    };\n\n    const handleLogout = () => {\n        if (warnWhen) {\n            const confirm = window.confirm(\n                translate(\n                    \"warnWhenUnsavedChanges\",\n                    \"Are you sure you want to leave? You have unsaved changes.\",\n                ),\n            );\n\n            if (confirm) {\n                setWarnWhen(false);\n                mutateLogout();\n            }\n        } else {\n            mutateLogout();\n        }\n    };\n\n    const logout = isExistAuthentication && (\n        <Menu.Item\n            key=\"logout\"\n            onClick={handleLogout}\n            icon={<LogoutOutlined />}\n        >\n            {translate(\"buttons.logout\", \"Logout\")}\n        </Menu.Item>\n    );\n\n    const dashboard = hasDashboard ? (\n        <Menu.Item\n            key=\"dashboard\"\n            style={{\n                fontWeight: selectedKey === \"/\" ? \"bold\" : \"normal\",\n            }}\n            icon={<DashboardOutlined />}\n        >\n            <Link to=\"/\">{translate(\"dashboard.title\", \"Dashboard\")}</Link>\n            {!collapsed && selectedKey === \"/\" && (\n                <div className=\"ant-menu-tree-arrow\" />\n            )}\n        </Menu.Item>\n    ) : null;\n\n    const items = renderTreeView(menuItems, selectedKey);\n\n    const renderSider = () => {\n        if (render) {\n            return render({\n                dashboard,\n                items,\n                logout,\n                collapsed,\n            });\n        }\n        return (\n            <>\n                {dashboard}\n                {items}\n                {logout}\n            </>\n        );\n    };\n\n    const renderMenu = () => {\n        return (\n            <>\n                <Menu\n                    theme=\"dark\"\n                    selectedKeys={selectedKey ? [selectedKey] : []}\n                    defaultOpenKeys={defaultOpenKeys}\n                    mode=\"inline\"\n                    onClick={() => {\n                        setDrawerOpen(false);\n                        if (!breakpoint.lg) {\n                            setCollapsed(true);\n                        }\n                    }}\n                >\n                    {renderSider()}\n                </Menu>\n            </>\n        );\n    };\n\n    const renderDrawerSider = () => {\n        return (\n            <>\n                <Drawer\n                    open={drawerOpen}\n                    onClose={() => setDrawerOpen(false)}\n                    placement=\"left\"\n                    closable={false}\n                    width={200}\n                    bodyStyle={{\n                        padding: 0,\n                    }}\n                    maskClosable={true}\n                >\n                    <Layout>\n                        <Layout.Sider\n                            style={{ height: \"100vh\", overflow: \"hidden\" }}\n                        >\n                            <RenderToTitle collapsed={false} />\n                            {renderMenu()}\n                        </Layout.Sider>\n                    </Layout>\n                </Drawer>\n                <Button\n                    style={drawerButtonStyles}\n                    size=\"large\"\n                    onClick={() => setDrawerOpen(true)}\n                    icon={<BarsOutlined />}\n                ></Button>\n            </>\n        );\n    };\n\n    const renderContent = () => {\n        if (isMobile) {\n            return renderDrawerSider();\n        }\n\n        return (\n            <Layout.Sider\n                collapsible\n                collapsed={collapsed}\n                onCollapse={(collapsed: boolean): void =>\n                    setCollapsed(collapsed)\n                }\n                collapsedWidth={80}\n                breakpoint=\"lg\"\n            >\n                <RenderToTitle collapsed={collapsed} />\n                {renderMenu()}\n            </Layout.Sider>\n        );\n    };\n\n    return (\n        <ConfigProvider\n            theme={{\n                components: {\n                    Menu: {\n                        colorItemBg: \"transparent\",\n                        colorItemText: \"#fff\",\n                        colorItemTextSelected: \"#fff\",\n                        colorItemBgSelected: \"transparent\",\n                        colorItemTextHover: \"#fff\",\n                    },\n                },\n            }}\n        >\n            {renderContent()}\n        </ConfigProvider>\n    );\n};\n","import { CSSProperties } from \"react\";\n\nexport const drawerButtonStyles: CSSProperties = {\n    borderTopLeftRadius: 0,\n    borderBottomLeftRadius: 0,\n    position: \"fixed\",\n    top: 64,\n    zIndex: 999,\n};\n","import { useActiveAuthProvider, useGetIdentity } from \"@refinedev/core\";\nimport { Avatar, Layout as AntdLayout, Space, Typography } from \"antd\";\nimport React from \"react\";\nimport { RefineLayoutHeaderProps } from \"../types\";\nconst { Text } = Typography;\n\nexport const Header: React.FC<RefineLayoutHeaderProps> = () => {\n    const authProvider = useActiveAuthProvider();\n    const { data: user } = useGetIdentity({\n        v3LegacyAuthProviderCompatible: Boolean(authProvider?.isLegacy),\n    });\n\n    const shouldRenderHeader = user && (user.name || user.avatar);\n\n    return shouldRenderHeader ? (\n        <AntdLayout.Header\n            style={{\n                display: \"flex\",\n                justifyContent: \"flex-end\",\n                alignItems: \"center\",\n                padding: \"0px 24px\",\n                height: \"64px\",\n            }}\n        >\n            <Space style={{ marginLeft: \"8px\" }}>\n                {user?.name && (\n                    <Text style={{ color: \"white\" }} strong>\n                        {user.name}\n                    </Text>\n                )}\n                {user?.avatar && <Avatar src={user?.avatar} alt={user?.name} />}\n            </Space>\n        </AntdLayout.Header>\n    ) : null;\n};\n","import React from \"react\";\nimport {\n    TitleProps,\n    useRouterContext,\n    useRouterType,\n    useLink,\n} from \"@refinedev/core\";\n\nexport const Title: React.FC<TitleProps> = ({ collapsed }) => {\n    const routerType = useRouterType();\n    const Link = useLink();\n    const { Link: LegacyLink } = useRouterContext();\n\n    const ActiveLink = routerType === \"legacy\" ? LegacyLink : Link;\n\n    return (\n        <ActiveLink to=\"/\">\n            {collapsed ? (\n                <div\n                    style={{\n                        display: \"flex\",\n                        alignItems: \"center\",\n                        justifyContent: \"center\",\n                    }}\n                >\n                    <img\n                        src=\"https://refine.ams3.cdn.digitaloceanspaces.com/logo/refine-mini.svg\"\n                        alt=\"Refine\"\n                        style={{\n                            margin: \"0 auto\",\n                            padding: \"12px 0\",\n                            maxHeight: \"65.5px\",\n                        }}\n                    />\n                </div>\n            ) : (\n                <img\n                    src=\"https://refine.ams3.cdn.digitaloceanspaces.com/logo/refine.svg\"\n                    alt=\"Refine\"\n                    style={{\n                        width: \"200px\",\n                        padding: \"12px 24px\",\n                    }}\n                />\n            )}\n        </ActiveLink>\n    );\n};\n","import React from \"react\";\nimport { Grid, Layout as AntdLayout } from \"antd\";\n\nimport { ThemedSider as DefaultSider } from \"./sider\";\nimport { ThemedHeader as DefaultHeader } from \"./header\";\nimport { RefineThemedLayoutProps } from \"./types\";\n\n/**\n * @deprecated It is recommended to use the improved `ThemedLayoutV2`. Review migration guidelines. https://refine.dev/docs/api-reference/antd/components/antd-themed-layout/#migrate-themedlayout-to-themedlayoutv2\n */\nexport const ThemedLayout: React.FC<RefineThemedLayoutProps> = ({\n    children,\n    Header,\n    Sider,\n    Title,\n    Footer,\n    OffLayoutArea,\n}) => {\n    const breakpoint = Grid.useBreakpoint();\n    const SiderToRender = Sider ?? DefaultSider;\n    const HeaderToRender = Header ?? DefaultHeader;\n    const isSmall = typeof breakpoint.sm === \"undefined\" ? true : breakpoint.sm;\n\n    return (\n        <AntdLayout style={{ minHeight: \"100vh\" }}>\n            <SiderToRender Title={Title} />\n            <AntdLayout>\n                <HeaderToRender />\n                <AntdLayout.Content>\n                    <div\n                        style={{\n                            minHeight: 360,\n                            padding: isSmall ? 24 : 12,\n                        }}\n                    >\n                        {children}\n                    </div>\n                    {OffLayoutArea && <OffLayoutArea />}\n                </AntdLayout.Content>\n                {Footer && <Footer />}\n            </AntdLayout>\n        </AntdLayout>\n    );\n};\n","import React, { useState } from \"react\";\nimport { Layout, Menu, Grid, Drawer, Button, theme } from \"antd\";\nimport {\n    DashboardOutlined,\n    LogoutOutlined,\n    UnorderedListOutlined,\n    BarsOutlined,\n    LeftOutlined,\n    RightOutlined,\n} from \"@ant-design/icons\";\nimport {\n    useTranslate,\n    useLogout,\n    useTitle,\n    CanAccess,\n    ITreeMenu,\n    useIsExistAuthentication,\n    useRouterContext,\n    useMenu,\n    useRefineContext,\n    useLink,\n    useRouterType,\n    useActiveAuthProvider,\n    pickNotDeprecated,\n    useWarnAboutChange,\n} from \"@refinedev/core\";\n\nimport { drawerButtonStyles } from \"./styles\";\nimport { RefineThemedLayoutSiderProps } from \"../types\";\nimport { ThemedTitle } from \"@components\";\n\nconst { SubMenu } = Menu;\nconst { useToken } = theme;\n\n/**\n * @deprecated It is recommended to use the improved `ThemedLayoutV2`. Review migration guidelines. https://refine.dev/docs/api-reference/antd/components/antd-themed-layout/#migrate-themedlayout-to-themedlayoutv2\n */\nexport const ThemedSider: React.FC<RefineThemedLayoutSiderProps> = ({\n    Title: TitleFromProps,\n    render,\n    meta,\n}) => {\n    const { token } = useToken();\n\n    const [collapsed, setCollapsed] = useState<boolean>(false);\n    const [drawerOpen, setDrawerOpen] = useState<boolean>(false);\n    const isExistAuthentication = useIsExistAuthentication();\n    const routerType = useRouterType();\n    const NewLink = useLink();\n    const { warnWhen, setWarnWhen } = useWarnAboutChange();\n    const { Link: LegacyLink } = useRouterContext();\n    const Link = routerType === \"legacy\" ? LegacyLink : NewLink;\n    const TitleFromContext = useTitle();\n    const translate = useTranslate();\n    const { menuItems, selectedKey, defaultOpenKeys } = useMenu({ meta });\n    const breakpoint = Grid.useBreakpoint();\n    const { hasDashboard } = useRefineContext();\n    const authProvider = useActiveAuthProvider();\n    const { mutate: mutateLogout } = useLogout({\n        v3LegacyAuthProviderCompatible: Boolean(authProvider?.isLegacy),\n    });\n\n    const isMobile =\n        typeof breakpoint.lg === \"undefined\" ? false : !breakpoint.lg;\n\n    const RenderToTitle = TitleFromProps ?? TitleFromContext ?? ThemedTitle;\n\n    const renderTreeView = (tree: ITreeMenu[], selectedKey?: string) => {\n        return tree.map((item: ITreeMenu) => {\n            const {\n                icon,\n                label,\n                route,\n                key,\n                name,\n                children,\n                parentName,\n                meta,\n                options,\n            } = item;\n\n            if (children.length > 0) {\n                return (\n                    <CanAccess\n                        key={item.key}\n                        resource={name.toLowerCase()}\n                        action=\"list\"\n                        params={{\n                            resource: item,\n                        }}\n                    >\n                        <SubMenu\n                            key={item.key}\n                            icon={icon ?? <UnorderedListOutlined />}\n                            title={label}\n                        >\n                            {renderTreeView(children, selectedKey)}\n                        </SubMenu>\n                    </CanAccess>\n                );\n            }\n            const isSelected = key === selectedKey;\n            const isRoute = !(\n                pickNotDeprecated(meta?.parent, options?.parent, parentName) !==\n                    undefined && children.length === 0\n            );\n\n            return (\n                <CanAccess\n                    key={item.key}\n                    resource={name.toLowerCase()}\n                    action=\"list\"\n                    params={{\n                        resource: item,\n                    }}\n                >\n                    <Menu.Item\n                        key={item.key}\n                        icon={icon ?? (isRoute && <UnorderedListOutlined />)}\n                    >\n                        <Link to={route ?? \"\"}>{label}</Link>\n                        {!collapsed && isSelected && (\n                            <div className=\"ant-menu-tree-arrow\" />\n                        )}\n                    </Menu.Item>\n                </CanAccess>\n            );\n        });\n    };\n\n    const handleLogout = () => {\n        if (warnWhen) {\n            const confirm = window.confirm(\n                translate(\n                    \"warnWhenUnsavedChanges\",\n                    \"Are you sure you want to leave? You have unsaved changes.\",\n                ),\n            );\n\n            if (confirm) {\n                setWarnWhen(false);\n                mutateLogout();\n            }\n        } else {\n            mutateLogout();\n        }\n    };\n\n    const logout = isExistAuthentication && (\n        <Menu.Item\n            key=\"logout\"\n            onClick={() => handleLogout()}\n            icon={<LogoutOutlined />}\n        >\n            {translate(\"buttons.logout\", \"Logout\")}\n        </Menu.Item>\n    );\n\n    const dashboard = hasDashboard ? (\n        <Menu.Item key=\"dashboard\" icon={<DashboardOutlined />}>\n            <Link to=\"/\">{translate(\"dashboard.title\", \"Dashboard\")}</Link>\n            {!collapsed && selectedKey === \"/\" && (\n                <div className=\"ant-menu-tree-arrow\" />\n            )}\n        </Menu.Item>\n    ) : null;\n\n    const items = renderTreeView(menuItems, selectedKey);\n\n    const renderSider = () => {\n        if (render) {\n            return render({\n                dashboard,\n                items,\n                logout,\n                collapsed,\n            });\n        }\n        return (\n            <>\n                {dashboard}\n                {items}\n                {logout}\n            </>\n        );\n    };\n\n    const renderMenu = () => {\n        return (\n            <>\n                <Menu\n                    selectedKeys={selectedKey ? [selectedKey] : []}\n                    defaultOpenKeys={defaultOpenKeys}\n                    mode=\"inline\"\n                    style={{\n                        marginTop: \"8px\",\n                        border: \"none\",\n                    }}\n                    onClick={() => {\n                        setDrawerOpen(false);\n                        if (!breakpoint.lg) {\n                            setCollapsed(true);\n                        }\n                    }}\n                >\n                    {renderSider()}\n                </Menu>\n            </>\n        );\n    };\n\n    const renderDrawerSider = () => {\n        return (\n            <>\n                <Drawer\n                    open={drawerOpen}\n                    onClose={() => setDrawerOpen(false)}\n                    placement=\"left\"\n                    closable={false}\n                    width={200}\n                    bodyStyle={{\n                        padding: 0,\n                    }}\n                    maskClosable={true}\n                >\n                    <Layout>\n                        <Layout.Sider\n                            style={{\n                                height: \"100vh\",\n                                overflow: \"hidden\",\n                                backgroundColor: token.colorBgContainer,\n                                borderRight: `1px solid ${token.colorBgElevated}`,\n                            }}\n                        >\n                            <div\n                                style={{\n                                    width: \"200px\",\n                                    padding: \"0 16px\",\n                                    display: \"flex\",\n                                    justifyContent: \"flex-start\",\n                                    alignItems: \"center\",\n                                    height: \"64px\",\n                                    backgroundColor: token.colorBgElevated,\n                                }}\n                            >\n                                <RenderToTitle collapsed={false} />\n                            </div>\n                            {renderMenu()}\n                        </Layout.Sider>\n                    </Layout>\n                </Drawer>\n                <Button\n                    style={drawerButtonStyles}\n                    size=\"large\"\n                    onClick={() => setDrawerOpen(true)}\n                    icon={<BarsOutlined />}\n                ></Button>\n            </>\n        );\n    };\n\n    if (isMobile) {\n        return renderDrawerSider();\n    }\n\n    return (\n        <Layout.Sider\n            style={{\n                backgroundColor: token.colorBgContainer,\n                borderRight: `1px solid ${token.colorBgElevated}`,\n            }}\n            collapsible\n            collapsed={collapsed}\n            onCollapse={(collapsed) => setCollapsed(collapsed)}\n            collapsedWidth={80}\n            breakpoint=\"lg\"\n            trigger={\n                <Button\n                    type=\"text\"\n                    style={{\n                        borderRadius: 0,\n                        height: \"100%\",\n                        width: \"100%\",\n                        backgroundColor: token.colorBgElevated,\n                    }}\n                >\n                    {collapsed ? (\n                        <RightOutlined\n                            style={{\n                                color: token.colorPrimary,\n                            }}\n                        />\n                    ) : (\n                        <LeftOutlined\n                            style={{\n                                color: token.colorPrimary,\n                            }}\n                        />\n                    )}\n                </Button>\n            }\n        >\n            <div\n                style={{\n                    width: collapsed ? \"80px\" : \"200px\",\n                    padding: collapsed ? \"0\" : \"0 16px\",\n                    display: \"flex\",\n                    justifyContent: collapsed ? \"center\" : \"flex-start\",\n                    alignItems: \"center\",\n                    height: \"64px\",\n                    backgroundColor: token.colorBgElevated,\n                    fontSize: \"14px\",\n                }}\n            >\n                <RenderToTitle collapsed={collapsed} />\n            </div>\n            {renderMenu()}\n        </Layout.Sider>\n    );\n};\n","import { CSSProperties } from \"react\";\n\nexport const drawerButtonStyles: CSSProperties = {\n    borderTopLeftRadius: 0,\n    borderBottomLeftRadius: 0,\n    position: \"fixed\",\n    top: 64,\n    zIndex: 999,\n};\n","import React from \"react\";\nimport { Layout as AntdLayout, Typography, Avatar, Space, theme } from \"antd\";\nimport { useActiveAuthProvider, useGetIdentity } from \"@refinedev/core\";\nimport { RefineThemedLayoutHeaderProps } from \"../types\";\n\nconst { Text } = Typography;\nconst { useToken } = theme;\n\n/**\n * @deprecated It is recommended to use the improved `ThemedLayoutV2`. Review migration guidelines. https://refine.dev/docs/api-reference/antd/components/antd-themed-layout/#migrate-themedlayout-to-themedlayoutv2\n */\nexport const ThemedHeader: React.FC<RefineThemedLayoutHeaderProps> = () => {\n    const { token } = useToken();\n\n    const authProvider = useActiveAuthProvider();\n    const { data: user } = useGetIdentity({\n        v3LegacyAuthProviderCompatible: Boolean(authProvider?.isLegacy),\n    });\n\n    const shouldRenderHeader = user && (user.name || user.avatar);\n\n    if (!shouldRenderHeader) {\n        return null;\n    }\n\n    return (\n        <AntdLayout.Header\n            style={{\n                backgroundColor: token.colorBgElevated,\n                display: \"flex\",\n                justifyContent: \"flex-end\",\n                alignItems: \"center\",\n                padding: \"0px 24px\",\n                height: \"64px\",\n            }}\n        >\n            <Space>\n                <Space size=\"middle\">\n                    {user?.name && <Text strong>{user.name}</Text>}\n                    {user?.avatar && (\n                        <Avatar src={user?.avatar} alt={user?.name} />\n                    )}\n                </Space>\n            </Space>\n        </AntdLayout.Header>\n    );\n};\n","import React from \"react\";\nimport { useRouterContext, useRouterType, useLink } from \"@refinedev/core\";\nimport { Typography, theme, Space } from \"antd\";\nimport { RefineLayoutThemedTitleProps } from \"../types\";\n\nconst { useToken } = theme;\n\nconst defaultText = \"refine Project\";\n\nconst defaultIcon = (\n    <svg\n        width=\"24\"\n        height=\"24\"\n        viewBox=\"0 0 24 24\"\n        fill=\"none\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        data-testid=\"refine-logo\"\n    >\n        <path\n            d=\"M12 9C13.6569 9 15 7.65685 15 6C15 4.34315 13.6569 3 12 3C10.3431 3 9 4.34315 9 6C9 7.65685 10.3431 9 12 9Z\"\n            fill=\"currentColor\"\n        />\n        <path\n            fillRule=\"evenodd\"\n            clipRule=\"evenodd\"\n            d=\"M24 12C24 18.6274 18.6274 24 12 24C5.37258 24 0 18.6274 0 12C0 5.37258 5.37258 0 12 0C18.6274 0 24 5.37258 24 12ZM8 6C8 3.79086 9.79086 2 12 2C14.2091 2 16 3.79086 16 6V18C16 20.2091 14.2091 22 12 22C9.79086 22 8 20.2091 8 18V6Z\"\n            fill=\"currentColor\"\n        />\n    </svg>\n);\n\n/**\n * @deprecated It is recommended to use the improved `ThemedLayoutV2`. Review migration guidelines. https://refine.dev/docs/api-reference/antd/components/antd-themed-layout/#migrate-themedlayout-to-themedlayoutv2\n */\nexport const ThemedTitle: React.FC<RefineLayoutThemedTitleProps> = ({\n    collapsed,\n    icon = defaultIcon,\n    text = defaultText,\n    wrapperStyles,\n}) => {\n    const { token } = useToken();\n    const routerType = useRouterType();\n    const Link = useLink();\n    const { Link: LegacyLink } = useRouterContext();\n\n    const ActiveLink = routerType === \"legacy\" ? LegacyLink : Link;\n\n    return (\n        <ActiveLink\n            to=\"/\"\n            style={{\n                display: \"inline-block\",\n                textDecoration: \"none\",\n            }}\n        >\n            <Space\n                style={{\n                    display: \"flex\",\n                    alignItems: \"center\",\n                    fontSize: \"inherit\",\n                    ...wrapperStyles,\n                }}\n            >\n                <div\n                    style={{\n                        height: \"24px\",\n                        width: \"24px\",\n                        color: token.colorPrimary,\n                    }}\n                >\n                    {icon}\n                </div>\n\n                {!collapsed && (\n                    <Typography.Title\n                        style={{\n                            fontSize: \"inherit\",\n                            marginBottom: 0,\n                            fontWeight: 700,\n                        }}\n                    >\n                        {text}\n                    </Typography.Title>\n                )}\n            </Space>\n        </ActiveLink>\n    );\n};\n","import React, { useMemo } from \"react\";\nimport { Grid, Layout as AntdLayout } from \"antd\";\n\nimport { ThemedSiderV2 as DefaultSider } from \"./sider\";\nimport { ThemedHeaderV2 as DefaultHeader } from \"./header\";\nimport { RefineThemedLayoutV2Props } from \"./types\";\nimport { ThemedLayoutContextProvider } from \"@contexts\";\n\nexport const ThemedLayoutV2: React.FC<RefineThemedLayoutV2Props> = ({\n    children,\n    Header,\n    Sider,\n    Title,\n    Footer,\n    OffLayoutArea,\n    initialSiderCollapsed,\n}) => {\n    const breakpoint = Grid.useBreakpoint();\n    const SiderToRender = Sider ?? DefaultSider;\n    const HeaderToRender = Header ?? DefaultHeader;\n    const isSmall = typeof breakpoint.sm === \"undefined\" ? true : breakpoint.sm;\n    const hasSider = !!SiderToRender({ Title });\n\n    return (\n        <ThemedLayoutContextProvider\n            initialSiderCollapsed={initialSiderCollapsed}\n        >\n            <AntdLayout style={{ minHeight: \"100vh\" }} hasSider={hasSider}>\n                <SiderToRender Title={Title} />\n                <AntdLayout>\n                    <HeaderToRender />\n                    <AntdLayout.Content>\n                        <div\n                            style={{\n                                minHeight: 360,\n                                padding: isSmall ? 24 : 12,\n                            }}\n                        >\n                            {children}\n                        </div>\n                        {OffLayoutArea && <OffLayoutArea />}\n                    </AntdLayout.Content>\n                    {Footer && <Footer />}\n                </AntdLayout>\n            </AntdLayout>\n        </ThemedLayoutContextProvider>\n    );\n};\n","import React from \"react\";\nimport { Layout, Menu, Grid, Drawer, Button, theme } from \"antd\";\nimport {\n    DashboardOutlined,\n    LogoutOutlined,\n    UnorderedListOutlined,\n    BarsOutlined,\n    LeftOutlined,\n    RightOutlined,\n} from \"@ant-design/icons\";\nimport {\n    useTranslate,\n    useLogout,\n    useTitle,\n    CanAccess,\n    ITreeMenu,\n    useIsExistAuthentication,\n    useRouterContext,\n    useMenu,\n    useRefineContext,\n    useLink,\n    useRouterType,\n    useActiveAuthProvider,\n    pickNotDeprecated,\n    useWarnAboutChange,\n} from \"@refinedev/core\";\n\nimport { drawerButtonStyles } from \"./styles\";\nimport { RefineThemedLayoutV2SiderProps } from \"../types\";\nimport { ThemedTitleV2 } from \"@components\";\nimport { useThemedLayoutContext } from \"@hooks\";\n\nconst { SubMenu } = Menu;\nconst { useToken } = theme;\n\nexport const ThemedSiderV2: React.FC<RefineThemedLayoutV2SiderProps> = ({\n    Title: TitleFromProps,\n    render,\n    meta,\n    fixed,\n    activeItemDisabled = false,\n}) => {\n    const { token } = useToken();\n    const {\n        siderCollapsed,\n        setSiderCollapsed,\n        mobileSiderOpen,\n        setMobileSiderOpen,\n    } = useThemedLayoutContext();\n\n    const isExistAuthentication = useIsExistAuthentication();\n    const routerType = useRouterType();\n    const NewLink = useLink();\n    const { warnWhen, setWarnWhen } = useWarnAboutChange();\n    const { Link: LegacyLink } = useRouterContext();\n    const Link = routerType === \"legacy\" ? LegacyLink : NewLink;\n    const TitleFromContext = useTitle();\n    const translate = useTranslate();\n    const { menuItems, selectedKey, defaultOpenKeys } = useMenu({ meta });\n    const breakpoint = Grid.useBreakpoint();\n    const { hasDashboard } = useRefineContext();\n    const authProvider = useActiveAuthProvider();\n    const { mutate: mutateLogout } = useLogout({\n        v3LegacyAuthProviderCompatible: Boolean(authProvider?.isLegacy),\n    });\n\n    const isMobile =\n        typeof breakpoint.lg === \"undefined\" ? false : !breakpoint.lg;\n\n    const RenderToTitle = TitleFromProps ?? TitleFromContext ?? ThemedTitleV2;\n\n    const renderTreeView = (tree: ITreeMenu[], selectedKey?: string) => {\n        return tree.map((item: ITreeMenu) => {\n            const {\n                icon,\n                label,\n                route,\n                key,\n                name,\n                children,\n                parentName,\n                meta,\n                options,\n            } = item;\n\n            if (children.length > 0) {\n                return (\n                    <CanAccess\n                        key={item.key}\n                        resource={name.toLowerCase()}\n                        action=\"list\"\n                        params={{\n                            resource: item,\n                        }}\n                    >\n                        <SubMenu\n                            key={item.key}\n                            icon={icon ?? <UnorderedListOutlined />}\n                            title={label}\n                        >\n                            {renderTreeView(children, selectedKey)}\n                        </SubMenu>\n                    </CanAccess>\n                );\n            }\n            const isSelected = key === selectedKey;\n            const isRoute = !(\n                pickNotDeprecated(meta?.parent, options?.parent, parentName) !==\n                    undefined && children.length === 0\n            );\n\n            const linkStyle: React.CSSProperties =\n                activeItemDisabled && isSelected\n                    ? { pointerEvents: \"none\" }\n                    : {};\n\n            return (\n                <CanAccess\n                    key={item.key}\n                    resource={name.toLowerCase()}\n                    action=\"list\"\n                    params={{\n                        resource: item,\n                    }}\n                >\n                    <Menu.Item\n                        key={item.key}\n                        icon={icon ?? (isRoute && <UnorderedListOutlined />)}\n                        style={linkStyle}\n                    >\n                        <Link to={route ?? \"\"} style={linkStyle}>\n                            {label}\n                        </Link>\n                        {!siderCollapsed && isSelected && (\n                            <div className=\"ant-menu-tree-arrow\" />\n                        )}\n                    </Menu.Item>\n                </CanAccess>\n            );\n        });\n    };\n\n    const handleLogout = () => {\n        if (warnWhen) {\n            const confirm = window.confirm(\n                translate(\n                    \"warnWhenUnsavedChanges\",\n                    \"Are you sure you want to leave? You have unsaved changes.\",\n                ),\n            );\n\n            if (confirm) {\n                setWarnWhen(false);\n                mutateLogout();\n            }\n        } else {\n            mutateLogout();\n        }\n    };\n\n    const logout = isExistAuthentication && (\n        <Menu.Item\n            key=\"logout\"\n            onClick={() => handleLogout()}\n            icon={<LogoutOutlined />}\n        >\n            {translate(\"buttons.logout\", \"Logout\")}\n        </Menu.Item>\n    );\n\n    const dashboard = hasDashboard ? (\n        <Menu.Item key=\"dashboard\" icon={<DashboardOutlined />}>\n            <Link to=\"/\">{translate(\"dashboard.title\", \"Dashboard\")}</Link>\n            {!siderCollapsed && selectedKey === \"/\" && (\n                <div className=\"ant-menu-tree-arrow\" />\n            )}\n        </Menu.Item>\n    ) : null;\n\n    const items = renderTreeView(menuItems, selectedKey);\n\n    const renderSider = () => {\n        if (render) {\n            return render({\n                dashboard,\n                items,\n                logout,\n                collapsed: siderCollapsed,\n            });\n        }\n        return (\n            <>\n                {dashboard}\n                {items}\n                {logout}\n            </>\n        );\n    };\n\n    const renderMenu = () => {\n        return (\n            <Menu\n                selectedKeys={selectedKey ? [selectedKey] : []}\n                defaultOpenKeys={defaultOpenKeys}\n                mode=\"inline\"\n                style={{\n                    paddingTop: \"8px\",\n                    border: \"none\",\n                    overflow: \"auto\",\n                    height: \"calc(100% - 72px)\",\n                }}\n                onClick={() => {\n                    setMobileSiderOpen(false);\n                }}\n            >\n                {renderSider()}\n            </Menu>\n        );\n    };\n\n    const renderDrawerSider = () => {\n        return (\n            <>\n                <Drawer\n                    open={mobileSiderOpen}\n                    onClose={() => setMobileSiderOpen(false)}\n                    placement=\"left\"\n                    closable={false}\n                    width={200}\n                    bodyStyle={{\n                        padding: 0,\n                    }}\n                    maskClosable={true}\n                >\n                    <Layout>\n                        <Layout.Sider\n                            style={{\n                                height: \"100vh\",\n                                backgroundColor: token.colorBgContainer,\n                                borderRight: `1px solid ${token.colorBgElevated}`,\n                            }}\n                        >\n                            <div\n                                style={{\n                                    width: \"200px\",\n                                    padding: \"0 16px\",\n                                    display: \"flex\",\n                                    justifyContent: \"flex-start\",\n                                    alignItems: \"center\",\n                                    height: \"64px\",\n                                    backgroundColor: token.colorBgElevated,\n                                }}\n                            >\n                                <RenderToTitle collapsed={false} />\n                            </div>\n                            {renderMenu()}\n                        </Layout.Sider>\n                    </Layout>\n                </Drawer>\n                <Button\n                    style={drawerButtonStyles}\n                    size=\"large\"\n                    onClick={() => setMobileSiderOpen(true)}\n                    icon={<BarsOutlined />}\n                ></Button>\n            </>\n        );\n    };\n\n    if (isMobile) {\n        return renderDrawerSider();\n    }\n\n    const siderStyles: React.CSSProperties = {\n        backgroundColor: token.colorBgContainer,\n        borderRight: `1px solid ${token.colorBgElevated}`,\n    };\n\n    if (fixed) {\n        siderStyles.position = \"fixed\";\n        siderStyles.top = 0;\n        siderStyles.height = \"100vh\";\n        siderStyles.zIndex = 999;\n    }\n\n    return (\n        <>\n            {fixed && (\n                <div\n                    style={{\n                        width: siderCollapsed ? \"80px\" : \"200px\",\n                        transition: \"all 0.2s\",\n                    }}\n                />\n            )}\n            <Layout.Sider\n                style={siderStyles}\n                collapsible\n                collapsed={siderCollapsed}\n                onCollapse={(collapsed, type) => {\n                    if (type === \"clickTrigger\") {\n                        setSiderCollapsed(collapsed);\n                    }\n                }}\n                collapsedWidth={80}\n                breakpoint=\"lg\"\n                trigger={\n                    <Button\n                        type=\"text\"\n                        style={{\n                            borderRadius: 0,\n                            height: \"100%\",\n                            width: \"100%\",\n                            backgroundColor: token.colorBgElevated,\n                        }}\n                    >\n                        {siderCollapsed ? (\n                            <RightOutlined\n                                style={{\n                                    color: token.colorPrimary,\n                                }}\n                            />\n                        ) : (\n                            <LeftOutlined\n                                style={{\n                                    color: token.colorPrimary,\n                                }}\n                            />\n                        )}\n                    </Button>\n                }\n            >\n                <div\n                    style={{\n                        width: siderCollapsed ? \"80px\" : \"200px\",\n                        padding: siderCollapsed ? \"0\" : \"0 16px\",\n                        display: \"flex\",\n                        justifyContent: siderCollapsed\n                            ? \"center\"\n                            : \"flex-start\",\n                        alignItems: \"center\",\n                        height: \"64px\",\n                        backgroundColor: token.colorBgElevated,\n                        fontSize: \"14px\",\n                    }}\n                >\n                    <RenderToTitle collapsed={siderCollapsed} />\n                </div>\n                {renderMenu()}\n            </Layout.Sider>\n        </>\n    );\n};\n","import { CSSProperties } from \"react\";\n\nexport const drawerButtonStyles: CSSProperties = {\n    borderTopLeftRadius: 0,\n    borderBottomLeftRadius: 0,\n    position: \"fixed\",\n    top: 64,\n    zIndex: 999,\n};\n","import React from \"react\";\nimport { Layout as AntdLayout, Typography, Avatar, Space, theme } from \"antd\";\nimport {\n    pickNotDeprecated,\n    useActiveAuthProvider,\n    useGetIdentity,\n} from \"@refinedev/core\";\nimport { RefineThemedLayoutV2HeaderProps } from \"../types\";\n\nconst { Text } = Typography;\nconst { useToken } = theme;\n\nexport const ThemedHeaderV2: React.FC<RefineThemedLayoutV2HeaderProps> = ({\n    isSticky,\n    sticky,\n}) => {\n    const { token } = useToken();\n\n    const authProvider = useActiveAuthProvider();\n    const { data: user } = useGetIdentity({\n        v3LegacyAuthProviderCompatible: Boolean(authProvider?.isLegacy),\n    });\n\n    const shouldRenderHeader = user && (user.name || user.avatar);\n\n    if (!shouldRenderHeader) {\n        return null;\n    }\n\n    const headerStyles: React.CSSProperties = {\n        backgroundColor: token.colorBgElevated,\n        display: \"flex\",\n        justifyContent: \"flex-end\",\n        alignItems: \"center\",\n        padding: \"0px 24px\",\n        height: \"64px\",\n    };\n\n    if (pickNotDeprecated(sticky, isSticky)) {\n        headerStyles.position = \"sticky\";\n        headerStyles.top = 0;\n        headerStyles.zIndex = 1;\n    }\n\n    return (\n        <AntdLayout.Header style={headerStyles}>\n            <Space>\n                <Space size=\"middle\">\n                    {user?.name && <Text strong>{user.name}</Text>}\n                    {user?.avatar && (\n                        <Avatar src={user?.avatar} alt={user?.name} />\n                    )}\n                </Space>\n            </Space>\n        </AntdLayout.Header>\n    );\n};\n","import React from \"react\";\nimport { useRouterContext, useRouterType, useLink } from \"@refinedev/core\";\nimport { Typography, theme, Space } from \"antd\";\nimport { RefineLayoutThemedTitleProps } from \"../types\";\n\nconst { useToken } = theme;\n\nconst defaultText = \"refine Project\";\n\nconst defaultIcon = (\n    <svg\n        width=\"24\"\n        height=\"24\"\n        viewBox=\"0 0 24 24\"\n        fill=\"none\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        data-testid=\"refine-logo\"\n    >\n        <path\n            d=\"M12 9C13.6569 9 15 7.65685 15 6C15 4.34315 13.6569 3 12 3C10.3431 3 9 4.34315 9 6C9 7.65685 10.3431 9 12 9Z\"\n            fill=\"currentColor\"\n        />\n        <path\n            fillRule=\"evenodd\"\n            clipRule=\"evenodd\"\n            d=\"M24 12C24 18.6274 18.6274 24 12 24C5.37258 24 0 18.6274 0 12C0 5.37258 5.37258 0 12 0C18.6274 0 24 5.37258 24 12ZM8 6C8 3.79086 9.79086 2 12 2C14.2091 2 16 3.79086 16 6V18C16 20.2091 14.2091 22 12 22C9.79086 22 8 20.2091 8 18V6Z\"\n            fill=\"currentColor\"\n        />\n    </svg>\n);\n\nexport const ThemedTitleV2: React.FC<RefineLayoutThemedTitleProps> = ({\n    collapsed,\n    icon = defaultIcon,\n    text = defaultText,\n    wrapperStyles,\n}) => {\n    const { token } = useToken();\n    const routerType = useRouterType();\n    const Link = useLink();\n    const { Link: LegacyLink } = useRouterContext();\n\n    const ActiveLink = routerType === \"legacy\" ? LegacyLink : Link;\n\n    return (\n        <ActiveLink\n            to=\"/\"\n            style={{\n                display: \"inline-block\",\n                textDecoration: \"none\",\n            }}\n        >\n            <Space\n                style={{\n                    display: \"flex\",\n                    alignItems: \"center\",\n                    fontSize: \"inherit\",\n                    ...wrapperStyles,\n                }}\n            >\n                <div\n                    style={{\n                        height: \"24px\",\n                        width: \"24px\",\n                        color: token.colorPrimary,\n                    }}\n                >\n                    {icon}\n                </div>\n\n                {!collapsed && (\n                    <Typography.Title\n                        style={{\n                            fontSize: \"inherit\",\n                            marginBottom: 0,\n                            fontWeight: 700,\n                        }}\n                    >\n                        {text}\n                    </Typography.Title>\n                )}\n            </Space>\n        </ActiveLink>\n    );\n};\n","import React, { useContext } from \"react\";\nimport { Button } from \"antd\";\nimport { PlusSquareOutlined } from \"@ant-design/icons\";\nimport {\n    useNavigation,\n    useTranslate,\n    useCan,\n    useResource,\n    useRouterContext,\n    useRouterType,\n    useLink,\n    AccessControlContext,\n} from \"@refinedev/core\";\nimport {\n    RefineButtonClassNames,\n    RefineButtonTestIds,\n} from \"@refinedev/ui-types\";\n\nimport { CreateButtonProps } from \"../types\";\n\n/**\n * <CreateButton> uses Ant Design's {@link https://ant.design/components/button/ `<Button> component`}.\n * It uses the {@link https://refine.dev/docs/api-reference/core/hooks/navigation/useNavigation#create `create`} method from {@link https://refine.dev/docs/api-reference/core/hooks/navigation/useNavigation `useNavigation`} under the hood.\n * It can be useful to redirect the app to the create page route of resource}.\n *\n * @see {@link https://refine.dev/docs/api-reference/antd/components/buttons/create-button} for more details.\n */\nexport const CreateButton: React.FC<CreateButtonProps> = ({\n    resource: resourceNameFromProps,\n    resourceNameOrRouteName: propResourceNameOrRouteName,\n    hideText = false,\n    accessControl,\n    meta,\n    children,\n    onClick,\n    ...rest\n}) => {\n    const accessControlContext = useContext(AccessControlContext);\n\n    const accessControlEnabled =\n        accessControl?.enabled ??\n        accessControlContext.options.buttons.enableAccessControl;\n\n    const hideIfUnauthorized =\n        accessControl?.hideIfUnauthorized ??\n        accessControlContext.options.buttons.hideIfUnauthorized;\n\n    const translate = useTranslate();\n    const routerType = useRouterType();\n    const Link = useLink();\n    const { Link: LegacyLink } = useRouterContext();\n\n    const ActiveLink = routerType === \"legacy\" ? LegacyLink : Link;\n\n    const { createUrl: generateCreateUrl } = useNavigation();\n\n    const { resource } = useResource(\n        resourceNameFromProps ?? propResourceNameOrRouteName,\n    );\n\n    const { data } = useCan({\n        resource: resource?.name,\n        action: \"create\",\n        queryOptions: {\n            enabled: accessControlEnabled,\n        },\n        params: {\n            resource,\n        },\n    });\n\n    const createButtonDisabledTitle = () => {\n        if (data?.can) return \"\";\n        else if (data?.reason) return data.reason;\n        else\n            return translate(\n                \"buttons.notAccessTitle\",\n                \"You don't have permission to access\",\n            );\n    };\n\n    const createUrl = resource ? generateCreateUrl(resource, meta) : \"\";\n\n    if (accessControlEnabled && hideIfUnauthorized && !data?.can) {\n        return null;\n    }\n\n    return (\n        <ActiveLink\n            to={createUrl}\n            replace={false}\n            onClick={(e: React.PointerEvent<HTMLButtonElement>) => {\n                if (data?.can === false) {\n                    e.preventDefault();\n                    return;\n                }\n                if (onClick) {\n                    e.preventDefault();\n                    onClick(e);\n                }\n            }}\n        >\n            <Button\n                icon={<PlusSquareOutlined />}\n                disabled={data?.can === false}\n                title={createButtonDisabledTitle()}\n                data-testid={RefineButtonTestIds.CreateButton}\n                className={RefineButtonClassNames.CreateButton}\n                type=\"primary\"\n                {...rest}\n            >\n                {!hideText &&\n                    (children ?? translate(\"buttons.create\", \"Create\"))}\n            </Button>\n        </ActiveLink>\n    );\n};\n","import React, { useContext } from \"react\";\nimport { Button } from \"antd\";\nimport { EditOutlined } from \"@ant-design/icons\";\nimport {\n    useCan,\n    useNavigation,\n    useTranslate,\n    useResource,\n    useRouterContext,\n    useRouterType,\n    useLink,\n    AccessControlContext,\n} from \"@refinedev/core\";\nimport {\n    RefineButtonClassNames,\n    RefineButtonTestIds,\n} from \"@refinedev/ui-types\";\n\nimport { EditButtonProps } from \"../types\";\n\n/**\n * `<EditButton>` uses Ant Design's {@link https://ant.design/components/button/ `<Button>`} component.\n * It uses the {@link https://refine.dev/docs/api-reference/core/hooks/navigation/useNavigation#edit `edit`} method from {@link https://refine.dev/docs/api-reference/core/hooks/navigation/useNavigation `useNavigation`} under the hood.\n * It can be useful when redirecting the app to the edit page with the record id route of resource}.\n *\n * @see {@link https://refine.dev/docs/api-reference/antd/components/buttons/edit-button} for more details.\n */\nexport const EditButton: React.FC<EditButtonProps> = ({\n    resource: resourceNameFromProps,\n    resourceNameOrRouteName: propResourceNameOrRouteName,\n    recordItemId,\n    hideText = false,\n    accessControl,\n    meta,\n    children,\n    onClick,\n    ...rest\n}) => {\n    const accessControlContext = useContext(AccessControlContext);\n\n    const accessControlEnabled =\n        accessControl?.enabled ??\n        accessControlContext.options.buttons.enableAccessControl;\n\n    const hideIfUnauthorized =\n        accessControl?.hideIfUnauthorized ??\n        accessControlContext.options.buttons.hideIfUnauthorized;\n\n    const translate = useTranslate();\n\n    const routerType = useRouterType();\n    const Link = useLink();\n    const { Link: LegacyLink } = useRouterContext();\n\n    const ActiveLink = routerType === \"legacy\" ? LegacyLink : Link;\n\n    const { editUrl: generateEditUrl } = useNavigation();\n\n    const { id, resource } = useResource(\n        resourceNameFromProps ?? propResourceNameOrRouteName,\n    );\n\n    const { data } = useCan({\n        resource: resource?.name,\n        action: \"edit\",\n        params: { id: recordItemId ?? id, resource },\n        queryOptions: {\n            enabled: accessControlEnabled,\n        },\n    });\n\n    const createButtonDisabledTitle = () => {\n        if (data?.can) return \"\";\n        else if (data?.reason) return data.reason;\n        else\n            return translate(\n                \"buttons.notAccessTitle\",\n                \"You don't have permission to access\",\n            );\n    };\n\n    const editUrl =\n        resource && (recordItemId ?? id)\n            ? generateEditUrl(resource, recordItemId! ?? id!, meta)\n            : \"\";\n\n    if (accessControlEnabled && hideIfUnauthorized && !data?.can) {\n        return null;\n    }\n\n    return (\n        <ActiveLink\n            to={editUrl}\n            replace={false}\n            onClick={(e: React.PointerEvent<HTMLButtonElement>) => {\n                if (data?.can === false) {\n                    e.preventDefault();\n                    return;\n                }\n                if (onClick) {\n                    e.preventDefault();\n                    onClick(e);\n                }\n            }}\n        >\n            <Button\n                icon={<EditOutlined />}\n                disabled={data?.can === false}\n                title={createButtonDisabledTitle()}\n                data-testid={RefineButtonTestIds.EditButton}\n                className={RefineButtonClassNames.EditButton}\n                {...rest}\n            >\n                {!hideText && (children ?? translate(\"buttons.edit\", \"Edit\"))}\n            </Button>\n        </ActiveLink>\n    );\n};\n","import React, { useContext } from \"react\";\nimport { Button, Popconfirm } from \"antd\";\nimport { DeleteOutlined } from \"@ant-design/icons\";\nimport {\n    useDelete,\n    useTranslate,\n    useMutationMode,\n    useCan,\n    useResource,\n    pickNotDeprecated,\n    useWarnAboutChange,\n    AccessControlContext,\n} from \"@refinedev/core\";\nimport {\n    RefineButtonClassNames,\n    RefineButtonTestIds,\n} from \"@refinedev/ui-types\";\n\nimport { DeleteButtonProps } from \"../types\";\n\n/**\n * `<DeleteButton>` uses Ant Design's {@link https://ant.design/components/button/ `<Button>`} and {@link https://ant.design/components/button/ `<Popconfirm>`} components.\n * When you try to delete something, a pop-up shows up and asks for confirmation. When confirmed it executes the `useDelete` method provided by your `dataProvider`.\n *\n * @see {@link https://refine.dev/docs/api-reference/antd/components/buttons/delete-button} for more details.\n */\nexport const DeleteButton: React.FC<DeleteButtonProps> = ({\n    resource: resourceNameFromProps,\n    resourceNameOrRouteName: propResourceNameOrRouteName,\n    recordItemId,\n    onSuccess,\n    mutationMode: mutationModeProp,\n    children,\n    successNotification,\n    errorNotification,\n    hideText = false,\n    accessControl,\n    metaData,\n    meta,\n    dataProviderName,\n    confirmTitle,\n    confirmOkText,\n    confirmCancelText,\n    invalidates,\n    ...rest\n}) => {\n    const accessControlContext = useContext(AccessControlContext);\n\n    const accessControlEnabled =\n        accessControl?.enabled ??\n        accessControlContext.options.buttons.enableAccessControl;\n\n    const hideIfUnauthorized =\n        accessControl?.hideIfUnauthorized ??\n        accessControlContext.options.buttons.hideIfUnauthorized;\n\n    const translate = useTranslate();\n\n    const { id, resource, identifier } = useResource(\n        resourceNameFromProps ?? propResourceNameOrRouteName,\n    );\n\n    const { mutationMode: mutationModeContext } = useMutationMode();\n\n    const mutationMode = mutationModeProp ?? mutationModeContext;\n\n    const { mutate, isLoading, variables } = useDelete();\n\n    const { data } = useCan({\n        resource: resource?.name,\n        action: \"delete\",\n        params: { id: recordItemId ?? id, resource },\n        queryOptions: {\n            enabled: accessControlEnabled,\n        },\n    });\n\n    const disabledTitle = () => {\n        if (data?.can) return \"\";\n        else if (data?.reason) return data.reason;\n        else\n            return translate(\n                \"buttons.notAccessTitle\",\n                \"You don't have permission to access\",\n            );\n    };\n\n    const { setWarnWhen } = useWarnAboutChange();\n\n    if (accessControlEnabled && hideIfUnauthorized && !data?.can) {\n        return null;\n    }\n\n    return (\n        <Popconfirm\n            key=\"delete\"\n            okText={confirmOkText ?? translate(\"buttons.delete\", \"Delete\")}\n            cancelText={\n                confirmCancelText ?? translate(\"buttons.cancel\", \"Cancel\")\n            }\n            okType=\"danger\"\n            title={\n                confirmTitle ?? translate(\"buttons.confirm\", \"Are you sure?\")\n            }\n            okButtonProps={{ disabled: isLoading }}\n            onConfirm={(): void => {\n                if ((recordItemId ?? id) && identifier) {\n                    setWarnWhen(false);\n                    mutate(\n                        {\n                            id: recordItemId ?? id ?? \"\",\n                            resource: identifier,\n                            mutationMode,\n                            successNotification,\n                            errorNotification,\n                            meta: pickNotDeprecated(meta, metaData),\n                            metaData: pickNotDeprecated(meta, metaData),\n                            dataProviderName,\n                            invalidates,\n                        },\n                        {\n                            onSuccess: (value) => {\n                                onSuccess && onSuccess(value);\n                            },\n                        },\n                    );\n                }\n            }}\n            disabled={\n                typeof rest?.disabled !== \"undefined\"\n                    ? rest.disabled\n                    : data?.can === false\n            }\n        >\n            <Button\n                danger\n                loading={(recordItemId ?? id) === variables?.id && isLoading}\n                icon={<DeleteOutlined />}\n                title={disabledTitle()}\n                disabled={data?.can === false}\n                data-testid={RefineButtonTestIds.DeleteButton}\n                className={RefineButtonClassNames.DeleteButton}\n                {...rest}\n            >\n                {!hideText &&\n                    (children ?? translate(\"buttons.delete\", \"Delete\"))}\n            </Button>\n        </Popconfirm>\n    );\n};\n","import React from \"react\";\nimport { Button } from \"antd\";\nimport { RedoOutlined } from \"@ant-design/icons\";\nimport {\n    useTranslate,\n    useResource,\n    useInvalidate,\n    queryKeys,\n    pickDataProvider,\n} from \"@refinedev/core\";\nimport {\n    RefineButtonClassNames,\n    RefineButtonTestIds,\n} from \"@refinedev/ui-types\";\n\nimport { RefreshButtonProps } from \"../types\";\n\nimport { useQueryClient } from \"@tanstack/react-query\";\n\n/**\n * `<RefreshButton>` uses Ant Design's {@link https://ant.design/components/button/ `<Button>`} component\n * to update the data shown on the page via the {@link https://refine.dev/docs/api-reference/core/hooks/invalidate/useInvalidate `useInvalidate`} hook.\n *\n * @see {@link https://refine.dev/docs/api-reference/antd/components/buttons/refresh-button} for more details.\n */\nexport const RefreshButton: React.FC<RefreshButtonProps> = ({\n    resource: resourceNameFromProps,\n    resourceNameOrRouteName: propResourceNameOrRouteName,\n    recordItemId,\n    hideText = false,\n    dataProviderName,\n    children,\n    onClick,\n    meta: _meta,\n    metaData: _metaData,\n    ...rest\n}) => {\n    const translate = useTranslate();\n\n    const queryClient = useQueryClient();\n    const invalidates = useInvalidate();\n\n    const { resources, identifier, id } = useResource(\n        resourceNameFromProps ?? propResourceNameOrRouteName,\n    );\n\n    const isInvalidating = !!queryClient.isFetching({\n        queryKey: queryKeys(\n            identifier,\n            pickDataProvider(identifier, dataProviderName, resources),\n        ).detail(recordItemId ?? id),\n    });\n\n    const handleInvalidate = () => {\n        invalidates({\n            id: recordItemId ?? id,\n            invalidates: [\"detail\"],\n            dataProviderName,\n            resource: identifier,\n        });\n    };\n\n    return (\n        <Button\n            onClick={(e) => {\n                onClick ? onClick(e) : handleInvalidate();\n            }}\n            icon={<RedoOutlined spin={isInvalidating} />}\n            data-testid={RefineButtonTestIds.RefreshButton}\n            className={RefineButtonClassNames.RefreshButton}\n            {...rest}\n        >\n            {!hideText && (children ?? translate(\"buttons.refresh\", \"Refresh\"))}\n        </Button>\n    );\n};\n","import React, { useContext } from \"react\";\nimport { Button } from \"antd\";\nimport { EyeOutlined } from \"@ant-design/icons\";\nimport {\n    useCan,\n    useNavigation,\n    useTranslate,\n    useResource,\n    useRouterContext,\n    useRouterType,\n    useLink,\n    AccessControlContext,\n} from \"@refinedev/core\";\nimport {\n    RefineButtonClassNames,\n    RefineButtonTestIds,\n} from \"@refinedev/ui-types\";\n\nimport { ShowButtonProps } from \"../types\";\n\n/**\n * `<ShowButton>` uses Ant Design's {@link https://ant.design/components/button/ `<Button>`} component.\n * It uses the {@link https://refine.dev/docs/api-reference/core/hooks/navigation/useNavigation#show `show`} method from {@link https://refine.dev/docs/api-reference/core/hooks/navigation/useNavigation `useNavigation`} under the hood.\n * It can be useful when redirecting the app to the show page with the record id route of resource.\n *\n * @see {@link https://refine.dev/docs/api-reference/antd/components/buttons/show-button} for more details.\n */\nexport const ShowButton: React.FC<ShowButtonProps> = ({\n    resource: resourceNameFromProps,\n    resourceNameOrRouteName: propResourceNameOrRouteName,\n    recordItemId,\n    hideText = false,\n    accessControl,\n    meta,\n    children,\n    onClick,\n    ...rest\n}) => {\n    const accessControlContext = useContext(AccessControlContext);\n\n    const accessControlEnabled =\n        accessControl?.enabled ??\n        accessControlContext.options.buttons.enableAccessControl;\n\n    const hideIfUnauthorized =\n        accessControl?.hideIfUnauthorized ??\n        accessControlContext.options.buttons.hideIfUnauthorized;\n\n    const { showUrl: generateShowUrl } = useNavigation();\n    const routerType = useRouterType();\n    const Link = useLink();\n    const { Link: LegacyLink } = useRouterContext();\n\n    const ActiveLink = routerType === \"legacy\" ? LegacyLink : Link;\n\n    const translate = useTranslate();\n\n    const { id, resource } = useResource(\n        resourceNameFromProps ?? propResourceNameOrRouteName,\n    );\n\n    const { data } = useCan({\n        resource: resource?.name,\n        action: \"show\",\n        params: { id: recordItemId ?? id, resource },\n        queryOptions: {\n            enabled: accessControlEnabled,\n        },\n    });\n\n    const createButtonDisabledTitle = () => {\n        if (data?.can) return \"\";\n        else if (data?.reason) return data.reason;\n        else\n            return translate(\n                \"buttons.notAccessTitle\",\n                \"You don't have permission to access\",\n            );\n    };\n\n    const showUrl =\n        resource && (recordItemId || id)\n            ? generateShowUrl(resource, recordItemId! ?? id!, meta)\n            : \"\";\n\n    if (accessControlEnabled && hideIfUnauthorized && !data?.can) {\n        return null;\n    }\n\n    return (\n        <ActiveLink\n            to={showUrl}\n            replace={false}\n            onClick={(e: React.PointerEvent<HTMLButtonElement>) => {\n                if (data?.can === false) {\n                    e.preventDefault();\n                    return;\n                }\n                if (onClick) {\n                    e.preventDefault();\n                    onClick(e);\n                }\n            }}\n        >\n            <Button\n                icon={<EyeOutlined />}\n                disabled={data?.can === false}\n                title={createButtonDisabledTitle()}\n                data-testid={RefineButtonTestIds.ShowButton}\n                className={RefineButtonClassNames.ShowButton}\n                {...rest}\n            >\n                {!hideText && (children ?? translate(\"buttons.show\", \"Show\"))}\n            </Button>\n        </ActiveLink>\n    );\n};\n","import React, { useContext } from \"react\";\nimport { Button } from \"antd\";\nimport { BarsOutlined } from \"@ant-design/icons\";\nimport {\n    useCan,\n    useNavigation,\n    useTranslate,\n    useUserFriendlyName,\n    useResource,\n    useRouterContext,\n    useRouterType,\n    useLink,\n    pickNotDeprecated,\n    AccessControlContext,\n} from \"@refinedev/core\";\nimport {\n    RefineButtonClassNames,\n    RefineButtonTestIds,\n} from \"@refinedev/ui-types\";\n\nimport { ListButtonProps } from \"../types\";\n\n/**\n * `<ListButton>` is using Ant Design's {@link https://ant.design/components/button/ `<Button>`} component.\n * It uses the  {@link https://refine.dev/docs/api-reference/core/hooks/navigation/useNavigation#list `list`} method from {@link https://refine.dev/docs/api-reference/core/hooks/navigation/useNavigation `useNavigation`} under the hood.\n * It can be useful when redirecting the app to the list page route of resource}.\n *\n * @see {@link https://refine.dev/docs/api-reference/antd/components/buttons/list-button} for more details.\n */\nexport const ListButton: React.FC<ListButtonProps> = ({\n    resource: resourceNameFromProps,\n    resourceNameOrRouteName: propResourceNameOrRouteName,\n    hideText = false,\n    accessControl,\n    meta,\n    children,\n    onClick,\n    ...rest\n}) => {\n    const accessControlContext = useContext(AccessControlContext);\n\n    const accessControlEnabled =\n        accessControl?.enabled ??\n        accessControlContext.options.buttons.enableAccessControl;\n\n    const hideIfUnauthorized =\n        accessControl?.hideIfUnauthorized ??\n        accessControlContext.options.buttons.hideIfUnauthorized;\n\n    const { listUrl: generateListUrl } = useNavigation();\n    const routerType = useRouterType();\n    const Link = useLink();\n    const { Link: LegacyLink } = useRouterContext();\n    const getUserFriendlyName = useUserFriendlyName();\n\n    const ActiveLink = routerType === \"legacy\" ? LegacyLink : Link;\n\n    const translate = useTranslate();\n\n    const { resource, identifier } = useResource(\n        resourceNameFromProps ?? propResourceNameOrRouteName,\n    );\n\n    const { data } = useCan({\n        resource: resource?.name,\n        action: \"list\",\n        queryOptions: {\n            enabled: accessControlEnabled,\n        },\n        params: {\n            resource,\n        },\n    });\n\n    const createButtonDisabledTitle = () => {\n        if (data?.can) return \"\";\n        else if (data?.reason) return data.reason;\n        else\n            return translate(\n                \"buttons.notAccessTitle\",\n                \"You don't have permission to access\",\n            );\n    };\n\n    const listUrl = resource ? generateListUrl(resource, meta) : \"\";\n\n    if (accessControlEnabled && hideIfUnauthorized && !data?.can) {\n        return null;\n    }\n\n    return (\n        <ActiveLink\n            to={listUrl}\n            replace={false}\n            onClick={(e: React.PointerEvent<HTMLButtonElement>) => {\n                if (data?.can === false) {\n                    e.preventDefault();\n                    return;\n                }\n                if (onClick) {\n                    e.preventDefault();\n                    onClick(e);\n                }\n            }}\n        >\n            <Button\n                icon={<BarsOutlined />}\n                disabled={data?.can === false}\n                title={createButtonDisabledTitle()}\n                data-testid={RefineButtonTestIds.ListButton}\n                className={RefineButtonClassNames.ListButton}\n                {...rest}\n            >\n                {!hideText &&\n                    (children ??\n                        translate(\n                            `${\n                                identifier ??\n                                resourceNameFromProps ??\n                                propResourceNameOrRouteName\n                            }.titles.list`,\n                            getUserFriendlyName(\n                                resource?.meta?.label ??\n                                    resource?.label ??\n                                    identifier ??\n                                    pickNotDeprecated(\n                                        resourceNameFromProps,\n                                        propResourceNameOrRouteName,\n                                    ),\n                                \"plural\",\n                            ),\n                        ))}\n            </Button>\n        </ActiveLink>\n    );\n};\n","import React from \"react\";\nimport { Button } from \"antd\";\nimport { ExportOutlined } from \"@ant-design/icons\";\nimport { useTranslate } from \"@refinedev/core\";\nimport {\n    RefineButtonClassNames,\n    RefineButtonTestIds,\n} from \"@refinedev/ui-types\";\n\nimport { ExportButtonProps } from \"../types\";\n\n/**\n * `<ExportButton>` is an Ant Design {@link https://ant.design/components/button/ `<Button>`} with a default export icon and a default text with \"Export\".\n * It only has presentational value.\n *\n * @see {@link https://refine.dev/docs/api-reference/antd/components/buttons/export-button} for more details.\n */\nexport const ExportButton: React.FC<ExportButtonProps> = ({\n    hideText = false,\n    children,\n    ...rest\n}) => {\n    const translate = useTranslate();\n\n    return (\n        <Button\n            type=\"default\"\n            icon={<ExportOutlined />}\n            data-testid={RefineButtonTestIds.ExportButton}\n            className={RefineButtonClassNames.ExportButton}\n            {...rest}\n        >\n            {!hideText && (children ?? translate(\"buttons.export\", \"Export\"))}\n        </Button>\n    );\n};\n","import React from \"react\";\nimport { Button } from \"antd\";\nimport { SaveOutlined } from \"@ant-design/icons\";\nimport { useTranslate } from \"@refinedev/core\";\nimport {\n    RefineButtonClassNames,\n    RefineButtonTestIds,\n} from \"@refinedev/ui-types\";\n\nimport { SaveButtonProps } from \"../types\";\n\n/**\n * `<SaveButton>` uses Ant Design's {@link https://ant.design/components/button/ `<Button>`} component.\n * It uses it for presantation purposes only. Some of the hooks that refine has adds features to this button.\n *\n * @see {@link https://refine.dev/docs/api-reference/antd/components/buttons/save-button} for more details.\n */\nexport const SaveButton: React.FC<SaveButtonProps> = ({\n    hideText = false,\n    children,\n    ...rest\n}) => {\n    const translate = useTranslate();\n\n    return (\n        <Button\n            type=\"primary\"\n            icon={<SaveOutlined />}\n            data-testid={RefineButtonTestIds.SaveButton}\n            className={RefineButtonClassNames.SaveButton}\n            {...rest}\n        >\n            {!hideText && (children ?? translate(\"buttons.save\", \"Save\"))}\n        </Button>\n    );\n};\n","import React, { useContext } from \"react\";\nimport { Button } from \"antd\";\nimport { PlusSquareOutlined } from \"@ant-design/icons\";\nimport {\n    useCan,\n    useNavigation,\n    useTranslate,\n    useResource,\n    useRouterContext,\n    useRouterType,\n    useLink,\n    AccessControlContext,\n} from \"@refinedev/core\";\nimport {\n    RefineButtonTestIds,\n    RefineButtonClassNames,\n} from \"@refinedev/ui-types\";\n\nimport { CloneButtonProps } from \"../types\";\n\n/**\n * `<CloneButton>` uses Ant Design's {@link https://ant.design/components/button/ `<Button> component`}.\n * It uses the {@link https://refine.dev/docs/api-reference/core/hooks/navigation/useNavigation#clone `clone`} method from {@link https://refine.dev/docs/api-reference/core/hooks/navigation/useNavigation useNavigation} under the hood.\n * It can be useful when redirecting the app to the create page with the record id route of resource.\n *\n * @see {@link https://refine.dev/docs/api-reference/antd/components/buttons/clone-button} for more details.\n */\nexport const CloneButton: React.FC<CloneButtonProps> = ({\n    resourceNameOrRouteName: propResourceNameOrRouteName,\n    resource: resourceNameFromProps,\n    recordItemId,\n    hideText = false,\n    accessControl,\n    meta,\n    children,\n    onClick,\n    ...rest\n}) => {\n    const accessControlContext = useContext(AccessControlContext);\n\n    const accessControlEnabled =\n        accessControl?.enabled ??\n        accessControlContext.options.buttons.enableAccessControl;\n\n    const hideIfUnauthorized =\n        accessControl?.hideIfUnauthorized ??\n        accessControlContext.options.buttons.hideIfUnauthorized;\n\n    const { cloneUrl: generateCloneUrl } = useNavigation();\n    const routerType = useRouterType();\n    const Link = useLink();\n    const { Link: LegacyLink } = useRouterContext();\n\n    const ActiveLink = routerType === \"legacy\" ? LegacyLink : Link;\n\n    const translate = useTranslate();\n\n    const { id, resource } = useResource(\n        resourceNameFromProps ?? propResourceNameOrRouteName,\n    );\n\n    const { data } = useCan({\n        resource: resource?.name,\n        action: \"create\",\n        params: { id: recordItemId ?? id, resource },\n        queryOptions: {\n            enabled: accessControlEnabled,\n        },\n    });\n\n    const createButtonDisabledTitle = () => {\n        if (data?.can) return \"\";\n        else if (data?.reason) return data.reason;\n        else\n            return translate(\n                \"buttons.notAccessTitle\",\n                \"You don't have permission to access\",\n            );\n    };\n\n    const cloneUrl =\n        resource && (recordItemId || id)\n            ? generateCloneUrl(resource, recordItemId! ?? id!, meta)\n            : \"\";\n\n    if (accessControlEnabled && hideIfUnauthorized && !data?.can) {\n        return null;\n    }\n\n    return (\n        <ActiveLink\n            to={cloneUrl}\n            replace={false}\n            onClick={(e: React.PointerEvent<HTMLButtonElement>) => {\n                if (data?.can === false) {\n                    e.preventDefault();\n                    return;\n                }\n                if (onClick) {\n                    e.preventDefault();\n                    onClick(e);\n                }\n            }}\n        >\n            <Button\n                icon={<PlusSquareOutlined />}\n                disabled={data?.can === false}\n                title={createButtonDisabledTitle()}\n                data-testid={RefineButtonTestIds.CloneButton}\n                className={RefineButtonClassNames.CloneButton}\n                {...rest}\n            >\n                {!hideText && (children ?? translate(\"buttons.clone\", \"Clone\"))}\n            </Button>\n        </ActiveLink>\n    );\n};\n","import React from \"react\";\nimport { Button, Upload } from \"antd\";\nimport { ImportOutlined } from \"@ant-design/icons\";\nimport { useTranslate } from \"@refinedev/core\";\nimport {\n    RefineButtonClassNames,\n    RefineButtonTestIds,\n} from \"@refinedev/ui-types\";\n\nimport { ImportButtonProps } from \"../types\";\n\n/**\n * `<ImportButton>` is compatible with the {@link https://refine.dev/docs/api-reference/antd/hooks/import/useImport `useImport`} hook and is meant to be used as it's upload button.\n * It uses Ant Design's {@link https://ant.design/components/button/ `<Button>`} and {@link https://ant.design/components/upload/ `<Upload>`} components.\n * It wraps a `<Button>` component with an `<Upload>` component and accepts properties for `<Button>` and `<Upload>` components separately.\n *\n * @see {@link https://refine.dev/docs/api-reference/antd/components/buttons/import-button} for more details.\n */\nexport const ImportButton: React.FC<ImportButtonProps> = ({\n    uploadProps,\n    buttonProps,\n    hideText = false,\n    children,\n}) => {\n    const translate = useTranslate();\n\n    return (\n        <Upload {...uploadProps}>\n            <Button\n                icon={<ImportOutlined />}\n                data-testid={RefineButtonTestIds.ImportButton}\n                className={RefineButtonClassNames.ImportButton}\n                {...buttonProps}\n            >\n                {!hideText &&\n                    (children ?? translate(\"buttons.import\", \"Import\"))}\n            </Button>\n        </Upload>\n    );\n};\n","import React from \"react\";\nimport { Space } from \"antd\";\nimport {\n    useTranslate,\n    useUserFriendlyName,\n    useRefineContext,\n    useRouterType,\n    useResource,\n} from \"@refinedev/core\";\n\nimport {\n    Breadcrumb,\n    CreateButton,\n    CreateButtonProps,\n    PageHeader,\n} from \"@components\";\nimport { ListProps } from \"../types\";\n\n/**\n * `<List>` provides us a layout for displaying the page.\n * It does not contain any logic but adds extra functionalities like a refresh button.\n *\n * @see {@link https://refine.dev/docs/ui-frameworks/antd/components/basic-views/list} for more details.\n */\nexport const List: React.FC<ListProps> = ({\n    canCreate,\n    title,\n    children,\n    createButtonProps: createButtonPropsFromProps,\n    resource: resourceFromProps,\n    wrapperProps,\n    contentProps,\n    headerProps,\n    breadcrumb: breadcrumbFromProps,\n    headerButtonProps,\n    headerButtons,\n}) => {\n    const translate = useTranslate();\n    const { options: { breadcrumb: globalBreadcrumb } = {} } =\n        useRefineContext();\n\n    const routerType = useRouterType();\n    const getUserFriendlyName = useUserFriendlyName();\n\n    const { resource, identifier } = useResource(resourceFromProps);\n\n    const isCreateButtonVisible =\n        canCreate ??\n        ((resource?.canCreate ?? !!resource?.create) ||\n            createButtonPropsFromProps);\n\n    const breadcrumb =\n        typeof breadcrumbFromProps === \"undefined\"\n            ? globalBreadcrumb\n            : breadcrumbFromProps;\n\n    const createButtonProps: CreateButtonProps | undefined =\n        isCreateButtonVisible\n            ? {\n                  size: \"middle\",\n                  resource:\n                      routerType === \"legacy\" ? resource?.route : identifier,\n                  ...createButtonPropsFromProps,\n              }\n            : undefined;\n\n    const defaultExtra = isCreateButtonVisible ? (\n        <CreateButton {...createButtonProps} />\n    ) : null;\n\n    return (\n        <div {...(wrapperProps ?? {})}>\n            <PageHeader\n                ghost={false}\n                title={\n                    title ??\n                    translate(\n                        `${identifier}.titles.list`,\n                        getUserFriendlyName(\n                            resource?.meta?.label ??\n                                resource?.options?.label ??\n                                resource?.label ??\n                                identifier,\n                            \"plural\",\n                        ),\n                    )\n                }\n                extra={\n                    headerButtons ? (\n                        <Space wrap {...headerButtonProps}>\n                            {typeof headerButtons === \"function\"\n                                ? headerButtons({\n                                      defaultButtons: defaultExtra,\n                                      createButtonProps,\n                                  })\n                                : headerButtons}\n                        </Space>\n                    ) : (\n                        defaultExtra\n                    )\n                }\n                breadcrumb={\n                    typeof breadcrumb !== \"undefined\" ? (\n                        <>{breadcrumb}</> ?? undefined\n                    ) : (\n                        <Breadcrumb />\n                    )\n                }\n                {...(headerProps ?? {})}\n            >\n                <div {...(contentProps ?? {})}>{children}</div>\n            </PageHeader>\n        </div>\n    );\n};\n","import React from \"react\";\nimport { Card, Space, Spin } from \"antd\";\nimport {\n    useNavigation,\n    useTranslate,\n    useUserFriendlyName,\n    useRefineContext,\n    useRouterType,\n    useResource,\n    useBack,\n} from \"@refinedev/core\";\n\nimport {\n    Breadcrumb,\n    SaveButton,\n    PageHeader,\n    SaveButtonProps,\n} from \"@components\";\nimport { CreateProps } from \"../types\";\n\n/**\n * `<Create>` provides us a layout to display the page.\n * It does not contain any logic but adds extra functionalities like action buttons and giving titles to the page.\n *\n * @see {@link https://refine.dev/docs/ui-frameworks/antd/components/basic-views/create} for more details.\n */\nexport const Create: React.FC<CreateProps> = ({\n    title,\n    saveButtonProps: saveButtonPropsFromProps,\n    children,\n    resource: resourceFromProps,\n    isLoading = false,\n    breadcrumb: breadcrumbFromProps,\n    wrapperProps,\n    headerProps,\n    contentProps,\n    headerButtonProps,\n    headerButtons,\n    footerButtonProps,\n    footerButtons,\n    goBack: goBackFromProps,\n}) => {\n    const translate = useTranslate();\n    const { options: { breadcrumb: globalBreadcrumb } = {} } =\n        useRefineContext();\n\n    const routerType = useRouterType();\n    const back = useBack();\n    const { goBack } = useNavigation();\n    const getUserFriendlyName = useUserFriendlyName();\n\n    const { resource, action, identifier } = useResource(resourceFromProps);\n\n    const breadcrumb =\n        typeof breadcrumbFromProps === \"undefined\"\n            ? globalBreadcrumb\n            : breadcrumbFromProps;\n\n    const saveButtonProps: SaveButtonProps = {\n        ...(isLoading ? { disabled: true } : {}),\n        ...saveButtonPropsFromProps,\n        htmlType: \"submit\",\n    };\n\n    const defaultFooterButtons = (\n        <>\n            <SaveButton {...saveButtonProps} />\n        </>\n    );\n\n    return (\n        <div {...(wrapperProps ?? {})}>\n            <PageHeader\n                ghost={false}\n                backIcon={goBackFromProps}\n                onBack={\n                    action !== \"list\" || typeof action !== \"undefined\"\n                        ? routerType === \"legacy\"\n                            ? goBack\n                            : back\n                        : undefined\n                }\n                title={\n                    title ??\n                    translate(\n                        `${identifier}.titles.create`,\n                        `Create ${getUserFriendlyName(\n                            resource?.meta?.label ??\n                                resource?.options?.label ??\n                                resource?.label ??\n                                identifier,\n                            \"singular\",\n                        )}`,\n                    )\n                }\n                breadcrumb={\n                    typeof breadcrumb !== \"undefined\" ? (\n                        <>{breadcrumb}</> ?? undefined\n                    ) : (\n                        <Breadcrumb />\n                    )\n                }\n                extra={\n                    <Space wrap {...(headerButtonProps ?? {})}>\n                        {headerButtons\n                            ? typeof headerButtons === \"function\"\n                                ? headerButtons({\n                                      defaultButtons: null,\n                                  })\n                                : headerButtons\n                            : null}\n                    </Space>\n                }\n                {...(headerProps ?? {})}\n            >\n                <Spin spinning={isLoading}>\n                    <Card\n                        bordered={false}\n                        actions={[\n                            <Space\n                                key=\"action-buttons\"\n                                style={{ float: \"right\", marginRight: 24 }}\n                                {...(footerButtonProps ?? {})}\n                            >\n                                {footerButtons\n                                    ? typeof footerButtons === \"function\"\n                                        ? footerButtons({\n                                              defaultButtons:\n                                                  defaultFooterButtons,\n                                              saveButtonProps: saveButtonProps,\n                                          })\n                                        : footerButtons\n                                    : defaultFooterButtons}\n                            </Space>,\n                        ]}\n                        {...(contentProps ?? {})}\n                    >\n                        {children}\n                    </Card>\n                </Spin>\n            </PageHeader>\n        </div>\n    );\n};\n","import React from \"react\";\n\nimport { Card, Space, Spin } from \"antd\";\nimport {\n    useMutationMode,\n    useNavigation,\n    useTranslate,\n    useUserFriendlyName,\n    useRefineContext,\n    useRouterType,\n    useBack,\n    useResource,\n    useGo,\n    useToPath,\n} from \"@refinedev/core\";\n\nimport {\n    DeleteButton,\n    RefreshButton,\n    ListButton,\n    SaveButton,\n    Breadcrumb,\n    PageHeader,\n    ListButtonProps,\n    RefreshButtonProps,\n    DeleteButtonProps,\n    SaveButtonProps,\n    AutoSaveIndicator,\n} from \"@components\";\nimport { EditProps } from \"../types\";\n\n/**\n * `<Edit>` provides us a layout for displaying the page.\n * It does not contain any logic but adds extra functionalities like a refresh button.\n *\n * @see {@link https://refine.dev/docs/ui-frameworks/antd/components/basic-views/edit} for more details.\n */\nexport const Edit: React.FC<EditProps> = ({\n    title,\n    saveButtonProps: saveButtonPropsFromProps,\n    mutationMode: mutationModeProp,\n    recordItemId,\n    children,\n    deleteButtonProps: deleteButtonPropsFromProps,\n    canDelete,\n    resource: resourceFromProps,\n    isLoading = false,\n    dataProviderName,\n    breadcrumb: breadcrumbFromProps,\n    wrapperProps,\n    headerProps,\n    contentProps,\n    headerButtonProps,\n    headerButtons,\n    footerButtonProps,\n    footerButtons,\n    goBack: goBackFromProps,\n    autoSaveProps,\n}) => {\n    const translate = useTranslate();\n    const { options: { breadcrumb: globalBreadcrumb } = {} } =\n        useRefineContext();\n    const { mutationMode: mutationModeContext } = useMutationMode();\n    const mutationMode = mutationModeProp ?? mutationModeContext;\n\n    const routerType = useRouterType();\n    const back = useBack();\n    const go = useGo();\n    const { goBack, list: legacyGoList } = useNavigation();\n    const getUserFriendlyName = useUserFriendlyName();\n\n    const {\n        resource,\n        action,\n        id: idFromParams,\n        identifier,\n    } = useResource(resourceFromProps);\n\n    const goListPath = useToPath({\n        resource,\n        action: \"list\",\n    });\n\n    const id = recordItemId ?? idFromParams;\n\n    const breadcrumb =\n        typeof breadcrumbFromProps === \"undefined\"\n            ? globalBreadcrumb\n            : breadcrumbFromProps;\n\n    const hasList = resource?.list && !recordItemId;\n    const isDeleteButtonVisible =\n        canDelete ??\n        ((resource?.meta?.canDelete ?? resource?.canDelete) ||\n            deleteButtonPropsFromProps);\n\n    const listButtonProps: ListButtonProps | undefined = hasList\n        ? {\n              ...(isLoading ? { disabled: true } : {}),\n              resource: routerType === \"legacy\" ? resource?.route : identifier,\n          }\n        : undefined;\n\n    const refreshButtonProps: RefreshButtonProps = {\n        ...(isLoading ? { disabled: true } : {}),\n        resource: routerType === \"legacy\" ? resource?.route : identifier,\n        recordItemId: id,\n        dataProviderName,\n    };\n\n    const deleteButtonProps: DeleteButtonProps | undefined =\n        isDeleteButtonVisible\n            ? {\n                  ...(isLoading ? { disabled: true } : {}),\n                  resource:\n                      routerType === \"legacy\" ? resource?.route : identifier,\n                  mutationMode,\n                  onSuccess: () => {\n                      if (routerType === \"legacy\") {\n                          legacyGoList(resource?.route ?? resource?.name ?? \"\");\n                      } else {\n                          go({ to: goListPath });\n                      }\n                  },\n                  recordItemId: id,\n                  dataProviderName,\n                  ...deleteButtonPropsFromProps,\n              }\n            : undefined;\n\n    const saveButtonProps: SaveButtonProps = {\n        ...(isLoading ? { disabled: true } : {}),\n        ...saveButtonPropsFromProps,\n    };\n\n    const defaultHeaderButtons = (\n        <>\n            {autoSaveProps && <AutoSaveIndicator {...autoSaveProps} />}\n            {hasList && <ListButton {...listButtonProps} />}\n            <RefreshButton {...refreshButtonProps} />\n        </>\n    );\n\n    const defaultFooterButtons = (\n        <>\n            {isDeleteButtonVisible && <DeleteButton {...deleteButtonProps} />}\n            <SaveButton {...saveButtonProps} />\n        </>\n    );\n\n    return (\n        <div {...(wrapperProps ?? {})}>\n            <PageHeader\n                ghost={false}\n                backIcon={goBackFromProps}\n                onBack={\n                    action !== \"list\" && typeof action !== \"undefined\"\n                        ? routerType === \"legacy\"\n                            ? goBack\n                            : back\n                        : undefined\n                }\n                title={\n                    title ??\n                    translate(\n                        `${identifier}.titles.edit`,\n                        `Edit ${getUserFriendlyName(\n                            resource?.meta?.label ??\n                                resource?.options?.label ??\n                                resource?.label ??\n                                identifier,\n                            \"singular\",\n                        )}`,\n                    )\n                }\n                extra={\n                    <Space wrap {...(headerButtonProps ?? {})}>\n                        {headerButtons\n                            ? typeof headerButtons === \"function\"\n                                ? headerButtons({\n                                      defaultButtons: defaultHeaderButtons,\n                                      listButtonProps,\n                                      refreshButtonProps,\n                                  })\n                                : headerButtons\n                            : defaultHeaderButtons}\n                    </Space>\n                }\n                breadcrumb={\n                    typeof breadcrumb !== \"undefined\" ? (\n                        <>{breadcrumb}</> ?? undefined\n                    ) : (\n                        <Breadcrumb />\n                    )\n                }\n                {...(headerProps ?? {})}\n            >\n                <Spin spinning={isLoading}>\n                    <Card\n                        bordered={false}\n                        actions={[\n                            <Space\n                                key=\"footer-buttons\"\n                                wrap\n                                style={{\n                                    float: \"right\",\n                                    marginRight: 24,\n                                }}\n                                {...(footerButtonProps ?? {})}\n                            >\n                                {footerButtons\n                                    ? typeof footerButtons === \"function\"\n                                        ? footerButtons({\n                                              defaultButtons:\n                                                  defaultFooterButtons,\n                                              deleteButtonProps,\n                                              saveButtonProps,\n                                          })\n                                        : footerButtons\n                                    : defaultFooterButtons}\n                            </Space>,\n                        ]}\n                        {...(contentProps ?? {})}\n                    >\n                        {children}\n                    </Card>\n                </Spin>\n            </PageHeader>\n        </div>\n    );\n};\n","import React from \"react\";\nimport { Card, Space, Spin } from \"antd\";\nimport {\n    useNavigation,\n    useTranslate,\n    useUserFriendlyName,\n    useRefineContext,\n    useResource,\n    useToPath,\n    useRouterType,\n    useBack,\n    useGo,\n} from \"@refinedev/core\";\n\nimport {\n    EditButton,\n    DeleteButton,\n    RefreshButton,\n    ListButton,\n    Breadcrumb,\n    PageHeader,\n    ListButtonProps,\n    EditButtonProps,\n    DeleteButtonProps,\n    RefreshButtonProps,\n} from \"@components\";\nimport { ShowProps } from \"../types\";\n\n/**\n * `<Show>` provides us a layout for displaying the page.\n * It does not contain any logic but adds extra functionalities like a refresh button.\n *\n * @see {@link https://refine.dev/docs/ui-frameworks/antd/components/basic-views/show} for more details.\n */\nexport const Show: React.FC<ShowProps> = ({\n    title,\n    canEdit,\n    canDelete,\n    isLoading = false,\n    children,\n    resource: resourceFromProps,\n    recordItemId,\n    dataProviderName,\n    breadcrumb: breadcrumbFromProps,\n    contentProps,\n    headerProps,\n    wrapperProps,\n    headerButtons,\n    footerButtons,\n    footerButtonProps,\n    headerButtonProps,\n    goBack: goBackFromProps,\n}) => {\n    const translate = useTranslate();\n    const { options: { breadcrumb: globalBreadcrumb } = {} } =\n        useRefineContext();\n\n    const routerType = useRouterType();\n    const back = useBack();\n    const go = useGo();\n    const { goBack, list: legacyGoList } = useNavigation();\n    const getUserFriendlyName = useUserFriendlyName();\n\n    const {\n        resource,\n        action,\n        id: idFromParams,\n        identifier,\n    } = useResource(resourceFromProps);\n\n    const goListPath = useToPath({\n        resource,\n        action: \"list\",\n    });\n\n    const id = recordItemId ?? idFromParams;\n\n    const breadcrumb =\n        typeof breadcrumbFromProps === \"undefined\"\n            ? globalBreadcrumb\n            : breadcrumbFromProps;\n\n    const hasList = resource?.list && !recordItemId;\n    const isDeleteButtonVisible =\n        canDelete ?? resource?.meta?.canDelete ?? resource?.canDelete;\n    const isEditButtonVisible =\n        canEdit ?? resource?.canEdit ?? !!resource?.edit;\n\n    const listButtonProps: ListButtonProps | undefined = hasList\n        ? {\n              resource: routerType === \"legacy\" ? resource?.route : identifier,\n          }\n        : undefined;\n    const editButtonProps: EditButtonProps | undefined = isEditButtonVisible\n        ? {\n              ...(isLoading ? { disabled: true } : {}),\n              type: \"primary\",\n              resource: routerType === \"legacy\" ? resource?.route : identifier,\n              recordItemId: id,\n          }\n        : undefined;\n    const deleteButtonProps: DeleteButtonProps | undefined =\n        isDeleteButtonVisible\n            ? {\n                  ...(isLoading ? { disabled: true } : {}),\n                  resource:\n                      routerType === \"legacy\" ? resource?.route : identifier,\n                  recordItemId: id,\n                  onSuccess: () => {\n                      if (routerType === \"legacy\") {\n                          legacyGoList(resource?.route ?? resource?.name ?? \"\");\n                      } else {\n                          go({ to: goListPath });\n                      }\n                  },\n                  dataProviderName,\n              }\n            : undefined;\n    const refreshButtonProps: RefreshButtonProps = {\n        ...(isLoading ? { disabled: true } : {}),\n        resource: routerType === \"legacy\" ? resource?.route : identifier,\n        recordItemId: id,\n        dataProviderName,\n    };\n\n    const defaultHeaderButtons = (\n        <>\n            {hasList && <ListButton {...listButtonProps} />}\n            {isEditButtonVisible && <EditButton {...editButtonProps} />}\n            {isDeleteButtonVisible && <DeleteButton {...deleteButtonProps} />}\n            <RefreshButton {...refreshButtonProps} />\n        </>\n    );\n\n    return (\n        <div {...(wrapperProps ?? {})}>\n            <PageHeader\n                ghost={false}\n                backIcon={goBackFromProps}\n                onBack={\n                    action !== \"list\" && typeof action !== \"undefined\"\n                        ? routerType === \"legacy\"\n                            ? goBack\n                            : back\n                        : undefined\n                }\n                title={\n                    title ??\n                    translate(\n                        `${identifier}.titles.show`,\n                        `Show ${getUserFriendlyName(\n                            resource?.meta?.label ??\n                                resource?.options?.label ??\n                                resource?.label ??\n                                identifier,\n                            \"singular\",\n                        )}`,\n                    )\n                }\n                extra={\n                    <Space\n                        key=\"extra-buttons\"\n                        wrap\n                        {...(headerButtonProps ?? {})}\n                    >\n                        {headerButtons\n                            ? typeof headerButtons === \"function\"\n                                ? headerButtons({\n                                      defaultButtons: defaultHeaderButtons,\n                                      deleteButtonProps,\n                                      editButtonProps,\n                                      listButtonProps,\n                                      refreshButtonProps,\n                                  })\n                                : headerButtons\n                            : defaultHeaderButtons}\n                    </Space>\n                }\n                breadcrumb={\n                    typeof breadcrumb !== \"undefined\" ? (\n                        <>{breadcrumb}</> ?? undefined\n                    ) : (\n                        <Breadcrumb />\n                    )\n                }\n                {...(headerProps ?? {})}\n            >\n                <Spin spinning={isLoading}>\n                    <Card\n                        bordered={false}\n                        actions={\n                            footerButtons\n                                ? [\n                                      <Space\n                                          key=\"footer-buttons\"\n                                          wrap\n                                          {...footerButtonProps}\n                                      >\n                                          {typeof footerButtons === \"function\"\n                                              ? footerButtons({\n                                                    defaultButtons: null,\n                                                })\n                                              : footerButtons}\n                                      </Space>,\n                                  ]\n                                : undefined\n                        }\n                        {...(contentProps ?? {})}\n                    >\n                        {children}\n                    </Card>\n                </Spin>\n            </PageHeader>\n        </div>\n    );\n};\n","import React from \"react\";\nimport { Typography } from \"antd\";\n\nconst { Text } = Typography;\n\nimport { TextFieldProps } from \"../types\";\n\n/**\n * This field lets you show basic text. It uses Ant Design's {@link https://ant.design/components/typography/#Typography.Text `<Typography.Text>`} component.\n *\n * @see {@link https://refine.dev/docs/api-reference/antd/components/fields/text} for more details.\n */\nexport const TextField: React.FC<TextFieldProps> = ({ value, ...rest }) => {\n    return <Text {...rest}>{value}</Text>;\n};\n","import React from \"react\";\nimport { Tag } from \"antd\";\n\nimport { TagFieldProps } from \"../types\";\n\n/**\n * This field lets you display a value in a tag. It uses Ant Design's {@link https://ant.design/components/tag/ `<Tag>`} component.\n *\n * @see {@link https://refine.dev/docs/api-reference/antd/components/fields/tag} for more details.\n */\nexport const TagField: React.FC<TagFieldProps> = ({ value, ...rest }) => {\n    return <Tag {...rest}>{value?.toString()}</Tag>;\n};\n","import React from \"react\";\nimport { Typography } from \"antd\";\n\nconst { Link } = Typography;\n\nimport { EmailFieldProps } from \"../types\";\n\n/**\n * This field is used to display email values. It uses the {@link https://ant.design/components/typography/#FAQ `<Link>`} component\n * of {@link https://ant.design/components/typography `<Typography>`} from Ant Design.\n *\n * @see {@link https://refine.dev/docs/api-reference/antd/components/fields/email} for more details.\n */\nexport const EmailField: React.FC<EmailFieldProps> = ({ value, ...rest }) => {\n    return (\n        <Link href={`mailto:${value}`} {...rest}>\n            {value}\n        </Link>\n    );\n};\n","import React from \"react\";\nimport { Image } from \"antd\";\n\nimport { ImageFieldProps } from \"../types\";\n\n/**\n * This field is used to display images and uses {@link https://ant.design/components/image/#header `<Image>`} from Ant Design.\n *\n * @see {@link https://refine.dev/docs/api-reference/antd/components/fields/image} for more details.\n */\nexport const ImageField: React.FC<ImageFieldProps> = ({\n    value,\n    imageTitle,\n    ...rest\n}) => {\n    return <Image {...rest} src={value} title={imageTitle} />;\n};\n","import React from \"react\";\nimport { Tooltip } from \"antd\";\n\nimport { CheckOutlined, CloseOutlined } from \"@ant-design/icons\";\n\nimport { BooleanFieldProps } from \"../types\";\n\n/**\n * This field is used to display boolean values. It uses the {@link https://ant.design/components/tooltip/#header `<Tooltip>`} values from Ant Design.\n *\n * @see {@link https://refine.dev/docs/api-reference/antd/components/fields/boolean} for more details.\n */\nexport const BooleanField: React.FC<BooleanFieldProps> = ({\n    value,\n    valueLabelTrue = \"true\",\n    valueLabelFalse = \"false\",\n    trueIcon = <CheckOutlined />,\n    falseIcon = <CloseOutlined />,\n    ...rest\n}) => {\n    return (\n        <Tooltip title={value ? valueLabelTrue : valueLabelFalse} {...rest}>\n            {value ? <span>{trueIcon}</span> : <span>{falseIcon}</span>}\n        </Tooltip>\n    );\n};\n","import React from \"react\";\nimport dayjs from \"dayjs\";\nimport { Typography } from \"antd\";\n\nimport LocalizedFormat from \"dayjs/plugin/localizedFormat\";\n\nimport { DateFieldProps } from \"../types\";\n\n/**\n * This field is used to display dates. It uses {@link https://day.js.org/docs/en/display/format `Day.js`} to display date format.\n *\n * @see {@link https://refine.dev/docs/api-reference/antd/components/fields/date} for more details.\n */\nexport const DateField: React.FC<DateFieldProps> = ({\n    value,\n    locales,\n    format: dateFormat = \"L\",\n    ...rest\n}) => {\n    dayjs.extend(LocalizedFormat);\n\n    const defaultLocale = dayjs.locale();\n\n    const { Text } = Typography;\n\n    return (\n        <Text {...rest}>\n            {dayjs(value)\n                .locale(locales || defaultLocale)\n                .format(dateFormat)}\n        </Text>\n    );\n};\n","import React from \"react\";\n\nimport { UrlField } from \"@components\";\nimport { FileFieldProps } from \"../types\";\n\n/**\n * This field is used to display files and uses {@link https://ant.design/components/typography `<Typography.Link>`} from Ant Design.\n *\n * @see {@link https://refine.dev/docs/api-reference/antd/components/fields/file} for more details.\n */\nexport const FileField: React.FC<FileFieldProps> = ({\n    title,\n    src,\n    ...rest\n}) => {\n    return (\n        <UrlField value={src} title={title} {...rest}>\n            {title ?? src}\n        </UrlField>\n    );\n};\n","import React from \"react\";\nimport { Typography } from \"antd\";\n\nconst { Link } = Typography;\n\nimport { UrlFieldProps } from \"../types\";\n\n/**\n * This field lets you embed a link. It uses Ant Design's {@link https://ant.design/components/typography/ `<Typography.Link>`} component.\n * You can pass a URL in its `value` property and you can show a text in its place by passing any `children`.\n *\n * @see {@link https://refine.dev/docs/api-reference/antd/components/fields/url} for more details.\n */\nexport const UrlField: React.FC<UrlFieldProps> = ({\n    children,\n    value,\n    ...rest\n}) => {\n    return (\n        <Link href={value} {...rest}>\n            {children ?? value}\n        </Link>\n    );\n};\n","import React from \"react\";\nimport { Typography } from \"antd\";\n\nconst { Text } = Typography;\n\nfunction toLocaleStringSupportsOptions() {\n    return !!(\n        typeof Intl == \"object\" &&\n        Intl &&\n        typeof Intl.NumberFormat == \"function\"\n    );\n}\n\nimport { NumberFieldProps } from \"../types\";\n\n/**\n * This field is used to display a number formatted according to the browser locale, right aligned. and uses {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl `Intl`} to display date format.\n *\n * @see {@link https://refine.dev/docs/api-reference/antd/components/fields/number} for more details.\n */\nexport const NumberField: React.FC<NumberFieldProps> = ({\n    value,\n    locale,\n    options,\n    ...rest\n}) => {\n    const number = Number(value);\n\n    return (\n        <Text {...rest}>\n            {toLocaleStringSupportsOptions()\n                ? number.toLocaleString(locale, options)\n                : number}\n        </Text>\n    );\n};\n","import React from \"react\";\nimport ReactMarkdown from \"react-markdown\";\nimport gfm from \"remark-gfm\";\n\nimport { RefineFieldMarkdownProps } from \"../types\";\n\n/**\n * This field lets you display markdown content. It supports {@link https://github.github.com/gfm/ GitHub Flavored Markdown}.\n *\n * @see {@link https://refine.dev/docs/api-reference/antd/components/fields/markdown} for more details.\n */\nexport const MarkdownField: React.FC<RefineFieldMarkdownProps> = ({\n    value = \"\",\n}) => {\n    return <ReactMarkdown plugins={[gfm]}>{value}</ReactMarkdown>;\n};\n","import React, { ReactNode, useState } from \"react\";\nimport { Button, Space } from \"antd\";\nimport type { FilterDropdownProps as AntdFilterDropdownProps } from \"antd/lib/table/interface\";\nimport dayjs from \"dayjs\";\nimport { FilterOutlined } from \"@ant-design/icons\";\nimport { useTranslate } from \"@refinedev/core\";\n\nexport type FilterDropdownProps = AntdFilterDropdownProps & {\n    mapValue?: (selectedKeys: React.Key[]) => any;\n    children: ReactNode;\n};\n\n/**\n * `<FilterDropdown>` is a helper component for {@link https://ant.design/components/table/#components-table-demo-custom-filter-panel filter dropdowns in Ant Design `<Table>` components.}\n *\n * @see {@link https://refine.dev/docs/ui-frameworks/antd/components/filter-dropdown} for more details.\n */\nexport const FilterDropdown: React.FC<FilterDropdownProps> = (props) => {\n    const {\n        setSelectedKeys,\n        confirm,\n        clearFilters,\n        mapValue,\n        selectedKeys,\n        children,\n    } = props;\n\n    const [value, setValue] = useState<any[] | undefined>(selectedKeys);\n    const translate = useTranslate();\n\n    const clearFilter = () => {\n        if (clearFilters) {\n            setValue([]);\n            clearFilters();\n        }\n    };\n\n    const onFilter = () => {\n        const _mappedValue = mappedValue(value);\n\n        let keys;\n        if (typeof _mappedValue === \"number\") {\n            keys = `${_mappedValue}`;\n        } else if (dayjs.isDayjs(_mappedValue)) {\n            keys = [_mappedValue.toISOString()];\n        } else {\n            keys = _mappedValue;\n        }\n\n        setSelectedKeys(keys);\n\n        confirm?.();\n    };\n\n    const mappedValue = (value: any) => (mapValue ? mapValue(value) : value);\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const onChange = (e: any) => {\n        if (typeof e === \"object\") {\n            if (Array.isArray(e)) {\n                const _mappedValue = mappedValue(e);\n\n                setValue(_mappedValue);\n                return setSelectedKeys(_mappedValue);\n            }\n\n            const changeEvent =\n                !e || !e.target || dayjs.isDayjs(e)\n                    ? { target: { value: e } }\n                    : e;\n\n            const { target }: React.ChangeEvent<HTMLInputElement> = changeEvent;\n            const _mappedValue = mappedValue(target.value);\n            setValue(_mappedValue);\n            return;\n        }\n\n        const _mappedValue = mappedValue(e);\n\n        setValue(_mappedValue);\n    };\n\n    const childrenWithProps = React.Children.map(children, (child) => {\n        if (React.isValidElement(child)) {\n            return React.cloneElement(child, {\n                onChange,\n                value: mappedValue(value),\n            });\n        }\n        return child;\n    });\n    return (\n        <div\n            style={{\n                padding: 10,\n                display: \"flex\",\n                flexDirection: \"column\",\n                alignItems: \"flex-end\",\n            }}\n        >\n            <div style={{ marginBottom: 15 }}>{childrenWithProps}</div>\n            <Space>\n                <Button type=\"primary\" size=\"small\" onClick={() => onFilter()}>\n                    <FilterOutlined /> {translate(\"buttons.filter\", \"Filter\")}\n                </Button>\n                <Button danger size=\"small\" onClick={() => clearFilter()}>\n                    {translate(\"buttons.clear\", \"Clear\")}\n                </Button>\n            </Space>\n        </div>\n    );\n};\n","import React, { useEffect, useState } from \"react\";\nimport { useGo, useResource, useRouterType } from \"@refinedev/core\";\nimport { RefineErrorPageProps } from \"@refinedev/ui-types\";\nimport { Button, Result, Typography, Space, Tooltip } from \"antd\";\nimport { InfoCircleOutlined } from \"@ant-design/icons\";\nimport { useNavigation, useTranslate } from \"@refinedev/core\";\n\nconst { Text } = Typography;\n\n/**\n * When the app is navigated to a non-existent route, refine shows a default error page.\n * A custom error component can be used for this error page.\n *\n * @see {@link https://refine.dev/docs/packages/documentation/routers/} for more details.\n */\nexport const ErrorComponent: React.FC<RefineErrorPageProps> = () => {\n    const [errorMessage, setErrorMessage] = useState<string>();\n    const translate = useTranslate();\n    const { push } = useNavigation();\n    const go = useGo();\n    const routerType = useRouterType();\n\n    const { resource, action } = useResource();\n\n    useEffect(() => {\n        if (resource) {\n            if (action) {\n                setErrorMessage(\n                    translate(\n                        \"pages.error.info\",\n                        {\n                            action: action,\n                            resource: resource?.name,\n                        },\n                        `You may have forgotten to add the \"${action}\" component to \"${resource?.name}\" resource.`,\n                    ),\n                );\n            }\n        }\n    }, [resource, action]);\n\n    return (\n        <Result\n            status=\"404\"\n            title=\"404\"\n            extra={\n                <Space direction=\"vertical\" size=\"large\">\n                    <Space>\n                        <Text>\n                            {translate(\n                                \"pages.error.404\",\n                                \"Sorry, the page you visited does not exist.\",\n                            )}\n                        </Text>\n                        {errorMessage && (\n                            <Tooltip title={errorMessage}>\n                                <InfoCircleOutlined data-testid=\"error-component-tooltip\" />\n                            </Tooltip>\n                        )}\n                    </Space>\n                    <Button\n                        type=\"primary\"\n                        onClick={() => {\n                            if (routerType === \"legacy\") {\n                                push(\"/\");\n                            } else {\n                                go({ to: \"/\" });\n                            }\n                        }}\n                    >\n                        {translate(\"pages.error.backHome\", \"Back Home\")}\n                    </Button>\n                </Space>\n            }\n        />\n    );\n};\n","import React from \"react\";\nimport { LoginPageProps, useActiveAuthProvider } from \"@refinedev/core\";\nimport {\n    Row,\n    Col,\n    Layout,\n    Card,\n    Typography,\n    Form,\n    Input,\n    Button,\n    Checkbox,\n} from \"antd\";\nimport { useLogin, useTranslate } from \"@refinedev/core\";\n\nimport {\n    layoutStyles,\n    containerStyles,\n    titleStyles,\n    imageContainer,\n} from \"./styles\";\n\nconst { Text, Title } = Typography;\nexport interface ILoginForm {\n    username: string;\n    password: string;\n    remember: boolean;\n}\n\n/**\n * @deprecated LoginPage is deprecated. Use AuthPage instead. @see {@link https://refine.dev/docs/api-reference/antd/components/antd-auth-page} for more details.\n * **refine** has a default login page form which is served on `/login` route when the `authProvider` configuration is provided.\n *\n * @see {@link https://refine.dev/docs/api-reference/core/components/refine-config/#loginpage} for more details.\n */\nexport const LoginPage: React.FC<LoginPageProps> = () => {\n    const [form] = Form.useForm<ILoginForm>();\n    const translate = useTranslate();\n\n    const authProvider = useActiveAuthProvider();\n    const { mutate: login, isLoading } = useLogin<ILoginForm>({\n        v3LegacyAuthProviderCompatible: Boolean(authProvider?.isLegacy),\n    });\n\n    const CardTitle = (\n        <Title level={3} style={titleStyles}>\n            {translate(\"pages.login.title\", \"Sign in your account\")}\n        </Title>\n    );\n\n    return (\n        <Layout style={layoutStyles}>\n            <Row\n                justify=\"center\"\n                align=\"middle\"\n                style={{\n                    height: \"100vh\",\n                }}\n            >\n                <Col xs={22}>\n                    <div style={containerStyles}>\n                        <div style={imageContainer}>\n                            <img\n                                src=\"https://refine.ams3.cdn.digitaloceanspaces.com/logo/refine.svg\"\n                                alt=\"Refine Logo\"\n                            />\n                        </div>\n                        <Card title={CardTitle} headStyle={{ borderBottom: 0 }}>\n                            <Form<ILoginForm>\n                                layout=\"vertical\"\n                                form={form}\n                                onFinish={(values) => {\n                                    login(values);\n                                }}\n                                requiredMark={false}\n                                initialValues={{\n                                    remember: false,\n                                }}\n                            >\n                                <Form.Item\n                                    name=\"username\"\n                                    label={translate(\n                                        \"pages.login.username\",\n                                        \"Username\",\n                                    )}\n                                    rules={[{ required: true }]}\n                                >\n                                    <Input\n                                        size=\"large\"\n                                        placeholder={translate(\n                                            \"pages.login.username\",\n                                            \"Username\",\n                                        )}\n                                    />\n                                </Form.Item>\n                                <Form.Item\n                                    name=\"password\"\n                                    label={translate(\n                                        \"pages.login.password\",\n                                        \"Password\",\n                                    )}\n                                    rules={[{ required: true }]}\n                                    style={{ marginBottom: \"12px\" }}\n                                >\n                                    <Input\n                                        type=\"password\"\n                                        placeholder=\"●●●●●●●●\"\n                                        size=\"large\"\n                                    />\n                                </Form.Item>\n                                <div style={{ marginBottom: \"12px\" }}>\n                                    <Form.Item\n                                        name=\"remember\"\n                                        valuePropName=\"checked\"\n                                        noStyle\n                                    >\n                                        <Checkbox\n                                            style={{\n                                                fontSize: \"12px\",\n                                            }}\n                                        >\n                                            {translate(\n                                                \"pages.login.remember\",\n                                                \"Remember me\",\n                                            )}\n                                        </Checkbox>\n                                    </Form.Item>\n\n                                    <a\n                                        style={{\n                                            float: \"right\",\n                                            fontSize: \"12px\",\n                                        }}\n                                        href=\"#\"\n                                    >\n                                        {translate(\n                                            \"pages.login.forgotPassword\",\n                                            \"Forgot password?\",\n                                        )}\n                                    </a>\n                                </div>\n                                <Button\n                                    type=\"primary\"\n                                    size=\"large\"\n                                    htmlType=\"submit\"\n                                    loading={isLoading}\n                                    block\n                                >\n                                    {translate(\"pages.login.signin\", \"Sign in\")}\n                                </Button>\n                            </Form>\n                            <div style={{ marginTop: 8 }}>\n                                <Text style={{ fontSize: 12 }}>\n                                    {translate(\n                                        \"pages.login.noAccount\",\n                                        \"Don’t have an account?\",\n                                    )}{\" \"}\n                                    <a href=\"#\" style={{ fontWeight: \"bold\" }}>\n                                        {translate(\n                                            \"pages.login.signup\",\n                                            \"Sign up\",\n                                        )}\n                                    </a>\n                                </Text>\n                            </div>\n                        </Card>\n                    </div>\n                </Col>\n            </Row>\n        </Layout>\n    );\n};\n","import { CSSProperties } from \"react\";\n\nexport const layoutStyles: CSSProperties = {\n    background: `radial-gradient(50% 50% at 50% 50%, #63386A 0%, #310438 100%)`,\n    backgroundSize: \"cover\",\n};\n\nexport const containerStyles: CSSProperties = {\n    maxWidth: \"408px\",\n    margin: \"auto\",\n};\n\nexport const titleStyles: CSSProperties = {\n    textAlign: \"center\",\n    color: \"#626262\",\n    fontSize: \"30px\",\n    letterSpacing: \"-0.04em\",\n};\n\nexport const imageContainer: CSSProperties = {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    marginBottom: \"28px\",\n};\n","import * as React from \"react\";\nimport { RefineReadyPageProps } from \"@refinedev/ui-types\";\nimport { Row, Col, Typography, Space, Button } from \"antd\";\nimport { ReadOutlined, FolderOutlined, TeamOutlined } from \"@ant-design/icons\";\n\nconst styles: { [key: string]: React.CSSProperties } = {\n    root: {\n        height: \"100vh\",\n        backgroundImage:\n            \"url('https://refine.ams3.cdn.digitaloceanspaces.com/login-background/background.png')\",\n        backgroundSize: \"cover\",\n        backgroundColor: \"#331049\",\n    },\n    title: {\n        color: \"white\",\n        fontWeight: 800,\n        fontSize: \"64px\",\n        marginBottom: \"8px\",\n    },\n    p1: {\n        color: \"white\",\n        marginBottom: 0,\n        fontSize: \"20px\",\n        fontWeight: \"bold\",\n    },\n    p2: {\n        color: \"white\",\n        fontSize: \"20px\",\n    },\n    code: {\n        backgroundColor: \"white\",\n        color: \"#331049\",\n    },\n};\n\nconst { Title } = Typography;\n\n/**\n * **refine** shows a default ready page on root route when no `resources` is passed to the `<Refine>` component as a property.\n *\n * @deprecated `ReadyPage` is deprecated and will be removed in the next major release.\n */\nexport const ReadyPage: React.FC<RefineReadyPageProps> = () => {\n    return (\n        <Row align=\"middle\" justify=\"center\" style={styles.root}>\n            <Col style={{ textAlign: \"center\" }}>\n                <img\n                    style={{ marginBottom: \"48px\" }}\n                    src=\"https://refine.ams3.cdn.digitaloceanspaces.com/logo/refine.svg\"\n                    alt=\"Refine Logo\"\n                />\n                <Title style={styles.title}>Welcome on board</Title>\n                <p style={styles.p1}>Your configuration is completed.</p>\n                <p style={styles.p2}>\n                    Now you can get started by adding your resources to the{\" \"}\n                    <code style={styles.code}>{`resources`}</code> property of{\" \"}\n                    <code style={styles.code}>{`<Refine>`}</code>\n                </p>\n                <Space\n                    size=\"large\"\n                    wrap\n                    style={{ marginTop: \"70px\", justifyContent: \"center\" }}\n                >\n                    <a\n                        href=\"https://refine.dev\"\n                        target=\"_blank\"\n                        rel=\"noreferrer\"\n                    >\n                        <Button size=\"large\" icon={<ReadOutlined />}>\n                            Documentation\n                        </Button>\n                    </a>\n                    <a\n                        href=\"https://refine.dev/examples\"\n                        target=\"_blank\"\n                        rel=\"noreferrer\"\n                    >\n                        <Button size=\"large\" icon={<FolderOutlined />}>\n                            Examples\n                        </Button>\n                    </a>\n                    <a\n                        href=\"https://discord.gg/refine\"\n                        target=\"_blank\"\n                        rel=\"noreferrer\"\n                    >\n                        <Button size=\"large\" icon={<TeamOutlined />}>\n                            Community\n                        </Button>\n                    </a>\n                </Space>\n            </Col>\n        </Row>\n    );\n};\n","import React from \"react\";\nimport { WelcomePage as WelcomePageFromCore } from \"@refinedev/core\";\n\n/**\n * It is a page that welcomes you after the configuration is completed.\n * @deprecated `WelcomePage` is deprecated. Use `WelcomePage` from `@refinedev/core` instead.\n */\nexport const WelcomePage: React.FC = () => {\n    return <WelcomePageFromCore />;\n};\n","import React from \"react\";\nimport { CardProps, FormProps, LayoutProps } from \"antd\";\nimport { AuthPageProps } from \"@refinedev/core\";\n\nimport {\n    LoginPage,\n    RegisterPage,\n    ForgotPasswordPage,\n    UpdatePasswordPage,\n} from \"./components\";\n\nexport type AuthProps = AuthPageProps<LayoutProps, CardProps, FormProps> & {\n    renderContent?: (\n        content: React.ReactNode,\n        title: React.ReactNode,\n    ) => React.ReactNode;\n    title?: React.ReactNode;\n};\n\n/**\n * **refine** has a default auth page form served on the `/login` route when the `authProvider` configuration is provided.\n *\n * @see {@link https://refine.dev/docs/api-reference/antd/components/antd-auth-page/} for more details.\n */\nexport const AuthPage: React.FC<AuthProps> = (props) => {\n    const { type } = props;\n    const renderView = () => {\n        switch (type) {\n            case \"register\":\n                return <RegisterPage {...props} />;\n            case \"forgotPassword\":\n                return <ForgotPasswordPage {...props} />;\n            case \"updatePassword\":\n                return <UpdatePasswordPage {...props} />;\n            default:\n                return <LoginPage {...props} />;\n        }\n    };\n\n    return <>{renderView()}</>;\n};\n","import React from \"react\";\nimport {\n    LoginPageProps,\n    LoginFormTypes,\n    useLink,\n    useRouterType,\n    useActiveAuthProvider,\n} from \"@refinedev/core\";\nimport {\n    Row,\n    Col,\n    Layout,\n    Card,\n    Typography,\n    Form,\n    Input,\n    Button,\n    Checkbox,\n    CardProps,\n    LayoutProps,\n    Divider,\n    FormProps,\n    theme,\n} from \"antd\";\nimport { useLogin, useTranslate, useRouterContext } from \"@refinedev/core\";\n\nimport {\n    bodyStyles,\n    containerStyles,\n    headStyles,\n    layoutStyles,\n    titleStyles,\n} from \"../styles\";\nimport { ThemedTitleV2 } from \"@components\";\n\nconst { Text, Title } = Typography;\nconst { useToken } = theme;\n\ntype LoginProps = LoginPageProps<LayoutProps, CardProps, FormProps>;\n/**\n * **refine** has a default login page form which is served on `/login` route when the `authProvider` configuration is provided.\n *\n * @see {@link https://refine.dev/docs/ui-frameworks/antd/components/antd-auth-page/#login} for more details.\n */\nexport const LoginPage: React.FC<LoginProps> = ({\n    providers,\n    registerLink,\n    forgotPasswordLink,\n    rememberMe,\n    contentProps,\n    wrapperProps,\n    renderContent,\n    formProps,\n    title,\n    hideForm,\n}) => {\n    const { token } = useToken();\n    const [form] = Form.useForm<LoginFormTypes>();\n    const translate = useTranslate();\n    const routerType = useRouterType();\n    const Link = useLink();\n    const { Link: LegacyLink } = useRouterContext();\n\n    const ActiveLink = routerType === \"legacy\" ? LegacyLink : Link;\n\n    const authProvider = useActiveAuthProvider();\n    const { mutate: login, isLoading } = useLogin<LoginFormTypes>({\n        v3LegacyAuthProviderCompatible: Boolean(authProvider?.isLegacy),\n    });\n\n    const PageTitle =\n        title === false ? null : (\n            <div\n                style={{\n                    display: \"flex\",\n                    justifyContent: \"center\",\n                    marginBottom: \"32px\",\n                    fontSize: \"20px\",\n                }}\n            >\n                {title ?? <ThemedTitleV2 collapsed={false} />}\n            </div>\n        );\n\n    const CardTitle = (\n        <Title\n            level={3}\n            style={{\n                color: token.colorPrimaryTextHover,\n                ...titleStyles,\n            }}\n        >\n            {translate(\"pages.login.title\", \"Sign in to your account\")}\n        </Title>\n    );\n\n    const renderProviders = () => {\n        if (providers && providers.length > 0) {\n            return (\n                <>\n                    {providers.map((provider) => {\n                        return (\n                            <Button\n                                key={provider.name}\n                                type=\"default\"\n                                block\n                                icon={provider.icon}\n                                style={{\n                                    display: \"flex\",\n                                    justifyContent: \"center\",\n                                    alignItems: \"center\",\n                                    width: \"100%\",\n                                    marginBottom: \"8px\",\n                                }}\n                                onClick={() =>\n                                    login({\n                                        providerName: provider.name,\n                                    })\n                                }\n                            >\n                                {provider.label}\n                            </Button>\n                        );\n                    })}\n                    {!hideForm && (\n                        <Divider>\n                            <Text\n                                style={{\n                                    color: token.colorTextLabel,\n                                }}\n                            >\n                                {translate(\"pages.login.divider\", \"or\")}\n                            </Text>\n                        </Divider>\n                    )}\n                </>\n            );\n        }\n        return null;\n    };\n\n    const CardContent = (\n        <Card\n            title={CardTitle}\n            headStyle={headStyles}\n            bodyStyle={bodyStyles}\n            style={{\n                ...containerStyles,\n                backgroundColor: token.colorBgElevated,\n            }}\n            {...(contentProps ?? {})}\n        >\n            {renderProviders()}\n            {!hideForm && (\n                <Form<LoginFormTypes>\n                    layout=\"vertical\"\n                    form={form}\n                    onFinish={(values) => login(values)}\n                    requiredMark={false}\n                    initialValues={{\n                        remember: false,\n                    }}\n                    {...formProps}\n                >\n                    <Form.Item\n                        name=\"email\"\n                        label={translate(\"pages.login.fields.email\", \"Email\")}\n                        rules={[\n                            { required: true },\n                            {\n                                type: \"email\",\n                                message: translate(\n                                    \"pages.login.errors.validEmail\",\n                                    \"Invalid email address\",\n                                ),\n                            },\n                        ]}\n                    >\n                        <Input\n                            size=\"large\"\n                            placeholder={translate(\n                                \"pages.login.fields.email\",\n                                \"Email\",\n                            )}\n                        />\n                    </Form.Item>\n                    <Form.Item\n                        name=\"password\"\n                        label={translate(\n                            \"pages.login.fields.password\",\n                            \"Password\",\n                        )}\n                        rules={[{ required: true }]}\n                    >\n                        <Input\n                            type=\"password\"\n                            autoComplete=\"current-password\"\n                            placeholder=\"●●●●●●●●\"\n                            size=\"large\"\n                        />\n                    </Form.Item>\n                    <div\n                        style={{\n                            display: \"flex\",\n                            justifyContent: \"space-between\",\n                            marginBottom: \"24px\",\n                        }}\n                    >\n                        {rememberMe ?? (\n                            <Form.Item\n                                name=\"remember\"\n                                valuePropName=\"checked\"\n                                noStyle\n                            >\n                                <Checkbox\n                                    style={{\n                                        fontSize: \"12px\",\n                                    }}\n                                >\n                                    {translate(\n                                        \"pages.login.buttons.rememberMe\",\n                                        \"Remember me\",\n                                    )}\n                                </Checkbox>\n                            </Form.Item>\n                        )}\n                        {forgotPasswordLink ?? (\n                            <ActiveLink\n                                style={{\n                                    color: token.colorPrimaryTextHover,\n                                    fontSize: \"12px\",\n                                    marginLeft: \"auto\",\n                                }}\n                                to=\"/forgot-password\"\n                            >\n                                {translate(\n                                    \"pages.login.buttons.forgotPassword\",\n                                    \"Forgot password?\",\n                                )}\n                            </ActiveLink>\n                        )}\n                    </div>\n                    {!hideForm && (\n                        <Form.Item>\n                            <Button\n                                type=\"primary\"\n                                size=\"large\"\n                                htmlType=\"submit\"\n                                loading={isLoading}\n                                block\n                            >\n                                {translate(\"pages.login.signin\", \"Sign in\")}\n                            </Button>\n                        </Form.Item>\n                    )}\n                </Form>\n            )}\n\n            {registerLink ?? (\n                <div\n                    style={{\n                        marginTop: hideForm ? 16 : 8,\n                    }}\n                >\n                    <Text style={{ fontSize: 12 }}>\n                        {translate(\n                            \"pages.login.buttons.noAccount\",\n                            \"Don’t have an account?\",\n                        )}{\" \"}\n                        <ActiveLink\n                            to=\"/register\"\n                            style={{\n                                fontWeight: \"bold\",\n                                color: token.colorPrimaryTextHover,\n                            }}\n                        >\n                            {translate(\"pages.login.signup\", \"Sign up\")}\n                        </ActiveLink>\n                    </Text>\n                </div>\n            )}\n        </Card>\n    );\n\n    return (\n        <Layout style={layoutStyles} {...(wrapperProps ?? {})}>\n            <Row\n                justify=\"center\"\n                align={hideForm ? \"top\" : \"middle\"}\n                style={{\n                    padding: \"16px 0\",\n                    minHeight: \"100dvh\",\n                    paddingTop: hideForm ? \"15dvh\" : \"16px\",\n                }}\n            >\n                <Col xs={22}>\n                    {renderContent ? (\n                        renderContent(CardContent, PageTitle)\n                    ) : (\n                        <>\n                            {PageTitle}\n                            {CardContent}\n                        </>\n                    )}\n                </Col>\n            </Row>\n        </Layout>\n    );\n};\n","import { CSSProperties } from \"react\";\n\nexport const layoutStyles: CSSProperties = {};\n\nexport const containerStyles: CSSProperties = {\n    maxWidth: \"400px\",\n    margin: \"auto\",\n    padding: \"32px\",\n    boxShadow:\n        \"0px 2px 4px rgba(0, 0, 0, 0.02), 0px 1px 6px -1px rgba(0, 0, 0, 0.02), 0px 1px 2px rgba(0, 0, 0, 0.03)\",\n};\n\nexport const headStyles: CSSProperties = {\n    borderBottom: 0,\n    padding: 0,\n};\n\nexport const bodyStyles: CSSProperties = { padding: 0, marginTop: \"32px\" };\n\nexport const titleStyles: CSSProperties = {\n    textAlign: \"center\",\n    marginBottom: 0,\n    fontSize: \"24px\",\n    lineHeight: \"32px\",\n    fontWeight: 700,\n    overflowWrap: \"break-word\",\n    hyphens: \"manual\",\n    textOverflow: \"unset\",\n    whiteSpace: \"pre-wrap\",\n};\n","import React from \"react\";\nimport {\n    RegisterPageProps,\n    RegisterFormTypes,\n    useRouterType,\n    useLink,\n    useActiveAuthProvider,\n} from \"@refinedev/core\";\nimport {\n    Row,\n    Col,\n    Layout,\n    Card,\n    Typography,\n    Form,\n    Input,\n    Button,\n    LayoutProps,\n    CardProps,\n    FormProps,\n    Divider,\n    theme,\n} from \"antd\";\nimport { useTranslate, useRouterContext, useRegister } from \"@refinedev/core\";\n\nimport {\n    layoutStyles,\n    containerStyles,\n    titleStyles,\n    headStyles,\n    bodyStyles,\n} from \"../styles\";\nimport { ThemedTitleV2 } from \"@components\";\n\nconst { Text, Title } = Typography;\nconst { useToken } = theme;\n\ntype RegisterProps = RegisterPageProps<LayoutProps, CardProps, FormProps>;\n/**\n * **refine** has register page form which is served on `/register` route when the `authProvider` configuration is provided.\n *\n * @see {@link https://refine.dev/docs/ui-frameworks/antd/components/antd-auth-page/#register} for more details.\n */\nexport const RegisterPage: React.FC<RegisterProps> = ({\n    providers,\n    loginLink,\n    wrapperProps,\n    contentProps,\n    renderContent,\n    formProps,\n    title,\n    hideForm,\n}) => {\n    const { token } = useToken();\n    const [form] = Form.useForm<RegisterFormTypes>();\n    const translate = useTranslate();\n    const routerType = useRouterType();\n    const Link = useLink();\n    const { Link: LegacyLink } = useRouterContext();\n\n    const ActiveLink = routerType === \"legacy\" ? LegacyLink : Link;\n\n    const authProvider = useActiveAuthProvider();\n    const { mutate: register, isLoading } = useRegister<RegisterFormTypes>({\n        v3LegacyAuthProviderCompatible: Boolean(authProvider?.isLegacy),\n    });\n\n    const PageTitle =\n        title === false ? null : (\n            <div\n                style={{\n                    display: \"flex\",\n                    justifyContent: \"center\",\n                    marginBottom: \"32px\",\n                    fontSize: \"20px\",\n                }}\n            >\n                {title ?? <ThemedTitleV2 collapsed={false} />}\n            </div>\n        );\n\n    const CardTitle = (\n        <Title\n            level={3}\n            style={{\n                color: token.colorPrimaryTextHover,\n                ...titleStyles,\n            }}\n        >\n            {translate(\"pages.register.title\", \"Sign up for your account\")}\n        </Title>\n    );\n\n    const renderProviders = () => {\n        if (providers && providers.length > 0) {\n            return (\n                <>\n                    {providers.map((provider) => {\n                        return (\n                            <Button\n                                key={provider.name}\n                                type=\"default\"\n                                block\n                                icon={provider.icon}\n                                style={{\n                                    display: \"flex\",\n                                    justifyContent: \"center\",\n                                    alignItems: \"center\",\n                                    width: \"100%\",\n                                    marginBottom: \"8px\",\n                                }}\n                                onClick={() =>\n                                    register({\n                                        providerName: provider.name,\n                                    })\n                                }\n                            >\n                                {provider.label}\n                            </Button>\n                        );\n                    })}\n                    {!hideForm && (\n                        <Divider>\n                            <Text\n                                style={{\n                                    color: token.colorTextLabel,\n                                }}\n                            >\n                                {translate(\"pages.login.divider\", \"or\")}\n                            </Text>\n                        </Divider>\n                    )}\n                </>\n            );\n        }\n        return null;\n    };\n\n    const CardContent = (\n        <Card\n            title={CardTitle}\n            headStyle={headStyles}\n            bodyStyle={bodyStyles}\n            style={{\n                ...containerStyles,\n                backgroundColor: token.colorBgElevated,\n            }}\n            {...(contentProps ?? {})}\n        >\n            {renderProviders()}\n            {!hideForm && (\n                <Form<RegisterFormTypes>\n                    layout=\"vertical\"\n                    form={form}\n                    onFinish={(values) => register(values)}\n                    requiredMark={false}\n                    {...formProps}\n                >\n                    <Form.Item\n                        name=\"email\"\n                        label={translate(\"pages.register.email\", \"Email\")}\n                        rules={[\n                            { required: true },\n                            {\n                                type: \"email\",\n                                message: translate(\n                                    \"pages.register.errors.validEmail\",\n                                    \"Invalid email address\",\n                                ),\n                            },\n                        ]}\n                    >\n                        <Input\n                            size=\"large\"\n                            placeholder={translate(\n                                \"pages.register.fields.email\",\n                                \"Email\",\n                            )}\n                        />\n                    </Form.Item>\n                    <Form.Item\n                        name=\"password\"\n                        label={translate(\n                            \"pages.register.fields.password\",\n                            \"Password\",\n                        )}\n                        rules={[{ required: true }]}\n                    >\n                        <Input\n                            type=\"password\"\n                            placeholder=\"●●●●●●●●\"\n                            size=\"large\"\n                        />\n                    </Form.Item>\n                    <div\n                        style={{\n                            display: \"flex\",\n                            justifyContent: \"space-between\",\n                            marginBottom: \"24px\",\n                        }}\n                    >\n                        {loginLink ?? (\n                            <Text\n                                style={{\n                                    fontSize: 12,\n                                    marginLeft: \"auto\",\n                                }}\n                            >\n                                {translate(\n                                    \"pages.login.buttons.haveAccount\",\n                                    \"Have an account?\",\n                                )}{\" \"}\n                                <ActiveLink\n                                    style={{\n                                        fontWeight: \"bold\",\n                                        color: token.colorPrimaryTextHover,\n                                    }}\n                                    to=\"/login\"\n                                >\n                                    {translate(\"pages.login.signin\", \"Sign in\")}\n                                </ActiveLink>\n                            </Text>\n                        )}\n                    </div>\n                    <Form.Item\n                        style={{\n                            marginBottom: 0,\n                        }}\n                    >\n                        <Button\n                            type=\"primary\"\n                            size=\"large\"\n                            htmlType=\"submit\"\n                            loading={isLoading}\n                            block\n                        >\n                            {translate(\n                                \"pages.register.buttons.submit\",\n                                \"Sign up\",\n                            )}\n                        </Button>\n                    </Form.Item>\n                </Form>\n            )}\n            {hideForm && loginLink !== false && (\n                <div\n                    style={{\n                        marginTop: hideForm ? 16 : 8,\n                    }}\n                >\n                    <Text\n                        style={{\n                            fontSize: 12,\n                        }}\n                    >\n                        {translate(\n                            \"pages.login.buttons.haveAccount\",\n                            \"Have an account?\",\n                        )}{\" \"}\n                        <ActiveLink\n                            style={{\n                                fontWeight: \"bold\",\n                                color: token.colorPrimaryTextHover,\n                            }}\n                            to=\"/login\"\n                        >\n                            {translate(\"pages.login.signin\", \"Sign in\")}\n                        </ActiveLink>\n                    </Text>\n                </div>\n            )}\n        </Card>\n    );\n\n    return (\n        <Layout style={layoutStyles} {...(wrapperProps ?? {})}>\n            <Row\n                justify=\"center\"\n                align={hideForm ? \"top\" : \"middle\"}\n                style={{\n                    padding: \"16px 0\",\n                    minHeight: \"100dvh\",\n                    paddingTop: hideForm ? \"15dvh\" : \"16px\",\n                }}\n            >\n                <Col xs={22}>\n                    {renderContent ? (\n                        renderContent(CardContent, PageTitle)\n                    ) : (\n                        <>\n                            {PageTitle}\n                            {CardContent}\n                        </>\n                    )}\n                </Col>\n            </Row>\n        </Layout>\n    );\n};\n","import React from \"react\";\nimport {\n    ForgotPasswordPageProps,\n    ForgotPasswordFormTypes,\n    useRouterType,\n    useLink,\n} from \"@refinedev/core\";\nimport {\n    Row,\n    Col,\n    Layout,\n    Card,\n    Typography,\n    Form,\n    Input,\n    Button,\n    LayoutProps,\n    CardProps,\n    FormProps,\n    theme,\n} from \"antd\";\nimport {\n    useTranslate,\n    useRouterContext,\n    useForgotPassword,\n} from \"@refinedev/core\";\n\nimport {\n    layoutStyles,\n    containerStyles,\n    titleStyles,\n    headStyles,\n    bodyStyles,\n} from \"../styles\";\nimport { ThemedTitleV2 } from \"@components\";\n\ntype ResetPassworProps = ForgotPasswordPageProps<\n    LayoutProps,\n    CardProps,\n    FormProps\n>;\n\nconst { Text, Title } = Typography;\nconst { useToken } = theme;\n\n/**\n * **refine** has forgot password page form which is served on `/forgot-password` route when the `authProvider` configuration is provided.\n *\n * @see {@link https://refine.dev/docs/ui-frameworks/antd/components/antd-auth-page/#forgot-password} for more details.\n */\nexport const ForgotPasswordPage: React.FC<ResetPassworProps> = ({\n    loginLink,\n    wrapperProps,\n    contentProps,\n    renderContent,\n    formProps,\n    title,\n}) => {\n    const { token } = useToken();\n    const [form] = Form.useForm<ForgotPasswordFormTypes>();\n    const translate = useTranslate();\n    const routerType = useRouterType();\n    const Link = useLink();\n    const { Link: LegacyLink } = useRouterContext();\n\n    const ActiveLink = routerType === \"legacy\" ? LegacyLink : Link;\n\n    const { mutate: forgotPassword, isLoading } =\n        useForgotPassword<ForgotPasswordFormTypes>();\n\n    const PageTitle =\n        title === false ? null : (\n            <div\n                style={{\n                    display: \"flex\",\n                    justifyContent: \"center\",\n                    marginBottom: \"32px\",\n                    fontSize: \"20px\",\n                }}\n            >\n                {title ?? <ThemedTitleV2 collapsed={false} />}\n            </div>\n        );\n\n    const CardTitle = (\n        <Title\n            level={3}\n            style={{\n                color: token.colorPrimaryTextHover,\n                ...titleStyles,\n            }}\n        >\n            {translate(\"pages.forgotPassword.title\", \"Forgot your password?\")}\n        </Title>\n    );\n    const CardContent = (\n        <Card\n            title={CardTitle}\n            headStyle={headStyles}\n            bodyStyle={bodyStyles}\n            style={{\n                ...containerStyles,\n                backgroundColor: token.colorBgElevated,\n            }}\n            {...(contentProps ?? {})}\n        >\n            <Form<ForgotPasswordFormTypes>\n                layout=\"vertical\"\n                form={form}\n                onFinish={(values) => forgotPassword(values)}\n                requiredMark={false}\n                {...formProps}\n            >\n                <Form.Item\n                    name=\"email\"\n                    label={translate(\n                        \"pages.forgotPassword.fields.email\",\n                        \"Email\",\n                    )}\n                    rules={[\n                        { required: true },\n                        {\n                            type: \"email\",\n                            message: translate(\n                                \"pages.forgotPassword.errors.validEmail\",\n                                \"Invalid email address\",\n                            ),\n                        },\n                    ]}\n                >\n                    <Input\n                        type=\"email\"\n                        size=\"large\"\n                        placeholder={translate(\n                            \"pages.forgotPassword.fields.email\",\n                            \"Email\",\n                        )}\n                    />\n                </Form.Item>\n                <div\n                    style={{\n                        display: \"flex\",\n                        justifyContent: \"space-between\",\n                    }}\n                >\n                    {loginLink ?? (\n                        <Text\n                            style={{\n                                fontSize: 12,\n                                marginLeft: \"auto\",\n                            }}\n                        >\n                            {translate(\n                                \"pages.register.buttons.haveAccount\",\n                                \"Have an account? \",\n                            )}{\" \"}\n                            <ActiveLink\n                                style={{\n                                    fontWeight: \"bold\",\n                                    color: token.colorPrimaryTextHover,\n                                }}\n                                to=\"/login\"\n                            >\n                                {translate(\"pages.login.signin\", \"Sign in\")}\n                            </ActiveLink>\n                        </Text>\n                    )}\n                </div>\n                <Form.Item\n                    style={{\n                        marginTop: \"24px\",\n                        marginBottom: 0,\n                    }}\n                >\n                    <Button\n                        type=\"primary\"\n                        size=\"large\"\n                        htmlType=\"submit\"\n                        loading={isLoading}\n                        block\n                    >\n                        {translate(\n                            \"pages.forgotPassword.buttons.submit\",\n                            \"Send reset instructions\",\n                        )}\n                    </Button>\n                </Form.Item>\n            </Form>\n        </Card>\n    );\n\n    return (\n        <Layout style={layoutStyles} {...(wrapperProps ?? {})}>\n            <Row\n                justify=\"center\"\n                align=\"middle\"\n                style={{\n                    padding: \"16px 0\",\n                    minHeight: \"100dvh\",\n                }}\n            >\n                <Col xs={22}>\n                    {renderContent ? (\n                        renderContent(CardContent, PageTitle)\n                    ) : (\n                        <>\n                            {PageTitle}\n                            {CardContent}\n                        </>\n                    )}\n                </Col>\n            </Row>\n        </Layout>\n    );\n};\n","import React from \"react\";\nimport {\n    UpdatePasswordPageProps,\n    UpdatePasswordFormTypes,\n    useActiveAuthProvider,\n} from \"@refinedev/core\";\nimport {\n    Row,\n    Col,\n    Layout,\n    Card,\n    Typography,\n    Form,\n    Input,\n    Button,\n    LayoutProps,\n    CardProps,\n    FormProps,\n    theme,\n} from \"antd\";\nimport { useTranslate, useUpdatePassword } from \"@refinedev/core\";\n\nimport {\n    layoutStyles,\n    containerStyles,\n    titleStyles,\n    headStyles,\n    bodyStyles,\n} from \"../styles\";\nimport { ThemedTitleV2 } from \"@components\";\n\nconst { Title } = Typography;\nconst { useToken } = theme;\n\ntype UpdatePasswordProps = UpdatePasswordPageProps<\n    LayoutProps,\n    CardProps,\n    FormProps\n>;\n\n/**\n * **refine** has update password page form which is served on `/update-password` route when the `authProvider` configuration is provided.\n *\n * @see {@link https://refine.dev/docs/ui-frameworks/antd/components/antd-auth-page/#update-password} for more details.\n */\nexport const UpdatePasswordPage: React.FC<UpdatePasswordProps> = ({\n    wrapperProps,\n    contentProps,\n    renderContent,\n    formProps,\n    title,\n}) => {\n    const { token } = useToken();\n    const [form] = Form.useForm<UpdatePasswordFormTypes>();\n    const translate = useTranslate();\n    const authProvider = useActiveAuthProvider();\n    const { mutate: updatePassword, isLoading } =\n        useUpdatePassword<UpdatePasswordFormTypes>({\n            v3LegacyAuthProviderCompatible: Boolean(authProvider?.isLegacy),\n        });\n\n    const PageTitle =\n        title === false ? null : (\n            <div\n                style={{\n                    display: \"flex\",\n                    justifyContent: \"center\",\n                    marginBottom: \"32px\",\n                    fontSize: \"20px\",\n                }}\n            >\n                {title ?? <ThemedTitleV2 collapsed={false} />}\n            </div>\n        );\n\n    const CardTitle = (\n        <Title\n            level={3}\n            style={{\n                color: token.colorPrimaryTextHover,\n                ...titleStyles,\n            }}\n        >\n            {translate(\"pages.updatePassword.title\", \"Set New Password\")}\n        </Title>\n    );\n\n    const CardContent = (\n        <Card\n            title={CardTitle}\n            headStyle={headStyles}\n            bodyStyle={bodyStyles}\n            style={{\n                ...containerStyles,\n                backgroundColor: token.colorBgElevated,\n            }}\n            {...(contentProps ?? {})}\n        >\n            <Form<UpdatePasswordFormTypes>\n                layout=\"vertical\"\n                form={form}\n                onFinish={(values) => updatePassword(values)}\n                requiredMark={false}\n                {...formProps}\n            >\n                <Form.Item\n                    name=\"password\"\n                    label={translate(\n                        \"pages.updatePassword.fields.password\",\n                        \"New Password\",\n                    )}\n                    rules={[{ required: true }]}\n                    style={{ marginBottom: \"12px\" }}\n                >\n                    <Input\n                        type=\"password\"\n                        placeholder=\"●●●●●●●●\"\n                        size=\"large\"\n                    />\n                </Form.Item>\n                <Form.Item\n                    name=\"confirmPassword\"\n                    label={translate(\n                        \"pages.updatePassword.fields.confirmPassword\",\n                        \"Confirm New Password\",\n                    )}\n                    hasFeedback\n                    dependencies={[\"password\"]}\n                    rules={[\n                        {\n                            required: true,\n                        },\n                        ({ getFieldValue }) => ({\n                            validator(_, value) {\n                                if (\n                                    !value ||\n                                    getFieldValue(\"password\") === value\n                                ) {\n                                    return Promise.resolve();\n                                }\n                                return Promise.reject(\n                                    new Error(\n                                        translate(\n                                            \"pages.updatePassword.errors.confirmPasswordNotMatch\",\n                                            \"Passwords do not match\",\n                                        ),\n                                    ),\n                                );\n                            },\n                        }),\n                    ]}\n                >\n                    <Input\n                        type=\"password\"\n                        placeholder=\"●●●●●●●●\"\n                        size=\"large\"\n                    />\n                </Form.Item>\n                <Form.Item\n                    style={{\n                        marginBottom: 0,\n                    }}\n                >\n                    <Button\n                        type=\"primary\"\n                        size=\"large\"\n                        htmlType=\"submit\"\n                        loading={isLoading}\n                        block\n                    >\n                        {translate(\n                            \"pages.updatePassword.buttons.submit\",\n                            \"Update\",\n                        )}\n                    </Button>\n                </Form.Item>\n            </Form>\n        </Card>\n    );\n\n    return (\n        <Layout style={layoutStyles} {...(wrapperProps ?? {})}>\n            <Row\n                justify=\"center\"\n                align=\"middle\"\n                style={{\n                    padding: \"16px 0\",\n                    minHeight: \"100dvh\",\n                }}\n            >\n                <Col xs={22}>\n                    {renderContent ? (\n                        renderContent(CardContent, PageTitle)\n                    ) : (\n                        <>\n                            {PageTitle}\n                            {CardContent}\n                        </>\n                    )}\n                </Col>\n            </Row>\n        </Layout>\n    );\n};\n","import React from \"react\";\nimport {\n    useBreadcrumb,\n    useLink,\n    useRefineContext,\n    useRouterContext,\n    useRouterType,\n    useResource,\n    matchResourceFromRoute,\n} from \"@refinedev/core\";\nimport { RefineBreadcrumbProps } from \"@refinedev/ui-types\";\n\nimport {\n    Breadcrumb as AntdBreadcrumb,\n    BreadcrumbProps as AntdBreadcrumbProps,\n} from \"antd\";\nimport { HomeOutlined } from \"@ant-design/icons\";\n\nexport type BreadcrumbProps = RefineBreadcrumbProps<AntdBreadcrumbProps>;\n\nexport const Breadcrumb: React.FC<BreadcrumbProps> = ({\n    breadcrumbProps,\n    showHome = true,\n    hideIcons = false,\n    meta,\n}) => {\n    const routerType = useRouterType();\n    const { breadcrumbs } = useBreadcrumb({\n        meta,\n    });\n    const Link = useLink();\n    const { Link: LegacyLink } = useRouterContext();\n    const { hasDashboard } = useRefineContext();\n\n    const { resources } = useResource();\n\n    const rootRouteResource = matchResourceFromRoute(\"/\", resources);\n\n    const ActiveLink = routerType === \"legacy\" ? LegacyLink : Link;\n\n    if (breadcrumbs.length === 1) {\n        return null;\n    }\n\n    const breadCrumbItems = breadcrumbs.map(({ label, icon, href }) => ({\n        key: `breadcrumb-item-${label}`,\n        title: (\n            <div\n                style={{\n                    display: \"flex\",\n                    alignItems: \"center\",\n                    justifyContent: \"center\",\n                    gap: 4,\n                }}\n            >\n                {!hideIcons && icon}\n                {href ? (\n                    <ActiveLink to={href}>{label}</ActiveLink>\n                ) : (\n                    <span>{label}</span>\n                )}\n            </div>\n        ),\n    }));\n\n    const getBreadcrumbItems = () => {\n        if (showHome && (hasDashboard || rootRouteResource.found)) {\n            return [\n                {\n                    key: \"breadcrumb-item-home\",\n                    title: (\n                        <ActiveLink to=\"/\">\n                            {rootRouteResource?.resource?.meta?.icon ?? (\n                                <HomeOutlined />\n                            )}\n                        </ActiveLink>\n                    ),\n                },\n                ...breadCrumbItems,\n            ];\n        }\n\n        return breadCrumbItems;\n    };\n\n    return <AntdBreadcrumb items={getBreadcrumbItems()} {...breadcrumbProps} />;\n};\n","import React, { FC } from \"react\";\nimport {\n    PageHeader as AntdPageHeader,\n    PageHeaderProps as AntdPageHeaderProps,\n} from \"@ant-design/pro-layout\";\nimport { Button, Typography } from \"antd\";\nimport { ArrowLeftOutlined } from \"@ant-design/icons\";\nimport { RefinePageHeaderClassNames } from \"@refinedev/ui-types\";\n\nexport type PageHeaderProps = AntdPageHeaderProps;\n\nexport const PageHeader: FC<AntdPageHeaderProps> = ({ children, ...props }) => {\n    const backIcon =\n        typeof props.backIcon === \"undefined\" ? (\n            <Button type=\"text\" icon={<ArrowLeftOutlined />} />\n        ) : (\n            props.backIcon\n        );\n\n    const title =\n        typeof props.title === \"string\" ? (\n            <Typography.Title\n                className={RefinePageHeaderClassNames.Title}\n                level={4}\n                style={{ marginBottom: 0 }}\n            >\n                {props.title}\n            </Typography.Title>\n        ) : (\n            props.title\n        );\n\n    const subtitle =\n        typeof props.title === \"string\" ? (\n            <Typography.Title\n                className={RefinePageHeaderClassNames.SubTitle}\n                level={5}\n                type=\"secondary\"\n                style={{ marginBottom: 0 }}\n            >\n                {props.subTitle}\n            </Typography.Title>\n        ) : (\n            props.subTitle\n        );\n\n    return (\n        <AntdPageHeader\n            {...props}\n            backIcon={backIcon}\n            title={title}\n            subTitle={subtitle}\n            style={{ padding: 0, ...props.style }}\n        >\n            {children}\n        </AntdPageHeader>\n    );\n};\n","import React from \"react\";\nimport {\n    AutoSaveIndicatorProps,\n    useTranslate,\n    AutoSaveIndicator as AutoSaveIndicatorCore,\n} from \"@refinedev/core\";\nimport { Typography, theme } from \"antd\";\nimport {\n    EllipsisOutlined,\n    SyncOutlined,\n    CheckCircleOutlined,\n    ExclamationCircleOutlined,\n} from \"@ant-design/icons\";\n\nexport const AutoSaveIndicator: React.FC<AutoSaveIndicatorProps> = ({\n    status,\n    elements: {\n        success = (\n            <Message\n                key=\"autoSave.success\"\n                defaultMessage=\"saved\"\n                icon={<CheckCircleOutlined />}\n            />\n        ),\n        error = (\n            <Message\n                key=\"autoSave.error\"\n                defaultMessage=\"auto save failure\"\n                icon={<ExclamationCircleOutlined />}\n            />\n        ),\n        loading = (\n            <Message\n                key=\"autoSave.loading\"\n                defaultMessage=\"saving...\"\n                icon={<SyncOutlined />}\n            />\n        ),\n        idle = (\n            <Message\n                key=\"autoSave.idle\"\n                defaultMessage=\"waiting for changes\"\n                icon={<EllipsisOutlined />}\n            />\n        ),\n    } = {},\n}) => {\n    return (\n        <AutoSaveIndicatorCore\n            status={status}\n            elements={{\n                success,\n                error,\n                loading,\n                idle,\n            }}\n        />\n    );\n};\n\nconst Message = ({\n    key,\n    defaultMessage,\n    icon,\n}: {\n    key: string;\n    defaultMessage: string;\n    icon: React.ReactNode;\n}) => {\n    const translate = useTranslate();\n    const { useToken } = theme;\n    const { token } = useToken();\n\n    return (\n        <Typography.Text\n            style={{\n                marginRight: 5,\n                color: token.colorTextTertiary,\n                fontSize: \".8rem\",\n            }}\n        >\n            {translate(key, defaultMessage)}\n            <span style={{ marginLeft: \".2rem\" }}>{icon}</span>\n        </Typography.Text>\n    );\n};\n","import type { UploadFile, UploadChangeParam } from \"antd/lib/upload/interface\";\n\nexport const getValueFromEvent = (event: UploadChangeParam): UploadFile[] => {\n    const { fileList } = event;\n\n    return [...fileList];\n};\n\nexport function file2Base64(file: UploadFile): Promise<string> {\n    return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n\n        const resultHandler = () => {\n            if (reader.result) {\n                reader.removeEventListener(\"load\", resultHandler, false);\n\n                resolve(reader.result as string);\n            }\n        };\n\n        reader.addEventListener(\"load\", resultHandler, false);\n\n        reader.readAsDataURL(file.originFileObj as Blob);\n        reader.onerror = (error) => {\n            reader.removeEventListener(\"load\", resultHandler, false);\n            return reject(error);\n        };\n    });\n}\n","import { ThemeConfig } from \"antd\";\n\ntype ThemeNames =\n    | \"Blue\"\n    | \"Purple\"\n    | \"Magenta\"\n    | \"Red\"\n    | \"Orange\"\n    | \"Yellow\"\n    | \"Green\";\n\ntype RefineThemes = Record<ThemeNames, ThemeConfig>;\n\nexport const RefineThemes: RefineThemes = {\n    Blue: {\n        token: {\n            colorPrimary: \"#1677FF\",\n        },\n    },\n    Purple: {\n        token: {\n            colorPrimary: \"#722ED1\",\n        },\n    },\n    Magenta: {\n        token: {\n            colorPrimary: \"#EB2F96\",\n        },\n    },\n    Red: {\n        token: {\n            colorPrimary: \"#F5222D\",\n        },\n    },\n    Orange: {\n        token: {\n            colorPrimary: \"#FA541C\",\n        },\n    },\n    Yellow: {\n        token: {\n            colorPrimary: \"#FAAD14\",\n        },\n    },\n    Green: {\n        token: {\n            colorPrimary: \"#52C41A\",\n        },\n    },\n};\n","import React from \"react\";\nimport { useResource } from \"@refinedev/core\";\n\nimport { ShowInferencer } from \"./show\";\nimport { ListInferencer as NextListInferencer } from \"./next/list\";\nimport { CreateInferencer } from \"./next/create\";\nimport { EditInferencer } from \"./edit\";\n\nimport type { InferencerComponentProps } from \"../../types\";\n\nconst AntdInferencer: React.FC<InferencerComponentProps> = ({\n    action: actionFromProps,\n    id: idFromProps,\n    ...props\n}) => {\n    const { action, id, ...rest } = useResource();\n    console.log('rest: ', rest);\n\n    switch (actionFromProps ?? action) {\n        case \"show\":\n            return <ShowInferencer {...props} id={idFromProps ?? id} />;\n        case \"create\":\n            return <CreateInferencer {...props} id={idFromProps ?? id} />;\n        case \"edit\":\n            return <EditInferencer {...props} id={idFromProps ?? id} />;\n        default:\n            return <NextListInferencer {...props} id={idFromProps ?? id} />;\n    }\n};\n\nexport { AntdInferencer };\nexport {\n    ShowInferencer as AntdShowInferencer,\n    renderer as AntdShowRenderer,\n} from \"./show\";\nexport {\n    EditInferencer as AntdEditInferencer,\n    renderer as AntdEditRenderer,\n} from \"./edit\";\nexport {\n    ListInferencer as AntdListInferencer,\n    renderer as AntdListRenderer,\n} from \"./next/list\";\nexport {\n    CreateInferencer as AntdCreateInferencer,\n    renderer as AntdCreateRenderer,\n} from \"./next/create\";\nexport * from \"../../types\";\n","import {\n    Show,\n    TagField,\n    TextField,\n    ImageField,\n    EmailField,\n    UrlField,\n    BooleanField,\n    DateField,\n    MarkdownField,\n    NumberField,\n} from \"@refinedev/antd\";\nimport { Typography } from \"antd\";\n\nimport { createInferencer } from \"../../create-inferencer\";\nimport {\n    jsx,\n    componentName,\n    accessor,\n    printImports,\n    toSingular,\n    noOp,\n    getVariableName,\n    translatePrettyString,\n    getMetaProps,\n    idQuoteWrapper,\n} from \"../../utilities\";\n\nimport { ErrorComponent } from \"./error\";\nimport { LoadingComponent } from \"./loading\";\nimport { SharedCodeViewer } from \"../../components/shared-code-viewer\";\n\nimport {\n    InferencerResultComponent,\n    InferField,\n    ImportElement,\n    RendererContext,\n} from \"../../types\";\n\n/**\n * a renderer function for show page in Ant Design\n * @internal used internally from inferencer components\n */\nexport const renderer = ({\n    resource,\n    fields,\n    meta,\n    isCustomPage,\n    id,\n    i18n,\n}: RendererContext) => {\n    const COMPONENT_NAME = componentName(\n        resource.label ?? resource.name,\n        \"show\",\n    );\n    const recordName = \"record\";\n    const imports: Array<ImportElement> = [\n        [\"React\", \"react\", true],\n        [\"IResourceComponentsProps\", \"@refinedev/core\"],\n        [\"useShow\", \"@refinedev/core\"],\n        [\"Show\", \"@refinedev/antd\"],\n        [\"Typography\", \"antd\"],\n    ];\n\n    if (i18n) {\n        imports.push([\"useTranslate\", \"@refinedev/core\"]);\n    }\n\n    const relationFields: (InferField | null)[] = fields.filter(\n        (field) => field?.relation && !field?.fieldable && field?.resource,\n    );\n\n    const relationHooksCode = relationFields\n        .filter(Boolean)\n        .map((field) => {\n            if (field?.relation && !field.fieldable && field.resource) {\n                if (field.multiple) {\n                    imports.push([\"useMany\", \"@refinedev/core\"]);\n                    let ids = accessor(recordName, field.key);\n\n                    if (field.accessor) {\n                        ids = `${accessor(\n                            recordName,\n                            field.key,\n                        )}?.map((item: any) => ${accessor(\n                            \"item\",\n                            undefined,\n                            field.accessor,\n                        )})`;\n                    }\n\n                    return `\n                const { data: ${getVariableName(\n                    field.key,\n                    \"Data\",\n                )}, isLoading: ${getVariableName(field.key, \"IsLoading\")} } =\n                useMany({\n                    resource: \"${field.resource.name}\",\n                    ids: ${ids} || [],\n                    queryOptions: {\n                        enabled: !!${recordName} && !!${ids}?.length,\n                    },\n                    ${getMetaProps(\n                        field?.resource?.identifier ?? field?.resource?.name,\n                        meta,\n                        \"getMany\",\n                    )}\n                });\n                `;\n                }\n                imports.push([\"useOne\", \"@refinedev/core\"]);\n                return `\n                const { data: ${getVariableName(\n                    field.key,\n                    \"Data\",\n                )}, isLoading: ${getVariableName(field.key, \"IsLoading\")} } =\n                useOne({\n                    resource: \"${field.resource.name}\",\n                    id: ${accessor(\n                        recordName,\n                        field.key,\n                        field.accessor,\n                        false,\n                    )} || \"\",\n                    queryOptions: {\n                        enabled: !!${recordName},\n                    },\n                    ${getMetaProps(\n                        field?.resource?.identifier ?? field?.resource?.name,\n                        meta,\n                        \"getOne\",\n                    )}\n                });\n            `;\n            }\n            return undefined;\n        })\n        .filter(Boolean);\n\n    const renderRelationFields = (field: InferField) => {\n        if (field.relation && field.resource) {\n            const variableName = getVariableName(field.key, \"Data\");\n            const variableIsLoading = getVariableName(field.key, \"IsLoading\");\n\n            if (field.multiple) {\n                const variableDataLength =\n                    accessor(recordName, field.key) + \"?.length\";\n                imports.push([\"TagField\", \"@refinedev/antd\"]);\n                return jsx`\n                <Title level={5}>${translatePrettyString({\n                    resource,\n                    field,\n                    i18n,\n                    noQuotes: true,\n                })}</Title>\n                {${variableIsLoading} && ${variableDataLength} ? <>Loading...</> : (\n                    <>\n                    ${(() => {\n                        if (field.relationInfer) {\n                            if (field.relationInfer?.accessor) {\n                                if (\n                                    Array.isArray(field.relationInfer.accessor)\n                                ) {\n                                    return `Not Handled.`;\n                                    // return `{${multipleAccessor(\n                                    //     `${variableName}?.data`,\n                                    //     field.relationInfer.accessor,\n                                    // ).join(' + \" \" + ')}}`;\n                                } else {\n                                    // return `Not Handled.`;\n                                    const mapItemName = toSingular(\n                                        field.resource?.name,\n                                    );\n                                    const val = accessor(\n                                        mapItemName,\n                                        undefined,\n                                        field.relationInfer.accessor,\n                                    );\n                                    return `{record?.${field.key}?.length ? ${variableName}?.data?.map((${mapItemName}: any) => <TagField key={${val}} value={${val}} />) : <></>}`;\n                                }\n                            } else {\n                                return undefined;\n                            }\n                        } else {\n                            return undefined;\n                        }\n                    })()}\n                    </>\n                )}\n                `;\n                // {${accessorString(variableName, {\n                //     key: field.key,\n                // })}?.map((item) => (\n                //     <TagField value={${\n                //         field.accessor ? `item?.${field.accessor}` : `item`\n                //     }} key={${\n                //     field.accessor ? `item?.${field.accessor}` : `item`\n                // }} />\n                // ))}\n                // `;\n            }\n\n            if (field.fieldable) {\n                return jsx`\n                <Title level={5}>${translatePrettyString({\n                    resource,\n                    field,\n                    i18n,\n                    noQuotes: true,\n                })}</Title>\n                <TextField value={${accessor(\n                    recordName,\n                    field.key,\n                    field.accessor,\n                )}} />\n                `;\n            }\n\n            return jsx`\n                <Title level={5}>${translatePrettyString({\n                    resource,\n                    field,\n                    i18n,\n                    noQuotes: true,\n                })}</Title>\n                {${variableIsLoading} ? <>Loading...</> : (\n                    <>\n                    ${(() => {\n                        if (field.relationInfer) {\n                            if (field.relationInfer?.accessor) {\n                                if (\n                                    Array.isArray(field.relationInfer.accessor)\n                                ) {\n                                    return `{${accessor(\n                                        `${variableName}?.data`,\n                                        undefined,\n                                        field.relationInfer.accessor,\n                                        ' + \" \" + ',\n                                    )}}`;\n                                } else {\n                                    return `{${variableName}?.data?.${field.relationInfer.accessor}}`;\n                                }\n                            } else {\n                                return `{${variableName}?.data}`;\n                            }\n                        } else {\n                            return `{${variableName}?.data?.id}`;\n                        }\n                    })()}\n                    </>\n                )}\n                \n                `;\n        }\n        return undefined;\n    };\n\n    const textFields = (field: InferField) => {\n        if (field.type === \"text\") {\n            imports.push(\n                [\"TagField\", \"@refinedev/antd\"],\n                [\"TextField\", \"@refinedev/antd\"],\n            );\n            if (field.multiple) {\n                const val = accessor(\"item\", undefined, field.accessor);\n                return jsx`\n                <Title level={5}>${translatePrettyString({\n                    resource,\n                    field,\n                    i18n,\n                    noQuotes: true,\n                })}</Title>\n                {${accessor(recordName, field.key)}?.map((item: any) => (\n                    <TagField value={${val}} key={${val}} />\n                ))}\n            `;\n            }\n            return jsx`\n                <Title level={5}>${translatePrettyString({\n                    resource,\n                    field,\n                    i18n,\n                    noQuotes: true,\n                })}</Title>\n                <TextField value={${accessor(\n                    recordName,\n                    field.key,\n                    field.accessor,\n                )}} />\n            `;\n        }\n        return undefined;\n    };\n\n    const imageFields = (field: InferField) => {\n        if (field.type === \"image\") {\n            imports.push([\"ImageField\", \"@refinedev/antd\"]);\n            if (field.multiple) {\n                const val = accessor(\"item\", undefined, field.accessor);\n                return jsx`\n                <Title level={5}>${translatePrettyString({\n                    resource,\n                    field,\n                    i18n,\n                    noQuotes: true,\n                })}</Title>\n                {${accessor(recordName, field.key)}?.map((item: any) => (\n                    <ImageField style={{ maxWidth: 200 }} value={${val}} key={${val}} />\n                ))}\n            `;\n            }\n            return jsx`\n                <Title level={5}>${translatePrettyString({\n                    resource,\n                    field,\n                    i18n,\n                    noQuotes: true,\n                })}</Title>\n                <ImageField style={{ maxWidth: 200 }} value={${accessor(\n                    recordName,\n                    field.key,\n                    field.accessor,\n                    \" + \",\n                )}} />\n                `;\n        }\n        return undefined;\n    };\n\n    const emailFields = (field: InferField) => {\n        if (field.type === \"email\") {\n            imports.push(\n                [\"TagField\", \"@refinedev/antd\"],\n                [\"EmailField\", \"@refinedev/antd\"],\n            );\n            if (field.multiple) {\n                const val = accessor(\"item\", undefined, field.accessor);\n                return jsx`\n                <Title level={5}>${translatePrettyString({\n                    resource,\n                    field,\n                    i18n,\n                    noQuotes: true,\n                })}</Title>\n                <>\n                {${accessor(recordName, field.key)}?.map((item: any) => (\n                    <TagField value={${val}} key={${val}} />\n                ))}\n                </>\n            `;\n            }\n            return jsx`\n                <Title level={5}>${translatePrettyString({\n                    resource,\n                    field,\n                    i18n,\n                    noQuotes: true,\n                })}</Title>\n                <EmailField value={${accessor(\n                    recordName,\n                    field.key,\n                    field.accessor,\n                    \" + \",\n                )}} />\n            `;\n        }\n        return undefined;\n    };\n\n    const urlFields = (field: InferField) => {\n        if (field.type === \"url\") {\n            imports.push(\n                [\"TagField\", \"@refinedev/antd\"],\n                [\"UrlField\", \"@refinedev/antd\"],\n            );\n            if (field.multiple) {\n                const val = accessor(\"item\", undefined, field.accessor);\n                return jsx`\n                <Title level={5}>${translatePrettyString({\n                    resource,\n                    field,\n                    i18n,\n                    noQuotes: true,\n                })}</Title>\n                {${accessor(recordName, field.key)}?.map((item: any) => (\n                    <TagField value={${val}} key={${val}} />\n                ))}\n            `;\n            }\n            return jsx`\n                <Title level={5}>${translatePrettyString({\n                    resource,\n                    field,\n                    i18n,\n                    noQuotes: true,\n                })}</Title>\n                <UrlField value={${accessor(\n                    recordName,\n                    field.key,\n                    field.accessor,\n                    \" + \",\n                )}} />\n            `;\n        }\n        return undefined;\n    };\n\n    const booleanFields = (field: InferField) => {\n        if (field.type === \"boolean\") {\n            imports.push(\n                [\"TagField\", \"@refinedev/antd\"],\n                [\"BooleanField\", \"@refinedev/antd\"],\n            );\n            if (field.multiple) {\n                const val = accessor(\"item\", undefined, field.accessor);\n                return jsx`\n                <Title level={5}>${translatePrettyString({\n                    resource,\n                    field,\n                    i18n,\n                    noQuotes: true,\n                })}</Title>\n                {(${accessor(\n                    recordName,\n                    field.key,\n                )} as any[])?.map((item, index) => (\n                    <BooleanField value={${val}} key={index} />\n                ))}\n            `;\n            }\n            return jsx`\n                <Title level={5}>${translatePrettyString({\n                    resource,\n                    field,\n                    i18n,\n                    noQuotes: true,\n                })}</Title>\n                <BooleanField value={${accessor(\n                    recordName,\n                    field.key,\n                    field.accessor,\n                    \" && \",\n                )}} />\n            `;\n        }\n        return undefined;\n    };\n\n    const dateFields = (field: InferField) => {\n        if (field.type === \"date\") {\n            imports.push([\"DateField\", \"@refinedev/antd\"]);\n            if (field.multiple) {\n                const val = accessor(\"item\", undefined, field.accessor);\n                return jsx`\n                <Title level={5}>${translatePrettyString({\n                    resource,\n                    field,\n                    i18n,\n                    noQuotes: true,\n                })}</Title>\n                {${accessor(recordName, field.key)}?.map((item: any) => (\n                    <DateField value={${val}} key={${val}} />\n                ))}\n            `;\n            }\n            return jsx`\n                <Title level={5}>${translatePrettyString({\n                    resource,\n                    field,\n                    i18n,\n                    noQuotes: true,\n                })}</Title>\n                <DateField value={${accessor(\n                    recordName,\n                    field.key,\n                    field.accessor,\n                    \" + ' ' + \",\n                )}} />\n            `;\n        }\n        return undefined;\n    };\n\n    const richtextFields = (field: InferField) => {\n        if (field.type === \"richtext\") {\n            imports.push([\"MarkdownField\", \"@refinedev/antd\"]);\n            return jsx`\n                <Title level={5}>${translatePrettyString({\n                    resource,\n                    field,\n                    i18n,\n                    noQuotes: true,\n                })}</Title>\n                <MarkdownField value={${accessor(\n                    recordName,\n                    field.key,\n                    field.accessor,\n                    ' + \" \" + ',\n                )}} />\n            `;\n        }\n\n        return undefined;\n    };\n\n    const numberFields = (field: InferField) => {\n        if (field.type === \"number\") {\n            imports.push([\"NumberField\", \"@refinedev/antd\"]);\n            if (field.multiple) {\n                const val = accessor(\"item\", undefined, field.accessor);\n                return jsx`\n                <Title level={5}>${translatePrettyString({\n                    resource,\n                    field,\n                    i18n,\n                    noQuotes: true,\n                })}</Title>\n                {${accessor(recordName, field.key)}?.map((item: any) => (\n                    <TagField value={${val}} key={${val}} />\n                ))}\n            `;\n            }\n            return jsx`\n                <Title level={5}>${translatePrettyString({\n                    resource,\n                    field,\n                    i18n,\n                    noQuotes: true,\n                })}</Title>\n                <NumberField value={${accessor(\n                    recordName,\n                    field.key,\n                    field.accessor,\n                    ' + \" \" + ',\n                )} ?? \"\"} />\n            `;\n        }\n        return undefined;\n    };\n\n    const renderedFields: Array<string | undefined> = fields.map((field) => {\n        switch (field?.type) {\n            case \"text\":\n                return textFields(field);\n            case \"number\":\n                return numberFields(field);\n            case \"richtext\":\n                return richtextFields(field);\n            case \"email\":\n                return emailFields(field);\n            case \"image\":\n                return imageFields(field);\n            case \"date\":\n                return dateFields(field);\n            case \"boolean\":\n                return booleanFields(field);\n            case \"url\":\n                return urlFields(field);\n            case \"relation\":\n                return renderRelationFields(field);\n            default:\n                return undefined;\n        }\n    });\n\n    noOp(imports);\n\n    const useTranslateHook = i18n && `const translate = useTranslate();`;\n\n    return jsx`\n    ${printImports(imports)}\n    \n    const { Title } = Typography;\n\n    export const ${COMPONENT_NAME}: React.FC<IResourceComponentsProps> = () => {\n        ${useTranslateHook}\n        const { queryResult } = useShow(${\n            isCustomPage\n                ? `{ \n                    resource: \"${resource.name}\", \n                    id: ${idQuoteWrapper(id)},\n                    ${getMetaProps(\n                        resource?.identifier ?? resource?.name,\n                        meta,\n                        \"getOne\",\n                    )}\n                }`\n                : getMetaProps(\n                      resource?.identifier ?? resource?.name,\n                      meta,\n                      \"getOne\",\n                  )\n                ? `{${getMetaProps(\n                      resource?.identifier ?? resource?.name,\n                      meta,\n                      \"getOne\",\n                  )}}`\n                : \"\"\n        });\n        const { data, isLoading } = queryResult;\n    \n        const ${recordName} = data?.data;\n\n        ${relationHooksCode}\n\n        return (\n            <Show isLoading={isLoading}>\n                ${renderedFields.join(\"\")}\n            </Show>\n        );\n    };\n    `;\n};\n\n/**\n * @experimental This is an experimental component\n */\nexport const ShowInferencer: InferencerResultComponent = createInferencer({\n    type: \"show\",\n    additionalScope: [\n        [\n            \"@refinedev/antd\",\n            \"RefineAntd\",\n            {\n                Show,\n                TagField,\n                TextField,\n                ImageField,\n                EmailField,\n                UrlField,\n                BooleanField,\n                DateField,\n                MarkdownField,\n                NumberField,\n            },\n        ],\n        [\"antd\", \"AntdPackage\", { Typography }],\n    ],\n    codeViewerComponent: SharedCodeViewer,\n    loadingComponent: LoadingComponent,\n    errorComponent: ErrorComponent,\n    renderer,\n});\n","import React, { useContext } from \"react\";\nimport { useResource, TranslationContext } from \"@refinedev/core\";\n\nimport {\n    CreateInferencer,\n    InferencerComponentProps,\n    InferencerResultComponent,\n    InferField,\n} from \"../types\";\n\nimport { composeInferencers } from \"../compose-inferencers\";\nimport { composeTransformers } from \"../compose-transformers\";\n\nimport { defaultElements } from \"../field-inferencers\";\nimport { defaultTransformers } from \"../field-transformers\";\nimport { LiveComponent } from \"../components\";\nimport { useInferFetch } from \"../use-infer-fetch\";\nimport { useRelationFetch } from \"../use-relation-fetch\";\n\nimport { prepareLiveCode, componentName, removeHiddenCode } from \"../utilities\";\n\n/**\n * CreateInferencer is a function that creates a Inferencer component.\n *\n * Inferencer will handle the data fetching and the infering parts,\n * then it will invoke the `renderer` function to generate the code.\n * The generated code will be used to render the component by `react-live`.\n * Its required to havee`additionalScope` prop when using packages other than `react` and `@refinedev/core`.\n *\n * @param config - Inferencer configuration.\n * @param config.type - Infering type.\n * @param config.additionalScope - Additional scope for live code.\n * @param config.renderer - String renderer for Inferencer.\n * @param config.fieldTransformers - Field transformers.\n * @param config.customElements - Field inferencers.\n * @param config.codeViewerComponent - Code viewer component.\n * @param config.errorComponent - Error component.\n * @param config.loadingComponent - Loading component.\n */\nexport const createInferencer: CreateInferencer = ({\n    type,\n    additionalScope = [],\n    customElements = [],\n    fieldTransformers = [],\n    renderer,\n    loadingComponent: LoadingComponent,\n    errorComponent: ErrorComponent,\n    codeViewerComponent: CodeViewerComponent,\n}) => {\n    const infer = composeInferencers([...defaultElements, ...customElements]);\n    const transform = composeTransformers([\n        ...defaultTransformers,\n        ...fieldTransformers,\n    ]);\n\n    const Inferencer = ({\n        resourceName,\n        fieldTransformer,\n        hideCodeViewerInProduction,\n        meta,\n        id,\n    }: {\n        resourceName?: string;\n        hideCodeViewerInProduction?: boolean;\n        fieldTransformer?: InferencerComponentProps[\"fieldTransformer\"];\n        meta?: InferencerComponentProps[\"meta\"];\n        id?: string | number;\n    }) => {\n        const { resource, resources } = useResource(resourceName);\n        const { i18nProvider } = useContext(TranslationContext);\n\n        const { resource: resourceFromURL } = useResource();\n\n        const {\n            data: record,\n            datas: records,\n            loading: recordLoading,\n            initial: isInitialLoad,\n            error: inferError,\n        } = useInferFetch(type, resourceName ?? resource?.name, id, meta);\n\n        const inferSingleField = (\n            key: string,\n            value: any,\n            record: Record<string, unknown>,\n        ) => {\n            const inferResult = infer(key, value, record, infer, type);\n\n            if (inferResult) {\n                if (resource) {\n                    const transformed = transform(\n                        [inferResult] as InferField[],\n                        resources,\n                        resource,\n                        record,\n                        infer,\n                        type,\n                    );\n\n                    const customTransformedFields = fieldTransformer\n                        ? transformed.flatMap((field) => {\n                              const result = fieldTransformer(field);\n\n                              return result ? [result] : [];\n                          })\n                        : transformed;\n\n                    return customTransformedFields?.[0];\n                }\n            }\n\n            return undefined;\n        };\n\n        const inferSingleRecord = (record: Record<string, unknown>) => {\n            const inferred = Object.keys(record)\n                .map((key) => {\n                    const value = record[key];\n\n                    const inferResult = inferSingleField(key, value, record);\n\n                    return inferResult;\n                })\n                .filter(Boolean);\n\n            return inferred as InferField[];\n        };\n\n        const inferMultipleRecords = (records: Record<string, unknown>[]) => {\n            // infer each record\n            // get the most common one for each field\n            // also get the first occurence of the each most common field/key and construct a fresh record from them.\n            // return the fresh record and the inferred fields\n\n            const inferred = records.map((record) => inferSingleRecord(record));\n\n            const allUniqueKeys = records\n                .flatMap((record) => Object.keys(record))\n                .filter((key, index, self) => self.indexOf(key) === index);\n\n            const mostCommonRecord: Record<string, unknown> = {};\n\n            const mostCommonFields = allUniqueKeys.map((key) => {\n                const fields = inferred.map((fields) =>\n                    fields.find((field) => field.key === key),\n                );\n\n                const mostCommonField = fields.reduce(\n                    (acc, field, index) => {\n                        if (!field) {\n                            return acc;\n                        }\n\n                        const count = fields.filter(\n                            (f) =>\n                                f?.key === field.key && f?.type === field.type,\n                        ).length;\n\n                        if (count > acc.count) {\n                            mostCommonRecord[key] = records[index][key];\n\n                            return {\n                                count,\n                                field,\n                            };\n                        }\n\n                        return acc;\n                    },\n                    { count: 0, field: undefined } as {\n                        count: number;\n                        field: undefined | InferField;\n                    },\n                );\n\n                return mostCommonField.field;\n            });\n\n            const response = {\n                commonRecord: mostCommonRecord,\n                inferredFields: mostCommonFields,\n            };\n\n            return response;\n        };\n\n        const [rawResults, recordInUse]: [\n            InferField[],\n            Record<string, unknown> | undefined,\n        ] = React.useMemo(() => {\n            if (records && (type === \"list\" || type === \"create\")) {\n                const inferred = inferMultipleRecords(records);\n\n                return [\n                    inferred.inferredFields as InferField[],\n                    inferred.commonRecord,\n                ];\n            }\n            if (record) {\n                const inferred = Object.keys(record)\n                    .map((key) => {\n                        const value = record[key];\n\n                        const inferResult = infer(\n                            key,\n                            value,\n                            record,\n                            infer,\n                            type,\n                        );\n\n                        return inferResult;\n                    })\n                    .filter(Boolean);\n\n                if (resource) {\n                    const transformed = transform(\n                        inferred as InferField[],\n                        resources,\n                        resource,\n                        record,\n                        infer,\n                        type,\n                    );\n\n                    const customTransformedFields = fieldTransformer\n                        ? transformed.flatMap((field) => {\n                              const result = fieldTransformer(field);\n\n                              return result ? [result] : [];\n                          })\n                        : transformed;\n\n                    return [customTransformedFields, record];\n                }\n\n                return [[], record];\n            }\n\n            return [[], undefined];\n        }, [record, records, resources, resource, fieldTransformer]);\n\n        const {\n            fields: results,\n            loading: relationLoading,\n            // initial: relationInitial,\n        } = useRelationFetch({\n            record: recordInUse,\n            fields: rawResults,\n            infer,\n            meta,\n        });\n\n        const clearedFields = React.useMemo(() => {\n            const cleanFields: InferField[] = [];\n\n            results.forEach((f, idx, arr) => {\n                if (f.resource) {\n                    if (\n                        cleanFields.findIndex(\n                            (el) => el.resource?.name === f.resource?.name,\n                        ) > -1\n                    ) {\n                        return;\n                    }\n                    const duplicates = arr.filter((field, index) => {\n                        if (index !== idx) {\n                            const currentFieldHasResource = f.resource;\n                            const fieldHasResource = field.resource;\n                            const hasAnyIdentifier =\n                                field.resource?.identifier ||\n                                f.resource?.identifier;\n                            const isSameResource = hasAnyIdentifier\n                                ? field.resource?.identifier ===\n                                  f.resource?.identifier\n                                : field.resource?.name === f.resource?.name;\n\n                            return (\n                                currentFieldHasResource &&\n                                fieldHasResource &&\n                                isSameResource\n                            );\n                        } else {\n                            return false;\n                        }\n                    });\n                    if (duplicates.length > 0) {\n                        if (type === \"create\" || type === \"edit\") {\n                            let toPush: InferField | undefined = undefined;\n\n                            [f, ...duplicates].find((el) => {\n                                if (\n                                    el.fieldable !== true &&\n                                    toPush === undefined\n                                ) {\n                                    toPush = el;\n                                }\n                            });\n                            if (toPush) {\n                                cleanFields.push(toPush);\n                            } else {\n                                cleanFields.push(f);\n                            }\n                        } else {\n                            let toPush: InferField | undefined = undefined;\n\n                            [f, ...duplicates].find((el) => {\n                                if (\n                                    el.fieldable !== false &&\n                                    toPush === undefined\n                                ) {\n                                    toPush = el;\n                                }\n                            });\n\n                            if (toPush) {\n                                cleanFields.push(toPush);\n                            } else {\n                                cleanFields.push(f);\n                            }\n                        }\n                    } else {\n                        cleanFields.push(f);\n                    }\n                } else {\n                    cleanFields.push(f);\n                }\n            });\n\n            return cleanFields;\n        }, [results, type]);\n\n        const code = React.useMemo(() => {\n            if (\n                !recordLoading &&\n                !relationLoading &&\n                !isInitialLoad &&\n                resource\n            ) {\n                return renderer({\n                    resource,\n                    resources,\n                    fields: clearedFields,\n                    infer,\n                    meta,\n                    isCustomPage: resource.name !== resourceFromURL?.name,\n                    id,\n                    i18n: !!i18nProvider,\n                });\n            }\n            return \"\";\n        }, [\n            resource,\n            resources,\n            clearedFields,\n            recordLoading,\n            relationLoading,\n        ]);\n\n        const hiddenCodeViewer =\n            process.env.NODE_ENV !== \"development\" &&\n            hideCodeViewerInProduction;\n\n        return (\n            <>\n                {LoadingComponent && (recordLoading || relationLoading) && (\n                    <LoadingComponent />\n                )}\n                {!recordLoading && !relationLoading && (\n                    <>\n                        <LiveComponent\n                            fetchError={\n                                !recordLoading && inferError\n                                    ? inferError\n                                    : !recordLoading &&\n                                      !isInitialLoad &&\n                                      !record\n                            }\n                            code={prepareLiveCode(\n                                code,\n                                componentName(\n                                    resource?.meta?.label ??\n                                        resource?.options?.label ??\n                                        resource?.label ??\n                                        resource?.name ??\n                                        \"Resource\",\n                                    type,\n                                ),\n                            )}\n                            errorComponent={ErrorComponent}\n                            additionalScope={additionalScope}\n                        />\n                        {typeof CodeViewerComponent !== \"undefined\" &&\n                        !hiddenCodeViewer ? (\n                            <CodeViewerComponent\n                                code={removeHiddenCode(code)}\n                                loading={recordLoading || relationLoading}\n                            />\n                        ) : null}\n                    </>\n                )}\n            </>\n        );\n    };\n\n    const InferencerComponent: InferencerResultComponent = ({\n        name,\n        resource,\n        fieldTransformer,\n        meta,\n        hideCodeViewerInProduction,\n        id,\n    }) => {\n        const { resource: resourceItem } = useResource(resource ?? name);\n\n        const key = `${\n            resourceItem?.identifier ?? resourceItem?.name\n        }-${type}-${id}`;\n\n        return (\n            <Inferencer\n                hideCodeViewerInProduction={hideCodeViewerInProduction}\n                fieldTransformer={fieldTransformer}\n                resourceName={resource ?? name}\n                meta={meta ?? {}}\n                key={key}\n                id={id}\n            />\n        );\n    };\n\n    return InferencerComponent;\n};\n","const urlLikeKeyRegexp = /(image|photo|avatar|url|logo|cover|thumbnail|icon)/i;\n\n/**\n * Returns a list of keys that are likely to be fieldable.\n * @example getFieldableKeys(\"user\", { id: 1, name: \"John\" }) === \"name\"\n */\nexport const getFieldableKeys = (\n    key: string,\n    data: Record<string, unknown>,\n): string | string[] | undefined => {\n    const fieldableProperties = [\n        \"name\",\n        \"label\",\n        \"title\",\n        \"count\",\n        \"content\",\n        \"username\",\n        \"nickname\",\n        \"login\",\n        \"firstName\",\n        \"lastName\",\n        \"url\",\n    ];\n\n    if (urlLikeKeyRegexp.test(key)) {\n        fieldableProperties.unshift(\"url\");\n    }\n\n    const firstAvailable = fieldableProperties.find(\n        (fkey) => fkey in data && !!data[fkey],\n    );\n\n    if (firstAvailable) {\n        if (firstAvailable === \"firstName\" && \"lastName\" in data) {\n            return [\"firstName\", \"lastName\"];\n        }\n\n        return firstAvailable;\n    }\n\n    return undefined;\n};\n","import { IResourceItem } from \"@refinedev/core\";\nimport { pickNotDeprecated } from \"@refinedev/core\";\n\n/**\n * Picks the data provider for the given resource. Which can be overridden by the resource itself.\n */\nexport function pickDataProvider(\n    resourceName?: string,\n    dataProviderName?: string,\n    resources?: IResourceItem[],\n) {\n    if (dataProviderName) {\n        return dataProviderName;\n    }\n\n    const resource = resources?.find((item) => item.name === resourceName);\n\n    const meta = pickNotDeprecated(resource?.meta, resource?.options);\n    if (meta?.dataProviderName) {\n        return meta.dataProviderName;\n    }\n\n    return \"default\";\n}\n\n/**\n * Picks the data provider for the given resource. Which can be overridden by the resource itself.\n * This is a simpler version of the above function which works with the resource item instead of the resource name and additional arguments.\n */\nexport const dataProviderFromResource = (resource?: IResourceItem) => {\n    return resource?.options?.dataProviderName;\n};\n","import { InferField } from \"../../types\";\n\n/**\n * Each field inferencer will run with every property of a record and output a result.\n * In these outputs, one with the highest priority will be picked as the inferred field.\n */\nexport const pickInferredField = (\n    inferredFields: Array<InferField | null | false>,\n): InferField | null => {\n    // filter out null and false values and sort by priority then return the first one\n    // priority is a number, the higher the number the higher the priority\n    // if there is no priority, it will be 0\n    const field = (\n        [...inferredFields].filter(Boolean) as Array<InferField>\n    ).sort((a, b) => (b.priority || 0) - (a.priority || 0))[0];\n\n    if (!field) {\n        return null;\n    }\n\n    return field;\n};\n","import prettier from \"prettier/standalone\";\nimport tsParser from \"prettier/parser-typescript\";\n\n/**\n * Standalone prettier formatter with typescript parser\n * to format the generated code.\n */\nexport const prettierFormat = (code: string) => {\n    try {\n        const formatted = prettier.format(code, {\n            parser: \"typescript\",\n            plugins: [tsParser],\n            arrowParens: \"always\",\n            trailingComma: \"all\",\n            semi: true,\n            tabWidth: 4,\n            printWidth: 80,\n        });\n\n        return formatted;\n    } catch (error) {\n        console.warn(\"Formatting error in inferencer\", error);\n        return code;\n    }\n};\n","/**\n * This helper removes the recurring spaces from the code.\n */\nexport const prettySpaces = (content: string): string => {\n    return content.replace(/ {2,}/g, \" \").replace(/\\n{2,}/g, \"\\n\");\n};\n","import { FieldInferencer } from \"../types\";\n\nexport const relationRegexp = /(-id|-ids|_id|_ids|Id|Ids|ID|IDs)(\\[\\])?$/;\n\nexport const relationInfer: FieldInferencer = (key, value) => {\n    const isRelation = relationRegexp.test(key);\n    const isBasicValue = typeof value === \"string\" || typeof value === \"number\";\n    const isBasicArray =\n        Array.isArray(value) &&\n        value.every((v) => typeof v === \"string\" || typeof v === \"number\");\n\n    if ((isRelation && isBasicValue) || (isRelation && isBasicArray)) {\n        return {\n            key,\n            relation: true,\n            multiple: isBasicArray ? true : false,\n            type: \"relation\",\n            priority: 1,\n        };\n    }\n\n    return false;\n};\n","import { relationRegexp } from \"../../field-inferencers/relation\";\n\n/**\n * Removes the relation suffix from a string.\n * @example removeRelationSuffix(\"category_id\") === \"category\"\n */\nexport const removeRelationSuffix = (key: string) => {\n    return key.replace(relationRegexp, \"\");\n};\n","import { removeRelationSuffix } from \"../remove-relation-suffix\";\n\n/**\n * This helper will prettify the string.\n */\nexport const prettyString = (str: string) => {\n    const clean = removeRelationSuffix(str);\n    // Convert camelCase to camel Case\n    const camelCase = clean.replace(/([a-z])([A-Z])/g, \"$1 $2\");\n    // Convert snake_case to snake case\n    const snakeCase = camelCase.replace(/_/g, \" \");\n    // Convert kebab-case to kebab case\n    const kebabCase = snakeCase.replace(/-/g, \" \");\n    // Capitalize the string\n    const capitalized = kebabCase\n        .split(\" \")\n        .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\n        .join(\" \");\n\n    return capitalized;\n};\n","import { IResourceItem } from \"@refinedev/core\";\nimport { prettyString } from \"../pretty-string\";\nimport { InferField } from \"../../types\";\n\nexport const translatePrettyString = (payload: {\n    resource: IResourceItem;\n    field: InferField;\n    i18n?: boolean;\n    noQuotes?: boolean;\n    noBraces?: boolean;\n}) => {\n    const { resource, field, i18n } = payload;\n\n    if (i18n) {\n        const translate = `translate(\"${resource.name}.fields.${field.key}\")`;\n\n        if (payload.noBraces) {\n            return `${translate}`;\n        }\n        return `{${translate}}`;\n    }\n\n    const prettedString = prettyString(field.key);\n    if (payload.noQuotes) {\n        return prettedString;\n    }\n\n    return `\"${prettedString}\"`;\n};\n","import pluralize from \"pluralize\";\n\nexport const toSingular = (str = \"\") => {\n    return pluralize.isSingular(str) ? str : pluralize.singular(str);\n};\n","import pluralize from \"pluralize\";\n\nexport const toPlural = (str = \"\") => {\n    return pluralize.isPlural(str) ? str : pluralize.plural(str);\n};\n","/**\n * `react-live` does not support `export` statements in the code.\n * This function will remove the `export` statements from the code.\n */\nexport const replaceExports = (code: string) => {\n    // remove export statements from the code but keep the variables\n    const newCode = code.replace(\n        /export\\s+(const|let|var|type|interface|function|class)\\s+(\\w+)\\s*(=|:)\\s*/g,\n        \"$1 $2 = \",\n    );\n\n    // remove default exports, check line by line, lines can be indented so ignore the tabs and spaces at the beginning\n    const lines = newCode.split(\"\\n\");\n    const newLines = lines.filter(\n        (line) => !line.trim().startsWith(\"export default\"),\n    );\n\n    return newLines.join(\"\\n\");\n};\n","import { prettySpaces } from \"../pretty-spaces\";\n\nconst packageRegex =\n    /import(?:(?:(?:[ \\n\\t]+([^ *\\n\\t\\{\\},]+)[ \\n\\t]*(?:,|[ \\n\\t]+))?([ \\n\\t]*\\{(?:[ \\n\\t]*[^ \\n\\t\"'\\{\\}]+[ \\n\\t]*,?)+\\})?[ \\n\\t]*)|[ \\n\\t]*\\*[ \\n\\t]*as[ \\n\\t]+([^ \\n\\t\\{\\}]+)[ \\n\\t]+)from[ \\n\\t]*(?:['\"])([^'\"\\n]+)(?:['\"])(?:;?)/g;\n\nconst sideEffectRegex = /import[ \\n\\t](?:['\"])([^'\"\\n]+)(?:['\"])(?:;?)/g;\n\nconst nameChangeRegex = /((?:\\w|\\s|_)*)( as )((?:\\w|\\s|_)*)( |,)?/g;\n\n/**\n * This function will replace the imports in the code since `react-live` does not support `import` statements.\n * `modules` is an object with keys as `package name` and values as `variable name`.\n */\nexport const replaceImports = (\n    content: string,\n    modules: Record<string, string> = {},\n): string => {\n    const matches = content.matchAll(packageRegex);\n\n    const imports = new Set();\n\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    for (const match of matches) {\n        const [, defaultImport, namedImports, namespaceImport, packageName] =\n            match;\n\n        if (packageName in modules) {\n            const importName = modules[packageName];\n\n            /**\n             * React and its exports are already available in the scope of the code.\n             * Restructuring them in import statements will cause errors.\n             * To avoid that, we are not replacing the import statements for React.\n             * This way, generated code can have \"react\" imports without any errors.\n             */\n            if (packageName === \"react\") {\n                continue;\n            }\n\n            if (defaultImport) {\n                imports.add(\n                    `const { default: ${defaultImport} } = ${importName};`,\n                );\n            }\n\n            if (namedImports) {\n                imports.add(\n                    `const${namedImports.replace(\n                        nameChangeRegex,\n                        `$1: $3$4`,\n                    )} = ${importName};`,\n                );\n            }\n\n            if (namespaceImport) {\n                imports.add(`const ${namespaceImport} = ${importName};`);\n            }\n        }\n    }\n\n    return prettySpaces(`\n    ${Array.from(imports).join(\"\\n\")}\n    ${content.replace(packageRegex, \"\").replace(sideEffectRegex, \"\")}\n    `);\n};\n","import pluralize from \"pluralize\";\nimport { IResourceItem } from \"@refinedev/core\";\n\nimport { InferField } from \"../../types\";\n\nimport { removeRelationSuffix } from \"../remove-relation-suffix\";\n\n/**\n * Checks if the given property can be relation by checking the existing resources.\n */\nexport const resourceFromInferred = (\n    field: InferField | false | null,\n    resources: IResourceItem[],\n): IResourceItem | undefined => {\n    if (!field) {\n        return undefined;\n    }\n\n    const resource = resources.find((el) => {\n        const stripped = removeRelationSuffix(field.key);\n\n        return (\n            el.name === stripped ||\n            el.name ===\n                (pluralize.isPlural(stripped)\n                    ? stripped\n                    : pluralize.plural(stripped)) ||\n            el.name ===\n                (pluralize.isSingular(stripped)\n                    ? stripped\n                    : pluralize.singular(stripped))\n        );\n    });\n\n    return resource;\n};\n","import pluralize from \"pluralize\";\nimport { prettyString } from \"../pretty-string\";\n\n/**\n * Returns the component name based on the resource name and inferencer type.\n * @example componentName(\"users\", \"list\") === \"UserList\"\n */\nexport const componentName = (\n    resourceName: string,\n    type: \"list\" | \"show\" | \"edit\" | \"create\",\n    fallbackResourceName = \"Inferred\",\n) => {\n    // replace all non-alphanumeric characters with a space\n    const sanitized = resourceName.replace(/[^a-zA-Z0-9]/g, \" \");\n    // convert to singular\n    const singular = pluralize.singular(sanitized);\n    // prettify the string without spaces\n    const prettified = prettyString(singular).replace(/ /g, \"\");\n    // if prettified is empty, return the fallbackResourceName\n    const resourceComponentName = prettified || fallbackResourceName;\n    // get pretty type name\n    const prettyType = type.charAt(0).toUpperCase() + type.slice(1);\n\n    // if resourceName is not starting with an alphabetical character, return Type + resourceName\n    // e.g. \"123users\" => \"List123Users\"\n    if (!/^[a-zA-Z]/.test(resourceComponentName)) {\n        return `${prettyType}${resourceComponentName}`;\n    }\n    // e.g. \"users\" => \"UserList\"\n    return `${resourceComponentName}${prettyType}`;\n};\n","const handleExpression = (expression: unknown) => {\n    if (!expression) {\n        return \"\";\n    }\n\n    if (Array.isArray(expression)) {\n        return expression.join(\"\");\n    }\n\n    if (typeof expression === \"string\") {\n        return expression;\n    }\n\n    if (typeof expression === \"object\") {\n        return expression.toString();\n    }\n\n    if (typeof expression === \"function\") {\n        return expression.toString();\n    }\n\n    if (typeof expression === \"number\") {\n        return String(expression);\n    }\n\n    if (typeof expression === \"boolean\" && expression) {\n        return \"true\";\n    }\n\n    return expression;\n};\n\n/**\n * This is a hacky helper to allow syntax highlighting to work in the template literals. (`renderer` function in inferencers)\n * Additionally, it parses expressions like jsx does.\n */\nexport const jsx = (\n    strings: TemplateStringsArray,\n    ...expressions: unknown[]\n) => {\n    const parsed = strings.reduce(\n        (result, currentString, i) =>\n            `${result}${currentString}${handleExpression(expressions[i])}`,\n        \"\",\n    );\n\n    return parsed.trim();\n};\n","/**\n * Code will be generated to be ready to copy and paste into a live environment.\n * But, `react-live` with `noInline={true}` will not work with this code and require `render` method to be called with the component.\n * This function will use the component name and the code and append the `render` method to the code.\n */\nexport const prepareLiveCode = (code?: string, componentName?: string) => {\n    return `\n    ${code ?? \"\"}\n    \n    render(typeof ${componentName} !== \"undefined\" ? <${componentName} /> : <></>);\n    `;\n};\n","export const removeHiddenCode = (code?: string) => {\n    // hidden blocks are wrapped in `/* hidden-start */` and `/* hidden-end */`\n    // these blocks can present multiple times in the code\n\n    return code?.replace(\n        /(\\/\\* hidden-start \\*\\/)(.|\\n)*?(\\/\\* hidden-end \\*\\/)/g,\n        \"\",\n    );\n};\n","import { InferField } from \"../../types\";\n\nconst dotAccessableRegex = /^[a-zA-Z_$][a-zA-Z_$0-9]*$/;\n\nexport const shouldDotAccess = (property: string) => {\n    return dotAccessableRegex.test(property);\n};\n\nfunction accessorSingle(variableName: string, key?: string, accessor?: string) {\n    let base = `${variableName}`;\n\n    if (key) {\n        base += \"?.\";\n        if (shouldDotAccess(key)) {\n            base += key;\n        } else {\n            base += `['${key}']`;\n        }\n    }\n\n    if (accessor) {\n        base += `?.`;\n        if (shouldDotAccess(accessor)) {\n            base += accessor;\n        } else {\n            base += `['${accessor}']`;\n        }\n    }\n\n    return base;\n}\n\nfunction accessorMultiple(variable: string, key?: string, accessor?: string[]) {\n    const all = (accessor ?? []).map((a) => accessorSingle(variable, key, a));\n\n    return all;\n}\n\n/**\n * Returns a string that can be used to access the given field.\n * @example accessor(\"myVar\", \"some\", \"thing\") === \"myVar?.some?.thing\"\n * @example accessor(\"myVar\", \"so-me\", th.ing\") === \"myVar?.['so-me']['th.ing']\"\n */\nexport const accessor = (\n    variable: string,\n    key?: string,\n    accessor?: string | string[],\n    joiner: string | false = ' + \" \" + ',\n): string => {\n    if (Array.isArray(accessor)) {\n        if (joiner) {\n            return accessorMultiple(variable, key, accessor).join(joiner);\n        } else {\n            return accessorSingle(variable, key, accessor[0]);\n        }\n    } else {\n        return accessorSingle(variable, key, accessor);\n    }\n};\n\nexport const dotAccessor = (\n    variable: string,\n    key?: string,\n    accessor?: string | string[],\n) => {\n    let str = variable;\n\n    if (key) {\n        str += `.${key}`;\n    }\n\n    if (accessor) {\n        if (Array.isArray(accessor)) {\n            str += `.${accessor[0]}`;\n        } else {\n            str += `.${accessor}`;\n        }\n    }\n\n    return str;\n};\n\nexport const getAccessorKey = (field: InferField) => {\n    return Array.isArray(field.accessor) || field.multiple\n        ? `accessorKey: \"${field.key}\"`\n        : field.accessor\n        ? `accessorKey: \"${dotAccessor(field.key, undefined, field.accessor)}\"`\n        : `accessorKey: \"${field.key}\"`;\n};\n","import { ImportElement } from \"../../types\";\n\nexport const printImports = (imports: Array<ImportElement>) => {\n    const byModule = imports.reduce((acc, [element, module, isDefault]) => {\n        if (!acc[module]) {\n            acc[module] = [] as Array<\n                string | [variable: string, isDefault?: boolean]\n            >;\n        }\n\n        if (!acc[module].includes(element)) {\n            if (isDefault) {\n                acc[module].push([element, true]);\n            } else {\n                acc[module].push(element);\n            }\n        }\n\n        return acc;\n    }, {} as Record<string, Array<string | [variable: string, isDefault?: boolean]>>);\n\n    const lines = Object.entries(byModule).map(([module, elements]) => {\n        const defaultImport = elements.find((e) => Array.isArray(e) && e[1]);\n        const named = elements.filter((e) => typeof e === \"string\");\n        const defaultStr = defaultImport ? `${defaultImport[0]}` : \"\";\n        const namedStr = named.length ? `{ ${named.join(\", \")} }` : \"\";\n        return `import ${defaultStr}${\n            defaultStr && namedStr ? \", \" : \"\"\n        }${namedStr} from \"${module}\";`;\n    });\n\n    return lines;\n};\n","const identifierRegexp = /^id$/i;\n\nexport const isIDKey = (key: string): boolean => identifierRegexp.test(key);\n","import { InferField } from \"../../types\";\n\nexport const getOptionLabel = (field: InferField) => {\n    if (field.relationInfer && field.relationInfer.accessor) {\n        if (Array.isArray(field.relationInfer.accessor)) {\n            return `optionLabel: \"${field.relationInfer.accessor[0]}\",`;\n        }\n        if (field.relationInfer.accessor !== \"title\") {\n            return `optionLabel: \"${field.relationInfer.accessor}\",`;\n        }\n        return \"\";\n    }\n    return \"\";\n};\n","// eslint-disable-next-line @typescript-eslint/no-empty-function\nexport const noOp = (arg1: any) => {};\n","import { prettyString } from \"../pretty-string\";\n\n/**\n * Returns the valid variable name for the given string and the given suffixOrPrefix.\n * @example getVariableName(\"user\", \"data\") === \"usersData\"\n * @example getVariableName(\"1234\", \"data\") === \"data1234\"\n * @example getVariableName(\"users-account\", \"selectProps\") === \"usersAccountSelectProps\"\n */\nexport const getVariableName = (fieldKey: string, suffixOrPrefix = \"\") => {\n    // if fieldKey is number, return with prefix\n    // e.g. (12345, Data) => \"data12345\"\n    if (Number.isInteger(Number(fieldKey))) {\n        const lowerCaseFirstLetter =\n            suffixOrPrefix.charAt(0).toLowerCase() + suffixOrPrefix.slice(1);\n        return lowerCaseFirstLetter + fieldKey;\n    }\n\n    // if fieldKey is start with numbers, replace the numbers with empty string\n    // e.g. 123users => \"users\"\n    const fieldKeyWithoutNumbers = fieldKey.replace(/^\\d+/, \"\");\n\n    // if fieldKeyWithoutNumbers has invalid characters, replace them with \"-\"\n    // e.g. \"users/account\" => \"users-account\"\n    const fieldKeyWithoutInvalidCharacters = fieldKeyWithoutNumbers.replace(\n        /[^a-zA-Z0-9]/g,\n        \"-\",\n    );\n\n    // Convert to PascalCase\n    const prettyPluralVariableName = prettyString(\n        fieldKeyWithoutInvalidCharacters,\n    ).replace(/ /g, \"\");\n\n    const variableName = `${\n        prettyPluralVariableName.charAt(0).toLowerCase() +\n        prettyPluralVariableName.slice(1)\n    }${suffixOrPrefix.charAt(0).toUpperCase() + suffixOrPrefix.slice(1)}`;\n\n    return variableName;\n};\n","import { InferencerComponentProps } from \"../../types\";\n\ntype Action = keyof NonNullable<InferencerComponentProps[\"meta\"]>[string];\n\nexport const getMetaProps = (\n    identifier?: string,\n    meta?: InferencerComponentProps[\"meta\"],\n    action?: Action,\n) => {\n    if (meta && action && identifier) {\n        const metaValues = identifier ? meta[identifier] : {};\n        const metaValue = metaValues?.[action] ?? metaValues?.default;\n        if (metaValue) {\n            return `meta: ${JSON.stringify(metaValue)},`;\n        }\n        return \"\";\n    }\n    return \"\";\n};\n\nexport const pickMeta = (\n    identifier?: string,\n    meta?: InferencerComponentProps[\"meta\"],\n    actions?: Action[],\n) => {\n    if (meta && actions && identifier) {\n        const metaValues = identifier ? meta[identifier] : {};\n\n        const actionsToCheck = [...actions, \"default\"] as Action[];\n\n        const metaValue = actionsToCheck.reduce((acc, action) => {\n            return acc ?? metaValues?.[action];\n        }, undefined as Record<string, unknown> | undefined);\n\n        if (metaValue) {\n            return metaValue;\n        }\n    }\n    return undefined;\n};\n","/**\n * If the `id` is a string, it will be wrapped in quotes.\n */\nexport const idQuoteWrapper = (\n    id: string | number | undefined,\n): string | number | undefined => {\n    if (id === undefined) return id;\n    if (typeof id === \"string\") return `\"${id}\"`;\n\n    return id;\n};\n","import { FieldInferencer } from \"../types\";\nimport { pickInferredField } from \"../utilities\";\n\n/**\n * Compose multiple field inferencers into one\n * @param inferencers The inferencer functions to compose\n */\nexport const composeInferencers = (\n    inferencers: Array<FieldInferencer>,\n): FieldInferencer => {\n    const fieldInferencer: FieldInferencer = (\n        key,\n        value,\n        record,\n        infer = fieldInferencer,\n        type,\n    ) => {\n        const inferences = inferencers.map((inferencer) =>\n            inferencer(key, value, record, infer, type),\n        );\n        const picked = pickInferredField(inferences);\n\n        return picked;\n    };\n\n    return fieldInferencer;\n};\n","import { FieldTransformer } from \"../types\";\n\n/**\n * Compose multiple field transformers into one\n * @param transformers The transformer functions to compose\n */\nexport const composeTransformers = (\n    transformers: Array<FieldTransformer>,\n): FieldTransformer => {\n    const fieldTransformer: FieldTransformer = (\n        fields,\n        resources,\n        resource,\n        record,\n        infer,\n        type,\n    ) => {\n        return transformers.reduce((acc, transformer) => {\n            return transformer(acc, resources, resource, record, infer, type);\n        }, fields);\n    };\n\n    return fieldTransformer;\n};\n","import { FieldInferencer, InferType } from \"../types\";\n\nexport const arrayInfer: FieldInferencer = (\n    key,\n    value,\n    record,\n    infer,\n    type,\n) => {\n    const isArray = Array.isArray(value);\n    const isBasicArray =\n        Array.isArray(value) &&\n        value.every((v) => typeof v === \"string\" || typeof v === \"number\");\n\n    if (isArray) {\n        if (!isBasicArray) {\n            const inferredInnerType = infer(key, value[0], record, infer, type);\n            if (inferredInnerType) {\n                return {\n                    ...inferredInnerType,\n                    key,\n                    multiple: true,\n                    priority: 1,\n                };\n            } else {\n                return false;\n            }\n        }\n        const basicType = infer(key, value[0], record, infer, type) || {\n            type: \"string\" as InferType,\n        };\n\n        return {\n            key,\n            multiple: true,\n            priority: 1,\n            type: basicType?.type,\n        };\n    }\n\n    return false;\n};\n","import { FieldInferencer } from \"../types\";\n\nexport const booleanInfer: FieldInferencer = (key, value) => {\n    const isBoolean = typeof value === \"boolean\";\n\n    if (isBoolean) {\n        return {\n            key,\n            type: \"boolean\",\n        };\n    }\n\n    return false;\n};\n","import dayjs from \"dayjs\";\nimport { FieldInferencer } from \"../types\";\n\nconst dateSuffixRegexp = /(_at|_on|At|On|AT|ON)(\\[\\])?$/;\n\nconst dateSeparators = [\"/\", \":\", \"-\", \".\"];\n\nexport const dateInfer: FieldInferencer = (key, value) => {\n    const isDateField =\n        dateSuffixRegexp.test(key) && dayjs(value as string).isValid();\n\n    const isValidDateString =\n        typeof value === \"string\" && dayjs(value).isValid();\n\n    const hasDateSeparator =\n        typeof value === \"string\" &&\n        dateSeparators.some((s) => value.includes(s));\n\n    if (hasDateSeparator && (isDateField || isValidDateString)) {\n        return {\n            key,\n            type: \"date\",\n            priority: 1,\n        };\n    }\n\n    return false;\n};\n","import { FieldInferencer } from \"../types\";\n\nconst emailRegexp =\n    /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\nexport const emailInfer: FieldInferencer = (key, value) => {\n    const isValidEmail = typeof value === \"string\" && emailRegexp.test(value);\n\n    if (isValidEmail) {\n        return {\n            key,\n            type: \"email\",\n            priority: 1,\n        };\n    }\n\n    return false;\n};\n","import { FieldInferencer } from \"../types\";\n\nconst imageRegexp = /\\.(gif|jpe?g|tiff?|png|webp|bmp|svg)$/i;\n\nexport const imageInfer: FieldInferencer = (key, value) => {\n    const isImageURI = typeof value === \"string\" && imageRegexp.test(value);\n\n    if (isImageURI) {\n        return {\n            key,\n            type: \"image\",\n            priority: 2,\n        };\n    }\n\n    return false;\n};\n","import { FieldInferencer } from \"../types\";\n\nexport const nullishInfer: FieldInferencer = (key, value) => {\n    const isUndefined = typeof value === \"undefined\";\n    const isNull = value === null;\n\n    if (isUndefined || isNull) {\n        return null;\n    }\n\n    return false;\n};\n","import { FieldInferencer } from \"../types\";\n\nexport const numberInfer: FieldInferencer = (key, value) => {\n    const isNonEmptyString = typeof value === \"string\" && value.length > 0;\n    const isNotNaN = !isNaN(value as number);\n\n    const isNumericString = isNonEmptyString && isNotNaN;\n    const isNumber = typeof value === \"number\";\n\n    const isNumeric = isNumericString || isNumber;\n\n    if (isNumeric) {\n        return {\n            key,\n            type: \"number\",\n        };\n    }\n\n    return false;\n};\n","import { getFieldableKeys } from \"../utilities\";\nimport { FieldInferencer } from \"../types\";\n\nconst idPropertyRegexp = /id$/i;\n\nexport const objectInfer: FieldInferencer = (\n    key,\n    value,\n    record,\n    infer,\n    type,\n) => {\n    const isNotNull = value !== null;\n    const isNotArray = !Array.isArray(value);\n    const isObject = typeof value === \"object\";\n\n    if (isNotNull && isNotArray && isObject) {\n        const onlyHasId =\n            Object.keys(value).length === 1 &&\n            idPropertyRegexp.test(Object.keys(value)[0]);\n\n        const hasId = Object.keys(value).some((k) => idPropertyRegexp.test(k));\n\n        if (onlyHasId) {\n            return {\n                key,\n                type: \"relation\",\n                relation: true,\n                accessor: \"id\",\n                priority: 1,\n            };\n        }\n\n        const fieldableKeys = getFieldableKeys(\n            key,\n            value as Record<string, unknown>,\n        );\n\n        const hasFieldableKeys = fieldableKeys\n            ? fieldableKeys.length > 0\n            : false;\n\n        if (hasFieldableKeys && fieldableKeys) {\n            const innerFieldKey =\n                fieldableKeys && Array.isArray(fieldableKeys)\n                    ? fieldableKeys[0]\n                    : fieldableKeys;\n\n            const innerFieldType = infer(\n                innerFieldKey,\n                (value as Record<string, unknown>)[innerFieldKey],\n                value as Record<string, unknown>,\n                infer,\n                type,\n            );\n\n            if (innerFieldType) {\n                const accessor = Array.isArray(fieldableKeys)\n                    ? fieldableKeys.map((el) => {\n                          if (innerFieldType.accessor) {\n                              return `${el}.${\n                                  Array.isArray(innerFieldType.accessor)\n                                      ? innerFieldType.accessor[0]\n                                      : innerFieldType.accessor\n                              }`;\n                          } else {\n                              return el;\n                          }\n                      })\n                    : innerFieldType.accessor\n                    ? Array.isArray(innerFieldType.accessor)\n                        ? `${fieldableKeys}.${innerFieldType.accessor[0]}`\n                        : `${fieldableKeys}.${innerFieldType.accessor}`\n                    : fieldableKeys;\n\n                if (\n                    innerFieldType?.type === \"text\" &&\n                    (type === \"create\" || type === \"edit\") &&\n                    hasId\n                ) {\n                    return {\n                        key,\n                        type: \"relation\",\n                        relation: true,\n                        accessor: \"id\",\n                        priority: 1,\n                    };\n                }\n\n                return {\n                    ...innerFieldType,\n                    fieldable: true,\n                    key,\n                    accessor: accessor,\n                    priority: 1,\n                };\n            }\n        }\n\n        return {\n            key,\n            fieldable: false,\n            type: \"object\",\n            priority: 1,\n        };\n    }\n\n    return false;\n};\n","import { FieldInferencer } from \"../types\";\n\nexport const richtextInfer: FieldInferencer = (key, value) => {\n    const isLongText = typeof value === \"string\" && value.length > 100;\n\n    if (isLongText) {\n        return {\n            key,\n            type: \"richtext\",\n            priority: 1,\n        };\n    }\n\n    return false;\n};\n","import { FieldInferencer } from \"../types\";\n\nexport const textInfer: FieldInferencer = (key, value) => {\n    const isText = typeof value === \"string\";\n\n    if (isText) {\n        return {\n            key,\n            type: \"text\",\n        };\n    }\n\n    return false;\n};\n","import { FieldInferencer } from \"../types\";\n\nconst urlRegexp = /^(https?|ftp):\\/\\/(-\\.)?([^\\s/?\\.#-]+\\.?)+(\\/[^\\s]*)?$/i;\n\nexport const urlInfer: FieldInferencer = (key, value) => {\n    const isValidURL = typeof value === \"string\" && urlRegexp.test(value);\n\n    if (isValidURL) {\n        return {\n            key,\n            type: \"url\",\n            priority: 1,\n        };\n    }\n\n    return false;\n};\n","import { arrayInfer } from \"./array\";\nimport { booleanInfer } from \"./boolean\";\nimport { dateInfer } from \"./date\";\nimport { emailInfer } from \"./email\";\nimport { imageInfer } from \"./image\";\nimport { nullishInfer } from \"./nullish\";\nimport { numberInfer } from \"./number\";\nimport { objectInfer } from \"./object\";\nimport { relationInfer } from \"./relation\";\nimport { richtextInfer } from \"./richtext\";\nimport { textInfer } from \"./text\";\nimport { urlInfer } from \"./url\";\n\nexport const defaultElements = [\n    arrayInfer,\n    booleanInfer,\n    dateInfer,\n    emailInfer,\n    imageInfer,\n    nullishInfer,\n    numberInfer,\n    objectInfer,\n    relationInfer,\n    richtextInfer,\n    textInfer,\n    urlInfer,\n];\n","import { FieldTransformer, InferField } from \"../types\";\n\nexport const basicToRelation: FieldTransformer = (\n    fields,\n    resources,\n    resource,\n    record,\n) => {\n    const mapped: Array<InferField> = fields.map((field) => {\n        if (\n            !field.relation &&\n            (field.type === \"text\" ||\n                field.type === \"richtext\" ||\n                field.type === \"number\") &&\n            !field.canRelation\n        ) {\n            // check if value is a valid id (regex)\n            // if multiple, check value by value\n            // take accessor into account (should be single only)\n            // valid id should be a valid uuid (meaning, lowercase alphanumeric with dashes)\n            const validUUIdRegex = /^[a-z0-9-]+$/;\n\n            const isValidUUID = (value: unknown) => {\n                return validUUIdRegex.test(`${value}`);\n            };\n\n            const isNotSelf = field.key.toLowerCase() !== \"id\";\n\n            const singleOrNoAccessor =\n                !field.accessor || typeof field.accessor === \"string\";\n\n            // in case of multiple accessors, we can't infer a relation\n            // or if the field is the id field\n            if (!singleOrNoAccessor || !isNotSelf) {\n                return field;\n            }\n\n            const valuesToCheck = field.multiple\n                ? (record[field.key] as unknown[])\n                : [record[field.key]];\n\n            const allValid = valuesToCheck.every((value) => {\n                return isValidUUID(\n                    field.accessor\n                        ? (value as Record<string, unknown>)[\n                              field.accessor as string\n                          ]\n                        : value,\n                );\n            });\n\n            if (allValid) {\n                return {\n                    ...field,\n                    canRelation: true,\n                };\n            }\n\n            return field;\n        }\n        return field;\n    });\n\n    return mapped;\n};\n","import { FieldTransformer, InferField } from \"../types\";\n\nconst imageFieldLikeRegexp = /(image|photo|avatar|cover|thumbnail|icon)/i;\n\nexport const imageByKey: FieldTransformer = (fields) => {\n    const mapped: Array<InferField> = fields.map((field) => {\n        if (field.type === \"url\" && imageFieldLikeRegexp.test(field.key)) {\n            return {\n                ...field,\n                type: \"image\",\n            };\n        }\n\n        return field;\n    });\n\n    return mapped;\n};\n","import { resourceFromInferred } from \"../utilities\";\nimport { FieldTransformer, InferField } from \"../types\";\n\nexport const relationByResource: FieldTransformer = (\n    fields,\n    resources,\n    resource,\n    record,\n    infer,\n) => {\n    const mapped: Array<InferField> = fields.map((field) => {\n        const inferResource = resourceFromInferred(field, resources);\n\n        if (inferResource) {\n            return {\n                ...field,\n                relation: true,\n                type: \"relation\",\n                resource: inferResource,\n            };\n        }\n\n        return field;\n    });\n\n    return mapped;\n};\n","import { FieldTransformer, InferField } from \"../types\";\n\nexport const relationToFieldable: FieldTransformer = (\n    fields,\n    resources,\n    resource,\n    record,\n    infer,\n    type,\n) => {\n    const mapped: Array<InferField> = fields.map((field) => {\n        if (field.relation && field.type === \"relation\" && !field.resource) {\n            const value = field.accessor\n                ? (record[field.key] as any)[field.accessor as string]\n                : record[field.key];\n\n            const inferredType = infer(field.key, value, record, infer, type);\n\n            if (inferredType && inferredType.type !== \"relation\") {\n                return {\n                    ...field,\n                    fieldable: true,\n                    relation: false,\n                    type: inferredType.type,\n                    canRelation: true,\n                };\n            }\n        }\n\n        return field;\n    });\n\n    return mapped;\n};\n","import { basicToRelation } from \"./basic-to-relation\";\nimport { imageByKey } from \"./image-by-key\";\nimport { relationByResource } from \"./relation-by-resource\";\nimport { relationToFieldable } from \"./relation-to-fieldable\";\n\nexport const defaultTransformers = [\n    imageByKey,\n    relationByResource,\n    relationToFieldable,\n    basicToRelation,\n];\n","import React from \"react\";\nimport * as RefineCore from \"@refinedev/core\";\n\nimport { LivePreview, LiveProvider, ContextProps } from \"@aliemir/react-live\";\n\nimport { replaceImports, replaceExports } from \"../../utilities\";\nimport { AdditionalScopeType, LiveComponentProps } from \"../../types\";\n\nconst defaultScope: Array<AdditionalScopeType> = [\n    [\"react\", \"React\", React],\n    [\"@refinedev/core\", \"RefineCore\", RefineCore],\n];\n\nconst InferencerLiveContext = React.createContext<ContextProps>(\n    {} as ContextProps,\n);\n\n/**\n * Live Component will render the code with `react-live`.\n * Errors will be handled by `ErrorComponent`.\n */\nexport const LiveComponent: React.FC<LiveComponentProps> = ({\n    fetchError,\n    code,\n    additionalScope,\n    errorComponent: ErrorComponent,\n}) => {\n    const sanitized =\n        (code &&\n            replaceExports(\n                replaceImports(\n                    code,\n                    [...defaultScope, ...(additionalScope ?? [])].reduce(\n                        (\n                            acc,\n                            [\n                                packageName,\n                                variableName,\n                                _module,\n                                ignoreReplacement,\n                            ],\n                        ) => {\n                            if (ignoreReplacement) {\n                                return acc;\n                            }\n                            return {\n                                ...acc,\n                                [packageName]: variableName,\n                            };\n                        },\n                        {},\n                    ),\n                ),\n            )) ??\n        \"\";\n\n    const scope = React.useMemo(() => {\n        return {\n            React,\n            ...React,\n            ...[...defaultScope, ...(additionalScope ?? [])].reduce(\n                (acc, [_packageName, variableName, packageContent]) => {\n                    return {\n                        ...acc,\n                        [variableName]: packageContent,\n                    };\n                },\n                {},\n            ),\n        };\n    }, [additionalScope]);\n\n    const ErrorComponentWithError = React.useMemo(() => {\n        const LiveErrorComponent = () => {\n            const { error } = React.useContext(InferencerLiveContext);\n\n            if (ErrorComponent) {\n                return (\n                    <ErrorComponent\n                        error={\n                            error\n                                ? `<p>An error occured while rendering the generated component.You can check the generated code from the below \"Show Code\" button and fix the error manually.</p>\n                                    <p>If you think this is a bug, please report the issue at <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/refinedev/refine/issues\">https://github.com/refinedev/refine/issues</a></p>\n                                    <p>Exception:</p>\n                                    <code>${error}</code>`\n                                : typeof fetchError === \"string\"\n                                ? fetchError\n                                : fetchError\n                                ? `<p>Something went wrong while fetching the resource data.</p>\n                                    <p>To learn more about the Inferencer, please check the <a href=\"https://refine.dev/docs/packages/documentation/inferencer/\" target=\"_blank\">documentation</a>.</p>`\n                                : undefined\n                        }\n                    />\n                );\n            }\n\n            return null;\n        };\n\n        return LiveErrorComponent;\n    }, [ErrorComponent, fetchError]);\n\n    return (\n        <LiveProvider\n            Context={InferencerLiveContext}\n            code={sanitized}\n            scope={scope}\n            noInline\n        >\n            {!fetchError && <LivePreview Context={InferencerLiveContext} />}\n            <ErrorComponentWithError />\n        </LiveProvider>\n    );\n};\n","import React, { SVGProps } from \"react\";\nimport Highlight, { defaultProps } from \"prism-react-renderer\";\nimport theme from \"prism-react-renderer/themes/vsDark\";\n\nimport { CreateInferencerConfig } from \"../../types\";\nimport { prettierFormat } from \"../../utilities\";\n\nexport const SharedCodeViewer: CreateInferencerConfig[\"codeViewerComponent\"] =\n    ({ code: rawCode, loading }) => {\n        const code = React.useMemo(() => {\n            return prettierFormat(rawCode ?? \"\");\n        }, [rawCode]);\n\n        const [settled, setSettled] = React.useState(false);\n        const [isModalVisible, setIsModalVisible] = React.useState(false);\n        const [isVisible, setIsVisible] = React.useState(false);\n        const [isColumn, setIsColumn] = React.useState(false);\n        const [isModalButtonHover, setIsModalButtonHover] =\n            React.useState(false);\n\n        // Settled Check\n        React.useEffect(() => {\n            if (!loading) {\n                const timeout = setTimeout(() => {\n                    setSettled(true);\n                }, 300);\n\n                return () => {\n                    clearTimeout(timeout);\n                };\n            }\n\n            return () => undefined;\n        }, [loading]);\n\n        // Visibility Check\n        React.useEffect(() => {\n            if (typeof window !== \"undefined\") {\n                const mediaQuery = window.matchMedia(\"(max-width: 449px)\");\n                if (mediaQuery.matches) {\n                    setIsVisible(false);\n                } else {\n                    setIsVisible(true);\n                }\n\n                const handleResize = () => {\n                    if (mediaQuery.matches) {\n                        setIsVisible(false);\n                    } else {\n                        setIsVisible(true);\n                    }\n                };\n\n                window.addEventListener(\"resize\", handleResize);\n\n                return () => {\n                    window.removeEventListener(\"resize\", handleResize);\n                };\n            }\n\n            return () => undefined;\n        }, []);\n\n        // Flex Direction Check\n        React.useEffect(() => {\n            if (typeof window !== \"undefined\") {\n                const mediaQuery = window.matchMedia(\"(max-width: 1280px)\");\n                if (mediaQuery.matches) {\n                    setIsColumn(true);\n                } else {\n                    setIsColumn(false);\n                }\n\n                const handleResize = () => {\n                    if (mediaQuery.matches) {\n                        setIsColumn(true);\n                    } else {\n                        setIsColumn(false);\n                    }\n                };\n\n                window.addEventListener(\"resize\", handleResize);\n\n                return () => {\n                    window.removeEventListener(\"resize\", handleResize);\n                };\n            }\n\n            return () => undefined;\n        }, []);\n\n        if (code && !loading) {\n            return (\n                <>\n                    {isVisible && (\n                        <div\n                            className=\"refine-inferencer--code-viewer\"\n                            style={{\n                                position: \"sticky\",\n                                bottom: \"24px\",\n                                paddingTop: \"24px\",\n                                left: 0,\n                                right: 0,\n                                width: \"100%\",\n                                zIndex: 10,\n                                display: \"flex\",\n                                justifyContent: \"center\",\n                                transition: \"all 0.2s ease\",\n                                opacity: settled && !isModalVisible ? 1 : 0,\n                                transform:\n                                    settled && !isModalVisible\n                                        ? \"translateY(0)\"\n                                        : \"translateY(100px)\",\n                            }}\n                        >\n                            <div\n                                style={{\n                                    width: \"calc(100% - calc(64px * 2))\",\n                                    maxWidth: \"1080px\",\n                                    padding: \"20px\",\n                                    backgroundColor: \"#1A1A1A\",\n                                    boxShadow:\n                                        \"0px 4px 16px -4px rgba(0, 0, 0, 0.5), 0px 8px 32px -8px rgba(0, 0, 0, 0.35)\",\n                                    borderRadius: \"16px\",\n                                    display: \"flex\",\n                                    alignItems: \"center\",\n                                    justifyContent: \"space-between\",\n                                    flexDirection: isColumn ? \"column\" : \"row\",\n                                    gap: \"12px\",\n                                }}\n                            >\n                                <div\n                                    style={{\n                                        display: \"flex\",\n                                        alignItems: \"flex-start\",\n                                        gap: \"8px\",\n                                    }}\n                                >\n                                    <div>\n                                        <InfoIcon />\n                                    </div>\n                                    <div\n                                        style={{\n                                            fontSize: \"14px\",\n                                            lineHeight: \"20px\",\n                                            color: \"#ffffff\",\n                                        }}\n                                    >\n                                        <p\n                                            style={{\n                                                padding: 0,\n                                                margin: 0,\n                                            }}\n                                        >\n                                            Most of the page code is\n                                            auto-generated by the{\" \"}\n                                            <span\n                                                style={{\n                                                    textDecoration: \"underline\",\n                                                }}\n                                            >\n                                                Inferencer\n                                            </span>{\" \"}\n                                            feature, based on your backend data\n                                            structure.\n                                        </p>\n                                        <p\n                                            style={{\n                                                padding: 0,\n                                                margin: 0,\n                                            }}\n                                        >\n                                            While this is an excellent way to\n                                            experiment with refine,{\" \"}\n                                            <span style={{ fontWeight: 600 }}>\n                                                it&apos;s not intended to be\n                                                used on production.\n                                            </span>\n                                        </p>\n                                    </div>\n                                </div>\n                                <div>\n                                    <button\n                                        onPointerEnter={() =>\n                                            setIsModalButtonHover(true)\n                                        }\n                                        onPointerLeave={() =>\n                                            setIsModalButtonHover(false)\n                                        }\n                                        onClick={() => setIsModalVisible(true)}\n                                        style={{\n                                            appearance: \"none\",\n                                            border: \"none\",\n                                            padding: \"10px 16px\",\n                                            borderRadius: \"4px\",\n                                            display: \"flex\",\n                                            alignItems: \"center\",\n                                            justifyContent: \"center\",\n                                            background: \"#0080FF\",\n                                            color: \"#ffffff\",\n                                            fontSize: \"14px\",\n                                            lineHeight: \"20px\",\n                                            fontWeight: 600,\n                                            gap: \"8px\",\n                                            cursor: \"pointer\",\n                                            transition: \"all 0.2s ease\",\n                                            transform: isModalButtonHover\n                                                ? \"scale(1.025)\"\n                                                : undefined,\n                                            filter: isModalButtonHover\n                                                ? \"brightness(1.1)\"\n                                                : undefined,\n                                        }}\n                                    >\n                                        <OpenIcon\n                                            style={{\n                                                flexShrink: 0,\n                                            }}\n                                        />\n                                        <span>\n                                            Show the auto-generated code\n                                        </span>\n                                    </button>\n                                </div>\n                            </div>\n                        </div>\n                    )}\n                    <CodeModal\n                        visible={isModalVisible}\n                        onClose={() => setIsModalVisible(false)}\n                        code={code}\n                    />\n                </>\n            );\n        }\n\n        return null;\n    };\n\nconst CodeModal = ({\n    visible,\n    onClose,\n    code = \"\",\n}: {\n    visible: boolean;\n    onClose: () => void;\n    code?: string;\n}) => {\n    const modalRef = React.useRef<HTMLDivElement>(null);\n\n    const [isCopied, setIsCopied] = React.useState(false);\n    const [isCopyHover, setIsCopyHover] = React.useState(false);\n    const [isCloseHover, setIsCloseHover] = React.useState(false);\n    const [isLearnMoreHover, setIsLearnMoreHover] = React.useState(false);\n\n    // On Outside Click\n    React.useEffect(() => {\n        if (typeof document !== \"undefined\") {\n            const onOutsideClick = (event: PointerEvent) => {\n                if (\n                    modalRef.current &&\n                    !modalRef.current.contains(event.target as Node)\n                ) {\n                    onClose();\n                }\n            };\n\n            document.addEventListener(\"pointerdown\", onOutsideClick);\n\n            return () => {\n                document.removeEventListener(\"pointerdown\", onOutsideClick);\n            };\n        }\n\n        return () => undefined;\n    }, [onClose]);\n\n    // onCopy Handler\n    const onCopy = () => {\n        if (typeof navigator !== \"undefined\") {\n            navigator.clipboard.writeText(code);\n            setIsCopied(true);\n            setTimeout(() => {\n                setIsCopied(false);\n            }, 1000);\n        }\n    };\n\n    const title = (\n        <div\n            style={{\n                display: \"flex\",\n                justifyContent: \"space-between\",\n                alignItems: \"center\",\n            }}\n        >\n            <div\n                style={{\n                    fontWeight: 700,\n                    fontSize: \"20px\",\n                    lineHeight: \"32px\",\n                    color: \"#0D0D0D\",\n                }}\n            >\n                Auto-generated code by Inferencer\n            </div>\n            <button\n                onClick={onClose}\n                onPointerEnter={() => setIsCloseHover(true)}\n                onPointerLeave={() => setIsCloseHover(false)}\n                style={{\n                    flexShrink: 0,\n                    appearance: \"none\",\n                    border: \"none\",\n                    background: \"none\",\n                    padding: 0,\n                    margin: 0,\n                    outline: \"none\",\n                    borderRadius: \"50px\",\n                    width: \"32px\",\n                    height: \"32px\",\n                    cursor: \"pointer\",\n                    transition: \"all 0.15s ease\",\n                    transform: isCloseHover ? \"scale(1.05)\" : undefined,\n                    filter: isCloseHover ? \"brightness(0.8)\" : undefined,\n                }}\n            >\n                <CloseIcon />\n            </button>\n        </div>\n    );\n\n    const highlight = (\n        <div\n            style={{\n                fontSize: \"13px\",\n                borderRadius: \"8px\",\n                flex: \"1\",\n                overflow: \"scroll\",\n                background: \"#1E1E1E\",\n            }}\n        >\n            <Highlight\n                {...defaultProps}\n                theme={theme}\n                code={code}\n                language=\"tsx\"\n            >\n                {({\n                    className,\n                    style,\n                    tokens,\n                    getLineProps,\n                    getTokenProps,\n                }) => (\n                    <pre\n                        className={className}\n                        style={{\n                            ...style,\n                            padding: \"14px 14px 14px 14px\",\n                            margin: \"0\",\n                            width: \"100%\",\n                            boxSizing: \"border-box\",\n                        }}\n                    >\n                        {tokens.map((line, i) => (\n                            <div\n                                key={i}\n                                {...getLineProps({\n                                    line,\n                                    key: i,\n                                })}\n                            >\n                                {line.map((token, key) => (\n                                    <span\n                                        key={key}\n                                        {...getTokenProps({\n                                            token,\n                                            key,\n                                        })}\n                                    />\n                                ))}\n                            </div>\n                        ))}\n                    </pre>\n                )}\n            </Highlight>\n        </div>\n    );\n\n    const buttons = (\n        <div\n            style={{\n                display: \"flex\",\n                justifyContent: \"flex-start\",\n                alignItems: \"flex-end\",\n                gap: \"16px\",\n            }}\n        >\n            <button\n                onPointerEnter={() => setIsCopyHover(true)}\n                onPointerLeave={() => setIsCopyHover(false)}\n                onClick={onCopy}\n                style={{\n                    appearance: \"none\",\n                    height: \"40px\",\n                    border: \"none\",\n                    padding: \"10px 16px\",\n                    borderRadius: \"4px\",\n                    display: \"flex\",\n                    alignItems: \"center\",\n                    justifyContent: \"center\",\n                    background: \"#0080FF\",\n                    color: \"#ffffff\",\n                    fontSize: \"14px\",\n                    lineHeight: \"20px\",\n                    fontWeight: 600,\n                    gap: \"8px\",\n                    cursor: \"pointer\",\n                    position: \"relative\",\n                    overflow: \"hidden\",\n                    transition: \"filter 0.2s ease\",\n                    transform: isCopyHover ? \"scale(1.025)\" : \"scale(1)\",\n                    filter: isCopyHover ? \"brightness(1.1)\" : undefined,\n                }}\n            >\n                <ClipboardIcon\n                    style={{\n                        flexShrink: 0,\n                        marginTop: \"-2px\",\n                        marginBottom: \"-2px\",\n                    }}\n                />\n                <span>Copy Generated Code</span>\n                <div\n                    style={{\n                        position: \"absolute\",\n                        width: \"100%\",\n                        height: \"100%\",\n                        top: 0,\n                        left: 0,\n                        display: \"flex\",\n                        alignItems: \"center\",\n                        justifyContent: \"center\",\n                        background: \"#0080FF\",\n                        transition: \"all 0.2s ease\",\n                        transform: isCopied\n                            ? \"translateY(0)\"\n                            : \"translateY(40px)\",\n                    }}\n                >\n                    <ClipboardIcon\n                        style={{\n                            flexShrink: 0,\n                            marginTop: \"-2px\",\n                            marginBottom: \"-2px\",\n                        }}\n                    />\n                    <span>Copied!</span>\n                </div>\n            </button>\n            <a\n                onPointerEnter={() => setIsLearnMoreHover(true)}\n                onPointerLeave={() => setIsLearnMoreHover(false)}\n                href=\"https://refine.dev/docs/packages/documentation/inferencer\"\n                target=\"_blank\"\n                rel=\"noreferrer\"\n                style={{\n                    appearance: \"none\",\n                    textDecoration: \"none\",\n                    border: \"none\",\n                    padding: \"10px 16px\",\n                    borderRadius: \"4px\",\n                    display: \"flex\",\n                    alignItems: \"center\",\n                    justifyContent: \"center\",\n                    background: \"rgba(0, 128, 255, 0.1)\",\n                    color: \"#0080FF\",\n                    fontSize: \"14px\",\n                    lineHeight: \"20px\",\n                    fontWeight: 600,\n                    gap: \"8px\",\n                    cursor: \"pointer\",\n                    transition: \"all 0.2s ease\",\n                    transform: isLearnMoreHover ? \"scale(1.025)\" : undefined,\n                    filter: isLearnMoreHover ? \"brightness(1.1)\" : undefined,\n                }}\n            >\n                <OpenIcon\n                    style={{\n                        flexShrink: 0,\n                    }}\n                />\n                <span>Learn more about inferencer</span>\n            </a>\n        </div>\n    );\n\n    return (\n        <div\n            className=\"refine-inferencer--code-viewer-modal\"\n            style={{\n                position: \"fixed\",\n                top: 0,\n                left: 0,\n                right: 0,\n                bottom: 0,\n                zIndex: 9999,\n                backgroundColor: \"rgba(0, 0, 0, 0.5)\",\n                transition: \"all 0.2s ease\",\n                opacity: visible ? 1 : 0,\n                pointerEvents: visible ? \"all\" : \"none\",\n                display: \"flex\",\n                justifyContent: \"center\",\n                alignItems: \"center\",\n            }}\n        >\n            <div\n                ref={modalRef}\n                style={{\n                    transform: visible\n                        ? \"scale(1) translateY(0px)\"\n                        : \"scale(0) translateY(-200px)\",\n                    transition: \"all 0.25s cubic-bezier(.35,1.29,.81,1.08)\",\n                    transitionDelay: \"0.25\",\n                    width: \"calc(100% - calc(32px * 2))\",\n                    height: \"calc(100% - calc(32px * 2))\",\n                    backgroundColor: \"#fff\",\n                    maxWidth: \"640px\",\n                    maxHeight: \"720px\",\n                    borderRadius: \"8px\",\n                    padding: \"16px\",\n                }}\n            >\n                <div\n                    style={{\n                        display: \"flex\",\n                        flexDirection: \"column\",\n                        height: \"100%\",\n                        width: \"100%\",\n                        gap: \"16px\",\n                    }}\n                >\n                    {title}\n                    {highlight}\n                    {buttons}\n                </div>\n            </div>\n        </div>\n    );\n};\n\nconst InfoIcon = (props: SVGProps<SVGSVGElement>) => (\n    <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        width={20}\n        height={20}\n        fill=\"none\"\n        {...props}\n    >\n        <path\n            fill=\"#0080FF\"\n            fillRule=\"evenodd\"\n            d=\"M10 20C4.477 20 0 15.523 0 10S4.477 0 10 0s10 4.477 10 10-4.477 10-10 10Zm0-15a1.25 1.25 0 1 0 0 2.5A1.25 1.25 0 0 0 10 5Zm0 10c.69 0 1.25-.56 1.25-1.25V10a1.25 1.25 0 1 0-2.5 0v3.75c0 .69.56 1.25 1.25 1.25Z\"\n            clipRule=\"evenodd\"\n        />\n    </svg>\n);\n\nconst OpenIcon = (props: SVGProps<SVGSVGElement>) => (\n    <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        width={16}\n        height={16}\n        fill=\"none\"\n        {...props}\n    >\n        <path\n            fill=\"currentColor\"\n            d=\"M5 2a1 1 0 0 1 0 2H4v8h8v-1a1 1 0 1 1 2 0v1a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h1Z\"\n        />\n        <path\n            fill=\"currentColor\"\n            d=\"M9 2a1 1 0 0 0 0 2h1.586L6.293 8.293a1 1 0 0 0 1.414 1.414L12 5.414V7a1 1 0 1 0 2 0V3a1 1 0 0 0-1-1H9Z\"\n        />\n    </svg>\n);\n\nconst CloseIcon = (props: SVGProps<SVGSVGElement>) => (\n    <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        width={32}\n        height={32}\n        fill=\"none\"\n        {...props}\n    >\n        <path\n            fill=\"#A6A6A6\"\n            fillRule=\"evenodd\"\n            d=\"M16 32C7.163 32 0 24.837 0 16S7.163 0 16 0s16 7.163 16 16-7.163 16-16 16Zm-2.586-21.414a2 2 0 1 0-2.828 2.828L13.172 16l-2.586 2.586a2 2 0 1 0 2.828 2.828L16 18.828l2.586 2.586a2 2 0 1 0 2.828-2.828L18.828 16l2.586-2.586a2 2 0 1 0-2.828-2.828L16 13.172l-2.586-2.586Z\"\n            clipRule=\"evenodd\"\n        />\n    </svg>\n);\n\nconst ClipboardIcon = (props: SVGProps<SVGSVGElement>) => (\n    <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        width={20}\n        height={20}\n        viewBox=\"0 0 24 24\"\n        fill=\"none\"\n        {...props}\n    >\n        <path\n            fill=\"currentColor\"\n            fillRule=\"evenodd\"\n            d=\"M8 5a3 3 0 0 0 3 3h2a3 3 0 0 0 3-3h1a2 2 0 0 1 2 2v11a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V7a2 2 0 0 1 2-2h1Zm0 7a1 1 0 0 1 1-1h6a1 1 0 1 1 0 2H9a1 1 0 0 1-1-1Zm1 3a1 1 0 1 0 0 2h4a1 1 0 1 0 0-2H9Z\"\n            clipRule=\"evenodd\"\n        />\n        <path fill=\"currentColor\" d=\"M13 4a1 1 0 1 1 0 2h-2a1 1 0 1 1 0-2h2Z\" />\n    </svg>\n);\n","import React from \"react\";\nimport { useDataProvider, useResource, BaseKey } from \"@refinedev/core\";\n\nimport { pickDataProvider, dataProviderFromResource } from \"../utilities\";\nimport { InferencerComponentProps } from \"../types\";\nimport { pickMeta } from \"../utilities/get-meta-props\";\n\n/**\n * This hook will handle the data fetching for the inferencer with `loading` and `initial` states.\n * Data provider functions will be used respectively for the `list`, `show` and `edit` types.\n */\nexport const useInferFetch = (\n    type: \"list\" | \"show\" | \"edit\" | \"create\",\n    resourceNameOrRouteName?: string,\n    idFromProps?: string | number,\n    meta?: InferencerComponentProps[\"meta\"],\n) => {\n    const {\n        resource,\n        id: idFromURL,\n        resources,\n    } = useResource(resourceNameOrRouteName);\n\n    const id = idFromProps ?? idFromURL;\n\n    const dataProvider = useDataProvider();\n\n    const [error, setError] = React.useState<string | undefined>(undefined);\n\n    const [data, setData] = React.useState<Record<string, unknown> | undefined>(\n        undefined,\n    );\n    const [datas, setDatas] = React.useState<\n        Array<Record<string, unknown>> | undefined\n    >(undefined);\n    const [initial, setInitial] = React.useState<boolean>(true);\n    const [loading, setLoading] = React.useState<boolean>(false);\n\n    const resolver = React.useCallback(\n        async (recordItemId: BaseKey | undefined) => {\n            const dataProviderName =\n                dataProviderFromResource(resource) ??\n                pickDataProvider(resource?.name, undefined, resources);\n            const dp = dataProvider(dataProviderName);\n\n            setLoading(true);\n            setError(undefined);\n\n            try {\n                if (type === \"list\" || type === \"create\") {\n                    if (resource) {\n                        const response = await dp.getList({\n                            resource: resource?.name,\n                            meta: pickMeta(\n                                resource?.identifier ?? resource?.name,\n                                meta,\n                                [\"getList\"],\n                            ),\n                        });\n                        const r = response.data?.[0];\n\n                        if (!r) {\n                            setError(\n                                `<p>No records/data found for resource \"${resource?.name}\".</p>\n                            <p>Please check your data provider and resource.</p>\n                            <p>For more info, please check the <a href=\"https://refine.dev/docs/packages/documentation/inferencer/\" target=\"_blank\">documentation</a>.</p>`,\n                            );\n                        }\n                        setData(r);\n                        setDatas(response.data);\n                        setTimeout(() => {\n                            setLoading(false);\n                        }, 500);\n                    }\n                }\n                if ((type === \"edit\" || type === \"show\") && recordItemId) {\n                    if (resource) {\n                        const response = await dp.getOne({\n                            resource: resource?.name,\n                            id: recordItemId,\n                            meta: pickMeta(\n                                resource?.identifier ?? resource?.name,\n                                meta,\n                                [\"getOne\"],\n                            ),\n                        });\n                        const r = response.data;\n                        if (!r) {\n                            setError(\n                                `<p>No records/data found for resource \"${resource?.name}\".</p>\n                            <p>Please check your data provider and resource.</p>\n                            <p>For more info, please check the <a href=\"https://refine.dev/docs/packages/documentation/inferencer/\" target=\"_blank\">documentation</a>.</p>`,\n                            );\n                        }\n                        setData(r);\n                        setTimeout(() => {\n                            setLoading(false);\n                        }, 500);\n                    }\n                }\n            } catch (error) {\n                console.warn(\n                    \"An error occured while fetching the resource data. Please check the error message below:\",\n                    error,\n                );\n                setError(\n                    `<p>Something went wrong while fetching the resource data.</p>\n                    <p>Please check your data provider and API for resource \"${resource?.name}\".</p>\n                    <p>For more info, please check the <a href=\"https://refine.dev/docs/packages/documentation/inferencer/\" target=\"_blank\">documentation</a>.</p>`,\n                );\n                setTimeout(() => {\n                    setLoading(false);\n                }, 500);\n            }\n        },\n        [type, dataProvider, resource, resources],\n    );\n\n    React.useEffect(() => {\n        setInitial(false);\n        if (!loading && !data) {\n            resolver(id);\n        }\n    }, [resolver, id]);\n\n    return {\n        data,\n        datas,\n        loading,\n        initial,\n        error,\n    };\n};\n","import React from \"react\";\nimport { useDataProvider } from \"@refinedev/core\";\n\nimport {\n    dataProviderFromResource,\n    removeRelationSuffix,\n    toPlural,\n    toSingular,\n} from \"../utilities\";\nimport {\n    FieldInferencer,\n    InferField,\n    InferencerComponentProps,\n    ResourceInferenceAttempt,\n} from \"../types\";\nimport { get } from \"lodash-es\";\nimport { pickMeta } from \"../utilities/get-meta-props\";\n\ntype UseRelationFetchProps = {\n    record?: Record<string, unknown>;\n    fields?: (InferField | null | false)[];\n    infer: FieldInferencer;\n    meta?: InferencerComponentProps[\"meta\"];\n};\n\nexport const useRelationFetch = ({\n    record,\n    fields,\n    infer,\n    meta,\n}: UseRelationFetchProps) => {\n    const dataProvider = useDataProvider();\n\n    const [updatedFields, setUpdatedFields] = React.useState<InferField[]>([]);\n\n    const [initial, setInitial] = React.useState(true);\n    const [loading, setLoading] = React.useState<boolean>(false);\n\n    const resolver = React.useCallback(\n        async (allFields: (InferField | false | null)[]) => {\n            console.groupCollapsed(\n                \"@refinedev/inferencer is trying to detect relations\",\n            );\n            const attempts: Array<ResourceInferenceAttempt> = [];\n            setLoading(true);\n            try {\n                const promises = allFields.map(async (field) => {\n                    if (field && (field.relation || field.canRelation)) {\n                        if (record) {\n                            if (field.relationInfer) {\n                                return field;\n                            }\n                            const dataProviderName = dataProviderFromResource(\n                                field.resource,\n                            );\n                            const dp = dataProvider(dataProviderName);\n\n                            const isMultiple = field.multiple;\n\n                            const requestId = Array.isArray(field.accessor)\n                                ? undefined\n                                : field.multiple\n                                ? (record[field.key] as Array<unknown>).map(\n                                      (el) => {\n                                          return field.accessor\n                                              ? get(el, field.accessor)\n                                              : el;\n                                      },\n                                  )[0]\n                                : field.accessor\n                                ? get(record[field.key], field.accessor)\n                                : record[field.key];\n\n                            if (requestId && field.resource) {\n                                try {\n                                    let record:\n                                        | Record<string, unknown>\n                                        | undefined = {};\n\n                                    if (isMultiple && dp.getMany) {\n                                        const { data } = await dp.getMany({\n                                            resource: field.resource.name,\n                                            ids: [requestId],\n                                            meta: pickMeta(\n                                                field.resource?.identifier ??\n                                                    field.resource?.name,\n                                                meta,\n                                                [\"getMany\"],\n                                            ),\n                                        });\n                                        record = data?.[0];\n                                    } else {\n                                        const { data } = await dp.getOne({\n                                            resource: field.resource.name,\n                                            id: requestId,\n                                            meta: pickMeta(\n                                                field.resource?.identifier ??\n                                                    field.resource?.name,\n                                                meta,\n                                                isMultiple\n                                                    ? [\"getMany\", \"getOne\"]\n                                                    : [\"getOne\"],\n                                            ),\n                                        });\n                                        record = data;\n                                    }\n\n                                    attempts.push({\n                                        status: \"success\",\n                                        resource: field.resource.name,\n                                        field: field.key,\n                                    });\n\n                                    const relationInfer = infer(\n                                        \"__\",\n                                        record,\n                                        {},\n                                        infer,\n                                    );\n\n                                    return {\n                                        ...field,\n                                        relationInfer,\n                                    };\n                                } catch (error) {\n                                    attempts.push({\n                                        status: \"error\",\n                                        resource: field.resource.name,\n                                        field: field.key,\n                                    });\n                                    return {\n                                        ...field,\n                                        relationInfer: null,\n                                    };\n                                }\n                            }\n\n                            if (requestId) {\n                                let responseData;\n                                let isPlural;\n\n                                try {\n                                    let record:\n                                        | Record<string, unknown>\n                                        | undefined = {};\n\n                                    if (isMultiple && dp.getMany) {\n                                        const { data } = await dp.getMany?.({\n                                            resource: toPlural(\n                                                removeRelationSuffix(field.key),\n                                            ),\n                                            ids: [requestId],\n                                            meta: pickMeta(\n                                                toPlural(\n                                                    removeRelationSuffix(\n                                                        field.key,\n                                                    ),\n                                                ),\n                                                meta,\n                                                [\"getMany\"],\n                                            ),\n                                        });\n                                        record = data?.[0];\n                                    } else {\n                                        const { data } = await dp.getOne({\n                                            resource: toPlural(\n                                                removeRelationSuffix(field.key),\n                                            ),\n                                            id: requestId,\n                                            meta: pickMeta(\n                                                toPlural(\n                                                    removeRelationSuffix(\n                                                        field.key,\n                                                    ),\n                                                ),\n                                                meta,\n                                                isMultiple\n                                                    ? [\"getMany\", \"getOne\"]\n                                                    : [\"getOne\"],\n                                            ),\n                                        });\n                                        record = data;\n                                    }\n\n                                    attempts.push({\n                                        status: \"success\",\n                                        resource: toPlural(\n                                            removeRelationSuffix(field.key),\n                                        ),\n                                        field: field.key,\n                                    });\n\n                                    responseData = record;\n                                    isPlural = true;\n                                } catch (error) {\n                                    attempts.push({\n                                        status: \"error\",\n                                        resource: toPlural(\n                                            removeRelationSuffix(field.key),\n                                        ),\n                                        field: field.key,\n                                    });\n\n                                    let record:\n                                        | Record<string, unknown>\n                                        | undefined = {};\n\n                                    try {\n                                        if (isMultiple && dp.getMany) {\n                                            const { data } = await dp.getMany({\n                                                resource: toSingular(\n                                                    removeRelationSuffix(\n                                                        field.key,\n                                                    ),\n                                                ),\n                                                meta: pickMeta(\n                                                    toSingular(\n                                                        removeRelationSuffix(\n                                                            field.key,\n                                                        ),\n                                                    ),\n                                                    meta,\n                                                    [\"getMany\"],\n                                                ),\n                                                ids: [requestId],\n                                            });\n                                            record = data?.[0];\n                                        } else {\n                                            const { data } = await dp.getOne({\n                                                resource: toSingular(\n                                                    removeRelationSuffix(\n                                                        field.key,\n                                                    ),\n                                                ),\n                                                meta: pickMeta(\n                                                    toSingular(\n                                                        removeRelationSuffix(\n                                                            field.key,\n                                                        ),\n                                                    ),\n                                                    meta,\n                                                    isMultiple\n                                                        ? [\"getMany\", \"getOne\"]\n                                                        : [\"getOne\"],\n                                                ),\n                                                id: requestId,\n                                            });\n                                            record = data;\n                                        }\n\n                                        attempts.push({\n                                            status: \"success\",\n                                            resource: toSingular(\n                                                removeRelationSuffix(field.key),\n                                            ),\n                                            field: field.key,\n                                        });\n\n                                        responseData = record;\n                                        isPlural = false;\n                                    } catch (error) {\n                                        attempts.push({\n                                            status: \"error\",\n                                            resource: toSingular(\n                                                removeRelationSuffix(field.key),\n                                            ),\n                                            field: field.key,\n                                        });\n\n                                        return {\n                                            ...field,\n                                            relationInfer: null,\n                                        };\n                                    }\n                                }\n\n                                const relationInfer = infer(\n                                    \"__\",\n                                    responseData,\n                                    {},\n                                    infer,\n                                );\n\n                                const resourceNameWithoutRelationSuffix =\n                                    removeRelationSuffix(field.key);\n\n                                return {\n                                    ...field,\n                                    relation: true,\n                                    type: \"relation\",\n                                    resource: {\n                                        name: isPlural\n                                            ? toPlural(\n                                                  resourceNameWithoutRelationSuffix,\n                                              )\n                                            : toSingular(\n                                                  resourceNameWithoutRelationSuffix,\n                                              ),\n                                    },\n                                    fieldable: false,\n                                    canRelation: undefined,\n                                    relationInfer,\n                                };\n                            }\n\n                            return {\n                                ...field,\n                                relationInfer: null,\n                            };\n                        }\n                    }\n                    return field;\n                });\n\n                const results = await Promise.all(promises);\n\n                setUpdatedFields(results.filter((el) => el) as InferField[]);\n                setTimeout(() => {\n                    setLoading(false);\n                }, 500);\n            } catch (error) {\n                setTimeout(() => {\n                    setLoading(false);\n                }, 500);\n            }\n            setTimeout(() => {\n                console.log(\n                    `Tried to detect relations with ${\n                        attempts.length\n                    } attempts and succeeded with ${\n                        attempts.filter((el) => el.status === \"success\").length\n                    } attempts.`,\n                );\n                console.groupEnd();\n\n                console.info(\n                    `@refinedev/inferencer may send multiple requests to your API for nonexistent resources when trying to detect relations. To learn more about how the inferencer works, visit https://s.refine.dev/how-inferencer-works`,\n                );\n            }, 500);\n        },\n        [dataProvider, record],\n    );\n\n    React.useEffect(() => {\n        setInitial(false);\n        if (\n            !loading &&\n            fields &&\n            fields.length > 0 &&\n            updatedFields.length === 0\n        ) {\n            resolver(fields);\n        }\n    }, [resolver, loading, fields, resolver]);\n\n    return {\n        fields: updatedFields,\n        loading,\n        initial,\n    };\n};\n","import React from \"react\";\nimport { Alert, Row, Col } from \"antd\";\n\nimport { CreateInferencerConfig } from \"../../types\";\n\nexport const ErrorComponent: CreateInferencerConfig[\"errorComponent\"] = ({\n    error,\n}) => {\n    if (error) {\n        return (\n            <Row justify=\"center\" align=\"middle\" style={{ minHeight: \"200px\" }}>\n                <Col>\n                    <Alert\n                        message=\"Error\"\n                        description={\n                            <div\n                                dangerouslySetInnerHTML={{\n                                    __html: error ?? \"\",\n                                }}\n                            />\n                        }\n                        type=\"error\"\n                        showIcon\n                    />\n                </Col>\n            </Row>\n        );\n    }\n\n    return null;\n};\n","import React from \"react\";\nimport { Spin, Row, Col } from \"antd\";\n\nimport { CreateInferencerConfig } from \"../../types\";\n\nexport const LoadingComponent: CreateInferencerConfig[\"loadingComponent\"] =\n    () => {\n        return (\n            <Row justify=\"center\" align=\"middle\" style={{ minHeight: \"300px\" }}>\n                <Col>\n                    <Spin size=\"large\" />\n                </Col>\n            </Row>\n        );\n    };\n","import {\n    useTable,\n    List,\n    TagField,\n    ImageField,\n    EmailField,\n    UrlField,\n    BooleanField,\n    DateField,\n    MarkdownField,\n    EditButton,\n    ShowButton,\n    DeleteButton,\n} from \"@refinedev/antd\";\nimport { Table, Space } from \"antd\";\n\n// import { createInferencer } from \"../../create-inferencer\";\nimport { createSchemaInferencer } from '../../../from-scheme/create-schema-inferencer';\nimport {\n    jsx,\n    componentName,\n    translatePrettyString,\n    accessor,\n    printImports,\n    noOp,\n    getVariableName,\n    getMetaProps,\n} from \"../../../utilities\";\n\nimport { ErrorComponent } from \"../error\";\nimport { LoadingComponent } from \"../loading\";\nimport { SharedCodeViewer } from \"../../../components/shared-code-viewer\";\n\nimport {\n    InferField,\n    ImportElement,\n    RendererContext,\n    SchemaInferencerResultComponent,\n} from '../../../from-scheme/types';\n\n/**\n * a renderer function for list page in Ant Design\n * @internal used internally from inferencer components\n */\nexport const renderer = ({\n     resource,\n     fields,\n     meta,\n     isCustomPage,\n     i18n,\n}: RendererContext) => {\n    const COMPONENT_NAME = componentName(\n        resource.label ?? resource.name,\n        \"list\",\n    );\n    const recordName = \"tableProps?.dataSource\";\n    const imports: Array<ImportElement> = [\n        [\"React\", \"react\", true],\n        [\"IResourceComponentsProps\", \"@refinedev/core\"],\n        [\"BaseRecord\", \"@refinedev/core\"],\n        [\"useTable\", \"@refinedev/antd\"],\n        [\"List\", \"@refinedev/antd\"],\n        [\"Table\", \"antd\"],\n        [\"Space\", \"antd\"],\n    ];\n\n    if (i18n) {\n        imports.push([\"useTranslate\", \"@refinedev/core\"]);\n    }\n\n    const relationFields: (InferField | null)[] = fields.filter(\n        (field) => field?.relation && !field?.fieldable && field?.resource,\n    );\n\n    const relationHooksCode = relationFields\n        .filter(Boolean)\n        .map((field) => {\n            if (field?.relation && !field.fieldable && field.resource) {\n                imports.push([\"useMany\", \"@refinedev/core\"]);\n\n                let idsString = \"\";\n\n                if (field.multiple) {\n                    idsString = `[].concat(...(${recordName}?.map((item) => ${accessor(\n                        \"item\",\n                        field.key,\n                        field.accessor,\n                        false,\n                    )}) ?? []))`;\n                } else {\n                    idsString = `${recordName}?.map((item) => ${accessor(\n                        \"item\",\n                        field.key,\n                        field.accessor,\n                        false,\n                    )}) ?? []`;\n                }\n\n                return `\n                const { data: ${getVariableName(\n                    field.key,\n                    \"Data\",\n                )}, isLoading: ${getVariableName(field.key, \"IsLoading\")} } =\n                useMany({\n                    resource: \"${field.resource.name}\",\n                    ids: ${idsString},\n                    queryOptions: {\n                        enabled: !!${recordName},\n                    },\n                    ${getMetaProps(\n                    field?.resource?.identifier ?? field?.resource?.name,\n                    meta,\n                    \"getMany\",\n                )}\n                });\n                `;\n            }\n            return undefined;\n        })\n        .filter(Boolean);\n\n    const renderRelationFields = (field: InferField) => {\n        if (field.relation && field.resource) {\n            const validVariableName = getVariableName(field.key, \"Data\");\n            const variableName = `${validVariableName}?.data`;\n            const variableIsLoading = getVariableName(field.key, \"IsLoading\");\n\n            if (Array.isArray(field.accessor)) {\n                // not handled - not possible case\n                return undefined;\n            }\n\n            const loadingCondition = `${variableIsLoading} ? <>Loading...</> : `;\n\n            const dataIndex = field.multiple\n                ? `dataIndex=\"${field.key}\"`\n                : `dataIndex={[\"${field.key}\", ${\n                    field.accessor ? `\"${field.accessor}\"` : \"\"\n                }]}`;\n\n            const title = `title=${translatePrettyString({\n                resource,\n                field,\n                i18n,\n            })}`;\n\n            let render = \"\";\n\n            // if multiple, then map it with tagfield\n            // if not, then just show the value\n\n            if (field.multiple) {\n                imports.push([\"TagField\", \"@refinedev/antd\"]);\n                let val = \"item\";\n\n                if (field?.relationInfer) {\n                    const valSingle = `${variableName}?.find((resourceItems) => resourceItems.id === ${accessor(\n                        \"item\",\n                        undefined,\n                        field.accessor,\n                    )})`;\n                    const valViewableSingle = accessor(\n                        valSingle,\n                        undefined,\n                        field?.relationInfer?.accessor,\n                    );\n                    val = valViewableSingle;\n                }\n\n                render = `render={(value: any[]) => ${loadingCondition} (\n                    <>\n                        {${accessor(\n                    \"value\",\n                    undefined,\n                    // field.accessor,\n                )}?.map((item, index) => (\n                            <TagField key={index} value={${val}} />\n                        ))}\n                    </>\n                )}`;\n            } else {\n                if (field?.relationInfer) {\n                    const valSingle = `${variableName}?.find((item) => item.id === value)`;\n                    const valViewableSingle = accessor(\n                        valSingle,\n                        undefined,\n                        field?.relationInfer?.accessor,\n                    );\n\n                    render = `render={(value) => ${loadingCondition} ${valViewableSingle}}`;\n                } else {\n                    render = \"\";\n                }\n            }\n\n            return jsx`<Table.Column ${dataIndex} ${title} ${render} />`;\n        }\n        return undefined;\n    };\n\n    const imageFields = (field: InferField) => {\n        if (field.type === \"image\") {\n            imports.push([\"ImageField\", \"@refinedev/antd\"]);\n\n            const dataIndex =\n                Array.isArray(field.accessor) || field.multiple\n                    ? `dataIndex=\"${field.key}\"`\n                    : `dataIndex={[\"${field.key}\", ${\n                        field.accessor ? `\"${field.accessor}\"` : \"\"\n                    }]}`;\n\n            const title = `title=${translatePrettyString({\n                resource,\n                field,\n                i18n,\n            })}`;\n\n            let render = jsx`render={(value: any) => <ImageField style={{ maxWidth: \"100px\" }} value={${accessor(\n                \"value\",\n                undefined,\n                Array.isArray(field.accessor) ? field.accessor : undefined,\n                \" + \",\n            )}} />}`;\n\n            if (field.multiple) {\n                const val = accessor(\"item\", undefined, field.accessor, \" + \");\n                render = jsx`render={(value: any[]) => (<>{value?.map((item, index) => (\n                    <ImageField style={{ maxWidth: \"100px\" }} value={${val}} key={index} />\n                ))}</>)}`;\n            }\n\n            return jsx`<Table.Column ${dataIndex} ${title} ${render} />`;\n        }\n        return undefined;\n    };\n\n    const emailFields = (field: InferField) => {\n        if (field.type === \"email\") {\n            imports.push(\n                [\"TagField\", \"@refinedev/antd\"],\n                [\"EmailField\", \"@refinedev/antd\"],\n            );\n            const dataIndex =\n                Array.isArray(field.accessor) || field.multiple\n                    ? `dataIndex=\"${field.key}\"`\n                    : `dataIndex={[\"${field.key}\", ${\n                        field.accessor ? `\"${field.accessor}\"` : \"\"\n                    }]}`;\n\n            const title = `title=${translatePrettyString({\n                resource,\n                field,\n                i18n,\n            })}`;\n\n            let render = jsx`render={(value: any) => <EmailField value={${accessor(\n                \"value\",\n                undefined,\n                Array.isArray(field.accessor) ? field.accessor : undefined,\n                ' + \" \" + ',\n            )}} />}`;\n\n            if (field.multiple) {\n                const val = accessor(\n                    \"item\",\n                    undefined,\n                    field.accessor,\n                    ' + \" \" + ',\n                );\n                render = jsx`render={(value: any[]) => (<>{value?.map((item, index) => (\n                    <TagField value={${val}} key={index} />\n                ))}</>)}`;\n            }\n\n            return jsx`<Table.Column ${dataIndex} ${title} ${render} />`;\n        }\n        return undefined;\n    };\n\n    const urlFields = (field: InferField) => {\n        if (field.type === \"url\") {\n            imports.push(\n                [\"UrlField\", \"@refinedev/antd\"],\n                [\"TagField\", \"@refinedev/antd\"],\n            );\n\n            const dataIndex =\n                Array.isArray(field.accessor) || field.multiple\n                    ? `dataIndex=\"${field.key}\"`\n                    : `dataIndex={[\"${field.key}\", ${\n                        field.accessor ? `\"${field.accessor}\"` : \"\"\n                    }]}`;\n\n            const title = `title=${translatePrettyString({\n                resource,\n                field,\n                i18n,\n            })}`;\n\n            let render = jsx`render={(value: any) => <UrlField value={${accessor(\n                \"value\",\n                undefined,\n                Array.isArray(field.accessor) ? field.accessor : undefined,\n                \" + \",\n            )}} />}`;\n\n            if (field.multiple) {\n                const val = accessor(\"item\", undefined, field.accessor, \" + \");\n                render = jsx`render={(value: any[]) => (<>{value?.map((item, index) => (\n                    <TagField value={${val}} key={index} />\n                ))}</>)}`;\n            }\n\n            return jsx`<Table.Column ${dataIndex} ${title} ${render} />`;\n        }\n        return undefined;\n    };\n\n    const booleanFields = (field: InferField) => {\n        if (field?.type === \"boolean\") {\n            imports.push([\"BooleanField\", \"@refinedev/antd\"]);\n\n            const dataIndex =\n                Array.isArray(field.accessor) || field.multiple\n                    ? `dataIndex=\"${field.key}\"`\n                    : `dataIndex={[\"${field.key}\", ${\n                        field.accessor ? `\"${field.accessor}\"` : \"\"\n                    }]}`;\n\n            const title = `title=${translatePrettyString({\n                resource,\n                field,\n                i18n,\n            })}`;\n\n            let render = jsx`render={(value: any) => <BooleanField value={${accessor(\n                \"value\",\n                undefined,\n                Array.isArray(field.accessor) ? field.accessor : undefined,\n                \" && \",\n            )}} />}`;\n\n            if (field.multiple) {\n                const val = accessor(\"item\", undefined, field.accessor, \" && \");\n                render = jsx`render={(value: any[]) => (<>{value?.map((item, index) => (\n                    <BooleanField value={${val}} key={index} />\n                ))}</>)}`;\n            }\n\n            return jsx`<Table.Column ${dataIndex} ${title} ${render} />`;\n        }\n\n        return undefined;\n    };\n\n    const dateFields = (field: InferField) => {\n        if (field.type === \"date\") {\n            imports.push([\"DateField\", \"@refinedev/antd\"]);\n\n            const dataIndex =\n                Array.isArray(field.accessor) || field.multiple\n                    ? `dataIndex=\"${field.key}\"`\n                    : `dataIndex={[\"${field.key}\", ${\n                        field.accessor ? `\"${field.accessor}\"` : \"\"\n                    }]}`;\n\n            const title = `title=${translatePrettyString({\n                resource,\n                field,\n                i18n,\n            })}`;\n\n            let render = jsx`render={(value: any) => <DateField value={${accessor(\n                \"value\",\n                undefined,\n                Array.isArray(field.accessor) ? field.accessor : undefined,\n                ' + \" \" + ',\n            )}} />}`;\n\n            if (field.multiple) {\n                const val = accessor(\n                    \"item\",\n                    undefined,\n                    field.accessor,\n                    ' + \" \" + ',\n                );\n                render = jsx`render={(value: any[]) => (<>{value?.map((item, index) => (\n                    <DateField value={${val}} key={index} />\n                ))}</>)}`;\n            }\n\n            return jsx`<Table.Column ${dataIndex} ${title} ${render} />`;\n        }\n        return undefined;\n    };\n\n    const richtextFields = (field: InferField) => {\n        if (field?.type === \"richtext\") {\n            imports.push([\"MarkdownField\", \"@refinedev/antd\"]);\n\n            const dataIndex =\n                Array.isArray(field.accessor) || field.multiple\n                    ? `dataIndex=\"${field.key}\"`\n                    : field.accessor\n                        ? `dataIndex={[\"${field.key}\", \"${field.accessor}\"]}`\n                        : `dataIndex=\"${field.key}\"`;\n\n            const title = `title=${translatePrettyString({\n                resource,\n                field,\n                i18n,\n            })}`;\n\n            let render = jsx`render={(value: any) => <MarkdownField value={(${accessor(\n                \"value\",\n                undefined,\n                Array.isArray(field.accessor) ? field.accessor : undefined,\n            )}).slice(0, 80) + \"...\"} />}`;\n\n            if (field.multiple) {\n                const val = accessor(\n                    \"item\",\n                    undefined,\n                    field.accessor,\n                    ' + \" \" + ',\n                );\n                render = jsx`render={(value: any[]) => (<>{value?.map((item, index) => (\n                    <MarkdownField value={(${val})?.slice(0, 80) + \"...\"} key={index} />\n                ))}</>)}`;\n            }\n\n            return jsx`<Table.Column ${dataIndex} ${title} ${render} />`;\n        }\n\n        return undefined;\n    };\n\n    const basicFields = (field: InferField) => {\n        if (field && (field.type === \"text\" || field.type === \"number\")) {\n            const dataIndex =\n                field.accessor &&\n                !Array.isArray(field.accessor) &&\n                !field.multiple\n                    ? `dataIndex={[\"${field.key}\", \"${field.accessor}\"]}`\n                    : `dataIndex=\"${field.key}\"`;\n\n            const title = `title=${translatePrettyString({\n                resource,\n                field,\n                i18n,\n            })}`;\n            let render = \"\";\n\n            if (field.multiple) {\n                imports.push([\"TagField\", \"@refinedev/antd\"]);\n\n                const val = accessor(\n                    \"item\",\n                    undefined,\n                    field.accessor,\n                    ' + \" \" + ',\n                );\n                render = `render={(value: any[]) => (<>{value?.map((item) => (\n                    <TagField value={${val}} key={${val}} />\n                ))}</>)}`;\n            }\n            if (!field.multiple && Array.isArray(field.accessor)) {\n                render = `render={(value: any) => (<>{${accessor(\n                    \"value\",\n                    undefined,\n                    field.accessor,\n                )}}</>)}`;\n            }\n\n            return `<Table.Column ${dataIndex} ${title} ${render} />`;\n        }\n        return undefined;\n    };\n\n    const {\n        canEdit,\n        canShow,\n        canDelete: canDeleteProp,\n        meta: resourceMeta,\n    } = resource ?? {};\n\n    const canDelete = canDeleteProp || resourceMeta?.canDelete;\n\n    if (canEdit) {\n        imports.push([\"EditButton\", \"@refinedev/antd\"]);\n    }\n    if (canShow) {\n        imports.push([\"ShowButton\", \"@refinedev/antd\"]);\n    }\n    if (canDelete) {\n        imports.push([\"DeleteButton\", \"@refinedev/antd\"]);\n    }\n\n    const actionColumnTitle = i18n\n        ? `{translate(\"table.actions\")}`\n        : `\"Actions\"`;\n\n    const actionButtons =\n        canEdit || canShow || canDelete\n            ? jsx`\n            <Table.Column\n                title=${actionColumnTitle}\n                dataIndex=\"actions\"\n                render={(_, record: BaseRecord) => (\n                    <Space>\n                    ${\n                canEdit\n                    ? jsx`\n                        <EditButton\n                            hideText\n                            size=\"small\"\n                            recordItemId={record.id}\n                        />\n                        `\n                    : \"\"\n            }\n                    ${\n                canShow\n                    ? jsx`\n                        <ShowButton\n                            hideText\n                            size=\"small\"\n                            recordItemId={record.id}\n                        />\n                        `\n                    : \"\"\n            }\n                    ${\n                canDelete\n                    ? jsx`\n                        <DeleteButton\n                            hideText\n                            size=\"small\"\n                            recordItemId={record.id}\n                        />\n                        `\n                    : \"\"\n            }\n                    </Space>\n                )}\n            />\n        `\n            : \"\";\n\n    const renderedFields: Array<string | undefined> = fields.map((field) => {\n        switch (field?.type) {\n            case \"text\":\n            case \"number\":\n                return basicFields(field);\n            case \"richtext\":\n                return richtextFields(field);\n            case \"email\":\n                return emailFields(field);\n            case \"image\":\n                return imageFields(field);\n            case \"date\":\n                return dateFields(field);\n            case \"boolean\":\n                return booleanFields(field);\n            case \"url\":\n                return urlFields(field);\n            case \"relation\":\n                return renderRelationFields(field);\n            default:\n                return undefined;\n        }\n    });\n\n    noOp(imports);\n\n    const useTranslateHook = i18n && `const translate = useTranslate();`;\n\n    return jsx`\n        ${printImports(imports)}\n\n        export const ${COMPONENT_NAME}: React.FC<IResourceComponentsProps> = () => {\n            ${useTranslateHook}\n            const { tableProps } = useTable({\n                syncWithLocation: true,\n                ${isCustomPage ? ` resource: \"${resource.name}\",` : \"\"}\n                ${getMetaProps(\n        resource?.identifier ?? resource?.name,\n        meta,\n        \"getList\",\n    )}\n            });\n\n            ${relationHooksCode}\n\n            return (\n                <List>\n                    <Table {...tableProps} rowKey=\"id\">\n                        ${renderedFields.join(\"\\r\\n\")}\n                        ${actionButtons}\n                    </Table>\n                </List>\n            );\n        };\n    `;\n};\n\n/**\n * @experimental This is an experimental component\n */\nexport const ListInferencer: SchemaInferencerResultComponent = createSchemaInferencer({\n    type: \"list\",\n    additionalScope: [\n        [\n            \"@refinedev/antd\",\n            \"RefineAntd\",\n            {\n                useTable,\n                List,\n                TagField,\n                ImageField,\n                EmailField,\n                UrlField,\n                BooleanField,\n                DateField,\n                MarkdownField,\n                EditButton,\n                ShowButton,\n                DeleteButton,\n            },\n        ],\n        [\"antd\", \"AntdPackage\", { Table, Space }],\n    ],\n    codeViewerComponent: SharedCodeViewer,\n    loadingComponent: LoadingComponent,\n    errorComponent: ErrorComponent,\n    renderer,\n});\n","import { cloneDeep, isEmpty, merge, set } from 'lodash-es';\nimport scheme from './scheme';\n\n//@ts-ignore\nfunction traverseAndFlatten(currentNode, target, flattenedKey) {\n\tfor (var key in currentNode) {\n\t\tif (currentNode.hasOwnProperty(key)) {\n\t\t\tvar newKey;\n\t\t\tif (flattenedKey === undefined) {\n\t\t\t\tnewKey = key;\n\t\t\t} else {\n\t\t\t\tnewKey = flattenedKey + '.' + key;\n\t\t\t}\n\n\t\t\tvar value = currentNode[key];\n\t\t\tif (typeof value === \"object\") {\n\t\t\t\ttraverseAndFlatten(value, target, newKey);\n\t\t\t} else {\n\t\t\t\ttarget[newKey] = value;\n\t\t\t}\n\t\t}\n\t}\n}\n\n//@ts-ignore\nfunction flatten(obj) {\n\tconst flattenedObject = {};\n\t//@ts-ignore\n\ttraverseAndFlatten(obj, flattenedObject);\n\treturn flattenedObject;\n}\n\nconst isSchema = (value: unknown): value is string => typeof value === 'string' ? value.startsWith('#/components/schemas/') : false;\n\ntype InferencerType = 'create' | 'list' | 'show' | 'edit';\n\ninterface ResourceSchema {\n    properties: Record<string, any>;\n    required: string[];\n    type: 'object';\n}\n\ninterface CrudSchemas {\n    [k: string]: Record<'request' | 'response', ResourceSchema | undefined>;\n    create: Record<'request' | 'response', ResourceSchema | undefined>;\n    edit: Record<'request' | 'response', ResourceSchema | undefined>;\n    show: Record<'request' | 'response', ResourceSchema | undefined>;\n}\n\nconst operationKeys = [['get', 'show'], ['post', 'create'], ['put', 'edit']];\n\nconst getCrudSchemas = (resourceSchema: any): CrudSchemas => {\n    const crudSchemas: CrudSchemas = {\n        create: {\n            request: undefined,\n            response: undefined,\n        },\n        edit: {\n            request: undefined,\n            response: undefined,\n        },\n        show: {\n            request: undefined,\n            response: undefined,\n        },\n    };\n\n    operationKeys.forEach(([operationKey, crudKey]) => {\n        if (operationKey in resourceSchema) {\n            const flattenSchema = flatten(resourceSchema[operationKey]);\n\n            const requestRef = Object.entries(flattenSchema)\n                .find(([key, value]) => key.includes('requestBody.content') && isSchema(value)) as [string, string] | undefined;\n\n            if (requestRef) {\n                const requestRefName = requestRef[1].split('/').at(-1)!;\n                set(crudSchemas, `${crudKey}.request`, cloneDeep<ResourceSchema>((scheme.components.schemas as any)[requestRefName]));\n            }\n\n            const responseRef = Object.entries(flattenSchema)\n                .find(([key, value]) => key.includes('responses') && isSchema(value)) as [string, string] | undefined;\n\n            if (responseRef) {\n                const responseRefName = responseRef[1].split('/').at(-1)!;\n                set(crudSchemas, `${crudKey}.response`, cloneDeep<ResourceSchema>((scheme.components.schemas as any)[responseRefName]));\n            }\n        }\n    });\n\n    return crudSchemas;\n};\n\nexport const getSchemaByType = (name: string, type: InferencerType): CrudSchemas[InferencerType] => {\n    const crudSchemas = {} as CrudSchemas;\n\n    Object.keys(scheme.paths)\n        .filter((path) => path.includes(name))\n        .forEach((path) => {\n            // @ts-ignore\n            const result = getCrudSchemas(scheme.paths[path]);\n            merge(crudSchemas, result);\n            crudSchemas.list = result.show;\n        });\n\n    console.log('crudSchemas: ', crudSchemas);\n\n    console.groupEnd();\n\n    return crudSchemas[type];\n};\n","export default {\n\t\"openapi\": \"3.0.0\",\n\t\"paths\": {\n\t\t\"/api/platform/v1/auth/signup\": {\n\t\t\t\"post\": {\n\t\t\t\t\"operationId\": \"AuthController_signUp\",\n\t\t\t\t\"parameters\": [],\n\t\t\t\t\"requestBody\": {\n\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\"content\": {\n\t\t\t\t\t\t\"application/json\": {\n\t\t\t\t\t\t\t\"schema\": {\n\t\t\t\t\t\t\t\t\"$ref\": \"#/components/schemas/SignUpByEmailRequest\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"responses\": {\n\t\t\t\t\t\"201\": {\n\t\t\t\t\t\t\"description\": \"\",\n\t\t\t\t\t\t\"content\": {\n\t\t\t\t\t\t\t\"application/json\": {\n\t\t\t\t\t\t\t\t\"schema\": {\n\t\t\t\t\t\t\t\t\t\"$ref\": \"#/components/schemas/SignUpByEmailResponseDTO\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t\"409\": {\n\t\t\t\t\t\t\"description\": \"Appears when user with such email already exists\",\n\t\t\t\t\t\t\"content\": {\n\t\t\t\t\t\t\t\"application/json\": {\n\t\t\t\t\t\t\t\t\"schema\": {\n\t\t\t\t\t\t\t\t\t\"allOf\": [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"$ref\": \"#/components/schemas/ErrorResponse\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"properties\": {\n\t\t\t\t\t\t\t\t\t\t\t\t\"status\": {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"type\": \"number\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"default\": 409\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"tags\": [\n\t\t\t\t\t\"Auth\"\n\t\t\t\t]\n\t\t\t}\n\t\t},\n\t\t\"/api/platform/v1/auth/tenant-signup\": {\n\t\t\t\"post\": {\n\t\t\t\t\"operationId\": \"AuthController_signUpWithTenantCreation\",\n\t\t\t\t\"parameters\": [],\n\t\t\t\t\"requestBody\": {\n\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\"content\": {\n\t\t\t\t\t\t\"application/json\": {\n\t\t\t\t\t\t\t\"schema\": {\n\t\t\t\t\t\t\t\t\"$ref\": \"#/components/schemas/SignUpByEmailWithTenantCreationRequest\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"responses\": {\n\t\t\t\t\t\"201\": {\n\t\t\t\t\t\t\"description\": \"\",\n\t\t\t\t\t\t\"content\": {\n\t\t\t\t\t\t\t\"application/json\": {\n\t\t\t\t\t\t\t\t\"schema\": {\n\t\t\t\t\t\t\t\t\t\"$ref\": \"#/components/schemas/SignUpByEmailResponseDTO\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t\"409\": {\n\t\t\t\t\t\t\"description\": \"Appears when user with such email already exists\",\n\t\t\t\t\t\t\"content\": {\n\t\t\t\t\t\t\t\"application/json\": {\n\t\t\t\t\t\t\t\t\"schema\": {\n\t\t\t\t\t\t\t\t\t\"allOf\": [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"$ref\": \"#/components/schemas/ErrorResponse\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"properties\": {\n\t\t\t\t\t\t\t\t\t\t\t\t\"status\": {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"type\": \"number\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"default\": 409\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"tags\": [\n\t\t\t\t\t\"Auth\"\n\t\t\t\t]\n\t\t\t}\n\t\t},\n\t\t\"/api/platform/v1/auth/approve-signup\": {\n\t\t\t\"post\": {\n\t\t\t\t\"operationId\": \"AuthController_approveSignup\",\n\t\t\t\t\"summary\": \"\",\n\t\t\t\t\"description\": \"or you can respond with some message and let user to login\\n    default behavior is to force user to login and make sure his password is correct\",\n\t\t\t\t\"parameters\": [],\n\t\t\t\t\"requestBody\": {\n\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\"content\": {\n\t\t\t\t\t\t\"application/json\": {\n\t\t\t\t\t\t\t\"schema\": {\n\t\t\t\t\t\t\t\t\"$ref\": \"#/components/schemas/ApproveSignUpRequest\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"responses\": {\n\t\t\t\t\t\"200\": {\n\t\t\t\t\t\t\"description\": \"\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"tags\": [\n\t\t\t\t\t\"Auth\"\n\t\t\t\t]\n\t\t\t}\n\t\t},\n\t\t\"/api/platform/v1/auth/signin\": {\n\t\t\t\"post\": {\n\t\t\t\t\"operationId\": \"AuthController_signIn\",\n\t\t\t\t\"parameters\": [],\n\t\t\t\t\"requestBody\": {\n\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\"content\": {\n\t\t\t\t\t\t\"application/json\": {\n\t\t\t\t\t\t\t\"schema\": {\n\t\t\t\t\t\t\t\t\"$ref\": \"#/components/schemas/SignInRequest\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"responses\": {\n\t\t\t\t\t\"200\": {\n\t\t\t\t\t\t\"description\": \"\",\n\t\t\t\t\t\t\"content\": {\n\t\t\t\t\t\t\t\"application/json\": {\n\t\t\t\t\t\t\t\t\"schema\": {\n\t\t\t\t\t\t\t\t\t\"$ref\": \"#/components/schemas/SignInResponseDTO\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"tags\": [\n\t\t\t\t\t\"Auth\"\n\t\t\t\t]\n\t\t\t}\n\t\t},\n\t\t\"/api/platform/v1/auth/sso/saml/login\": {\n\t\t\t\"post\": {\n\t\t\t\t\"operationId\": \"AuthController_samlLogin\",\n\t\t\t\t\"parameters\": [],\n\t\t\t\t\"requestBody\": {\n\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\"content\": {\n\t\t\t\t\t\t\"application/json\": {\n\t\t\t\t\t\t\t\"schema\": {\n\t\t\t\t\t\t\t\t\"$ref\": \"#/components/schemas/InitiateSamlLoginRequest\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"responses\": {\n\t\t\t\t\t\"200\": {\n\t\t\t\t\t\t\"description\": \"\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"tags\": [\n\t\t\t\t\t\"Auth\"\n\t\t\t\t]\n\t\t\t}\n\t\t},\n\t\t\"/api/platform/v1/auth/sso/saml/ac\": {\n\t\t\t\"post\": {\n\t\t\t\t\"operationId\": \"AuthController_samlAcknowledge\",\n\t\t\t\t\"parameters\": [],\n\t\t\t\t\"responses\": {\n\t\t\t\t\t\"200\": {\n\t\t\t\t\t\t\"description\": \"\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"tags\": [\n\t\t\t\t\t\"Auth\"\n\t\t\t\t]\n\t\t\t}\n\t\t},\n\t\t\"/api/platform/v1/auth/refresh-access-token\": {\n\t\t\t\"post\": {\n\t\t\t\t\"operationId\": \"AuthController_refreshAccessToken\",\n\t\t\t\t\"parameters\": [],\n\t\t\t\t\"responses\": {\n\t\t\t\t\t\"200\": {\n\t\t\t\t\t\t\"description\": \"\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"tags\": [\n\t\t\t\t\t\"Auth\"\n\t\t\t\t]\n\t\t\t}\n\t\t},\n\t\t\"/api/platform/v1/auth/saml/sso/metadata\": {\n\t\t\t\"get\": {\n\t\t\t\t\"operationId\": \"SamlController_samlMetadata\",\n\t\t\t\t\"parameters\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"name\": \"samlConfigurationId\",\n\t\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\t\"in\": \"query\",\n\t\t\t\t\t\t\"schema\": {\n\t\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"name\": \"tenantId\",\n\t\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\t\"in\": \"query\",\n\t\t\t\t\t\t\"schema\": {\n\t\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"responses\": {\n\t\t\t\t\t\"200\": {\n\t\t\t\t\t\t\"description\": \"\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"tags\": [\n\t\t\t\t\t\"Auth\"\n\t\t\t\t]\n\t\t\t}\n\t\t},\n\t\t\"/api/platform/v1/roles\": {\n\t\t\t\"get\": {\n\t\t\t\t\"operationId\": \"RolesController_findAll\",\n\t\t\t\t\"parameters\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"name\": \"page\",\n\t\t\t\t\t\t\"required\": false,\n\t\t\t\t\t\t\"in\": \"query\",\n\t\t\t\t\t\t\"description\": \"Page number to retrieve.If you provide invalid value the default page number will applied\\n        <p>\\n             <b>Example: </b> 1\\n          </p>\\n        <p>\\n             <b>Default Value: </b> 1\\n          </p>\\n        \",\n\t\t\t\t\t\t\"schema\": {\n\t\t\t\t\t\t\t\"type\": \"number\"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"name\": \"limit\",\n\t\t\t\t\t\t\"required\": false,\n\t\t\t\t\t\t\"in\": \"query\",\n\t\t\t\t\t\t\"description\": \"Number of records per page.\\n      <p>\\n             <b>Example: </b> 20\\n          </p>\\n      <p>\\n             <b>Default Value: </b> 50\\n          </p>\\n      <p>\\n             <b>Max Value: </b> 100\\n          </p>\\n\\n      If provided value is greater than max value, max value will be applied.\\n      \",\n\t\t\t\t\t\t\"schema\": {\n\t\t\t\t\t\t\t\"type\": \"number\"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"name\": \"filter.id\",\n\t\t\t\t\t\t\"required\": false,\n\t\t\t\t\t\t\"in\": \"query\",\n\t\t\t\t\t\t\"description\": \"Filter by id query param.\\n          <p>\\n             <b>Format: </b> filter.id={$not}:OPERATION:VALUE\\n          </p>\\n          <p>\\n             <b>Example: </b> filter.id=$not:$like:John Doe&filter.id=like:John\\n          </p>\\n          <h4>Available Operations</h4><ul><li>$eq</li>\\n<li>$in</li></ul>\",\n\t\t\t\t\t\t\"schema\": {\n\t\t\t\t\t\t\t\"type\": \"array\",\n\t\t\t\t\t\t\t\"items\": {\n\t\t\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"name\": \"filter.name\",\n\t\t\t\t\t\t\"required\": false,\n\t\t\t\t\t\t\"in\": \"query\",\n\t\t\t\t\t\t\"description\": \"Filter by name query param.\\n          <p>\\n             <b>Format: </b> filter.name={$not}:OPERATION:VALUE\\n          </p>\\n          <p>\\n             <b>Example: </b> filter.name=$not:$like:John Doe&filter.name=like:John\\n          </p>\\n          <h4>Available Operations</h4><ul><li>$contains</li></ul>\",\n\t\t\t\t\t\t\"schema\": {\n\t\t\t\t\t\t\t\"type\": \"array\",\n\t\t\t\t\t\t\t\"items\": {\n\t\t\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"name\": \"sortBy\",\n\t\t\t\t\t\t\"required\": false,\n\t\t\t\t\t\t\"in\": \"query\",\n\t\t\t\t\t\t\"description\": \"Parameter to sort by.\\n      <p>To sort by multiple fields, just provide query param multiple types. The order in url defines an order of sorting</p>\\n      <p>\\n             <b>Format: </b> fieldName:DIRECTION\\n          </p>\\n      <p>\\n             <b>Example: </b> sortBy=id:DESC&sortBy=createdAt:ASC\\n          </p>\\n      <p>\\n             <b>Default Value: </b> createdAt:DESC,id:DESC\\n          </p>\\n      <h4>Available Fields</h4><ul><li>id</li>\\n<li>name</li>\\n<li>createdAt</li>\\n<li>updatedAt</li></ul>\\n      \",\n\t\t\t\t\t\t\"schema\": {\n\t\t\t\t\t\t\t\"type\": \"array\",\n\t\t\t\t\t\t\t\"items\": {\n\t\t\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\t\t\"enum\": [\n\t\t\t\t\t\t\t\t\t\"id:ASC\",\n\t\t\t\t\t\t\t\t\t\"id:DESC\",\n\t\t\t\t\t\t\t\t\t\"name:ASC\",\n\t\t\t\t\t\t\t\t\t\"name:DESC\",\n\t\t\t\t\t\t\t\t\t\"createdAt:ASC\",\n\t\t\t\t\t\t\t\t\t\"createdAt:DESC\",\n\t\t\t\t\t\t\t\t\t\"updatedAt:ASC\",\n\t\t\t\t\t\t\t\t\t\"updatedAt:DESC\"\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"name\": \"search\",\n\t\t\t\t\t\t\"required\": false,\n\t\t\t\t\t\t\"in\": \"query\",\n\t\t\t\t\t\t\"description\": \"Search term to filter result values\\n        <p>\\n             <b>Example: </b> John\\n          </p>\\n        <p>\\n             <b>Default Value: </b> No default value\\n          </p>\\n        \",\n\t\t\t\t\t\t\"schema\": {\n\t\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"name\": \"searchBy\",\n\t\t\t\t\t\t\"required\": false,\n\t\t\t\t\t\t\"in\": \"query\",\n\t\t\t\t\t\t\"description\": \"List of fields to search by term to filter result values\\n        <p>\\n             <b>Example: </b> name,roleType\\n          </p>\\n        <p>\\n             <b>Default Value: </b> By default all fields mentioned below will be used to search by term\\n          </p>\\n        <h4>Available Fields</h4><ul><li>name</li>\\n<li>roleType</li></ul>\\n        \",\n\t\t\t\t\t\t\"schema\": {\n\t\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"responses\": {\n\t\t\t\t\t\"200\": {\n\t\t\t\t\t\t\"description\": \"\",\n\t\t\t\t\t\t\"content\": {\n\t\t\t\t\t\t\t\"application/json\": {\n\t\t\t\t\t\t\t\t\"schema\": {\n\t\t\t\t\t\t\t\t\t\"allOf\": [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"$ref\": \"#/components/schemas/PaginatedDocumented\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"properties\": {\n\t\t\t\t\t\t\t\t\t\t\t\t\"data\": {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"type\": \"array\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"items\": {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"$ref\": \"#/components/schemas/UserRoleWithoutPermission\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\"meta\": {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"properties\": {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"select\": {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"type\": \"array\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"items\": {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"filter\": {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"type\": \"object\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"properties\": {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"id\": {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"oneOf\": [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"type\": \"array\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"items\": {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"name\": {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"oneOf\": [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"type\": \"array\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"items\": {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"tags\": [\n\t\t\t\t\t\"Roles\"\n\t\t\t\t],\n\t\t\t\t\"security\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"bearer\": []\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"post\": {\n\t\t\t\t\"operationId\": \"RolesController_create\",\n\t\t\t\t\"parameters\": [],\n\t\t\t\t\"requestBody\": {\n\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\"content\": {\n\t\t\t\t\t\t\"application/json\": {\n\t\t\t\t\t\t\t\"schema\": {\n\t\t\t\t\t\t\t\t\"$ref\": \"#/components/schemas/CreateUserRole\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"responses\": {\n\t\t\t\t\t\"201\": {\n\t\t\t\t\t\t\"description\": \"\",\n\t\t\t\t\t\t\"content\": {\n\t\t\t\t\t\t\t\"application/json\": {\n\t\t\t\t\t\t\t\t\"schema\": {\n\t\t\t\t\t\t\t\t\t\"$ref\": \"#/components/schemas/UserRoleWithoutPermission\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"tags\": [\n\t\t\t\t\t\"Roles\"\n\t\t\t\t],\n\t\t\t\t\"security\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"bearer\": []\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\t\t},\n\t\t\"/api/platform/v1/roles/{id}\": {\n\t\t\t\"get\": {\n\t\t\t\t\"operationId\": \"RolesController_findOne\",\n\t\t\t\t\"parameters\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"name\": \"id\",\n\t\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\t\"in\": \"path\",\n\t\t\t\t\t\t\"description\": \"Entity id, uuid v4 format\",\n\t\t\t\t\t\t\"example\": \"123e4567-e89b-12d3-a456-426614174000\",\n\t\t\t\t\t\t\"schema\": {\n\t\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"responses\": {\n\t\t\t\t\t\"200\": {\n\t\t\t\t\t\t\"description\": \"\",\n\t\t\t\t\t\t\"content\": {\n\t\t\t\t\t\t\t\"application/json\": {\n\t\t\t\t\t\t\t\t\"schema\": {\n\t\t\t\t\t\t\t\t\t\"$ref\": \"#/components/schemas/UserRoleWithoutPermission\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"tags\": [\n\t\t\t\t\t\"Roles\"\n\t\t\t\t],\n\t\t\t\t\"security\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"bearer\": []\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"put\": {\n\t\t\t\t\"operationId\": \"RolesController_updateOne\",\n\t\t\t\t\"parameters\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"name\": \"id\",\n\t\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\t\"in\": \"path\",\n\t\t\t\t\t\t\"description\": \"Entity id, uuid v4 format\",\n\t\t\t\t\t\t\"example\": \"123e4567-e89b-12d3-a456-426614174000\",\n\t\t\t\t\t\t\"schema\": {\n\t\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"requestBody\": {\n\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\"content\": {\n\t\t\t\t\t\t\"application/json\": {\n\t\t\t\t\t\t\t\"schema\": {\n\t\t\t\t\t\t\t\t\"$ref\": \"#/components/schemas/UpdateUserRole\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"responses\": {\n\t\t\t\t\t\"200\": {\n\t\t\t\t\t\t\"description\": \"\",\n\t\t\t\t\t\t\"content\": {\n\t\t\t\t\t\t\t\"application/json\": {\n\t\t\t\t\t\t\t\t\"schema\": {\n\t\t\t\t\t\t\t\t\t\"$ref\": \"#/components/schemas/UserRoleWithoutPermission\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"tags\": [\n\t\t\t\t\t\"Roles\"\n\t\t\t\t],\n\t\t\t\t\"security\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"bearer\": []\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"delete\": {\n\t\t\t\t\"operationId\": \"RolesController_softDelete\",\n\t\t\t\t\"parameters\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"name\": \"id\",\n\t\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\t\"in\": \"path\",\n\t\t\t\t\t\t\"description\": \"Entity id, uuid v4 format\",\n\t\t\t\t\t\t\"example\": \"123e4567-e89b-12d3-a456-426614174000\",\n\t\t\t\t\t\t\"schema\": {\n\t\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"name\": \"version\",\n\t\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\t\"in\": \"query\",\n\t\t\t\t\t\t\"description\": \"Version number of entity\",\n\t\t\t\t\t\t\"example\": \"1\",\n\t\t\t\t\t\t\"schema\": {\n\t\t\t\t\t\t\t\"minimum\": 0,\n\t\t\t\t\t\t\t\"type\": \"number\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"responses\": {\n\t\t\t\t\t\"204\": {\n\t\t\t\t\t\t\"description\": \"\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"tags\": [\n\t\t\t\t\t\"Roles\"\n\t\t\t\t],\n\t\t\t\t\"security\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"bearer\": []\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\t\t},\n\t\t\"/api/platform/v1/tenants/configuration/saml\": {\n\t\t\t\"post\": {\n\t\t\t\t\"operationId\": \"TenantsConfigurationController_setupSaml\",\n\t\t\t\t\"parameters\": [],\n\t\t\t\t\"requestBody\": {\n\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\"content\": {\n\t\t\t\t\t\t\"application/json\": {\n\t\t\t\t\t\t\t\"schema\": {\n\t\t\t\t\t\t\t\t\"$ref\": \"#/components/schemas/SetupSamlConfiguration\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"responses\": {\n\t\t\t\t\t\"200\": {\n\t\t\t\t\t\t\"description\": \"\",\n\t\t\t\t\t\t\"content\": {\n\t\t\t\t\t\t\t\"application/json\": {\n\t\t\t\t\t\t\t\t\"schema\": {\n\t\t\t\t\t\t\t\t\t\"$ref\": \"#/components/schemas/SetupSamlConfigurationResponseDTO\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"tags\": [\n\t\t\t\t\t\"Tenants\"\n\t\t\t\t]\n\t\t\t}\n\t\t},\n\t\t\"/api/platform/health\": {\n\t\t\t\"get\": {\n\t\t\t\t\"operationId\": \"HealthController_getHealth\",\n\t\t\t\t\"parameters\": [],\n\t\t\t\t\"responses\": {\n\t\t\t\t\t\"200\": {\n\t\t\t\t\t\t\"description\": \"The Health Check is successful\",\n\t\t\t\t\t\t\"content\": {\n\t\t\t\t\t\t\t\"application/json\": {\n\t\t\t\t\t\t\t\t\"schema\": {\n\t\t\t\t\t\t\t\t\t\"type\": \"object\",\n\t\t\t\t\t\t\t\t\t\"properties\": {\n\t\t\t\t\t\t\t\t\t\t\"status\": {\n\t\t\t\t\t\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\t\t\t\t\t\"example\": \"ok\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\"info\": {\n\t\t\t\t\t\t\t\t\t\t\t\"type\": \"object\",\n\t\t\t\t\t\t\t\t\t\t\t\"example\": {\n\t\t\t\t\t\t\t\t\t\t\t\t\"database\": {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"status\": \"up\"\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\"additionalProperties\": {\n\t\t\t\t\t\t\t\t\t\t\t\t\"type\": \"object\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"properties\": {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"status\": {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\"additionalProperties\": {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\"nullable\": true\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\"error\": {\n\t\t\t\t\t\t\t\t\t\t\t\"type\": \"object\",\n\t\t\t\t\t\t\t\t\t\t\t\"example\": {},\n\t\t\t\t\t\t\t\t\t\t\t\"additionalProperties\": {\n\t\t\t\t\t\t\t\t\t\t\t\t\"type\": \"object\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"properties\": {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"status\": {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\"additionalProperties\": {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\"nullable\": true\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\"details\": {\n\t\t\t\t\t\t\t\t\t\t\t\"type\": \"object\",\n\t\t\t\t\t\t\t\t\t\t\t\"example\": {\n\t\t\t\t\t\t\t\t\t\t\t\t\"database\": {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"status\": \"up\"\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\"additionalProperties\": {\n\t\t\t\t\t\t\t\t\t\t\t\t\"type\": \"object\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"properties\": {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"status\": {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\"additionalProperties\": {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t\"503\": {\n\t\t\t\t\t\t\"description\": \"The Health Check is not successful\",\n\t\t\t\t\t\t\"content\": {\n\t\t\t\t\t\t\t\"application/json\": {\n\t\t\t\t\t\t\t\t\"schema\": {\n\t\t\t\t\t\t\t\t\t\"type\": \"object\",\n\t\t\t\t\t\t\t\t\t\"properties\": {\n\t\t\t\t\t\t\t\t\t\t\"status\": {\n\t\t\t\t\t\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\t\t\t\t\t\"example\": \"error\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\"info\": {\n\t\t\t\t\t\t\t\t\t\t\t\"type\": \"object\",\n\t\t\t\t\t\t\t\t\t\t\t\"example\": {\n\t\t\t\t\t\t\t\t\t\t\t\t\"database\": {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"status\": \"up\"\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\"additionalProperties\": {\n\t\t\t\t\t\t\t\t\t\t\t\t\"type\": \"object\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"properties\": {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"status\": {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\"additionalProperties\": {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\"nullable\": true\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\"error\": {\n\t\t\t\t\t\t\t\t\t\t\t\"type\": \"object\",\n\t\t\t\t\t\t\t\t\t\t\t\"example\": {\n\t\t\t\t\t\t\t\t\t\t\t\t\"redis\": {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"status\": \"down\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"message\": \"Could not connect\"\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\"additionalProperties\": {\n\t\t\t\t\t\t\t\t\t\t\t\t\"type\": \"object\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"properties\": {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"status\": {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\"additionalProperties\": {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\"nullable\": true\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\"details\": {\n\t\t\t\t\t\t\t\t\t\t\t\"type\": \"object\",\n\t\t\t\t\t\t\t\t\t\t\t\"example\": {\n\t\t\t\t\t\t\t\t\t\t\t\t\"database\": {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"status\": \"up\"\n\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\"redis\": {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"status\": \"down\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"message\": \"Could not connect\"\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\"additionalProperties\": {\n\t\t\t\t\t\t\t\t\t\t\t\t\"type\": \"object\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"properties\": {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"status\": {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\"additionalProperties\": {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"tags\": [\n\t\t\t\t\t\"Health\"\n\t\t\t\t]\n\t\t\t}\n\t\t}\n\t},\n\t\"info\": {\n\t\t\"title\": \"Platform Application is responsible for the common things, like user, tenants, auth, management.\",\n\t\t\"description\": \"It has a common api for tenants and auth. By default designed as a multi-tenant, but you can have only one tenant and manage it like this, in case if in future you would like to expand.\",\n\t\t\"version\": \"1.0.0\",\n\t\t\"contact\": {\n\t\t\t\"name\": \"Vitalii Samofal\",\n\t\t\t\"url\": \"https://www.softkit.dev/\",\n\t\t\t\"email\": \"vitalii.samofal@softkit.dev\"\n\t\t}\n\t},\n\t\"tags\": [],\n\t\"servers\": [\n\t\t{\n\t\t\t\"url\": \"http://localhost:9999\",\n\t\t\t\"description\": \"local server\"\n\t\t}\n\t],\n\t\"components\": {\n\t\t\"securitySchemes\": {\n\t\t\t\"bearer\": {\n\t\t\t\t\"scheme\": \"bearer\",\n\t\t\t\t\"bearerFormat\": \"JWT\",\n\t\t\t\t\"type\": \"http\"\n\t\t\t}\n\t\t},\n\t\t\"schemas\": {\n\t\t\t\"ErrorResponse\": {\n\t\t\t\t\"type\": \"object\",\n\t\t\t\t\"properties\": {\n\t\t\t\t\t\"type\": {\n\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\"description\": \"link to the docs with more details about the error\"\n\t\t\t\t\t},\n\t\t\t\t\t\"title\": {\n\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\"description\": \"title of the error, short description\"\n\t\t\t\t\t},\n\t\t\t\t\t\"status\": {\n\t\t\t\t\t\t\"type\": \"number\",\n\t\t\t\t\t\t\"description\": \"http status code of the error, e.g. 404\"\n\t\t\t\t\t},\n\t\t\t\t\t\"detail\": {\n\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\"description\": \"detail of the error, comprehensive message for the end user (e.g. 'customer with id 12344321 not found')\"\n\t\t\t\t\t},\n\t\t\t\t\t\"data\": {\n\t\t\t\t\t\t\"type\": \"object\",\n\t\t\t\t\t\t\"description\": \"additional data that can be used by the client to handle the error\"\n\t\t\t\t\t},\n\t\t\t\t\t\"instance\": {\n\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\"description\": \"error instance, unique identifier for this particular occurrence of the problem\"\n\t\t\t\t\t},\n\t\t\t\t\t\"errorCode\": {\n\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\"description\": \"A code that uniquely identifies the type of error or problem that occurred\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"required\": [\n\t\t\t\t\t\"type\",\n\t\t\t\t\t\"title\",\n\t\t\t\t\t\"status\",\n\t\t\t\t\t\"detail\",\n\t\t\t\t\t\"data\",\n\t\t\t\t\t\"instance\",\n\t\t\t\t\t\"errorCode\"\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"SignUpByEmailRequest\": {\n\t\t\t\t\"type\": \"object\",\n\t\t\t\t\"properties\": {\n\t\t\t\t\t\"repeatedPassword\": {\n\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\"description\": \"just in case of some issues with frontend,\\nwe won't save garbage to the database\"\n\t\t\t\t\t},\n\t\t\t\t\t\"email\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t},\n\t\t\t\t\t\"password\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t},\n\t\t\t\t\t\"firstName\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t},\n\t\t\t\t\t\"lastName\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"required\": [\n\t\t\t\t\t\"repeatedPassword\",\n\t\t\t\t\t\"email\",\n\t\t\t\t\t\"firstName\",\n\t\t\t\t\t\"lastName\"\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"SignUpByEmailResponseDTO\": {\n\t\t\t\t\"type\": \"object\",\n\t\t\t\t\"properties\": {\n\t\t\t\t\t\"message\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t},\n\t\t\t\t\t\"approvalId\": {\n\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\"description\": \"id of approval entity, for future reuse\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"required\": [\n\t\t\t\t\t\"message\",\n\t\t\t\t\t\"approvalId\"\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"SignUpByEmailWithTenantCreationRequest\": {\n\t\t\t\t\"type\": \"object\",\n\t\t\t\t\"properties\": {\n\t\t\t\t\t\"companyName\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t},\n\t\t\t\t\t\"companyIdentifier\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t},\n\t\t\t\t\t\"repeatedPassword\": {\n\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\"description\": \"just in case of some issues with frontend,\\nwe won't save garbage to the database\"\n\t\t\t\t\t},\n\t\t\t\t\t\"email\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t},\n\t\t\t\t\t\"password\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t},\n\t\t\t\t\t\"firstName\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t},\n\t\t\t\t\t\"lastName\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"required\": [\n\t\t\t\t\t\"companyName\",\n\t\t\t\t\t\"companyIdentifier\",\n\t\t\t\t\t\"repeatedPassword\",\n\t\t\t\t\t\"email\",\n\t\t\t\t\t\"firstName\",\n\t\t\t\t\t\"lastName\"\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"ApproveSignUpRequest\": {\n\t\t\t\t\"type\": \"object\",\n\t\t\t\t\"properties\": {\n\t\t\t\t\t\"id\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t},\n\t\t\t\t\t\"code\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"required\": [\n\t\t\t\t\t\"id\",\n\t\t\t\t\t\"code\"\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"SignInRequest\": {\n\t\t\t\t\"type\": \"object\",\n\t\t\t\t\"properties\": {\n\t\t\t\t\t\"email\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t},\n\t\t\t\t\t\"password\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"required\": [\n\t\t\t\t\t\"email\"\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"SignInResponseDTO\": {\n\t\t\t\t\"type\": \"object\",\n\t\t\t\t\"properties\": {\n\t\t\t\t\t\"message\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t},\n\t\t\t\t\t\"accessToken\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t},\n\t\t\t\t\t\"refreshToken\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"required\": [\n\t\t\t\t\t\"message\",\n\t\t\t\t\t\"accessToken\",\n\t\t\t\t\t\"refreshToken\"\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"InitiateSamlLoginRequest\": {\n\t\t\t\t\"type\": \"object\",\n\t\t\t\t\"properties\": {\n\t\t\t\t\t\"redirectUrl\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t},\n\t\t\t\t\t\"samlConfigurationId\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"required\": [\n\t\t\t\t\t\"redirectUrl\",\n\t\t\t\t\t\"samlConfigurationId\"\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"PaginatedMetaDocumented\": {\n\t\t\t\t\"type\": \"object\",\n\t\t\t\t\"properties\": {\n\t\t\t\t\t\"itemsPerPage\": {\n\t\t\t\t\t\t\"type\": \"number\",\n\t\t\t\t\t\t\"title\": \"Number of items per page\"\n\t\t\t\t\t},\n\t\t\t\t\t\"totalItems\": {\n\t\t\t\t\t\t\"type\": \"number\",\n\t\t\t\t\t\t\"title\": \"Total number of items\"\n\t\t\t\t\t},\n\t\t\t\t\t\"currentPage\": {\n\t\t\t\t\t\t\"type\": \"number\",\n\t\t\t\t\t\t\"title\": \"Current requested page\"\n\t\t\t\t\t},\n\t\t\t\t\t\"totalPages\": {\n\t\t\t\t\t\t\"type\": \"number\",\n\t\t\t\t\t\t\"title\": \"Total number of pages\"\n\t\t\t\t\t},\n\t\t\t\t\t\"sortBy\": {\n\t\t\t\t\t\t\"type\": \"array\",\n\t\t\t\t\t\t\"title\": \"Sorting by columns\",\n\t\t\t\t\t\t\"items\": {\n\t\t\t\t\t\t\t\"type\": \"array\",\n\t\t\t\t\t\t\t\"items\": {\n\t\t\t\t\t\t\t\t\"oneOf\": [\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\t\t\t\t\"enum\": [\n\t\t\t\t\t\t\t\t\t\t\t\"ASC\",\n\t\t\t\t\t\t\t\t\t\t\t\"DESC\"\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t\"searchBy\": {\n\t\t\t\t\t\t\"title\": \"Search by fields\",\n\t\t\t\t\t\t\"type\": \"array\",\n\t\t\t\t\t\t\"items\": {\n\t\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t\"search\": {\n\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\"title\": \"Search term\"\n\t\t\t\t\t},\n\t\t\t\t\t\"select\": {\n\t\t\t\t\t\t\"title\": \"List of selected fields\",\n\t\t\t\t\t\t\"type\": \"array\",\n\t\t\t\t\t\t\"items\": {\n\t\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t\"filter\": {\n\t\t\t\t\t\t\"type\": \"object\",\n\t\t\t\t\t\t\"title\": \"Filters that applied to the query\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"required\": [\n\t\t\t\t\t\"itemsPerPage\",\n\t\t\t\t\t\"totalItems\",\n\t\t\t\t\t\"currentPage\",\n\t\t\t\t\t\"totalPages\"\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"PaginatedLinksDocumented\": {\n\t\t\t\t\"type\": \"object\",\n\t\t\t\t\"properties\": {\n\t\t\t\t\t\"first\": {\n\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\"title\": \"Link to first page\"\n\t\t\t\t\t},\n\t\t\t\t\t\"previous\": {\n\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\"title\": \"Link to previous page\"\n\t\t\t\t\t},\n\t\t\t\t\t\"current\": {\n\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\"title\": \"Link to current page\"\n\t\t\t\t\t},\n\t\t\t\t\t\"next\": {\n\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\"title\": \"Link to next page\"\n\t\t\t\t\t},\n\t\t\t\t\t\"last\": {\n\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\"title\": \"Link to last page\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"PaginatedDocumented\": {\n\t\t\t\t\"type\": \"object\",\n\t\t\t\t\"properties\": {\n\t\t\t\t\t\"data\": {\n\t\t\t\t\t\t\"title\": \"Array of entities\",\n\t\t\t\t\t\t\"type\": \"array\",\n\t\t\t\t\t\t\"items\": {\n\t\t\t\t\t\t\t\"type\": \"object\"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t\"meta\": {\n\t\t\t\t\t\t\"title\": \"Pagination Metadata\",\n\t\t\t\t\t\t\"allOf\": [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\"$ref\": \"#/components/schemas/PaginatedMetaDocumented\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t},\n\t\t\t\t\t\"links\": {\n\t\t\t\t\t\t\"title\": \"Links to pages\",\n\t\t\t\t\t\t\"allOf\": [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\"$ref\": \"#/components/schemas/PaginatedLinksDocumented\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"required\": [\n\t\t\t\t\t\"data\",\n\t\t\t\t\t\"meta\",\n\t\t\t\t\t\"links\"\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"UserRoleWithoutPermission\": {\n\t\t\t\t\"type\": \"object\",\n\t\t\t\t\"properties\": {\n\t\t\t\t\t\"createdAt\": {\n\t\t\t\t\t\t\"format\": \"date-time\",\n\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\"description\": \"Created at date time in ISO format\"\n\t\t\t\t\t},\n\t\t\t\t\t\"updatedAt\": {\n\t\t\t\t\t\t\"format\": \"date-time\",\n\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\"description\": \"Last time updated at date time in ISO format\"\n\t\t\t\t\t},\n\t\t\t\t\t\"deletedAt\": {\n\t\t\t\t\t\t\"format\": \"date-time\",\n\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\"description\": \"Deleted at date time in ISO format\"\n\t\t\t\t\t},\n\t\t\t\t\t\"version\": {\n\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\"description\": \"Entity version for optimistic lock handling\"\n\t\t\t\t\t},\n\t\t\t\t\t\"id\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t},\n\t\t\t\t\t\"name\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t},\n\t\t\t\t\t\"description\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t},\n\t\t\t\t\t\"roleType\": {\n\t\t\t\t\t\t\"enum\": [\n\t\t\t\t\t\t\t\"SUPER_ADMIN\",\n\t\t\t\t\t\t\t\"ADMIN\",\n\t\t\t\t\t\t\t\"REGULAR_USER\"\n\t\t\t\t\t\t],\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t},\n\t\t\t\t\t\"tenantId\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"required\": [\n\t\t\t\t\t\"createdAt\",\n\t\t\t\t\t\"updatedAt\",\n\t\t\t\t\t\"deletedAt\",\n\t\t\t\t\t\"version\",\n\t\t\t\t\t\"id\",\n\t\t\t\t\t\"name\",\n\t\t\t\t\t\"description\"\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"CreateUserRole\": {\n\t\t\t\t\"type\": \"object\",\n\t\t\t\t\"properties\": {\n\t\t\t\t\t\"name\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t},\n\t\t\t\t\t\"description\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"required\": [\n\t\t\t\t\t\"name\",\n\t\t\t\t\t\"description\"\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"PermissionCategory\": {\n\t\t\t\t\"type\": \"object\",\n\t\t\t\t\"properties\": {\n\t\t\t\t\t\"createdAt\": {\n\t\t\t\t\t\t\"format\": \"date-time\",\n\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\"description\": \"Created at date time in ISO format\"\n\t\t\t\t\t},\n\t\t\t\t\t\"updatedAt\": {\n\t\t\t\t\t\t\"format\": \"date-time\",\n\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\"description\": \"Last time updated at date time in ISO format\"\n\t\t\t\t\t},\n\t\t\t\t\t\"deletedAt\": {\n\t\t\t\t\t\t\"format\": \"date-time\",\n\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\"description\": \"Deleted at date time in ISO format\"\n\t\t\t\t\t},\n\t\t\t\t\t\"version\": {\n\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\"description\": \"Entity version for optimistic lock handling\"\n\t\t\t\t\t},\n\t\t\t\t\t\"id\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t},\n\t\t\t\t\t\"name\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t},\n\t\t\t\t\t\"description\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t},\n\t\t\t\t\t\"permissions\": {\n\t\t\t\t\t\t\"type\": \"array\",\n\t\t\t\t\t\t\"items\": {\n\t\t\t\t\t\t\t\"$ref\": \"#/components/schemas/Permission\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"required\": [\n\t\t\t\t\t\"createdAt\",\n\t\t\t\t\t\"updatedAt\",\n\t\t\t\t\t\"deletedAt\",\n\t\t\t\t\t\"version\",\n\t\t\t\t\t\"id\",\n\t\t\t\t\t\"name\",\n\t\t\t\t\t\"description\",\n\t\t\t\t\t\"permissions\"\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"Permission\": {\n\t\t\t\t\"type\": \"object\",\n\t\t\t\t\"properties\": {\n\t\t\t\t\t\"createdAt\": {\n\t\t\t\t\t\t\"format\": \"date-time\",\n\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\"description\": \"Created at date time in ISO format\"\n\t\t\t\t\t},\n\t\t\t\t\t\"updatedAt\": {\n\t\t\t\t\t\t\"format\": \"date-time\",\n\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\"description\": \"Last time updated at date time in ISO format\"\n\t\t\t\t\t},\n\t\t\t\t\t\"deletedAt\": {\n\t\t\t\t\t\t\"format\": \"date-time\",\n\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\"description\": \"Deleted at date time in ISO format\"\n\t\t\t\t\t},\n\t\t\t\t\t\"version\": {\n\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\"description\": \"Entity version for optimistic lock handling\"\n\t\t\t\t\t},\n\t\t\t\t\t\"id\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t},\n\t\t\t\t\t\"name\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t},\n\t\t\t\t\t\"description\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t},\n\t\t\t\t\t\"action\": {\n\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\"description\": \"action is the identifier of the permission\\nusually it is the name of the permission in lowercase\\ne.g. ADMIN.USER.CREATE, ADMIN.USER.READ, ADMIN.USER.UPDATE, ADMIN.USER.DELETE, ADMIN.USER.BULK_UPLOAD\"\n\t\t\t\t\t},\n\t\t\t\t\t\"permissionCategoryId\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t},\n\t\t\t\t\t\"permissionCategory\": {\n\t\t\t\t\t\t\"nullable\": true,\n\t\t\t\t\t\t\"allOf\": [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\"$ref\": \"#/components/schemas/PermissionCategory\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"required\": [\n\t\t\t\t\t\"createdAt\",\n\t\t\t\t\t\"updatedAt\",\n\t\t\t\t\t\"deletedAt\",\n\t\t\t\t\t\"version\",\n\t\t\t\t\t\"id\",\n\t\t\t\t\t\"name\",\n\t\t\t\t\t\"action\",\n\t\t\t\t\t\"permissionCategoryId\",\n\t\t\t\t\t\"permissionCategory\"\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"UserRole\": {\n\t\t\t\t\"type\": \"object\",\n\t\t\t\t\"properties\": {\n\t\t\t\t\t\"createdAt\": {\n\t\t\t\t\t\t\"format\": \"date-time\",\n\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\"description\": \"Created at date time in ISO format\"\n\t\t\t\t\t},\n\t\t\t\t\t\"updatedAt\": {\n\t\t\t\t\t\t\"format\": \"date-time\",\n\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\"description\": \"Last time updated at date time in ISO format\"\n\t\t\t\t\t},\n\t\t\t\t\t\"deletedAt\": {\n\t\t\t\t\t\t\"format\": \"date-time\",\n\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\"description\": \"Deleted at date time in ISO format\"\n\t\t\t\t\t},\n\t\t\t\t\t\"version\": {\n\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\"description\": \"Entity version for optimistic lock handling\"\n\t\t\t\t\t},\n\t\t\t\t\t\"id\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t},\n\t\t\t\t\t\"name\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t},\n\t\t\t\t\t\"description\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t},\n\t\t\t\t\t\"roleType\": {\n\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\"enum\": [\n\t\t\t\t\t\t\t\"SUPER_ADMIN\",\n\t\t\t\t\t\t\t\"ADMIN\",\n\t\t\t\t\t\t\t\"REGULAR_USER\"\n\t\t\t\t\t\t]\n\t\t\t\t\t},\n\t\t\t\t\t\"permissions\": {\n\t\t\t\t\t\t\"type\": \"array\",\n\t\t\t\t\t\t\"items\": {\n\t\t\t\t\t\t\t\"$ref\": \"#/components/schemas/Permission\"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t\"tenantId\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t},\n\t\t\t\t\t\"tenant\": {\n\t\t\t\t\t\t\"nullable\": true,\n\t\t\t\t\t\t\"description\": \"Tenants can have their own roles, but they can also inherit roles from the platform.\",\n\t\t\t\t\t\t\"allOf\": [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\"$ref\": \"#/components/schemas/Tenant\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"required\": [\n\t\t\t\t\t\"createdAt\",\n\t\t\t\t\t\"updatedAt\",\n\t\t\t\t\t\"deletedAt\",\n\t\t\t\t\t\"version\",\n\t\t\t\t\t\"id\",\n\t\t\t\t\t\"name\",\n\t\t\t\t\t\"description\"\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"UserTenantAccount\": {\n\t\t\t\t\"type\": \"object\",\n\t\t\t\t\"properties\": {\n\t\t\t\t\t\"createdAt\": {\n\t\t\t\t\t\t\"format\": \"date-time\",\n\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\"description\": \"Created at date time in ISO format\"\n\t\t\t\t\t},\n\t\t\t\t\t\"updatedAt\": {\n\t\t\t\t\t\t\"format\": \"date-time\",\n\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\"description\": \"Last time updated at date time in ISO format\"\n\t\t\t\t\t},\n\t\t\t\t\t\"deletedAt\": {\n\t\t\t\t\t\t\"format\": \"date-time\",\n\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\"description\": \"Deleted at date time in ISO format\"\n\t\t\t\t\t},\n\t\t\t\t\t\"version\": {\n\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\"description\": \"Entity version for optimistic lock handling\"\n\t\t\t\t\t},\n\t\t\t\t\t\"tenantId\": {\n\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\"description\": \"Tenant identifier\"\n\t\t\t\t\t},\n\t\t\t\t\t\"id\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t},\n\t\t\t\t\t\"userProfileId\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t},\n\t\t\t\t\t\"userStatus\": {\n\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\"enum\": [\n\t\t\t\t\t\t\t\"ACTIVE\",\n\t\t\t\t\t\t\t\"DEACTIVATED\"\n\t\t\t\t\t\t]\n\t\t\t\t\t},\n\t\t\t\t\t\"roles\": {\n\t\t\t\t\t\t\"type\": \"array\",\n\t\t\t\t\t\t\"items\": {\n\t\t\t\t\t\t\t\"$ref\": \"#/components/schemas/UserRole\"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t\"userProfile\": {\n\t\t\t\t\t\t\"$ref\": \"#/components/schemas/UserProfile\"\n\t\t\t\t\t},\n\t\t\t\t\t\"tenant\": {\n\t\t\t\t\t\t\"$ref\": \"#/components/schemas/Tenant\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"required\": [\n\t\t\t\t\t\"createdAt\",\n\t\t\t\t\t\"updatedAt\",\n\t\t\t\t\t\"deletedAt\",\n\t\t\t\t\t\"version\",\n\t\t\t\t\t\"tenantId\",\n\t\t\t\t\t\"id\",\n\t\t\t\t\t\"userProfileId\",\n\t\t\t\t\t\"userStatus\"\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"UserProfile\": {\n\t\t\t\t\"type\": \"object\",\n\t\t\t\t\"properties\": {\n\t\t\t\t\t\"createdAt\": {\n\t\t\t\t\t\t\"format\": \"date-time\",\n\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\"description\": \"Created at date time in ISO format\"\n\t\t\t\t\t},\n\t\t\t\t\t\"updatedAt\": {\n\t\t\t\t\t\t\"format\": \"date-time\",\n\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\"description\": \"Last time updated at date time in ISO format\"\n\t\t\t\t\t},\n\t\t\t\t\t\"deletedAt\": {\n\t\t\t\t\t\t\"format\": \"date-time\",\n\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\"description\": \"Deleted at date time in ISO format\"\n\t\t\t\t\t},\n\t\t\t\t\t\"version\": {\n\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\"description\": \"Entity version for optimistic lock handling\"\n\t\t\t\t\t},\n\t\t\t\t\t\"id\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t},\n\t\t\t\t\t\"email\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t},\n\t\t\t\t\t\"password\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t},\n\t\t\t\t\t\"firstName\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t},\n\t\t\t\t\t\"lastName\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t},\n\t\t\t\t\t\"status\": {\n\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\"enum\": [\n\t\t\t\t\t\t\t\"ACTIVE\",\n\t\t\t\t\t\t\t\"WAITING_FOR_EMAIL_APPROVAL\",\n\t\t\t\t\t\t\t\"DEACTIVATED\"\n\t\t\t\t\t\t]\n\t\t\t\t\t},\n\t\t\t\t\t\"userTenantsAccounts\": {\n\t\t\t\t\t\t\"type\": \"array\",\n\t\t\t\t\t\t\"items\": {\n\t\t\t\t\t\t\t\"$ref\": \"#/components/schemas/UserTenantAccount\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"required\": [\n\t\t\t\t\t\"createdAt\",\n\t\t\t\t\t\"updatedAt\",\n\t\t\t\t\t\"deletedAt\",\n\t\t\t\t\t\"version\",\n\t\t\t\t\t\"id\",\n\t\t\t\t\t\"email\",\n\t\t\t\t\t\"firstName\",\n\t\t\t\t\t\"lastName\",\n\t\t\t\t\t\"status\"\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"SAMLConfiguration\": {\n\t\t\t\t\"type\": \"object\",\n\t\t\t\t\"properties\": {\n\t\t\t\t\t\"createdAt\": {\n\t\t\t\t\t\t\"format\": \"date-time\",\n\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\"description\": \"Created at date time in ISO format\"\n\t\t\t\t\t},\n\t\t\t\t\t\"updatedAt\": {\n\t\t\t\t\t\t\"format\": \"date-time\",\n\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\"description\": \"Last time updated at date time in ISO format\"\n\t\t\t\t\t},\n\t\t\t\t\t\"deletedAt\": {\n\t\t\t\t\t\t\"format\": \"date-time\",\n\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\"description\": \"Deleted at date time in ISO format\"\n\t\t\t\t\t},\n\t\t\t\t\t\"version\": {\n\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\"description\": \"Entity version for optimistic lock handling\"\n\t\t\t\t\t},\n\t\t\t\t\t\"tenantId\": {\n\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\"description\": \"Tenant identifier\"\n\t\t\t\t\t},\n\t\t\t\t\t\"id\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t},\n\t\t\t\t\t\"entryPoint\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t},\n\t\t\t\t\t\"certificate\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t},\n\t\t\t\t\t\"enabled\": {\n\t\t\t\t\t\t\"type\": \"boolean\"\n\t\t\t\t\t},\n\t\t\t\t\t\"tenant\": {\n\t\t\t\t\t\t\"nullable\": true,\n\t\t\t\t\t\t\"allOf\": [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\"$ref\": \"#/components/schemas/Tenant\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"required\": [\n\t\t\t\t\t\"createdAt\",\n\t\t\t\t\t\"updatedAt\",\n\t\t\t\t\t\"deletedAt\",\n\t\t\t\t\t\"version\",\n\t\t\t\t\t\"tenantId\",\n\t\t\t\t\t\"id\",\n\t\t\t\t\t\"entryPoint\",\n\t\t\t\t\t\"certificate\",\n\t\t\t\t\t\"enabled\"\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"Tenant\": {\n\t\t\t\t\"type\": \"object\",\n\t\t\t\t\"properties\": {\n\t\t\t\t\t\"createdAt\": {\n\t\t\t\t\t\t\"format\": \"date-time\",\n\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\"description\": \"Created at date time in ISO format\"\n\t\t\t\t\t},\n\t\t\t\t\t\"updatedAt\": {\n\t\t\t\t\t\t\"format\": \"date-time\",\n\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\"description\": \"Last time updated at date time in ISO format\"\n\t\t\t\t\t},\n\t\t\t\t\t\"deletedAt\": {\n\t\t\t\t\t\t\"format\": \"date-time\",\n\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\"description\": \"Deleted at date time in ISO format\"\n\t\t\t\t\t},\n\t\t\t\t\t\"version\": {\n\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\"description\": \"Entity version for optimistic lock handling\"\n\t\t\t\t\t},\n\t\t\t\t\t\"id\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t},\n\t\t\t\t\t\"tenantFriendlyIdentifier\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t},\n\t\t\t\t\t\"tenantName\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t},\n\t\t\t\t\t\"tenantStatus\": {\n\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\"enum\": [\n\t\t\t\t\t\t\t\"ACTIVE\",\n\t\t\t\t\t\t\t\"INACTIVE\"\n\t\t\t\t\t\t]\n\t\t\t\t\t},\n\t\t\t\t\t\"ownerId\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t},\n\t\t\t\t\t\"owner\": {\n\t\t\t\t\t\t\"$ref\": \"#/components/schemas/UserProfile\"\n\t\t\t\t\t},\n\t\t\t\t\t\"samlConfigurations\": {\n\t\t\t\t\t\t\"type\": \"array\",\n\t\t\t\t\t\t\"items\": {\n\t\t\t\t\t\t\t\"$ref\": \"#/components/schemas/SAMLConfiguration\"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t\"tenantUsersAccount\": {\n\t\t\t\t\t\t\"type\": \"array\",\n\t\t\t\t\t\t\"items\": {\n\t\t\t\t\t\t\t\"$ref\": \"#/components/schemas/UserTenantAccount\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"required\": [\n\t\t\t\t\t\"createdAt\",\n\t\t\t\t\t\"updatedAt\",\n\t\t\t\t\t\"deletedAt\",\n\t\t\t\t\t\"version\",\n\t\t\t\t\t\"id\",\n\t\t\t\t\t\"tenantFriendlyIdentifier\",\n\t\t\t\t\t\"tenantName\",\n\t\t\t\t\t\"tenantStatus\",\n\t\t\t\t\t\"ownerId\"\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"UpdateUserRole\": {\n\t\t\t\t\"type\": \"object\",\n\t\t\t\t\"properties\": {\n\t\t\t\t\t\"version\": {\n\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\"description\": \"Entity version for optimistic lock handling\"\n\t\t\t\t\t},\n\t\t\t\t\t\"name\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t},\n\t\t\t\t\t\"description\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t},\n\t\t\t\t\t\"tenant\": {\n\t\t\t\t\t\t\"nullable\": true,\n\t\t\t\t\t\t\"description\": \"Tenants can have their own roles, but they can also inherit roles from the platform.\",\n\t\t\t\t\t\t\"allOf\": [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\"$ref\": \"#/components/schemas/Tenant\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"required\": [\n\t\t\t\t\t\"version\",\n\t\t\t\t\t\"name\",\n\t\t\t\t\t\"description\"\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"IdpMappingDto\": {\n\t\t\t\t\"type\": \"object\",\n\t\t\t\t\"properties\": {\n\t\t\t\t\t\"firstName\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t},\n\t\t\t\t\t\"lastName\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t},\n\t\t\t\t\t\"email\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t},\n\t\t\t\t\t\"role\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"required\": [\n\t\t\t\t\t\"firstName\",\n\t\t\t\t\t\"lastName\",\n\t\t\t\t\t\"email\",\n\t\t\t\t\t\"role\"\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"SetupSamlConfiguration\": {\n\t\t\t\t\"type\": \"object\",\n\t\t\t\t\"properties\": {\n\t\t\t\t\t\"entryPoint\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t},\n\t\t\t\t\t\"certificate\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t},\n\t\t\t\t\t\"fieldsMapping\": {\n\t\t\t\t\t\t\"$ref\": \"#/components/schemas/IdpMappingDto\"\n\t\t\t\t\t},\n\t\t\t\t\t\"enabled\": {\n\t\t\t\t\t\t\"type\": \"boolean\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"required\": [\n\t\t\t\t\t\"entryPoint\",\n\t\t\t\t\t\"certificate\",\n\t\t\t\t\t\"fieldsMapping\",\n\t\t\t\t\t\"enabled\"\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"SetupSamlConfigurationResponseDTO\": {\n\t\t\t\t\"type\": \"object\",\n\t\t\t\t\"properties\": {\n\t\t\t\t\t\"message\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t},\n\t\t\t\t\t\"id\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"required\": [\n\t\t\t\t\t\"message\",\n\t\t\t\t\t\"id\"\n\t\t\t\t]\n\t\t\t}\n\t\t}\n\t}\n}\n","import { getSchemaByType } from '../find';\nimport React, { useContext } from \"react\";\nimport { useResource, TranslationContext } from \"@refinedev/core\";\n\nimport {\n    CreateSchemaInferencer,\n    InferencerComponentProps,\n    SchemaInferencerResultComponent,\n    InferField,\n    InferType,\n} from '../types';\n\nimport { composeInferencers } from \"../compose-schema-inferencers\";\nimport { composeTransformers } from \"../compose-transformers\";\n\nimport { defaultElements } from \"../field-from-schema-inferencers\";\nimport { defaultTransformers } from \"../field-transformers\";\nimport { LiveComponent } from \"../../components\";\nimport { useInferFetch } from \"../../use-infer-fetch\";\nimport { useRelationFetch } from \"../../use-relation-fetch\";\n\nimport scheme from \"../scheme\";\n\nimport { prepareLiveCode, componentName, removeHiddenCode } from \"../../utilities\";\n\n/**\n * CreateInferencer is a function that creates a Inferencer component.\n *\n * Inferencer will handle the data fetching and the infering parts,\n * then it will invoke the `renderer` function to generate the code.\n * The generated code will be used to render the component by `react-live`.\n * Its required to havee`additionalScope` prop when using packages other than `react` and `@refinedev/core`.\n *\n * @param config - Inferencer configuration.\n * @param config.type - Infering type.\n * @param config.additionalScope - Additional scope for live code.\n * @param config.renderer - String renderer for Inferencer.\n * @param config.fieldTransformers - Field transformers.\n * @param config.customElements - Field inferencers.\n * @param config.codeViewerComponent - Code viewer component.\n * @param config.errorComponent - Error component.\n * @param config.loadingComponent - Loading component.\n */\nexport const createSchemaInferencer: CreateSchemaInferencer = ({\n    type,\n    additionalScope = [],\n    customElements = [],\n    fieldTransformers = [],\n    renderer,\n    loadingComponent: LoadingComponent,\n    errorComponent: ErrorComponent,\n    codeViewerComponent: CodeViewerComponent,\n}) => {\n    const infer = composeInferencers([...defaultElements, ...customElements]);\n    const transform = composeTransformers([\n        ...defaultTransformers,\n        ...fieldTransformers,\n    ]);\n\n    const Inferencer = ({\n        resourceName,\n        fieldTransformer,\n        meta,\n        id,\n    }: {\n        resourceName?: string;\n        fieldTransformer?: InferencerComponentProps[\"fieldTransformer\"];\n        meta?: InferencerComponentProps[\"meta\"];\n        id?: string | number;\n    }) => {\n        console.log('resourceName: ', resourceName);\n        const { resource, resources } = useResource(resourceName);\n        console.log('resource: ', resource);\n        const { resource: resourceFromURL } = useResource();\n        console.log('resourceFromURL: ', resourceFromURL);\n        const { i18nProvider } = useContext(TranslationContext);\n\n        const inferSingleField = (\n            key: string,\n            props: any,\n        ) => {\n            const inferResult = infer(key, props, infer, type);\n\n            if (inferResult) {\n                if (resource) {\n                    const transformed = transform(\n                        [inferResult] as InferField[],\n                        resources,\n                        resource,\n                        {},\n                        infer,\n                        type,\n                    );\n\n                    const customTransformedFields = fieldTransformer\n                        ? transformed.flatMap((field) => {\n                              const result = fieldTransformer(field);\n\n                              return result ? [result] : [];\n                          })\n                        : transformed;\n\n                    return customTransformedFields?.[0];\n                }\n            }\n\n            return undefined;\n        };\n\n        const inferSchema = (schemaObject: any): InferField[] => {\n            console.log('schemaObject: ', schemaObject);\n            return Object.entries(schemaObject.properties)\n                .reduce((acc, [key, props]) => {\n                    const inferResult = inferSingleField(key, props);\n                    if (inferResult) {\n                        acc.push(inferResult);\n                    }\n\n                    return acc;\n                }, [] as InferField[]);\n        };\n\n        const clearedFields = inferSchema(getSchemaByType(resource!.name, type));\n        console.log('clearedFields: ', clearedFields);\n        // const clearedFields = [];\n\n        const code = React.useMemo(() => {\n            if (resource) {\n                return renderer({\n                    resource,\n                    resources,\n                    fields: clearedFields,\n                    infer,\n                    meta,\n                    isCustomPage: resource.name !== resourceFromURL?.name,\n                    id,\n                    i18n: !!i18nProvider,\n                });\n            }\n            return \"\";\n        }, [\n            resource,\n            resources,\n            clearedFields,\n        ]);\n\n        return (\n            <CodeViewerComponent\n                code={removeHiddenCode(code)}\n            />\n        );\n    };\n\n    const InferencerComponent: SchemaInferencerResultComponent = ({\n        name,\n        resource,\n        fieldTransformer,\n        meta,\n        id,\n    }) => {\n        const { resource: resourceItem } = useResource(resource ?? name);\n        console.log('resourceItem: ', resourceItem);\n\n        getSchemaByType(resourceItem!.name, type);\n\n        const key = `${\n            resourceItem?.identifier ?? resourceItem?.name\n        }-${type}-${id}`;\n\n        return (\n            <Inferencer\n                fieldTransformer={fieldTransformer}\n                resourceName={resource ?? name}\n                meta={meta ?? {}}\n                key={key}\n                id={id}\n            />\n        );\n    };\n\n    return InferencerComponent;\n};\n","import { FieldInferencer } from \"../types\";\nimport { pickInferredField } from \"../../utilities\";\n\n/**\n * Compose multiple field inferencers into one\n * @param inferencers The inferencer functions to compose\n */\nexport const composeInferencers = (\n    inferencers: Array<FieldInferencer>,\n): FieldInferencer => {\n    const fieldInferencer: FieldInferencer = (\n        key,\n        props,\n        infer = fieldInferencer,\n        type,\n    ) => {\n        const inferences = inferencers.map((inferencer) =>\n            inferencer(key, props, infer, type),\n        );\n        const picked = pickInferredField(inferences);\n\n        return picked;\n    };\n\n    return fieldInferencer;\n};\n","import { FieldTransformer } from \"../types\";\n\n/**\n * Compose multiple field transformers into one\n * @param transformers The transformer functions to compose\n */\nexport const composeTransformers = (\n    transformers: Array<FieldTransformer>,\n): FieldTransformer => {\n    const fieldTransformer: FieldTransformer = (\n        fields,\n        resources,\n        resource,\n        record,\n        infer,\n        type,\n    ) => {\n        return transformers.reduce((acc, transformer) => {\n            return transformer(acc, resources, resource, record, infer, type);\n        }, fields);\n    };\n\n    return fieldTransformer;\n};\n","import has from \"lodash-es/has\";\nimport { FieldInferencer } from '../types';\n\nexport const arrayInfer: FieldInferencer = (\n    key,\n    props,\n    infer,\n    type,\n) => {\n    if (has(props, 'enum')) {\n        return {\n            key,\n            type: 'text',\n        };\n    }\n\n    //@ts-ignore\n    if (props.type === 'array') {\n        //@ts-ignore\n        const basicType = infer(key, props.items, infer, type) || {\n            type: 'text',\n        };\n\n        return {\n            key,\n            type: basicType.type,\n        };\n    }\n\n    return false;\n};\n","import { FieldInferencer } from '../types';\n\nexport const booleanInfer: FieldInferencer = (key, props) => {\n    //@ts-ignore\n    if (props.type === 'boolean') {\n        return {\n            key,\n            type: 'boolean',\n        };\n    }\n\n    return false;\n};\n","import dayjs from \"dayjs\";\nimport { FieldInferencer } from '../types';\n\nconst dateSuffixRegexp = /(_at|_on|At|On|AT|ON)(\\[\\])?$/;\n\nexport const dateInfer: FieldInferencer = (key, props) => {\n    const isDateField = dateSuffixRegexp.test(key);\n\n    //@ts-ignore\n    if (isDateField || props.format === 'date-time') {\n        return {\n            key,\n            type: 'date',\n        };\n    }\n\n    return false;\n};\n","import { FieldInferencer } from '../types';\n\nconst emailSuffixRegexp = /(email)(\\[\\])?$/;\n\nexport const emailInfer: FieldInferencer = (key, props) => {\n    const isEmailField = emailSuffixRegexp.test(key);\n\n    if (isEmailField) {\n        return {\n            key,\n            type: 'email',\n        };\n    }\n\n    return false;\n};\n","import { FieldInferencer } from '../types';\n\nexport const numberInfer: FieldInferencer = (key, props) => {\n    // @ts-ignore\n    if (props.type === 'number') {\n        return {\n            key,\n            type: \"number\",\n        };\n    }\n\n    return false;\n};\n","import { getFieldableKeys } from \"../../utilities\";\nimport { FieldInferencer } from '../types';\n\nconst idPropertyRegexp = /id$/i;\n\nexport const objectInfer: FieldInferencer = (\n    key,\n    props,\n    // record,\n    infer,\n    // schema,\n    // type,\n) => {\n    return false;\n};\n","import { FieldInferencer } from '../types';\n\nexport const richtextInfer: FieldInferencer = (key, value) => {\n    const isLongText = typeof value === \"string\" && value.length > 100;\n\n    if (isLongText) {\n        return {\n            key,\n            type: \"richtext\",\n            priority: 1,\n        };\n    }\n\n    return false;\n};\n","import { FieldInferencer } from '../types';\n\nexport const textInfer: FieldInferencer = (key, props) => {\n    // @ts-ignore\n    const isText = props.type === 'string';\n\n    if (isText) {\n        return {\n            key,\n            type: \"text\",\n        };\n    }\n\n    return false;\n};\n","import { FieldInferencer } from '../types';\n\nconst urlRegexp = /^(https?|ftp):\\/\\/(-\\.)?([^\\s/?\\.#-]+\\.?)+(\\/[^\\s]*)?$/i;\n\nexport const urlInfer: FieldInferencer = (key, value) => {\n    const isValidURL = typeof value === \"string\" && urlRegexp.test(value);\n\n    if (isValidURL) {\n        return {\n            key,\n            type: \"url\",\n            priority: 1,\n        };\n    }\n\n    return false;\n};\n","import { arrayInfer } from \"./array\";\nimport { booleanInfer } from \"./boolean\";\nimport { dateInfer } from \"./date\";\nimport { emailInfer } from \"./email\";\nimport { imageInfer } from \"./image\";\nimport { nullishInfer } from \"./nullish\";\nimport { numberInfer } from \"./number\";\nimport { objectInfer } from \"./object\";\nimport { relationInfer } from \"./relation\";\nimport { richtextInfer } from \"./richtext\";\nimport { textInfer } from \"./text\";\nimport { urlInfer } from \"./url\";\n\nexport const defaultElements = [\n    arrayInfer,\n    booleanInfer,\n    dateInfer,\n    emailInfer,\n    // imageInfer,\n    // nullishInfer,\n    numberInfer,\n    objectInfer,\n    // relationInfer,\n    richtextInfer,\n    urlInfer,\n    textInfer,\n];\n","import { FieldTransformer, InferField } from \"../types\";\n\nexport const basicToRelation: FieldTransformer = (\n    fields,\n    resources,\n    resource,\n    record,\n) => {\n    const mapped: Array<InferField> = fields.map((field) => {\n        if (\n            !field.relation &&\n            (field.type === \"text\" ||\n                field.type === \"richtext\" ||\n                field.type === \"number\") &&\n            !field.canRelation\n        ) {\n            // check if value is a valid id (regex)\n            // if multiple, check value by value\n            // take accessor into account (should be single only)\n            // valid id should be a valid uuid (meaning, lowercase alphanumeric with dashes)\n            const validUUIdRegex = /^[a-z0-9-]+$/;\n\n            const isValidUUID = (value: unknown) => {\n                return validUUIdRegex.test(`${value}`);\n            };\n\n            const isNotSelf = field.key.toLowerCase() !== \"id\";\n\n            const singleOrNoAccessor =\n                !field.accessor || typeof field.accessor === \"string\";\n\n            // in case of multiple accessors, we can't infer a relation\n            // or if the field is the id field\n            if (!singleOrNoAccessor || !isNotSelf) {\n                return field;\n            }\n\n            const valuesToCheck = field.multiple\n                ? (record[field.key] as unknown[])\n                : [record[field.key]];\n\n            const allValid = valuesToCheck.every((value) => {\n                return isValidUUID(\n                    field.accessor\n                        ? (value as Record<string, unknown>)[\n                              field.accessor as string\n                          ]\n                        : value,\n                );\n            });\n\n            if (allValid) {\n                return {\n                    ...field,\n                    canRelation: true,\n                };\n            }\n\n            return field;\n        }\n        return field;\n    });\n\n    return mapped;\n};\n","import { FieldTransformer, InferField } from \"../types\";\n\nconst imageFieldLikeRegexp = /(image|photo|avatar|cover|thumbnail|icon)/i;\n\nexport const imageByKey: FieldTransformer = (fields) => {\n    const mapped: Array<InferField> = fields.map((field) => {\n        if (field.type === \"url\" && imageFieldLikeRegexp.test(field.key)) {\n            return {\n                ...field,\n                type: \"image\",\n            };\n        }\n\n        return field;\n    });\n\n    return mapped;\n};\n","import { resourceFromInferred } from \"../../utilities\";\nimport { FieldTransformer, InferField } from \"../types\";\n\nexport const relationByResource: FieldTransformer = (\n    fields,\n    resources,\n    resource,\n    record,\n    infer,\n) => {\n    const mapped: Array<InferField> = fields.map((field) => {\n        const inferResource = resourceFromInferred(field, resources);\n\n        if (inferResource) {\n            return {\n                ...field,\n                relation: true,\n                type: \"relation\",\n                resource: inferResource,\n            };\n        }\n\n        return field;\n    });\n\n    return mapped;\n};\n","import { FieldTransformer, InferField } from \"../types\";\n\nexport const relationToFieldable: FieldTransformer = (\n    fields,\n    resources,\n    resource,\n    record,\n    infer,\n    type,\n) => {\n    const mapped: Array<InferField> = fields.map((field) => {\n        if (field.relation && field.type === \"relation\" && !field.resource) {\n            const value = field.accessor\n                ? (record[field.key] as any)[field.accessor as string]\n                : record[field.key];\n\n            const inferredType = infer(field.key, value, record, infer, type);\n\n            if (inferredType && inferredType.type !== \"relation\") {\n                return {\n                    ...field,\n                    fieldable: true,\n                    relation: false,\n                    type: inferredType.type,\n                    canRelation: true,\n                };\n            }\n        }\n\n        return field;\n    });\n\n    return mapped;\n};\n","import { basicToRelation } from \"./basic-to-relation\";\nimport { imageByKey } from \"./image-by-key\";\nimport { relationByResource } from \"./relation-by-resource\";\nimport { relationToFieldable } from \"./relation-to-fieldable\";\n\nexport const defaultTransformers = [\n    imageByKey,\n    relationByResource,\n    relationToFieldable,\n    basicToRelation,\n];\n","import { Create, useForm, useSelect, getValueFromEvent } from \"@refinedev/antd\";\nimport { Form, Input, Select, Upload, Checkbox, DatePicker } from \"antd\";\nimport dayjs from \"dayjs\";\n\nimport { createSchemaInferencer } from '../../../from-scheme/create-schema-inferencer';\nimport {\n    jsx,\n    componentName,\n    prettyString,\n    accessor,\n    printImports,\n    isIDKey,\n    noOp,\n    getOptionLabel,\n    getVariableName,\n    translatePrettyString,\n    getMetaProps,\n    shouldDotAccess,\n} from \"../../../utilities\";\n\nimport { ErrorComponent } from \"../error\";\nimport { LoadingComponent } from \"../loading\";\nimport { SharedCodeViewer } from \"../../../components/shared-code-viewer\";\n\nimport {\n\tInferField,\n\tImportElement,\n\tRendererContext,\n\tSchemaInferencerResultComponent,\n} from '../../../from-scheme/types';\n\n/**\n * a renderer function for create page in Ant Design\n * @internal used internally from inferencer components\n */\nexport const renderer = ({\n    resource,\n    fields,\n    meta,\n    isCustomPage,\n    i18n,\n}: RendererContext) => {\n    console.log('fields: ', fields);\n    const COMPONENT_NAME = componentName(\n        resource.label ?? resource.name,\n        \"create\",\n    );\n    const imports: Array<ImportElement> = [\n        [\"React\", \"react\", true],\n        [\"IResourceComponentsProps\", \"@refinedev/core\"],\n        [\"Create\", \"@refinedev/antd\"],\n        [\"Form\", \"antd\"],\n        [\"useForm\", \"@refinedev/antd\"],\n        [\"Input\", \"antd\"],\n    ];\n\n    if (i18n) {\n        imports.push([\"useTranslate\", \"@refinedev/core\"]);\n    }\n\n    const relationFields: (InferField | null)[] = fields.filter(\n        (field) => field?.relation && !field?.fieldable && field?.resource,\n    );\n\n    const relationHooksCode = relationFields\n        .filter(Boolean)\n        .map((field) => {\n            if (field?.relation && !field.fieldable && field.resource) {\n                imports.push([\"useSelect\", \"@refinedev/antd\"]);\n\n                return `\n                const { selectProps: ${getVariableName(\n                    field.key,\n                    \"SelectProps\",\n                )} } =\n                useSelect({\n                    resource: \"${field.resource.name}\",\n                    ${getOptionLabel(field)}\n                    ${getMetaProps(\n                        field?.resource?.identifier ?? field?.resource?.name,\n                        meta,\n                        \"getList\",\n                    )}\n                });\n            `;\n            }\n            return undefined;\n        })\n        .filter(Boolean);\n\n    const renderRelationFields = (field: InferField) => {\n        if (field.relation && field.resource) {\n            imports.push([\"Select\", \"antd\"]);\n            const variableName = getVariableName(field.key, \"SelectProps\");\n\n            const name = field.accessor\n                ? field.multiple\n                    ? `\"${field.key}\"`\n                    : `[\"${field.key}\", \"${field.accessor}\"]`\n                : `\"${field.key}\"`;\n\n            let valueProps = \"\";\n            let valueEvent = \"\";\n\n            if (field.accessor && field.multiple) {\n                const canDot = shouldDotAccess(`${field.accessor}`);\n                valueEvent = `getValueFromEvent={(selected: string[]) => {\n                    return selected?.map((item) => ({ ${\n                        canDot ? field.accessor : `[\"${field.accessor}\"]`\n                    }: item }));\n                }}`;\n                valueProps = `getValueProps={(value: any[]) => {\n                    return {\n                        value: value?.map((item) => ${accessor(\n                            \"item\",\n                            undefined,\n                            field.accessor,\n                        )}),\n                    };\n                }}`;\n            }\n\n            return jsx`\n                <Form.Item\n                    label=${translatePrettyString({\n                        resource,\n                        field,\n                        i18n,\n                    })}\n                    name={${name}}\n                    rules={[\n                        {\n                            required: true,\n                        },\n                    ]}\n                    ${valueProps}\n                    ${valueEvent}\n                >\n                    <Select ${\n                        field.multiple ? 'mode=\"multiple\"' : \"\"\n                    } {...${variableName}} />\n                </Form.Item>\n                `;\n        }\n        return undefined;\n    };\n\n    const basicInputFields = (field: InferField) => {\n        if (\n            field.type === \"text\" ||\n            field.type === \"url\" ||\n            field.type === \"email\" ||\n            field.type === \"number\"\n        ) {\n            if (isIDKey(field.key)) {\n                return undefined;\n            }\n\n            if (field.multiple) {\n                return undefined;\n            }\n\n            return jsx`\n                <Form.Item\n                    label=${translatePrettyString({\n                        resource,\n                        field,\n                        i18n,\n                    })}\n                    name={[\"${field.key}\"${\n                field.accessor ? ', \"' + field.accessor + '\"' : \"\"\n            }]}\n                    rules={[\n                        {\n                            required: true,\n                        },\n                    ]}\n                >\n                    <Input  />\n                </Form.Item>\n            `;\n        }\n        return undefined;\n    };\n\n    const imageFields = (field: InferField) => {\n        if (field.type === \"image\") {\n            imports.push(\n                [\"Upload\", \"antd\"],\n                [\"getValueFromEvent\", \"@refinedev/antd\"],\n            );\n            let valueProps = 'valuePropName=\"fileList\"';\n\n            if (field.multiple && !field.accessor) {\n                valueProps =\n                    \"getValueProps={(value) => ({ fileList: value?.map((item: any) => ({ url: item, name: item, uid: item }))})}\";\n            }\n\n            if (!field.multiple) {\n                if (field.accessor) {\n                    valueProps =\n                        \"getValueProps={(value) => ({ fileList: value ? [value] : [] })}\";\n                } else {\n                    valueProps =\n                        \"getValueProps={(value) => ({ fileList: [{ url: value, name: value, uid: value }]})}\";\n                }\n            }\n\n            return jsx`\n                <Form.Item label=${translatePrettyString({\n                    resource,\n                    field,\n                    i18n,\n                })}>\n                    <Form.Item\n                        name=\"${field.key}\"\n                        ${valueProps}\n                        getValueFromEvent={getValueFromEvent}\n                        noStyle\n                        rules={[\n                            {\n                                required: true,\n                            },\n                        ]}\n                    >\n                        <Upload.Dragger\n                            listType=\"picture\"\n                            ${field.multiple ? \"multiple\" : \"\"}\n                            beforeUpload={() => false}\n                        >\n                            <p className=\"ant-upload-text\">\n                                Drag & drop a file in this area\n                            </p>\n                        </Upload.Dragger>\n                    </Form.Item>\n                </Form.Item>\n                `;\n        }\n        return undefined;\n    };\n\n    const booleanFields = (field: InferField) => {\n        if (field.type === \"boolean\") {\n            imports.push([\"Checkbox\", \"antd\"]);\n\n            if (field.multiple) {\n                return undefined;\n            }\n\n            return jsx`\n                <Form.Item\n                    label=${translatePrettyString({\n                        resource,\n                        field,\n                        i18n,\n                    })}\n                    valuePropName=\"checked\"\n                    name={[\"${field.key}\"${\n                field.accessor ? ', \"' + field.accessor + '\"' : \"\"\n            }]}\n                    rules={[\n                        {\n                            required: true,\n                        },\n                    ]}\n                >\n                    <Checkbox>${prettyString(field.key)}</Checkbox>\n                </Form.Item>\n            `;\n        }\n        return undefined;\n    };\n\n    const dateFields = (field: InferField) => {\n        if (field.type === \"date\") {\n            imports.push([\"DatePicker\", \"antd\"], [\"dayjs\", \"dayjs\", true]);\n\n            if (field.multiple) {\n                return undefined;\n            }\n\n            return jsx`\n                <Form.Item\n                    label=${translatePrettyString({\n                        resource,\n                        field,\n                        i18n,\n                    })}\n                    name={[\"${field.key}\"${\n                field.accessor ? ', \"' + field.accessor + '\"' : \"\"\n            }]}\n                    rules={[\n                        {\n                            required: true,\n                        },\n                    ]}\n                    getValueProps={(value) => ({ value: value ? dayjs(value) : undefined })}\n                >\n                    <DatePicker />\n                </Form.Item>\n            `;\n        }\n        return undefined;\n    };\n\n    const richtextFields = (field: InferField) => {\n        if (field.type === \"richtext\") {\n            return jsx`\n            <Form.Item\n                label=${translatePrettyString({\n                    resource,\n                    field,\n                    i18n,\n                })}\n                name=\"${field.key}\"\n                rules={[\n                    {\n                        required: true,\n                    },\n                ]}\n            >\n                <Input.TextArea rows={5} />\n            </Form.Item>\n            `;\n        }\n\n        return undefined;\n    };\n\n    console.log('fields: ', fields);\n\n    const renderedFields: Array<string | undefined> = fields.map((field) => {\n        switch (field?.type) {\n            case \"text\":\n            case \"number\":\n            case \"email\":\n            case \"url\":\n                return basicInputFields(field);\n            case \"richtext\":\n                return richtextFields(field);\n            case \"image\":\n                return imageFields(field);\n            case \"date\":\n                return dateFields(field);\n            case \"boolean\":\n                return booleanFields(field);\n            case \"relation\":\n                return renderRelationFields(field);\n            default:\n                return undefined;\n        }\n    });\n\n    noOp(imports);\n\n    const useTranslateHook = i18n && `const translate = useTranslate();`;\n\n    return jsx`\n    ${printImports(imports)}\n\n    export const ${COMPONENT_NAME}: React.FC<IResourceComponentsProps> = () => {\n        ${useTranslateHook}\n        const { formProps, saveButtonProps, queryResult } = useForm(${\n            isCustomPage\n                ? `{\n                      resource: \"${resource.name}\",\n                      action: \"create\",\n                      ${getMetaProps(\n                          resource.identifier ?? resource.name,\n                          meta,\n                          \"getOne\",\n                      )}\n                  }`\n                : getMetaProps(\n                      resource?.identifier ?? resource?.name,\n                      meta,\n                      \"getOne\",\n                  )\n                ? `{\n                  ${getMetaProps(\n                      resource?.identifier ?? resource?.name,\n                      meta,\n                      \"getOne\",\n                  )}\n              }`\n                : \"\"\n        });\n\n        ${relationHooksCode}\n\n        return (\n            <Create saveButtonProps={saveButtonProps}>\n                <Form {...formProps} layout=\"vertical\">\n                    ${renderedFields.join(\"\")}\n                </Form>\n            </Create>\n        );\n    };\n    `;\n};\n\n/**\n * @experimental This is an experimental component\n */\nexport const CreateInferencer: SchemaInferencerResultComponent = createSchemaInferencer({\n    type: \"create\",\n    additionalScope: [\n        [\n            \"@refinedev/antd\",\n            \"RefineAntd\",\n            { Create, useForm, useSelect, getValueFromEvent },\n        ],\n        [\"dayjs\", \"dayjs\", dayjs, true],\n        [\n            \"antd\",\n            \"AntdPackage\",\n            { Form, Input, Select, Upload, Checkbox, DatePicker },\n        ],\n    ],\n    codeViewerComponent: SharedCodeViewer,\n    loadingComponent: LoadingComponent,\n    errorComponent: ErrorComponent,\n    renderer,\n});\n","import { Edit, useForm, useSelect, getValueFromEvent } from \"@refinedev/antd\";\nimport { Form, Input, Select, Upload, Checkbox, DatePicker } from \"antd\";\nimport dayjs from \"dayjs\";\n\nimport { createInferencer } from \"../../create-inferencer\";\nimport {\n    jsx,\n    componentName,\n    prettyString,\n    accessor,\n    printImports,\n    isIDKey,\n    noOp,\n    getVariableName,\n    translatePrettyString,\n    getMetaProps,\n    shouldDotAccess,\n    idQuoteWrapper,\n} from \"../../utilities\";\n\nimport { ErrorComponent } from \"./error\";\nimport { LoadingComponent } from \"./loading\";\nimport { SharedCodeViewer } from \"../../components/shared-code-viewer\";\n\nimport {\n    InferencerResultComponent,\n    InferField,\n    ImportElement,\n    RendererContext,\n} from \"../../types\";\n\n/**\n * a renderer function for edit page in Ant Design\n * @internal used internally from inferencer components\n */\nexport const renderer = ({\n    resource,\n    fields,\n    meta,\n    isCustomPage,\n    id,\n    i18n,\n}: RendererContext) => {\n    const COMPONENT_NAME = componentName(\n        resource.label ?? resource.name,\n        \"edit\",\n    );\n    const recordName = getVariableName(resource.label ?? resource.name, \"Data\");\n    const imports: Array<ImportElement> = [\n        [\"React\", \"react\", true],\n        [\"IResourceComponentsProps\", \"@refinedev/core\"],\n        [\"Edit\", \"@refinedev/antd\"],\n        [\"Form\", \"antd\"],\n        [\"useForm\", \"@refinedev/antd\"],\n        [\"Input\", \"antd\"],\n    ];\n\n    if (i18n) {\n        imports.push([\"useTranslate\", \"@refinedev/core\"]);\n    }\n\n    const relationFields: (InferField | null)[] = fields.filter(\n        (field) => field?.relation && !field?.fieldable && field?.resource,\n    );\n\n    const relationHooksCode = relationFields\n        .filter(Boolean)\n        .map((field) => {\n            if (field?.relation && !field.fieldable && field.resource) {\n                imports.push([\"useSelect\", \"@refinedev/antd\"]);\n\n                let val = accessor(\n                    recordName,\n                    field.key,\n                    field.accessor,\n                    false,\n                );\n\n                if (field.multiple && field.accessor) {\n                    val = `${accessor(\n                        recordName,\n                        field.key,\n                    )}?.map((item: any) => ${accessor(\n                        \"item\",\n                        undefined,\n                        field.accessor,\n                    )})`;\n                }\n\n                return `\n                const { selectProps: ${getVariableName(\n                    field.key,\n                    \"SelectProps\",\n                )} } =\n                useSelect({\n                    resource: \"${field.resource.name}\",\n                    defaultValue: ${val},\n                    ${\n                        field.relationInfer\n                            ? field.relationInfer.accessor\n                                ? typeof field.relationInfer.accessor ===\n                                  \"string\"\n                                    ? field.relationInfer.accessor !== \"title\"\n                                        ? `optionLabel: \"${field.relationInfer.accessor}\",`\n                                        : \"\"\n                                    : `optionLabel: \"${field.relationInfer.accessor[0]}\",`\n                                : \"\"\n                            : \"\"\n                    }\n                    ${getMetaProps(\n                        field?.resource?.identifier ?? field?.resource?.name,\n                        meta,\n                        \"getList\",\n                    )}\n                });\n            `;\n            }\n            return undefined;\n        })\n        .filter(Boolean);\n\n    const renderRelationFields = (field: InferField) => {\n        if (field.relation && field.resource) {\n            imports.push([\"Select\", \"antd\"]);\n            const variableName = getVariableName(field.key, \"SelectProps\");\n\n            const name = field.accessor\n                ? field.multiple\n                    ? `\"${field.key}\"`\n                    : `[\"${field.key}\", \"${field.accessor}\"]`\n                : `\"${field.key}\"`;\n\n            let valueProps = \"\";\n            let valueEvent = \"\";\n\n            if (field.accessor && field.multiple) {\n                const canDot = shouldDotAccess(`${field.accessor}`);\n                valueEvent = `getValueFromEvent={(selected: string[]) => {\n                    return selected?.map((item) => ({ ${\n                        canDot ? field.accessor : `[\"${field.accessor}\"]`\n                    }: item }));\n                }}`;\n                valueProps = `getValueProps={(value: any[]) => {\n                    return {\n                        value: value?.map((item) => ${accessor(\n                            \"item\",\n                            undefined,\n                            field.accessor,\n                        )}),\n                    };\n                }}`;\n            }\n\n            return jsx`\n                <Form.Item\n                    label=${translatePrettyString({\n                        resource,\n                        field,\n                        i18n,\n                    })}\n                    name={${name}}\n                    rules={[\n                        {\n                            required: true,\n                        },\n                    ]}\n                    ${valueProps}\n                    ${valueEvent}\n                >\n                    <Select ${\n                        field.multiple ? 'mode=\"multiple\"' : \"\"\n                    } {...${variableName}} />\n                </Form.Item>             \n                `;\n        }\n        return undefined;\n    };\n\n    const basicInputFields = (field: InferField) => {\n        if (\n            field.type === \"text\" ||\n            field.type === \"url\" ||\n            field.type === \"email\" ||\n            field.type === \"number\"\n        ) {\n            if (field.multiple) {\n                const val = accessor(field.key, \"index\", field.accessor)\n                    .split(\"?.\")\n                    .map((el) => `\"${el}\"`)\n                    .join(\", \")\n                    .replace(/\"index\"/, \"index\");\n\n                return `\n                    <>\n                        {(${accessor(\n                            recordName,\n                            field.key,\n                        )} as any[])?.map((item, index) => (\n                            <Form.Item\n                                key={index}\n                                label=${translatePrettyString({\n                                    resource,\n                                    field,\n                                    i18n,\n                                })}\n                                name={[${val}]}\n                            >\n                                <Input\n                                    type=\"${field.type}\"\n                                ${\n                                    isIDKey(field.key)\n                                        ? \"readOnly disabled\"\n                                        : \"\"\n                                } />\n                            </Form.Item>\n                        ))}\n                    </>\n                `;\n            }\n            return jsx`\n                <Form.Item\n                    label=${translatePrettyString({\n                        resource,\n                        field,\n                        i18n,\n                    })}\n                    name={[\"${field.key}\"${\n                field.accessor ? ', \"' + field.accessor + '\"' : \"\"\n            }]}\n                    rules={[\n                        {\n                            required: true,\n                        },\n                    ]}\n                >\n                    <Input ${isIDKey(field.key) ? \"readOnly disabled\" : \"\"} />\n                </Form.Item>\n            `;\n        }\n        return undefined;\n    };\n\n    const imageFields = (field: InferField) => {\n        if (field.type === \"image\") {\n            imports.push(\n                [\"Upload\", \"antd\"],\n                [\"getValueFromEvent\", \"@refinedev/antd\"],\n            );\n            let valueProps = 'valuePropName=\"fileList\"';\n\n            if (field.multiple && !field.accessor) {\n                valueProps =\n                    \"getValueProps={(value) => ({ fileList: value?.map((item: any) => ({ url: item, name: item, uid: item }))})}\";\n            }\n\n            if (!field.multiple) {\n                if (field.accessor) {\n                    valueProps =\n                        \"getValueProps={(value) => ({ fileList: value ? [value] : [] })}\";\n                } else {\n                    valueProps =\n                        \"getValueProps={(value) => ({ fileList: [{ url: value, name: value, uid: value }]})}\";\n                }\n            }\n\n            return jsx`\n                <Form.Item label=${translatePrettyString({\n                    resource,\n                    field,\n                    i18n,\n                })}>\n                    <Form.Item\n                        name=\"${field.key}\"\n                        ${valueProps}\n                        getValueFromEvent={getValueFromEvent}\n                        noStyle\n                        rules={[\n                            {\n                                required: true,\n                            },\n                        ]}\n                    >\n                        <Upload.Dragger\n                            listType=\"picture\"\n                            ${field.multiple ? \"multiple\" : \"\"}\n                            beforeUpload={() => false}\n                        >\n                            <p className=\"ant-upload-text\">\n                                Drag & drop a file in this area\n                            </p>\n                        </Upload.Dragger>\n                    </Form.Item>\n                </Form.Item>\n                `;\n        }\n        return undefined;\n    };\n\n    const booleanFields = (field: InferField) => {\n        if (field.type === \"boolean\") {\n            imports.push([\"Checkbox\", \"antd\"]);\n\n            if (field.multiple) {\n                const val = accessor(field.key, \"index\", field.accessor)\n                    .split(\"?.\")\n                    .map((el) => `\"${el}\"`)\n                    .join(\", \")\n                    .replace(/\"index\"/, \"index\");\n\n                return `\n                    <>\n                        {(${accessor(\n                            recordName,\n                            field.key,\n                        )} as any[])?.map((item, index) => (\n                            <Form.Item\n                                key={index}\n                                valuePropName=\"checked\"\n                                label=${translatePrettyString({\n                                    resource,\n                                    field,\n                                    i18n,\n                                })}\n                                name={[${val}]}\n                            >\n                                <Checkbox>${prettyString(field.key)}</Checkbox>\n                            </Form.Item>\n                        ))}\n                    </>\n                `;\n            }\n            return jsx`\n                <Form.Item\n                    label=${translatePrettyString({\n                        resource,\n                        field,\n                        i18n,\n                    })}\n                    valuePropName=\"checked\"\n                    name={[\"${field.key}\"${\n                field.accessor ? ', \"' + field.accessor + '\"' : \"\"\n            }]}\n                    rules={[\n                        {\n                            required: true,\n                        },\n                    ]}\n                >\n                    <Checkbox>${prettyString(field.key)}</Checkbox>\n                </Form.Item>\n            `;\n        }\n        return undefined;\n    };\n\n    const dateFields = (field: InferField) => {\n        if (field.type === \"date\") {\n            imports.push([\"DatePicker\", \"antd\"], [\"dayjs\", \"dayjs\", true]);\n\n            if (field.multiple) {\n                const val = accessor(field.key, \"index\", field.accessor)\n                    .split(\"?.\")\n                    .map((el) => `\"${el}\"`)\n                    .join(\", \")\n                    .replace(/\"index\"/, \"index\");\n\n                return jsx`\n                    <>\n                        {(${accessor(\n                            recordName,\n                            field.key,\n                        )} as any[])?.map((item, index) => (\n                            <Form.Item\n                                key={index}\n                                label=${translatePrettyString({\n                                    resource,\n                                    field,\n                                    i18n,\n                                })}\n                                name={[${val}]}\n                                getValueProps={(value) => ({ value: value ? dayjs(value) : undefined })}\n                            >\n                                <DatePicker />\n                            </Form.Item>\n                        ))}\n                    </>\n                `;\n            }\n            return jsx`\n                <Form.Item\n                    label=${translatePrettyString({\n                        resource,\n                        field,\n                        i18n,\n                    })}\n                    name={[\"${field.key}\"${\n                field.accessor ? ', \"' + field.accessor + '\"' : \"\"\n            }]}\n                    rules={[\n                        {\n                            required: true,\n                        },\n                    ]}\n                    getValueProps={(value) => ({ value: value ? dayjs(value) : undefined })}\n                >\n                    <DatePicker />\n                </Form.Item>\n            `;\n        }\n        return undefined;\n    };\n\n    const richtextFields = (field: InferField) => {\n        if (field.type === \"richtext\") {\n            return jsx`\n            <Form.Item\n                label=${translatePrettyString({\n                    resource,\n                    field,\n                    i18n,\n                })}\n                name=\"${field.key}\"\n                rules={[\n                    {\n                        required: true,\n                    },\n                ]}\n            >\n                <Input.TextArea rows={5} />\n            </Form.Item>\n            `;\n        }\n\n        return undefined;\n    };\n\n    const renderedFields: Array<string | undefined> = fields.map((field) => {\n        switch (field?.type) {\n            case \"text\":\n            case \"number\":\n            case \"email\":\n            case \"url\":\n                return basicInputFields(field);\n            case \"richtext\":\n                return richtextFields(field);\n            case \"image\":\n                return imageFields(field);\n            case \"date\":\n                return dateFields(field);\n            case \"boolean\":\n                return booleanFields(field);\n            case \"relation\":\n                return renderRelationFields(field);\n            default:\n                return undefined;\n        }\n    });\n\n    noOp(imports);\n\n    const useTranslateHook = i18n && `const translate = useTranslate();`;\n\n    return jsx`\n    ${printImports(imports)}\n    \n    export const ${COMPONENT_NAME}: React.FC<IResourceComponentsProps> = () => {\n        ${useTranslateHook}\n        const { formProps, saveButtonProps, queryResult } = useForm(${\n            isCustomPage\n                ? `{\n                      resource: \"${resource.name}\",\n                      id: ${idQuoteWrapper(id)},\n                      action: \"edit\",\n                      ${getMetaProps(\n                          resource?.identifier ?? resource?.name,\n                          meta,\n                          \"getOne\",\n                      )}\n                  }`\n                : getMetaProps(\n                      resource?.identifier ?? resource?.name,\n                      meta,\n                      \"getOne\",\n                  )\n                ? `{\n                    ${getMetaProps(\n                        resource?.identifier ?? resource?.name,\n                        meta,\n                        \"getOne\",\n                    )}\n                }`\n                : \"\"\n        });\n    \n        const ${recordName} = queryResult?.data?.data;\n    \n        ${relationHooksCode}\n\n        return (\n            <Edit saveButtonProps={saveButtonProps}>\n                <Form {...formProps} layout=\"vertical\">\n                    ${renderedFields.join(\"\")}\n                </Form>\n            </Edit>\n        );\n    };\n    `;\n};\n\n/**\n * @experimental This is an experimental component\n */\nexport const EditInferencer: InferencerResultComponent = createInferencer({\n    type: \"edit\",\n    additionalScope: [\n        [\n            \"@refinedev/antd\",\n            \"RefineAntd\",\n            { Edit, useForm, useSelect, getValueFromEvent },\n        ],\n        [\"dayjs\", \"dayjs\", dayjs, true],\n        [\n            \"antd\",\n            \"AntdPackage\",\n            { Form, Input, Select, Upload, Checkbox, DatePicker },\n        ],\n    ],\n    codeViewerComponent: SharedCodeViewer,\n    loadingComponent: LoadingComponent,\n    errorComponent: ErrorComponent,\n    renderer,\n});\n"],"mappings":"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","names":["src_exports","__export","DevToolsContext","DevToolsContextProvider","DevtoolsEvent","hooksByScope","receive","scopes","send","__toCommonJS","acc","hook","scope","import_react","ws","event","payload","resolve","listener","callback","e","receivedEvent","React","__devtools","port","children","values","setValues","setWs","wsInstance","unsubscribe","data","v","contextValues","src_exports","__export","getTrace","getXRay","useQuerySubscription","__toCommonJS","import_error_stack_parser","unrelatedFunctionName","cleanStack","stack","firstUnrelatedIndex","frame","REFINE_PACKAGE_FILEPATH_REGEXP","isRefineStack","filename","getPackageNameFromFilename","_a","match","name","error","ErrorStackParser","trace","import_devtools_shared","getResourcePath","hookName","legacyKey","resourcePath","import_react","createIdentifier","key","simpleTrace","createMutationListener","ws","mutation","meta","resolve","_b","createQueryListener","query","queryClient","queryCacheSubscription","React","mutationCacheSubscription","queryCache","queryListener","type","mutationCache","mutationListener","ErrorComponent","TranslationContext","pickDataProvider","pickNotDeprecated","useDataProvider","useForm","useResource","useSelect","useTable","import_react","__toESM","__name","fromPairs","zip","import_pluralize","pluralize","keys","meta","resource","parent","text","React","import_pluralize2","import_react2","LoginPage","import_react3","import_react4","import_react5","import_react6","import_react7","import_react8","import_react9","import_react10","qs","warnOnce","unionWith","differenceWith","filter","import_react_query","import_devtools_internal","import_qs","buildNotification","isEqual","_a","import_isEqual","import_react22","useParse","parse","identifier","import_react32","import_warn_once","id","debounce","import_react42","useGo","useBack","chunk","import_react52","import_debounce","get","uniqBy","import_differenceWith","current","pageSize","filters","currentQueryParams","sorters","key","flatten","import_react63","import_react72","ReadyPage","src_exports","__export","RefineButtonClassNames","RefineButtonTestIds","RefinePageHeaderClassNames","__toCommonJS","BooleanField","Create","DateField","DeleteButton","Edit","EditButton","EmailField","ErrorComponent","ImageField","Layout","List","MarkdownField","NumberField","Show","ShowButton","TagField","TextField","UrlField","getValueFromEvent","useForm","useSelect","useTable","import_react","__toESM","import_antd","import_core","__name","import_core2","useFormSF","useFormCore","React","import_core3","useCoreModal","import_react2","import_core4","_a","_b","import_core5","import_react3","import_sunflower_antd","useStepsFormSF","import_core6","getDefaultSortOrderCore","getDefaultFilterCore","import_core7","Link","import_react4","useTableCore","import_antd2","sorter","import_react5","useSelectCore","useImportCore","import_react6","import_antd3","import_antd4","pageSize","import_react7","import_react8","import_react9","import_react10","import_antd5","import_antd6","staticNotification","notification","notificationProvider","import_icons","import_antd7","selectedKey","meta","collapsed","import_antd8","AntdLayout","Header","Sider","Title","import_antd9","drawerButtonStyles","SubMenu","import_antd10","Text","import_antd11","useToken","import_react22","import_core22","defaultText","defaultIcon","import_ui_types","import_antd22","import_react32","import_core32","import_antd32","import_react42","import_dayjs","dayjs","LocalizedFormat","ReactMarkdown","gfm","import_dayjs2","value","_mappedValue","import_antd42","import_core42","import_react52","WelcomePageFromCore","layoutStyles","containerStyles","titleStyles","LoginPage","import_core52","AntdBreadcrumb","AntdPageHeader","AutoSaveIndicatorCore","import_react","import_core","import_antd","import_react","import_core","prettier","tsParser","pluralize","import_pluralize","pluralize","import_pluralize","pluralize","import_pluralize","pluralize","componentName","accessor","dayjs","accessor","React","ErrorComponent","import_react","React","Highlight","theme","import_react","import_core","React","error","import_react","import_core","React","record","relationInfer","error","renderer","LoadingComponent","ErrorComponent","record","records","fields","React","_a","_b","import_react","React","import_react","import_antd","React","import_antd","import_lodash_es","import_react","import_core","composeInferencers","composeTransformers","arrayInfer","has","booleanInfer","dateSuffixRegexp","dateInfer","emailInfer","numberInfer","objectInfer","richtextInfer","textInfer","urlRegexp","urlInfer","defaultElements","arrayInfer","booleanInfer","dateInfer","emailInfer","numberInfer","objectInfer","richtextInfer","urlInfer","textInfer","basicToRelation","imageFieldLikeRegexp","imageByKey","relationByResource","relationToFieldable","defaultTransformers","imageByKey","relationByResource","relationToFieldable","basicToRelation","renderer","LoadingComponent","ErrorComponent","composeInferencers","defaultElements","composeTransformers","defaultTransformers","React","renderer","import_antd","import_dayjs","renderer","dayjs","import_antd","import_dayjs","renderer","dayjs","React"]}