{"version":3,"sources":["../src/inferencers/antd/index.tsx","../src/inferencers/antd/show.tsx","../src/create-inferencer/index.tsx","../src/utilities/get-fieldable-keys/index.ts","../src/utilities/pick-data-provider/index.tsx","../src/utilities/pick-inferred-field/index.ts","../src/utilities/prettier-format/index.ts","../src/utilities/pretty-spaces/index.ts","../src/field-inferencers/relation.ts","../src/utilities/remove-relation-suffix/index.ts","../src/utilities/pretty-string/index.ts","../src/utilities/translate-pretty-string/index.ts","../src/utilities/to-singular/index.ts","../src/utilities/to-plural/index.ts","../src/utilities/replace-exports/index.ts","../src/utilities/replace-imports/index.ts","../src/utilities/resource-from-inferred/index.ts","../src/utilities/component-name/index.ts","../src/utilities/jsx/index.ts","../src/utilities/prepare-live-code/index.ts","../src/utilities/remove-hidden-code/index.ts","../src/utilities/accessor/index.ts","../src/utilities/print-imports/index.ts","../src/utilities/is-id-key/index.ts","../src/utilities/get-option-label/index.ts","../src/utilities/no-op/index.ts","../src/utilities/get-variable-name/index.ts","../src/utilities/get-meta-props/index.ts","../src/utilities/id-quote-wrapper/index.ts","../src/compose-inferencers/index.ts","../src/compose-transformers/index.ts","../src/field-inferencers/array.ts","../src/field-inferencers/boolean.ts","../src/field-inferencers/date.ts","../src/field-inferencers/email.ts","../src/field-inferencers/image.ts","../src/field-inferencers/nullish.ts","../src/field-inferencers/number.ts","../src/field-inferencers/object.ts","../src/field-inferencers/richtext.ts","../src/field-inferencers/text.ts","../src/field-inferencers/url.ts","../src/field-inferencers/index.ts","../src/field-transformers/basic-to-relation.ts","../src/field-transformers/image-by-key.ts","../src/field-transformers/relation-by-resource.ts","../src/field-transformers/relation-to-fieldable.ts","../src/field-transformers/index.ts","../src/components/live/index.tsx","../src/components/shared-code-viewer/index.tsx","../src/use-infer-fetch/index.tsx","../src/use-relation-fetch/index.ts","../src/inferencers/antd/error.tsx","../src/inferencers/antd/loading.tsx","../src/inferencers/antd/next/list.tsx","../src/from-scheme/find.ts","../src/from-scheme/scheme.ts","../src/from-scheme/create-schema-inferencer/index.tsx","../src/from-scheme/compose-schema-inferencers/index.ts","../src/from-scheme/compose-transformers/index.ts","../src/from-scheme/field-from-schema-inferencers/array.ts","../src/from-scheme/field-from-schema-inferencers/boolean.ts","../src/from-scheme/field-from-schema-inferencers/date.ts","../src/from-scheme/field-from-schema-inferencers/email.ts","../src/from-scheme/field-from-schema-inferencers/number.ts","../src/from-scheme/field-from-schema-inferencers/object.ts","../src/from-scheme/field-from-schema-inferencers/richtext.ts","../src/from-scheme/field-from-schema-inferencers/text.ts","../src/from-scheme/field-from-schema-inferencers/url.ts","../src/from-scheme/field-from-schema-inferencers/index.ts","../src/from-scheme/field-transformers/basic-to-relation.ts","../src/from-scheme/field-transformers/image-by-key.ts","../src/from-scheme/field-transformers/relation-by-resource.ts","../src/from-scheme/field-transformers/relation-to-fieldable.ts","../src/from-scheme/field-transformers/index.ts","../src/inferencers/antd/next/create.tsx","../src/inferencers/antd/edit.tsx"],"sourcesContent":["import React from \"react\";\nimport { useResource } from \"@refinedev/core\";\n\nimport { ShowInferencer } from \"./show\";\nimport { ListInferencer as NextListInferencer } from \"./next/list\";\nimport { CreateInferencer } from \"./next/create\";\nimport { EditInferencer } from \"./edit\";\n\nimport type { InferencerComponentProps } from \"../../types\";\n\nconst AntdInferencer: React.FC<InferencerComponentProps> = ({\n    action: actionFromProps,\n    id: idFromProps,\n    ...props\n}) => {\n    const { action, id, ...rest } = useResource();\n    console.log('rest: ', rest);\n\n    switch (actionFromProps ?? action) {\n        case \"show\":\n            return <ShowInferencer {...props} id={idFromProps ?? id} />;\n        case \"create\":\n            return <CreateInferencer {...props} id={idFromProps ?? id} />;\n        case \"edit\":\n            return <EditInferencer {...props} id={idFromProps ?? id} />;\n        default:\n            return <NextListInferencer {...props} id={idFromProps ?? id} />;\n    }\n};\n\nexport { AntdInferencer };\nexport {\n    ShowInferencer as AntdShowInferencer,\n    renderer as AntdShowRenderer,\n} from \"./show\";\nexport {\n    EditInferencer as AntdEditInferencer,\n    renderer as AntdEditRenderer,\n} from \"./edit\";\nexport {\n    ListInferencer as AntdListInferencer,\n    renderer as AntdListRenderer,\n} from \"./next/list\";\nexport {\n    CreateInferencer as AntdCreateInferencer,\n    renderer as AntdCreateRenderer,\n} from \"./next/create\";\nexport * from \"../../types\";\n","import {\n    Show,\n    TagField,\n    TextField,\n    ImageField,\n    EmailField,\n    UrlField,\n    BooleanField,\n    DateField,\n    MarkdownField,\n    NumberField,\n} from \"@refinedev/antd\";\nimport { Typography } from \"antd\";\n\nimport { createInferencer } from \"../../create-inferencer\";\nimport {\n    jsx,\n    componentName,\n    accessor,\n    printImports,\n    toSingular,\n    noOp,\n    getVariableName,\n    translatePrettyString,\n    getMetaProps,\n    idQuoteWrapper,\n} from \"../../utilities\";\n\nimport { ErrorComponent } from \"./error\";\nimport { LoadingComponent } from \"./loading\";\nimport { SharedCodeViewer } from \"../../components/shared-code-viewer\";\n\nimport {\n    InferencerResultComponent,\n    InferField,\n    ImportElement,\n    RendererContext,\n} from \"../../types\";\n\n/**\n * a renderer function for show page in Ant Design\n * @internal used internally from inferencer components\n */\nexport const renderer = ({\n    resource,\n    fields,\n    meta,\n    isCustomPage,\n    id,\n    i18n,\n}: RendererContext) => {\n    const COMPONENT_NAME = componentName(\n        resource.label ?? resource.name,\n        \"show\",\n    );\n    const recordName = \"record\";\n    const imports: Array<ImportElement> = [\n        [\"React\", \"react\", true],\n        [\"IResourceComponentsProps\", \"@refinedev/core\"],\n        [\"useShow\", \"@refinedev/core\"],\n        [\"Show\", \"@refinedev/antd\"],\n        [\"Typography\", \"antd\"],\n    ];\n\n    if (i18n) {\n        imports.push([\"useTranslate\", \"@refinedev/core\"]);\n    }\n\n    const relationFields: (InferField | null)[] = fields.filter(\n        (field) => field?.relation && !field?.fieldable && field?.resource,\n    );\n\n    const relationHooksCode = relationFields\n        .filter(Boolean)\n        .map((field) => {\n            if (field?.relation && !field.fieldable && field.resource) {\n                if (field.multiple) {\n                    imports.push([\"useMany\", \"@refinedev/core\"]);\n                    let ids = accessor(recordName, field.key);\n\n                    if (field.accessor) {\n                        ids = `${accessor(\n                            recordName,\n                            field.key,\n                        )}?.map((item: any) => ${accessor(\n                            \"item\",\n                            undefined,\n                            field.accessor,\n                        )})`;\n                    }\n\n                    return `\n                const { data: ${getVariableName(\n                    field.key,\n                    \"Data\",\n                )}, isLoading: ${getVariableName(field.key, \"IsLoading\")} } =\n                useMany({\n                    resource: \"${field.resource.name}\",\n                    ids: ${ids} || [],\n                    queryOptions: {\n                        enabled: !!${recordName} && !!${ids}?.length,\n                    },\n                    ${getMetaProps(\n                        field?.resource?.identifier ?? field?.resource?.name,\n                        meta,\n                        \"getMany\",\n                    )}\n                });\n                `;\n                }\n                imports.push([\"useOne\", \"@refinedev/core\"]);\n                return `\n                const { data: ${getVariableName(\n                    field.key,\n                    \"Data\",\n                )}, isLoading: ${getVariableName(field.key, \"IsLoading\")} } =\n                useOne({\n                    resource: \"${field.resource.name}\",\n                    id: ${accessor(\n                        recordName,\n                        field.key,\n                        field.accessor,\n                        false,\n                    )} || \"\",\n                    queryOptions: {\n                        enabled: !!${recordName},\n                    },\n                    ${getMetaProps(\n                        field?.resource?.identifier ?? field?.resource?.name,\n                        meta,\n                        \"getOne\",\n                    )}\n                });\n            `;\n            }\n            return undefined;\n        })\n        .filter(Boolean);\n\n    const renderRelationFields = (field: InferField) => {\n        if (field.relation && field.resource) {\n            const variableName = getVariableName(field.key, \"Data\");\n            const variableIsLoading = getVariableName(field.key, \"IsLoading\");\n\n            if (field.multiple) {\n                const variableDataLength =\n                    accessor(recordName, field.key) + \"?.length\";\n                imports.push([\"TagField\", \"@refinedev/antd\"]);\n                return jsx`\n                <Title level={5}>${translatePrettyString({\n                    resource,\n                    field,\n                    i18n,\n                    noQuotes: true,\n                })}</Title>\n                {${variableIsLoading} && ${variableDataLength} ? <>Loading...</> : (\n                    <>\n                    ${(() => {\n                        if (field.relationInfer) {\n                            if (field.relationInfer?.accessor) {\n                                if (\n                                    Array.isArray(field.relationInfer.accessor)\n                                ) {\n                                    return `Not Handled.`;\n                                    // return `{${multipleAccessor(\n                                    //     `${variableName}?.data`,\n                                    //     field.relationInfer.accessor,\n                                    // ).join(' + \" \" + ')}}`;\n                                } else {\n                                    // return `Not Handled.`;\n                                    const mapItemName = toSingular(\n                                        field.resource?.name,\n                                    );\n                                    const val = accessor(\n                                        mapItemName,\n                                        undefined,\n                                        field.relationInfer.accessor,\n                                    );\n                                    return `{record?.${field.key}?.length ? ${variableName}?.data?.map((${mapItemName}: any) => <TagField key={${val}} value={${val}} />) : <></>}`;\n                                }\n                            } else {\n                                return undefined;\n                            }\n                        } else {\n                            return undefined;\n                        }\n                    })()}\n                    </>\n                )}\n                `;\n                // {${accessorString(variableName, {\n                //     key: field.key,\n                // })}?.map((item) => (\n                //     <TagField value={${\n                //         field.accessor ? `item?.${field.accessor}` : `item`\n                //     }} key={${\n                //     field.accessor ? `item?.${field.accessor}` : `item`\n                // }} />\n                // ))}\n                // `;\n            }\n\n            if (field.fieldable) {\n                return jsx`\n                <Title level={5}>${translatePrettyString({\n                    resource,\n                    field,\n                    i18n,\n                    noQuotes: true,\n                })}</Title>\n                <TextField value={${accessor(\n                    recordName,\n                    field.key,\n                    field.accessor,\n                )}} />\n                `;\n            }\n\n            return jsx`\n                <Title level={5}>${translatePrettyString({\n                    resource,\n                    field,\n                    i18n,\n                    noQuotes: true,\n                })}</Title>\n                {${variableIsLoading} ? <>Loading...</> : (\n                    <>\n                    ${(() => {\n                        if (field.relationInfer) {\n                            if (field.relationInfer?.accessor) {\n                                if (\n                                    Array.isArray(field.relationInfer.accessor)\n                                ) {\n                                    return `{${accessor(\n                                        `${variableName}?.data`,\n                                        undefined,\n                                        field.relationInfer.accessor,\n                                        ' + \" \" + ',\n                                    )}}`;\n                                } else {\n                                    return `{${variableName}?.data?.${field.relationInfer.accessor}}`;\n                                }\n                            } else {\n                                return `{${variableName}?.data}`;\n                            }\n                        } else {\n                            return `{${variableName}?.data?.id}`;\n                        }\n                    })()}\n                    </>\n                )}\n                \n                `;\n        }\n        return undefined;\n    };\n\n    const textFields = (field: InferField) => {\n        if (field.type === \"text\") {\n            imports.push(\n                [\"TagField\", \"@refinedev/antd\"],\n                [\"TextField\", \"@refinedev/antd\"],\n            );\n            if (field.multiple) {\n                const val = accessor(\"item\", undefined, field.accessor);\n                return jsx`\n                <Title level={5}>${translatePrettyString({\n                    resource,\n                    field,\n                    i18n,\n                    noQuotes: true,\n                })}</Title>\n                {${accessor(recordName, field.key)}?.map((item: any) => (\n                    <TagField value={${val}} key={${val}} />\n                ))}\n            `;\n            }\n            return jsx`\n                <Title level={5}>${translatePrettyString({\n                    resource,\n                    field,\n                    i18n,\n                    noQuotes: true,\n                })}</Title>\n                <TextField value={${accessor(\n                    recordName,\n                    field.key,\n                    field.accessor,\n                )}} />\n            `;\n        }\n        return undefined;\n    };\n\n    const imageFields = (field: InferField) => {\n        if (field.type === \"image\") {\n            imports.push([\"ImageField\", \"@refinedev/antd\"]);\n            if (field.multiple) {\n                const val = accessor(\"item\", undefined, field.accessor);\n                return jsx`\n                <Title level={5}>${translatePrettyString({\n                    resource,\n                    field,\n                    i18n,\n                    noQuotes: true,\n                })}</Title>\n                {${accessor(recordName, field.key)}?.map((item: any) => (\n                    <ImageField style={{ maxWidth: 200 }} value={${val}} key={${val}} />\n                ))}\n            `;\n            }\n            return jsx`\n                <Title level={5}>${translatePrettyString({\n                    resource,\n                    field,\n                    i18n,\n                    noQuotes: true,\n                })}</Title>\n                <ImageField style={{ maxWidth: 200 }} value={${accessor(\n                    recordName,\n                    field.key,\n                    field.accessor,\n                    \" + \",\n                )}} />\n                `;\n        }\n        return undefined;\n    };\n\n    const emailFields = (field: InferField) => {\n        if (field.type === \"email\") {\n            imports.push(\n                [\"TagField\", \"@refinedev/antd\"],\n                [\"EmailField\", \"@refinedev/antd\"],\n            );\n            if (field.multiple) {\n                const val = accessor(\"item\", undefined, field.accessor);\n                return jsx`\n                <Title level={5}>${translatePrettyString({\n                    resource,\n                    field,\n                    i18n,\n                    noQuotes: true,\n                })}</Title>\n                <>\n                {${accessor(recordName, field.key)}?.map((item: any) => (\n                    <TagField value={${val}} key={${val}} />\n                ))}\n                </>\n            `;\n            }\n            return jsx`\n                <Title level={5}>${translatePrettyString({\n                    resource,\n                    field,\n                    i18n,\n                    noQuotes: true,\n                })}</Title>\n                <EmailField value={${accessor(\n                    recordName,\n                    field.key,\n                    field.accessor,\n                    \" + \",\n                )}} />\n            `;\n        }\n        return undefined;\n    };\n\n    const urlFields = (field: InferField) => {\n        if (field.type === \"url\") {\n            imports.push(\n                [\"TagField\", \"@refinedev/antd\"],\n                [\"UrlField\", \"@refinedev/antd\"],\n            );\n            if (field.multiple) {\n                const val = accessor(\"item\", undefined, field.accessor);\n                return jsx`\n                <Title level={5}>${translatePrettyString({\n                    resource,\n                    field,\n                    i18n,\n                    noQuotes: true,\n                })}</Title>\n                {${accessor(recordName, field.key)}?.map((item: any) => (\n                    <TagField value={${val}} key={${val}} />\n                ))}\n            `;\n            }\n            return jsx`\n                <Title level={5}>${translatePrettyString({\n                    resource,\n                    field,\n                    i18n,\n                    noQuotes: true,\n                })}</Title>\n                <UrlField value={${accessor(\n                    recordName,\n                    field.key,\n                    field.accessor,\n                    \" + \",\n                )}} />\n            `;\n        }\n        return undefined;\n    };\n\n    const booleanFields = (field: InferField) => {\n        if (field.type === \"boolean\") {\n            imports.push(\n                [\"TagField\", \"@refinedev/antd\"],\n                [\"BooleanField\", \"@refinedev/antd\"],\n            );\n            if (field.multiple) {\n                const val = accessor(\"item\", undefined, field.accessor);\n                return jsx`\n                <Title level={5}>${translatePrettyString({\n                    resource,\n                    field,\n                    i18n,\n                    noQuotes: true,\n                })}</Title>\n                {(${accessor(\n                    recordName,\n                    field.key,\n                )} as any[])?.map((item, index) => (\n                    <BooleanField value={${val}} key={index} />\n                ))}\n            `;\n            }\n            return jsx`\n                <Title level={5}>${translatePrettyString({\n                    resource,\n                    field,\n                    i18n,\n                    noQuotes: true,\n                })}</Title>\n                <BooleanField value={${accessor(\n                    recordName,\n                    field.key,\n                    field.accessor,\n                    \" && \",\n                )}} />\n            `;\n        }\n        return undefined;\n    };\n\n    const dateFields = (field: InferField) => {\n        if (field.type === \"date\") {\n            imports.push([\"DateField\", \"@refinedev/antd\"]);\n            if (field.multiple) {\n                const val = accessor(\"item\", undefined, field.accessor);\n                return jsx`\n                <Title level={5}>${translatePrettyString({\n                    resource,\n                    field,\n                    i18n,\n                    noQuotes: true,\n                })}</Title>\n                {${accessor(recordName, field.key)}?.map((item: any) => (\n                    <DateField value={${val}} key={${val}} />\n                ))}\n            `;\n            }\n            return jsx`\n                <Title level={5}>${translatePrettyString({\n                    resource,\n                    field,\n                    i18n,\n                    noQuotes: true,\n                })}</Title>\n                <DateField value={${accessor(\n                    recordName,\n                    field.key,\n                    field.accessor,\n                    \" + ' ' + \",\n                )}} />\n            `;\n        }\n        return undefined;\n    };\n\n    const richtextFields = (field: InferField) => {\n        if (field.type === \"richtext\") {\n            imports.push([\"MarkdownField\", \"@refinedev/antd\"]);\n            return jsx`\n                <Title level={5}>${translatePrettyString({\n                    resource,\n                    field,\n                    i18n,\n                    noQuotes: true,\n                })}</Title>\n                <MarkdownField value={${accessor(\n                    recordName,\n                    field.key,\n                    field.accessor,\n                    ' + \" \" + ',\n                )}} />\n            `;\n        }\n\n        return undefined;\n    };\n\n    const numberFields = (field: InferField) => {\n        if (field.type === \"number\") {\n            imports.push([\"NumberField\", \"@refinedev/antd\"]);\n            if (field.multiple) {\n                const val = accessor(\"item\", undefined, field.accessor);\n                return jsx`\n                <Title level={5}>${translatePrettyString({\n                    resource,\n                    field,\n                    i18n,\n                    noQuotes: true,\n                })}</Title>\n                {${accessor(recordName, field.key)}?.map((item: any) => (\n                    <TagField value={${val}} key={${val}} />\n                ))}\n            `;\n            }\n            return jsx`\n                <Title level={5}>${translatePrettyString({\n                    resource,\n                    field,\n                    i18n,\n                    noQuotes: true,\n                })}</Title>\n                <NumberField value={${accessor(\n                    recordName,\n                    field.key,\n                    field.accessor,\n                    ' + \" \" + ',\n                )} ?? \"\"} />\n            `;\n        }\n        return undefined;\n    };\n\n    const renderedFields: Array<string | undefined> = fields.map((field) => {\n        switch (field?.type) {\n            case \"text\":\n                return textFields(field);\n            case \"number\":\n                return numberFields(field);\n            case \"richtext\":\n                return richtextFields(field);\n            case \"email\":\n                return emailFields(field);\n            case \"image\":\n                return imageFields(field);\n            case \"date\":\n                return dateFields(field);\n            case \"boolean\":\n                return booleanFields(field);\n            case \"url\":\n                return urlFields(field);\n            case \"relation\":\n                return renderRelationFields(field);\n            default:\n                return undefined;\n        }\n    });\n\n    noOp(imports);\n\n    const useTranslateHook = i18n && `const translate = useTranslate();`;\n\n    return jsx`\n    ${printImports(imports)}\n    \n    const { Title } = Typography;\n\n    export const ${COMPONENT_NAME}: React.FC<IResourceComponentsProps> = () => {\n        ${useTranslateHook}\n        const { queryResult } = useShow(${\n            isCustomPage\n                ? `{ \n                    resource: \"${resource.name}\", \n                    id: ${idQuoteWrapper(id)},\n                    ${getMetaProps(\n                        resource?.identifier ?? resource?.name,\n                        meta,\n                        \"getOne\",\n                    )}\n                }`\n                : getMetaProps(\n                      resource?.identifier ?? resource?.name,\n                      meta,\n                      \"getOne\",\n                  )\n                ? `{${getMetaProps(\n                      resource?.identifier ?? resource?.name,\n                      meta,\n                      \"getOne\",\n                  )}}`\n                : \"\"\n        });\n        const { data, isLoading } = queryResult;\n    \n        const ${recordName} = data?.data;\n\n        ${relationHooksCode}\n\n        return (\n            <Show isLoading={isLoading}>\n                ${renderedFields.join(\"\")}\n            </Show>\n        );\n    };\n    `;\n};\n\n/**\n * @experimental This is an experimental component\n */\nexport const ShowInferencer: InferencerResultComponent = createInferencer({\n    type: \"show\",\n    additionalScope: [\n        [\n            \"@refinedev/antd\",\n            \"RefineAntd\",\n            {\n                Show,\n                TagField,\n                TextField,\n                ImageField,\n                EmailField,\n                UrlField,\n                BooleanField,\n                DateField,\n                MarkdownField,\n                NumberField,\n            },\n        ],\n        [\"antd\", \"AntdPackage\", { Typography }],\n    ],\n    codeViewerComponent: SharedCodeViewer,\n    loadingComponent: LoadingComponent,\n    errorComponent: ErrorComponent,\n    renderer,\n});\n","import React, { useContext } from \"react\";\nimport { useResource, TranslationContext } from \"@refinedev/core\";\n\nimport {\n    CreateInferencer,\n    InferencerComponentProps,\n    InferencerResultComponent,\n    InferField,\n} from \"../types\";\n\nimport { composeInferencers } from \"../compose-inferencers\";\nimport { composeTransformers } from \"../compose-transformers\";\n\nimport { defaultElements } from \"../field-inferencers\";\nimport { defaultTransformers } from \"../field-transformers\";\nimport { LiveComponent } from \"../components\";\nimport { useInferFetch } from \"../use-infer-fetch\";\nimport { useRelationFetch } from \"../use-relation-fetch\";\n\nimport { prepareLiveCode, componentName, removeHiddenCode } from \"../utilities\";\n\n/**\n * CreateInferencer is a function that creates a Inferencer component.\n *\n * Inferencer will handle the data fetching and the infering parts,\n * then it will invoke the `renderer` function to generate the code.\n * The generated code will be used to render the component by `react-live`.\n * Its required to havee`additionalScope` prop when using packages other than `react` and `@refinedev/core`.\n *\n * @param config - Inferencer configuration.\n * @param config.type - Infering type.\n * @param config.additionalScope - Additional scope for live code.\n * @param config.renderer - String renderer for Inferencer.\n * @param config.fieldTransformers - Field transformers.\n * @param config.customElements - Field inferencers.\n * @param config.codeViewerComponent - Code viewer component.\n * @param config.errorComponent - Error component.\n * @param config.loadingComponent - Loading component.\n */\nexport const createInferencer: CreateInferencer = ({\n    type,\n    additionalScope = [],\n    customElements = [],\n    fieldTransformers = [],\n    renderer,\n    loadingComponent: LoadingComponent,\n    errorComponent: ErrorComponent,\n    codeViewerComponent: CodeViewerComponent,\n}) => {\n    const infer = composeInferencers([...defaultElements, ...customElements]);\n    const transform = composeTransformers([\n        ...defaultTransformers,\n        ...fieldTransformers,\n    ]);\n\n    const Inferencer = ({\n        resourceName,\n        fieldTransformer,\n        hideCodeViewerInProduction,\n        meta,\n        id,\n    }: {\n        resourceName?: string;\n        hideCodeViewerInProduction?: boolean;\n        fieldTransformer?: InferencerComponentProps[\"fieldTransformer\"];\n        meta?: InferencerComponentProps[\"meta\"];\n        id?: string | number;\n    }) => {\n        const { resource, resources } = useResource(resourceName);\n        const { i18nProvider } = useContext(TranslationContext);\n\n        const { resource: resourceFromURL } = useResource();\n\n        const {\n            data: record,\n            datas: records,\n            loading: recordLoading,\n            initial: isInitialLoad,\n            error: inferError,\n        } = useInferFetch(type, resourceName ?? resource?.name, id, meta);\n\n        const inferSingleField = (\n            key: string,\n            value: any,\n            record: Record<string, unknown>,\n        ) => {\n            const inferResult = infer(key, value, record, infer, type);\n\n            if (inferResult) {\n                if (resource) {\n                    const transformed = transform(\n                        [inferResult] as InferField[],\n                        resources,\n                        resource,\n                        record,\n                        infer,\n                        type,\n                    );\n\n                    const customTransformedFields = fieldTransformer\n                        ? transformed.flatMap((field) => {\n                              const result = fieldTransformer(field);\n\n                              return result ? [result] : [];\n                          })\n                        : transformed;\n\n                    return customTransformedFields?.[0];\n                }\n            }\n\n            return undefined;\n        };\n\n        const inferSingleRecord = (record: Record<string, unknown>) => {\n            const inferred = Object.keys(record)\n                .map((key) => {\n                    const value = record[key];\n\n                    const inferResult = inferSingleField(key, value, record);\n\n                    return inferResult;\n                })\n                .filter(Boolean);\n\n            return inferred as InferField[];\n        };\n\n        const inferMultipleRecords = (records: Record<string, unknown>[]) => {\n            // infer each record\n            // get the most common one for each field\n            // also get the first occurence of the each most common field/key and construct a fresh record from them.\n            // return the fresh record and the inferred fields\n\n            const inferred = records.map((record) => inferSingleRecord(record));\n\n            const allUniqueKeys = records\n                .flatMap((record) => Object.keys(record))\n                .filter((key, index, self) => self.indexOf(key) === index);\n\n            const mostCommonRecord: Record<string, unknown> = {};\n\n            const mostCommonFields = allUniqueKeys.map((key) => {\n                const fields = inferred.map((fields) =>\n                    fields.find((field) => field.key === key),\n                );\n\n                const mostCommonField = fields.reduce(\n                    (acc, field, index) => {\n                        if (!field) {\n                            return acc;\n                        }\n\n                        const count = fields.filter(\n                            (f) =>\n                                f?.key === field.key && f?.type === field.type,\n                        ).length;\n\n                        if (count > acc.count) {\n                            mostCommonRecord[key] = records[index][key];\n\n                            return {\n                                count,\n                                field,\n                            };\n                        }\n\n                        return acc;\n                    },\n                    { count: 0, field: undefined } as {\n                        count: number;\n                        field: undefined | InferField;\n                    },\n                );\n\n                return mostCommonField.field;\n            });\n\n            const response = {\n                commonRecord: mostCommonRecord,\n                inferredFields: mostCommonFields,\n            };\n\n            return response;\n        };\n\n        const [rawResults, recordInUse]: [\n            InferField[],\n            Record<string, unknown> | undefined,\n        ] = React.useMemo(() => {\n            if (records && (type === \"list\" || type === \"create\")) {\n                const inferred = inferMultipleRecords(records);\n\n                return [\n                    inferred.inferredFields as InferField[],\n                    inferred.commonRecord,\n                ];\n            }\n            if (record) {\n                const inferred = Object.keys(record)\n                    .map((key) => {\n                        const value = record[key];\n\n                        const inferResult = infer(\n                            key,\n                            value,\n                            record,\n                            infer,\n                            type,\n                        );\n\n                        return inferResult;\n                    })\n                    .filter(Boolean);\n\n                if (resource) {\n                    const transformed = transform(\n                        inferred as InferField[],\n                        resources,\n                        resource,\n                        record,\n                        infer,\n                        type,\n                    );\n\n                    const customTransformedFields = fieldTransformer\n                        ? transformed.flatMap((field) => {\n                              const result = fieldTransformer(field);\n\n                              return result ? [result] : [];\n                          })\n                        : transformed;\n\n                    return [customTransformedFields, record];\n                }\n\n                return [[], record];\n            }\n\n            return [[], undefined];\n        }, [record, records, resources, resource, fieldTransformer]);\n\n        const {\n            fields: results,\n            loading: relationLoading,\n            // initial: relationInitial,\n        } = useRelationFetch({\n            record: recordInUse,\n            fields: rawResults,\n            infer,\n            meta,\n        });\n\n        const clearedFields = React.useMemo(() => {\n            const cleanFields: InferField[] = [];\n\n            results.forEach((f, idx, arr) => {\n                if (f.resource) {\n                    if (\n                        cleanFields.findIndex(\n                            (el) => el.resource?.name === f.resource?.name,\n                        ) > -1\n                    ) {\n                        return;\n                    }\n                    const duplicates = arr.filter((field, index) => {\n                        if (index !== idx) {\n                            const currentFieldHasResource = f.resource;\n                            const fieldHasResource = field.resource;\n                            const hasAnyIdentifier =\n                                field.resource?.identifier ||\n                                f.resource?.identifier;\n                            const isSameResource = hasAnyIdentifier\n                                ? field.resource?.identifier ===\n                                  f.resource?.identifier\n                                : field.resource?.name === f.resource?.name;\n\n                            return (\n                                currentFieldHasResource &&\n                                fieldHasResource &&\n                                isSameResource\n                            );\n                        } else {\n                            return false;\n                        }\n                    });\n                    if (duplicates.length > 0) {\n                        if (type === \"create\" || type === \"edit\") {\n                            let toPush: InferField | undefined = undefined;\n\n                            [f, ...duplicates].find((el) => {\n                                if (\n                                    el.fieldable !== true &&\n                                    toPush === undefined\n                                ) {\n                                    toPush = el;\n                                }\n                            });\n                            if (toPush) {\n                                cleanFields.push(toPush);\n                            } else {\n                                cleanFields.push(f);\n                            }\n                        } else {\n                            let toPush: InferField | undefined = undefined;\n\n                            [f, ...duplicates].find((el) => {\n                                if (\n                                    el.fieldable !== false &&\n                                    toPush === undefined\n                                ) {\n                                    toPush = el;\n                                }\n                            });\n\n                            if (toPush) {\n                                cleanFields.push(toPush);\n                            } else {\n                                cleanFields.push(f);\n                            }\n                        }\n                    } else {\n                        cleanFields.push(f);\n                    }\n                } else {\n                    cleanFields.push(f);\n                }\n            });\n\n            return cleanFields;\n        }, [results, type]);\n\n        const code = React.useMemo(() => {\n            if (\n                !recordLoading &&\n                !relationLoading &&\n                !isInitialLoad &&\n                resource\n            ) {\n                return renderer({\n                    resource,\n                    resources,\n                    fields: clearedFields,\n                    infer,\n                    meta,\n                    isCustomPage: resource.name !== resourceFromURL?.name,\n                    id,\n                    i18n: !!i18nProvider,\n                });\n            }\n            return \"\";\n        }, [\n            resource,\n            resources,\n            clearedFields,\n            recordLoading,\n            relationLoading,\n        ]);\n\n        const hiddenCodeViewer =\n            process.env.NODE_ENV !== \"development\" &&\n            hideCodeViewerInProduction;\n\n        return (\n            <>\n                {LoadingComponent && (recordLoading || relationLoading) && (\n                    <LoadingComponent />\n                )}\n                {!recordLoading && !relationLoading && (\n                    <>\n                        <LiveComponent\n                            fetchError={\n                                !recordLoading && inferError\n                                    ? inferError\n                                    : !recordLoading &&\n                                      !isInitialLoad &&\n                                      !record\n                            }\n                            code={prepareLiveCode(\n                                code,\n                                componentName(\n                                    resource?.meta?.label ??\n                                        resource?.options?.label ??\n                                        resource?.label ??\n                                        resource?.name ??\n                                        \"Resource\",\n                                    type,\n                                ),\n                            )}\n                            errorComponent={ErrorComponent}\n                            additionalScope={additionalScope}\n                        />\n                        {typeof CodeViewerComponent !== \"undefined\" &&\n                        !hiddenCodeViewer ? (\n                            <CodeViewerComponent\n                                code={removeHiddenCode(code)}\n                                loading={recordLoading || relationLoading}\n                            />\n                        ) : null}\n                    </>\n                )}\n            </>\n        );\n    };\n\n    const InferencerComponent: InferencerResultComponent = ({\n        name,\n        resource,\n        fieldTransformer,\n        meta,\n        hideCodeViewerInProduction,\n        id,\n    }) => {\n        const { resource: resourceItem } = useResource(resource ?? name);\n\n        const key = `${\n            resourceItem?.identifier ?? resourceItem?.name\n        }-${type}-${id}`;\n\n        return (\n            <Inferencer\n                hideCodeViewerInProduction={hideCodeViewerInProduction}\n                fieldTransformer={fieldTransformer}\n                resourceName={resource ?? name}\n                meta={meta ?? {}}\n                key={key}\n                id={id}\n            />\n        );\n    };\n\n    return InferencerComponent;\n};\n","const urlLikeKeyRegexp = /(image|photo|avatar|url|logo|cover|thumbnail|icon)/i;\n\n/**\n * Returns a list of keys that are likely to be fieldable.\n * @example getFieldableKeys(\"user\", { id: 1, name: \"John\" }) === \"name\"\n */\nexport const getFieldableKeys = (\n    key: string,\n    data: Record<string, unknown>,\n): string | string[] | undefined => {\n    const fieldableProperties = [\n        \"name\",\n        \"label\",\n        \"title\",\n        \"count\",\n        \"content\",\n        \"username\",\n        \"nickname\",\n        \"login\",\n        \"firstName\",\n        \"lastName\",\n        \"url\",\n    ];\n\n    if (urlLikeKeyRegexp.test(key)) {\n        fieldableProperties.unshift(\"url\");\n    }\n\n    const firstAvailable = fieldableProperties.find(\n        (fkey) => fkey in data && !!data[fkey],\n    );\n\n    if (firstAvailable) {\n        if (firstAvailable === \"firstName\" && \"lastName\" in data) {\n            return [\"firstName\", \"lastName\"];\n        }\n\n        return firstAvailable;\n    }\n\n    return undefined;\n};\n","import { IResourceItem } from \"@refinedev/core\";\nimport { pickNotDeprecated } from \"@refinedev/core\";\n\n/**\n * Picks the data provider for the given resource. Which can be overridden by the resource itself.\n */\nexport function pickDataProvider(\n    resourceName?: string,\n    dataProviderName?: string,\n    resources?: IResourceItem[],\n) {\n    if (dataProviderName) {\n        return dataProviderName;\n    }\n\n    const resource = resources?.find((item) => item.name === resourceName);\n\n    const meta = pickNotDeprecated(resource?.meta, resource?.options);\n    if (meta?.dataProviderName) {\n        return meta.dataProviderName;\n    }\n\n    return \"default\";\n}\n\n/**\n * Picks the data provider for the given resource. Which can be overridden by the resource itself.\n * This is a simpler version of the above function which works with the resource item instead of the resource name and additional arguments.\n */\nexport const dataProviderFromResource = (resource?: IResourceItem) => {\n    return resource?.options?.dataProviderName;\n};\n","import { InferField } from \"../../types\";\n\n/**\n * Each field inferencer will run with every property of a record and output a result.\n * In these outputs, one with the highest priority will be picked as the inferred field.\n */\nexport const pickInferredField = (\n    inferredFields: Array<InferField | null | false>,\n): InferField | null => {\n    // filter out null and false values and sort by priority then return the first one\n    // priority is a number, the higher the number the higher the priority\n    // if there is no priority, it will be 0\n    const field = (\n        [...inferredFields].filter(Boolean) as Array<InferField>\n    ).sort((a, b) => (b.priority || 0) - (a.priority || 0))[0];\n\n    if (!field) {\n        return null;\n    }\n\n    return field;\n};\n","import prettier from \"prettier/standalone\";\nimport tsParser from \"prettier/parser-typescript\";\n\n/**\n * Standalone prettier formatter with typescript parser\n * to format the generated code.\n */\nexport const prettierFormat = (code: string) => {\n    try {\n        const formatted = prettier.format(code, {\n            parser: \"typescript\",\n            plugins: [tsParser],\n            arrowParens: \"always\",\n            trailingComma: \"all\",\n            semi: true,\n            tabWidth: 4,\n            printWidth: 80,\n        });\n\n        return formatted;\n    } catch (error) {\n        console.warn(\"Formatting error in inferencer\", error);\n        return code;\n    }\n};\n","/**\n * This helper removes the recurring spaces from the code.\n */\nexport const prettySpaces = (content: string): string => {\n    return content.replace(/ {2,}/g, \" \").replace(/\\n{2,}/g, \"\\n\");\n};\n","import { FieldInferencer } from \"../types\";\n\nexport const relationRegexp = /(-id|-ids|_id|_ids|Id|Ids|ID|IDs)(\\[\\])?$/;\n\nexport const relationInfer: FieldInferencer = (key, value) => {\n    const isRelation = relationRegexp.test(key);\n    const isBasicValue = typeof value === \"string\" || typeof value === \"number\";\n    const isBasicArray =\n        Array.isArray(value) &&\n        value.every((v) => typeof v === \"string\" || typeof v === \"number\");\n\n    if ((isRelation && isBasicValue) || (isRelation && isBasicArray)) {\n        return {\n            key,\n            relation: true,\n            multiple: isBasicArray ? true : false,\n            type: \"relation\",\n            priority: 1,\n        };\n    }\n\n    return false;\n};\n","import { relationRegexp } from \"../../field-inferencers/relation\";\n\n/**\n * Removes the relation suffix from a string.\n * @example removeRelationSuffix(\"category_id\") === \"category\"\n */\nexport const removeRelationSuffix = (key: string) => {\n    return key.replace(relationRegexp, \"\");\n};\n","import { removeRelationSuffix } from \"../remove-relation-suffix\";\n\n/**\n * This helper will prettify the string.\n */\nexport const prettyString = (str: string) => {\n    const clean = removeRelationSuffix(str);\n    // Convert camelCase to camel Case\n    const camelCase = clean.replace(/([a-z])([A-Z])/g, \"$1 $2\");\n    // Convert snake_case to snake case\n    const snakeCase = camelCase.replace(/_/g, \" \");\n    // Convert kebab-case to kebab case\n    const kebabCase = snakeCase.replace(/-/g, \" \");\n    // Capitalize the string\n    const capitalized = kebabCase\n        .split(\" \")\n        .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\n        .join(\" \");\n\n    return capitalized;\n};\n","import { IResourceItem } from \"@refinedev/core\";\nimport { prettyString } from \"../pretty-string\";\nimport { InferField } from \"../../types\";\n\nexport const translatePrettyString = (payload: {\n    resource: IResourceItem;\n    field: InferField;\n    i18n?: boolean;\n    noQuotes?: boolean;\n    noBraces?: boolean;\n}) => {\n    const { resource, field, i18n } = payload;\n\n    if (i18n) {\n        const translate = `translate(\"${resource.name}.fields.${field.key}\")`;\n\n        if (payload.noBraces) {\n            return `${translate}`;\n        }\n        return `{${translate}}`;\n    }\n\n    const prettedString = prettyString(field.key);\n    if (payload.noQuotes) {\n        return prettedString;\n    }\n\n    return `\"${prettedString}\"`;\n};\n","import pluralize from \"pluralize\";\n\nexport const toSingular = (str = \"\") => {\n    return pluralize.isSingular(str) ? str : pluralize.singular(str);\n};\n","import pluralize from \"pluralize\";\n\nexport const toPlural = (str = \"\") => {\n    return pluralize.isPlural(str) ? str : pluralize.plural(str);\n};\n","/**\n * `react-live` does not support `export` statements in the code.\n * This function will remove the `export` statements from the code.\n */\nexport const replaceExports = (code: string) => {\n    // remove export statements from the code but keep the variables\n    const newCode = code.replace(\n        /export\\s+(const|let|var|type|interface|function|class)\\s+(\\w+)\\s*(=|:)\\s*/g,\n        \"$1 $2 = \",\n    );\n\n    // remove default exports, check line by line, lines can be indented so ignore the tabs and spaces at the beginning\n    const lines = newCode.split(\"\\n\");\n    const newLines = lines.filter(\n        (line) => !line.trim().startsWith(\"export default\"),\n    );\n\n    return newLines.join(\"\\n\");\n};\n","import { prettySpaces } from \"../pretty-spaces\";\n\nconst packageRegex =\n    /import(?:(?:(?:[ \\n\\t]+([^ *\\n\\t\\{\\},]+)[ \\n\\t]*(?:,|[ \\n\\t]+))?([ \\n\\t]*\\{(?:[ \\n\\t]*[^ \\n\\t\"'\\{\\}]+[ \\n\\t]*,?)+\\})?[ \\n\\t]*)|[ \\n\\t]*\\*[ \\n\\t]*as[ \\n\\t]+([^ \\n\\t\\{\\}]+)[ \\n\\t]+)from[ \\n\\t]*(?:['\"])([^'\"\\n]+)(?:['\"])(?:;?)/g;\n\nconst sideEffectRegex = /import[ \\n\\t](?:['\"])([^'\"\\n]+)(?:['\"])(?:;?)/g;\n\nconst nameChangeRegex = /((?:\\w|\\s|_)*)( as )((?:\\w|\\s|_)*)( |,)?/g;\n\n/**\n * This function will replace the imports in the code since `react-live` does not support `import` statements.\n * `modules` is an object with keys as `package name` and values as `variable name`.\n */\nexport const replaceImports = (\n    content: string,\n    modules: Record<string, string> = {},\n): string => {\n    const matches = content.matchAll(packageRegex);\n\n    const imports = new Set();\n\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    for (const match of matches) {\n        const [, defaultImport, namedImports, namespaceImport, packageName] =\n            match;\n\n        if (packageName in modules) {\n            const importName = modules[packageName];\n\n            /**\n             * React and its exports are already available in the scope of the code.\n             * Restructuring them in import statements will cause errors.\n             * To avoid that, we are not replacing the import statements for React.\n             * This way, generated code can have \"react\" imports without any errors.\n             */\n            if (packageName === \"react\") {\n                continue;\n            }\n\n            if (defaultImport) {\n                imports.add(\n                    `const { default: ${defaultImport} } = ${importName};`,\n                );\n            }\n\n            if (namedImports) {\n                imports.add(\n                    `const${namedImports.replace(\n                        nameChangeRegex,\n                        `$1: $3$4`,\n                    )} = ${importName};`,\n                );\n            }\n\n            if (namespaceImport) {\n                imports.add(`const ${namespaceImport} = ${importName};`);\n            }\n        }\n    }\n\n    return prettySpaces(`\n    ${Array.from(imports).join(\"\\n\")}\n    ${content.replace(packageRegex, \"\").replace(sideEffectRegex, \"\")}\n    `);\n};\n","import pluralize from \"pluralize\";\nimport { IResourceItem } from \"@refinedev/core\";\n\nimport { InferField } from \"../../types\";\n\nimport { removeRelationSuffix } from \"../remove-relation-suffix\";\n\n/**\n * Checks if the given property can be relation by checking the existing resources.\n */\nexport const resourceFromInferred = (\n    field: InferField | false | null,\n    resources: IResourceItem[],\n): IResourceItem | undefined => {\n    if (!field) {\n        return undefined;\n    }\n\n    const resource = resources.find((el) => {\n        const stripped = removeRelationSuffix(field.key);\n\n        return (\n            el.name === stripped ||\n            el.name ===\n                (pluralize.isPlural(stripped)\n                    ? stripped\n                    : pluralize.plural(stripped)) ||\n            el.name ===\n                (pluralize.isSingular(stripped)\n                    ? stripped\n                    : pluralize.singular(stripped))\n        );\n    });\n\n    return resource;\n};\n","import pluralize from \"pluralize\";\nimport { prettyString } from \"../pretty-string\";\n\n/**\n * Returns the component name based on the resource name and inferencer type.\n * @example componentName(\"users\", \"list\") === \"UserList\"\n */\nexport const componentName = (\n    resourceName: string,\n    type: \"list\" | \"show\" | \"edit\" | \"create\",\n    fallbackResourceName = \"Inferred\",\n) => {\n    // replace all non-alphanumeric characters with a space\n    const sanitized = resourceName.replace(/[^a-zA-Z0-9]/g, \" \");\n    // convert to singular\n    const singular = pluralize.singular(sanitized);\n    // prettify the string without spaces\n    const prettified = prettyString(singular).replace(/ /g, \"\");\n    // if prettified is empty, return the fallbackResourceName\n    const resourceComponentName = prettified || fallbackResourceName;\n    // get pretty type name\n    const prettyType = type.charAt(0).toUpperCase() + type.slice(1);\n\n    // if resourceName is not starting with an alphabetical character, return Type + resourceName\n    // e.g. \"123users\" => \"List123Users\"\n    if (!/^[a-zA-Z]/.test(resourceComponentName)) {\n        return `${prettyType}${resourceComponentName}`;\n    }\n    // e.g. \"users\" => \"UserList\"\n    return `${resourceComponentName}${prettyType}`;\n};\n","const handleExpression = (expression: unknown) => {\n    if (!expression) {\n        return \"\";\n    }\n\n    if (Array.isArray(expression)) {\n        return expression.join(\"\");\n    }\n\n    if (typeof expression === \"string\") {\n        return expression;\n    }\n\n    if (typeof expression === \"object\") {\n        return expression.toString();\n    }\n\n    if (typeof expression === \"function\") {\n        return expression.toString();\n    }\n\n    if (typeof expression === \"number\") {\n        return String(expression);\n    }\n\n    if (typeof expression === \"boolean\" && expression) {\n        return \"true\";\n    }\n\n    return expression;\n};\n\n/**\n * This is a hacky helper to allow syntax highlighting to work in the template literals. (`renderer` function in inferencers)\n * Additionally, it parses expressions like jsx does.\n */\nexport const jsx = (\n    strings: TemplateStringsArray,\n    ...expressions: unknown[]\n) => {\n    const parsed = strings.reduce(\n        (result, currentString, i) =>\n            `${result}${currentString}${handleExpression(expressions[i])}`,\n        \"\",\n    );\n\n    return parsed.trim();\n};\n","/**\n * Code will be generated to be ready to copy and paste into a live environment.\n * But, `react-live` with `noInline={true}` will not work with this code and require `render` method to be called with the component.\n * This function will use the component name and the code and append the `render` method to the code.\n */\nexport const prepareLiveCode = (code?: string, componentName?: string) => {\n    return `\n    ${code ?? \"\"}\n    \n    render(typeof ${componentName} !== \"undefined\" ? <${componentName} /> : <></>);\n    `;\n};\n","export const removeHiddenCode = (code?: string) => {\n    // hidden blocks are wrapped in `/* hidden-start */` and `/* hidden-end */`\n    // these blocks can present multiple times in the code\n\n    return code?.replace(\n        /(\\/\\* hidden-start \\*\\/)(.|\\n)*?(\\/\\* hidden-end \\*\\/)/g,\n        \"\",\n    );\n};\n","import { InferField } from \"../../types\";\n\nconst dotAccessableRegex = /^[a-zA-Z_$][a-zA-Z_$0-9]*$/;\n\nexport const shouldDotAccess = (property: string) => {\n    return dotAccessableRegex.test(property);\n};\n\nfunction accessorSingle(variableName: string, key?: string, accessor?: string) {\n    let base = `${variableName}`;\n\n    if (key) {\n        base += \"?.\";\n        if (shouldDotAccess(key)) {\n            base += key;\n        } else {\n            base += `['${key}']`;\n        }\n    }\n\n    if (accessor) {\n        base += `?.`;\n        if (shouldDotAccess(accessor)) {\n            base += accessor;\n        } else {\n            base += `['${accessor}']`;\n        }\n    }\n\n    return base;\n}\n\nfunction accessorMultiple(variable: string, key?: string, accessor?: string[]) {\n    const all = (accessor ?? []).map((a) => accessorSingle(variable, key, a));\n\n    return all;\n}\n\n/**\n * Returns a string that can be used to access the given field.\n * @example accessor(\"myVar\", \"some\", \"thing\") === \"myVar?.some?.thing\"\n * @example accessor(\"myVar\", \"so-me\", th.ing\") === \"myVar?.['so-me']['th.ing']\"\n */\nexport const accessor = (\n    variable: string,\n    key?: string,\n    accessor?: string | string[],\n    joiner: string | false = ' + \" \" + ',\n): string => {\n    if (Array.isArray(accessor)) {\n        if (joiner) {\n            return accessorMultiple(variable, key, accessor).join(joiner);\n        } else {\n            return accessorSingle(variable, key, accessor[0]);\n        }\n    } else {\n        return accessorSingle(variable, key, accessor);\n    }\n};\n\nexport const dotAccessor = (\n    variable: string,\n    key?: string,\n    accessor?: string | string[],\n) => {\n    let str = variable;\n\n    if (key) {\n        str += `.${key}`;\n    }\n\n    if (accessor) {\n        if (Array.isArray(accessor)) {\n            str += `.${accessor[0]}`;\n        } else {\n            str += `.${accessor}`;\n        }\n    }\n\n    return str;\n};\n\nexport const getAccessorKey = (field: InferField) => {\n    return Array.isArray(field.accessor) || field.multiple\n        ? `accessorKey: \"${field.key}\"`\n        : field.accessor\n        ? `accessorKey: \"${dotAccessor(field.key, undefined, field.accessor)}\"`\n        : `accessorKey: \"${field.key}\"`;\n};\n","import { ImportElement } from \"../../types\";\n\nexport const printImports = (imports: Array<ImportElement>) => {\n    const byModule = imports.reduce((acc, [element, module, isDefault]) => {\n        if (!acc[module]) {\n            acc[module] = [] as Array<\n                string | [variable: string, isDefault?: boolean]\n            >;\n        }\n\n        if (!acc[module].includes(element)) {\n            if (isDefault) {\n                acc[module].push([element, true]);\n            } else {\n                acc[module].push(element);\n            }\n        }\n\n        return acc;\n    }, {} as Record<string, Array<string | [variable: string, isDefault?: boolean]>>);\n\n    const lines = Object.entries(byModule).map(([module, elements]) => {\n        const defaultImport = elements.find((e) => Array.isArray(e) && e[1]);\n        const named = elements.filter((e) => typeof e === \"string\");\n        const defaultStr = defaultImport ? `${defaultImport[0]}` : \"\";\n        const namedStr = named.length ? `{ ${named.join(\", \")} }` : \"\";\n        return `import ${defaultStr}${\n            defaultStr && namedStr ? \", \" : \"\"\n        }${namedStr} from \"${module}\";`;\n    });\n\n    return lines;\n};\n","const identifierRegexp = /^id$/i;\n\nexport const isIDKey = (key: string): boolean => identifierRegexp.test(key);\n","import { InferField } from \"../../types\";\n\nexport const getOptionLabel = (field: InferField) => {\n    if (field.relationInfer && field.relationInfer.accessor) {\n        if (Array.isArray(field.relationInfer.accessor)) {\n            return `optionLabel: \"${field.relationInfer.accessor[0]}\",`;\n        }\n        if (field.relationInfer.accessor !== \"title\") {\n            return `optionLabel: \"${field.relationInfer.accessor}\",`;\n        }\n        return \"\";\n    }\n    return \"\";\n};\n","// eslint-disable-next-line @typescript-eslint/no-empty-function\nexport const noOp = (arg1: any) => {};\n","import { prettyString } from \"../pretty-string\";\n\n/**\n * Returns the valid variable name for the given string and the given suffixOrPrefix.\n * @example getVariableName(\"user\", \"data\") === \"usersData\"\n * @example getVariableName(\"1234\", \"data\") === \"data1234\"\n * @example getVariableName(\"users-account\", \"selectProps\") === \"usersAccountSelectProps\"\n */\nexport const getVariableName = (fieldKey: string, suffixOrPrefix = \"\") => {\n    // if fieldKey is number, return with prefix\n    // e.g. (12345, Data) => \"data12345\"\n    if (Number.isInteger(Number(fieldKey))) {\n        const lowerCaseFirstLetter =\n            suffixOrPrefix.charAt(0).toLowerCase() + suffixOrPrefix.slice(1);\n        return lowerCaseFirstLetter + fieldKey;\n    }\n\n    // if fieldKey is start with numbers, replace the numbers with empty string\n    // e.g. 123users => \"users\"\n    const fieldKeyWithoutNumbers = fieldKey.replace(/^\\d+/, \"\");\n\n    // if fieldKeyWithoutNumbers has invalid characters, replace them with \"-\"\n    // e.g. \"users/account\" => \"users-account\"\n    const fieldKeyWithoutInvalidCharacters = fieldKeyWithoutNumbers.replace(\n        /[^a-zA-Z0-9]/g,\n        \"-\",\n    );\n\n    // Convert to PascalCase\n    const prettyPluralVariableName = prettyString(\n        fieldKeyWithoutInvalidCharacters,\n    ).replace(/ /g, \"\");\n\n    const variableName = `${\n        prettyPluralVariableName.charAt(0).toLowerCase() +\n        prettyPluralVariableName.slice(1)\n    }${suffixOrPrefix.charAt(0).toUpperCase() + suffixOrPrefix.slice(1)}`;\n\n    return variableName;\n};\n","import { InferencerComponentProps } from \"../../types\";\n\ntype Action = keyof NonNullable<InferencerComponentProps[\"meta\"]>[string];\n\nexport const getMetaProps = (\n    identifier?: string,\n    meta?: InferencerComponentProps[\"meta\"],\n    action?: Action,\n) => {\n    if (meta && action && identifier) {\n        const metaValues = identifier ? meta[identifier] : {};\n        const metaValue = metaValues?.[action] ?? metaValues?.default;\n        if (metaValue) {\n            return `meta: ${JSON.stringify(metaValue)},`;\n        }\n        return \"\";\n    }\n    return \"\";\n};\n\nexport const pickMeta = (\n    identifier?: string,\n    meta?: InferencerComponentProps[\"meta\"],\n    actions?: Action[],\n) => {\n    if (meta && actions && identifier) {\n        const metaValues = identifier ? meta[identifier] : {};\n\n        const actionsToCheck = [...actions, \"default\"] as Action[];\n\n        const metaValue = actionsToCheck.reduce((acc, action) => {\n            return acc ?? metaValues?.[action];\n        }, undefined as Record<string, unknown> | undefined);\n\n        if (metaValue) {\n            return metaValue;\n        }\n    }\n    return undefined;\n};\n","/**\n * If the `id` is a string, it will be wrapped in quotes.\n */\nexport const idQuoteWrapper = (\n    id: string | number | undefined,\n): string | number | undefined => {\n    if (id === undefined) return id;\n    if (typeof id === \"string\") return `\"${id}\"`;\n\n    return id;\n};\n","import { FieldInferencer } from \"../types\";\nimport { pickInferredField } from \"../utilities\";\n\n/**\n * Compose multiple field inferencers into one\n * @param inferencers The inferencer functions to compose\n */\nexport const composeInferencers = (\n    inferencers: Array<FieldInferencer>,\n): FieldInferencer => {\n    const fieldInferencer: FieldInferencer = (\n        key,\n        value,\n        record,\n        infer = fieldInferencer,\n        type,\n    ) => {\n        const inferences = inferencers.map((inferencer) =>\n            inferencer(key, value, record, infer, type),\n        );\n        const picked = pickInferredField(inferences);\n\n        return picked;\n    };\n\n    return fieldInferencer;\n};\n","import { FieldTransformer } from \"../types\";\n\n/**\n * Compose multiple field transformers into one\n * @param transformers The transformer functions to compose\n */\nexport const composeTransformers = (\n    transformers: Array<FieldTransformer>,\n): FieldTransformer => {\n    const fieldTransformer: FieldTransformer = (\n        fields,\n        resources,\n        resource,\n        record,\n        infer,\n        type,\n    ) => {\n        return transformers.reduce((acc, transformer) => {\n            return transformer(acc, resources, resource, record, infer, type);\n        }, fields);\n    };\n\n    return fieldTransformer;\n};\n","import { FieldInferencer, InferType } from \"../types\";\n\nexport const arrayInfer: FieldInferencer = (\n    key,\n    value,\n    record,\n    infer,\n    type,\n) => {\n    const isArray = Array.isArray(value);\n    const isBasicArray =\n        Array.isArray(value) &&\n        value.every((v) => typeof v === \"string\" || typeof v === \"number\");\n\n    if (isArray) {\n        if (!isBasicArray) {\n            const inferredInnerType = infer(key, value[0], record, infer, type);\n            if (inferredInnerType) {\n                return {\n                    ...inferredInnerType,\n                    key,\n                    multiple: true,\n                    priority: 1,\n                };\n            } else {\n                return false;\n            }\n        }\n        const basicType = infer(key, value[0], record, infer, type) || {\n            type: \"string\" as InferType,\n        };\n\n        return {\n            key,\n            multiple: true,\n            priority: 1,\n            type: basicType?.type,\n        };\n    }\n\n    return false;\n};\n","import { FieldInferencer } from \"../types\";\n\nexport const booleanInfer: FieldInferencer = (key, value) => {\n    const isBoolean = typeof value === \"boolean\";\n\n    if (isBoolean) {\n        return {\n            key,\n            type: \"boolean\",\n        };\n    }\n\n    return false;\n};\n","import dayjs from \"dayjs\";\nimport { FieldInferencer } from \"../types\";\n\nconst dateSuffixRegexp = /(_at|_on|At|On|AT|ON)(\\[\\])?$/;\n\nconst dateSeparators = [\"/\", \":\", \"-\", \".\"];\n\nexport const dateInfer: FieldInferencer = (key, value) => {\n    const isDateField =\n        dateSuffixRegexp.test(key) && dayjs(value as string).isValid();\n\n    const isValidDateString =\n        typeof value === \"string\" && dayjs(value).isValid();\n\n    const hasDateSeparator =\n        typeof value === \"string\" &&\n        dateSeparators.some((s) => value.includes(s));\n\n    if (hasDateSeparator && (isDateField || isValidDateString)) {\n        return {\n            key,\n            type: \"date\",\n            priority: 1,\n        };\n    }\n\n    return false;\n};\n","import { FieldInferencer } from \"../types\";\n\nconst emailRegexp =\n    /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\nexport const emailInfer: FieldInferencer = (key, value) => {\n    const isValidEmail = typeof value === \"string\" && emailRegexp.test(value);\n\n    if (isValidEmail) {\n        return {\n            key,\n            type: \"email\",\n            priority: 1,\n        };\n    }\n\n    return false;\n};\n","import { FieldInferencer } from \"../types\";\n\nconst imageRegexp = /\\.(gif|jpe?g|tiff?|png|webp|bmp|svg)$/i;\n\nexport const imageInfer: FieldInferencer = (key, value) => {\n    const isImageURI = typeof value === \"string\" && imageRegexp.test(value);\n\n    if (isImageURI) {\n        return {\n            key,\n            type: \"image\",\n            priority: 2,\n        };\n    }\n\n    return false;\n};\n","import { FieldInferencer } from \"../types\";\n\nexport const nullishInfer: FieldInferencer = (key, value) => {\n    const isUndefined = typeof value === \"undefined\";\n    const isNull = value === null;\n\n    if (isUndefined || isNull) {\n        return null;\n    }\n\n    return false;\n};\n","import { FieldInferencer } from \"../types\";\n\nexport const numberInfer: FieldInferencer = (key, value) => {\n    const isNonEmptyString = typeof value === \"string\" && value.length > 0;\n    const isNotNaN = !isNaN(value as number);\n\n    const isNumericString = isNonEmptyString && isNotNaN;\n    const isNumber = typeof value === \"number\";\n\n    const isNumeric = isNumericString || isNumber;\n\n    if (isNumeric) {\n        return {\n            key,\n            type: \"number\",\n        };\n    }\n\n    return false;\n};\n","import { getFieldableKeys } from \"../utilities\";\nimport { FieldInferencer } from \"../types\";\n\nconst idPropertyRegexp = /id$/i;\n\nexport const objectInfer: FieldInferencer = (\n    key,\n    value,\n    record,\n    infer,\n    type,\n) => {\n    const isNotNull = value !== null;\n    const isNotArray = !Array.isArray(value);\n    const isObject = typeof value === \"object\";\n\n    if (isNotNull && isNotArray && isObject) {\n        const onlyHasId =\n            Object.keys(value).length === 1 &&\n            idPropertyRegexp.test(Object.keys(value)[0]);\n\n        const hasId = Object.keys(value).some((k) => idPropertyRegexp.test(k));\n\n        if (onlyHasId) {\n            return {\n                key,\n                type: \"relation\",\n                relation: true,\n                accessor: \"id\",\n                priority: 1,\n            };\n        }\n\n        const fieldableKeys = getFieldableKeys(\n            key,\n            value as Record<string, unknown>,\n        );\n\n        const hasFieldableKeys = fieldableKeys\n            ? fieldableKeys.length > 0\n            : false;\n\n        if (hasFieldableKeys && fieldableKeys) {\n            const innerFieldKey =\n                fieldableKeys && Array.isArray(fieldableKeys)\n                    ? fieldableKeys[0]\n                    : fieldableKeys;\n\n            const innerFieldType = infer(\n                innerFieldKey,\n                (value as Record<string, unknown>)[innerFieldKey],\n                value as Record<string, unknown>,\n                infer,\n                type,\n            );\n\n            if (innerFieldType) {\n                const accessor = Array.isArray(fieldableKeys)\n                    ? fieldableKeys.map((el) => {\n                          if (innerFieldType.accessor) {\n                              return `${el}.${\n                                  Array.isArray(innerFieldType.accessor)\n                                      ? innerFieldType.accessor[0]\n                                      : innerFieldType.accessor\n                              }`;\n                          } else {\n                              return el;\n                          }\n                      })\n                    : innerFieldType.accessor\n                    ? Array.isArray(innerFieldType.accessor)\n                        ? `${fieldableKeys}.${innerFieldType.accessor[0]}`\n                        : `${fieldableKeys}.${innerFieldType.accessor}`\n                    : fieldableKeys;\n\n                if (\n                    innerFieldType?.type === \"text\" &&\n                    (type === \"create\" || type === \"edit\") &&\n                    hasId\n                ) {\n                    return {\n                        key,\n                        type: \"relation\",\n                        relation: true,\n                        accessor: \"id\",\n                        priority: 1,\n                    };\n                }\n\n                return {\n                    ...innerFieldType,\n                    fieldable: true,\n                    key,\n                    accessor: accessor,\n                    priority: 1,\n                };\n            }\n        }\n\n        return {\n            key,\n            fieldable: false,\n            type: \"object\",\n            priority: 1,\n        };\n    }\n\n    return false;\n};\n","import { FieldInferencer } from \"../types\";\n\nexport const richtextInfer: FieldInferencer = (key, value) => {\n    const isLongText = typeof value === \"string\" && value.length > 100;\n\n    if (isLongText) {\n        return {\n            key,\n            type: \"richtext\",\n            priority: 1,\n        };\n    }\n\n    return false;\n};\n","import { FieldInferencer } from \"../types\";\n\nexport const textInfer: FieldInferencer = (key, value) => {\n    const isText = typeof value === \"string\";\n\n    if (isText) {\n        return {\n            key,\n            type: \"text\",\n        };\n    }\n\n    return false;\n};\n","import { FieldInferencer } from \"../types\";\n\nconst urlRegexp = /^(https?|ftp):\\/\\/(-\\.)?([^\\s/?\\.#-]+\\.?)+(\\/[^\\s]*)?$/i;\n\nexport const urlInfer: FieldInferencer = (key, value) => {\n    const isValidURL = typeof value === \"string\" && urlRegexp.test(value);\n\n    if (isValidURL) {\n        return {\n            key,\n            type: \"url\",\n            priority: 1,\n        };\n    }\n\n    return false;\n};\n","import { arrayInfer } from \"./array\";\nimport { booleanInfer } from \"./boolean\";\nimport { dateInfer } from \"./date\";\nimport { emailInfer } from \"./email\";\nimport { imageInfer } from \"./image\";\nimport { nullishInfer } from \"./nullish\";\nimport { numberInfer } from \"./number\";\nimport { objectInfer } from \"./object\";\nimport { relationInfer } from \"./relation\";\nimport { richtextInfer } from \"./richtext\";\nimport { textInfer } from \"./text\";\nimport { urlInfer } from \"./url\";\n\nexport const defaultElements = [\n    arrayInfer,\n    booleanInfer,\n    dateInfer,\n    emailInfer,\n    imageInfer,\n    nullishInfer,\n    numberInfer,\n    objectInfer,\n    relationInfer,\n    richtextInfer,\n    textInfer,\n    urlInfer,\n];\n","import { FieldTransformer, InferField } from \"../types\";\n\nexport const basicToRelation: FieldTransformer = (\n    fields,\n    resources,\n    resource,\n    record,\n) => {\n    const mapped: Array<InferField> = fields.map((field) => {\n        if (\n            !field.relation &&\n            (field.type === \"text\" ||\n                field.type === \"richtext\" ||\n                field.type === \"number\") &&\n            !field.canRelation\n        ) {\n            // check if value is a valid id (regex)\n            // if multiple, check value by value\n            // take accessor into account (should be single only)\n            // valid id should be a valid uuid (meaning, lowercase alphanumeric with dashes)\n            const validUUIdRegex = /^[a-z0-9-]+$/;\n\n            const isValidUUID = (value: unknown) => {\n                return validUUIdRegex.test(`${value}`);\n            };\n\n            const isNotSelf = field.key.toLowerCase() !== \"id\";\n\n            const singleOrNoAccessor =\n                !field.accessor || typeof field.accessor === \"string\";\n\n            // in case of multiple accessors, we can't infer a relation\n            // or if the field is the id field\n            if (!singleOrNoAccessor || !isNotSelf) {\n                return field;\n            }\n\n            const valuesToCheck = field.multiple\n                ? (record[field.key] as unknown[])\n                : [record[field.key]];\n\n            const allValid = valuesToCheck.every((value) => {\n                return isValidUUID(\n                    field.accessor\n                        ? (value as Record<string, unknown>)[\n                              field.accessor as string\n                          ]\n                        : value,\n                );\n            });\n\n            if (allValid) {\n                return {\n                    ...field,\n                    canRelation: true,\n                };\n            }\n\n            return field;\n        }\n        return field;\n    });\n\n    return mapped;\n};\n","import { FieldTransformer, InferField } from \"../types\";\n\nconst imageFieldLikeRegexp = /(image|photo|avatar|cover|thumbnail|icon)/i;\n\nexport const imageByKey: FieldTransformer = (fields) => {\n    const mapped: Array<InferField> = fields.map((field) => {\n        if (field.type === \"url\" && imageFieldLikeRegexp.test(field.key)) {\n            return {\n                ...field,\n                type: \"image\",\n            };\n        }\n\n        return field;\n    });\n\n    return mapped;\n};\n","import { resourceFromInferred } from \"../utilities\";\nimport { FieldTransformer, InferField } from \"../types\";\n\nexport const relationByResource: FieldTransformer = (\n    fields,\n    resources,\n    resource,\n    record,\n    infer,\n) => {\n    const mapped: Array<InferField> = fields.map((field) => {\n        const inferResource = resourceFromInferred(field, resources);\n\n        if (inferResource) {\n            return {\n                ...field,\n                relation: true,\n                type: \"relation\",\n                resource: inferResource,\n            };\n        }\n\n        return field;\n    });\n\n    return mapped;\n};\n","import { FieldTransformer, InferField } from \"../types\";\n\nexport const relationToFieldable: FieldTransformer = (\n    fields,\n    resources,\n    resource,\n    record,\n    infer,\n    type,\n) => {\n    const mapped: Array<InferField> = fields.map((field) => {\n        if (field.relation && field.type === \"relation\" && !field.resource) {\n            const value = field.accessor\n                ? (record[field.key] as any)[field.accessor as string]\n                : record[field.key];\n\n            const inferredType = infer(field.key, value, record, infer, type);\n\n            if (inferredType && inferredType.type !== \"relation\") {\n                return {\n                    ...field,\n                    fieldable: true,\n                    relation: false,\n                    type: inferredType.type,\n                    canRelation: true,\n                };\n            }\n        }\n\n        return field;\n    });\n\n    return mapped;\n};\n","import { basicToRelation } from \"./basic-to-relation\";\nimport { imageByKey } from \"./image-by-key\";\nimport { relationByResource } from \"./relation-by-resource\";\nimport { relationToFieldable } from \"./relation-to-fieldable\";\n\nexport const defaultTransformers = [\n    imageByKey,\n    relationByResource,\n    relationToFieldable,\n    basicToRelation,\n];\n","import React from \"react\";\nimport * as RefineCore from \"@refinedev/core\";\n\nimport { LivePreview, LiveProvider, ContextProps } from \"@aliemir/react-live\";\n\nimport { replaceImports, replaceExports } from \"../../utilities\";\nimport { AdditionalScopeType, LiveComponentProps } from \"../../types\";\n\nconst defaultScope: Array<AdditionalScopeType> = [\n    [\"react\", \"React\", React],\n    [\"@refinedev/core\", \"RefineCore\", RefineCore],\n];\n\nconst InferencerLiveContext = React.createContext<ContextProps>(\n    {} as ContextProps,\n);\n\n/**\n * Live Component will render the code with `react-live`.\n * Errors will be handled by `ErrorComponent`.\n */\nexport const LiveComponent: React.FC<LiveComponentProps> = ({\n    fetchError,\n    code,\n    additionalScope,\n    errorComponent: ErrorComponent,\n}) => {\n    const sanitized =\n        (code &&\n            replaceExports(\n                replaceImports(\n                    code,\n                    [...defaultScope, ...(additionalScope ?? [])].reduce(\n                        (\n                            acc,\n                            [\n                                packageName,\n                                variableName,\n                                _module,\n                                ignoreReplacement,\n                            ],\n                        ) => {\n                            if (ignoreReplacement) {\n                                return acc;\n                            }\n                            return {\n                                ...acc,\n                                [packageName]: variableName,\n                            };\n                        },\n                        {},\n                    ),\n                ),\n            )) ??\n        \"\";\n\n    const scope = React.useMemo(() => {\n        return {\n            React,\n            ...React,\n            ...[...defaultScope, ...(additionalScope ?? [])].reduce(\n                (acc, [_packageName, variableName, packageContent]) => {\n                    return {\n                        ...acc,\n                        [variableName]: packageContent,\n                    };\n                },\n                {},\n            ),\n        };\n    }, [additionalScope]);\n\n    const ErrorComponentWithError = React.useMemo(() => {\n        const LiveErrorComponent = () => {\n            const { error } = React.useContext(InferencerLiveContext);\n\n            if (ErrorComponent) {\n                return (\n                    <ErrorComponent\n                        error={\n                            error\n                                ? `<p>An error occured while rendering the generated component.You can check the generated code from the below \"Show Code\" button and fix the error manually.</p>\n                                    <p>If you think this is a bug, please report the issue at <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/refinedev/refine/issues\">https://github.com/refinedev/refine/issues</a></p>\n                                    <p>Exception:</p>\n                                    <code>${error}</code>`\n                                : typeof fetchError === \"string\"\n                                ? fetchError\n                                : fetchError\n                                ? `<p>Something went wrong while fetching the resource data.</p>\n                                    <p>To learn more about the Inferencer, please check the <a href=\"https://refine.dev/docs/packages/documentation/inferencer/\" target=\"_blank\">documentation</a>.</p>`\n                                : undefined\n                        }\n                    />\n                );\n            }\n\n            return null;\n        };\n\n        return LiveErrorComponent;\n    }, [ErrorComponent, fetchError]);\n\n    return (\n        <LiveProvider\n            Context={InferencerLiveContext}\n            code={sanitized}\n            scope={scope}\n            noInline\n        >\n            {!fetchError && <LivePreview Context={InferencerLiveContext} />}\n            <ErrorComponentWithError />\n        </LiveProvider>\n    );\n};\n","import React, { SVGProps } from \"react\";\nimport Highlight, { defaultProps } from \"prism-react-renderer\";\nimport theme from \"prism-react-renderer/themes/vsDark\";\n\nimport { CreateInferencerConfig } from \"../../types\";\nimport { prettierFormat } from \"../../utilities\";\n\nexport const SharedCodeViewer: CreateInferencerConfig[\"codeViewerComponent\"] =\n    ({ code: rawCode, loading }) => {\n        const code = React.useMemo(() => {\n            return prettierFormat(rawCode ?? \"\");\n        }, [rawCode]);\n\n        const [settled, setSettled] = React.useState(false);\n        const [isModalVisible, setIsModalVisible] = React.useState(false);\n        const [isVisible, setIsVisible] = React.useState(false);\n        const [isColumn, setIsColumn] = React.useState(false);\n        const [isModalButtonHover, setIsModalButtonHover] =\n            React.useState(false);\n\n        // Settled Check\n        React.useEffect(() => {\n            if (!loading) {\n                const timeout = setTimeout(() => {\n                    setSettled(true);\n                }, 300);\n\n                return () => {\n                    clearTimeout(timeout);\n                };\n            }\n\n            return () => undefined;\n        }, [loading]);\n\n        // Visibility Check\n        React.useEffect(() => {\n            if (typeof window !== \"undefined\") {\n                const mediaQuery = window.matchMedia(\"(max-width: 449px)\");\n                if (mediaQuery.matches) {\n                    setIsVisible(false);\n                } else {\n                    setIsVisible(true);\n                }\n\n                const handleResize = () => {\n                    if (mediaQuery.matches) {\n                        setIsVisible(false);\n                    } else {\n                        setIsVisible(true);\n                    }\n                };\n\n                window.addEventListener(\"resize\", handleResize);\n\n                return () => {\n                    window.removeEventListener(\"resize\", handleResize);\n                };\n            }\n\n            return () => undefined;\n        }, []);\n\n        // Flex Direction Check\n        React.useEffect(() => {\n            if (typeof window !== \"undefined\") {\n                const mediaQuery = window.matchMedia(\"(max-width: 1280px)\");\n                if (mediaQuery.matches) {\n                    setIsColumn(true);\n                } else {\n                    setIsColumn(false);\n                }\n\n                const handleResize = () => {\n                    if (mediaQuery.matches) {\n                        setIsColumn(true);\n                    } else {\n                        setIsColumn(false);\n                    }\n                };\n\n                window.addEventListener(\"resize\", handleResize);\n\n                return () => {\n                    window.removeEventListener(\"resize\", handleResize);\n                };\n            }\n\n            return () => undefined;\n        }, []);\n\n        if (code && !loading) {\n            return (\n                <>\n                    {isVisible && (\n                        <div\n                            className=\"refine-inferencer--code-viewer\"\n                            style={{\n                                position: \"sticky\",\n                                bottom: \"24px\",\n                                paddingTop: \"24px\",\n                                left: 0,\n                                right: 0,\n                                width: \"100%\",\n                                zIndex: 10,\n                                display: \"flex\",\n                                justifyContent: \"center\",\n                                transition: \"all 0.2s ease\",\n                                opacity: settled && !isModalVisible ? 1 : 0,\n                                transform:\n                                    settled && !isModalVisible\n                                        ? \"translateY(0)\"\n                                        : \"translateY(100px)\",\n                            }}\n                        >\n                            <div\n                                style={{\n                                    width: \"calc(100% - calc(64px * 2))\",\n                                    maxWidth: \"1080px\",\n                                    padding: \"20px\",\n                                    backgroundColor: \"#1A1A1A\",\n                                    boxShadow:\n                                        \"0px 4px 16px -4px rgba(0, 0, 0, 0.5), 0px 8px 32px -8px rgba(0, 0, 0, 0.35)\",\n                                    borderRadius: \"16px\",\n                                    display: \"flex\",\n                                    alignItems: \"center\",\n                                    justifyContent: \"space-between\",\n                                    flexDirection: isColumn ? \"column\" : \"row\",\n                                    gap: \"12px\",\n                                }}\n                            >\n                                <div\n                                    style={{\n                                        display: \"flex\",\n                                        alignItems: \"flex-start\",\n                                        gap: \"8px\",\n                                    }}\n                                >\n                                    <div>\n                                        <InfoIcon />\n                                    </div>\n                                    <div\n                                        style={{\n                                            fontSize: \"14px\",\n                                            lineHeight: \"20px\",\n                                            color: \"#ffffff\",\n                                        }}\n                                    >\n                                        <p\n                                            style={{\n                                                padding: 0,\n                                                margin: 0,\n                                            }}\n                                        >\n                                            Most of the page code is\n                                            auto-generated by the{\" \"}\n                                            <span\n                                                style={{\n                                                    textDecoration: \"underline\",\n                                                }}\n                                            >\n                                                Inferencer\n                                            </span>{\" \"}\n                                            feature, based on your backend data\n                                            structure.\n                                        </p>\n                                        <p\n                                            style={{\n                                                padding: 0,\n                                                margin: 0,\n                                            }}\n                                        >\n                                            While this is an excellent way to\n                                            experiment with refine,{\" \"}\n                                            <span style={{ fontWeight: 600 }}>\n                                                it&apos;s not intended to be\n                                                used on production.\n                                            </span>\n                                        </p>\n                                    </div>\n                                </div>\n                                <div>\n                                    <button\n                                        onPointerEnter={() =>\n                                            setIsModalButtonHover(true)\n                                        }\n                                        onPointerLeave={() =>\n                                            setIsModalButtonHover(false)\n                                        }\n                                        onClick={() => setIsModalVisible(true)}\n                                        style={{\n                                            appearance: \"none\",\n                                            border: \"none\",\n                                            padding: \"10px 16px\",\n                                            borderRadius: \"4px\",\n                                            display: \"flex\",\n                                            alignItems: \"center\",\n                                            justifyContent: \"center\",\n                                            background: \"#0080FF\",\n                                            color: \"#ffffff\",\n                                            fontSize: \"14px\",\n                                            lineHeight: \"20px\",\n                                            fontWeight: 600,\n                                            gap: \"8px\",\n                                            cursor: \"pointer\",\n                                            transition: \"all 0.2s ease\",\n                                            transform: isModalButtonHover\n                                                ? \"scale(1.025)\"\n                                                : undefined,\n                                            filter: isModalButtonHover\n                                                ? \"brightness(1.1)\"\n                                                : undefined,\n                                        }}\n                                    >\n                                        <OpenIcon\n                                            style={{\n                                                flexShrink: 0,\n                                            }}\n                                        />\n                                        <span>\n                                            Show the auto-generated code\n                                        </span>\n                                    </button>\n                                </div>\n                            </div>\n                        </div>\n                    )}\n                    <CodeModal\n                        visible={isModalVisible}\n                        onClose={() => setIsModalVisible(false)}\n                        code={code}\n                    />\n                </>\n            );\n        }\n\n        return null;\n    };\n\nconst CodeModal = ({\n    visible,\n    onClose,\n    code = \"\",\n}: {\n    visible: boolean;\n    onClose: () => void;\n    code?: string;\n}) => {\n    const modalRef = React.useRef<HTMLDivElement>(null);\n\n    const [isCopied, setIsCopied] = React.useState(false);\n    const [isCopyHover, setIsCopyHover] = React.useState(false);\n    const [isCloseHover, setIsCloseHover] = React.useState(false);\n    const [isLearnMoreHover, setIsLearnMoreHover] = React.useState(false);\n\n    // On Outside Click\n    React.useEffect(() => {\n        if (typeof document !== \"undefined\") {\n            const onOutsideClick = (event: PointerEvent) => {\n                if (\n                    modalRef.current &&\n                    !modalRef.current.contains(event.target as Node)\n                ) {\n                    onClose();\n                }\n            };\n\n            document.addEventListener(\"pointerdown\", onOutsideClick);\n\n            return () => {\n                document.removeEventListener(\"pointerdown\", onOutsideClick);\n            };\n        }\n\n        return () => undefined;\n    }, [onClose]);\n\n    // onCopy Handler\n    const onCopy = () => {\n        if (typeof navigator !== \"undefined\") {\n            navigator.clipboard.writeText(code);\n            setIsCopied(true);\n            setTimeout(() => {\n                setIsCopied(false);\n            }, 1000);\n        }\n    };\n\n    const title = (\n        <div\n            style={{\n                display: \"flex\",\n                justifyContent: \"space-between\",\n                alignItems: \"center\",\n            }}\n        >\n            <div\n                style={{\n                    fontWeight: 700,\n                    fontSize: \"20px\",\n                    lineHeight: \"32px\",\n                    color: \"#0D0D0D\",\n                }}\n            >\n                Auto-generated code by Inferencer\n            </div>\n            <button\n                onClick={onClose}\n                onPointerEnter={() => setIsCloseHover(true)}\n                onPointerLeave={() => setIsCloseHover(false)}\n                style={{\n                    flexShrink: 0,\n                    appearance: \"none\",\n                    border: \"none\",\n                    background: \"none\",\n                    padding: 0,\n                    margin: 0,\n                    outline: \"none\",\n                    borderRadius: \"50px\",\n                    width: \"32px\",\n                    height: \"32px\",\n                    cursor: \"pointer\",\n                    transition: \"all 0.15s ease\",\n                    transform: isCloseHover ? \"scale(1.05)\" : undefined,\n                    filter: isCloseHover ? \"brightness(0.8)\" : undefined,\n                }}\n            >\n                <CloseIcon />\n            </button>\n        </div>\n    );\n\n    const highlight = (\n        <div\n            style={{\n                fontSize: \"13px\",\n                borderRadius: \"8px\",\n                flex: \"1\",\n                overflow: \"scroll\",\n                background: \"#1E1E1E\",\n            }}\n        >\n            <Highlight\n                {...defaultProps}\n                theme={theme}\n                code={code}\n                language=\"tsx\"\n            >\n                {({\n                    className,\n                    style,\n                    tokens,\n                    getLineProps,\n                    getTokenProps,\n                }) => (\n                    <pre\n                        className={className}\n                        style={{\n                            ...style,\n                            padding: \"14px 14px 14px 14px\",\n                            margin: \"0\",\n                            width: \"100%\",\n                            boxSizing: \"border-box\",\n                        }}\n                    >\n                        {tokens.map((line, i) => (\n                            <div\n                                key={i}\n                                {...getLineProps({\n                                    line,\n                                    key: i,\n                                })}\n                            >\n                                {line.map((token, key) => (\n                                    <span\n                                        key={key}\n                                        {...getTokenProps({\n                                            token,\n                                            key,\n                                        })}\n                                    />\n                                ))}\n                            </div>\n                        ))}\n                    </pre>\n                )}\n            </Highlight>\n        </div>\n    );\n\n    const buttons = (\n        <div\n            style={{\n                display: \"flex\",\n                justifyContent: \"flex-start\",\n                alignItems: \"flex-end\",\n                gap: \"16px\",\n            }}\n        >\n            <button\n                onPointerEnter={() => setIsCopyHover(true)}\n                onPointerLeave={() => setIsCopyHover(false)}\n                onClick={onCopy}\n                style={{\n                    appearance: \"none\",\n                    height: \"40px\",\n                    border: \"none\",\n                    padding: \"10px 16px\",\n                    borderRadius: \"4px\",\n                    display: \"flex\",\n                    alignItems: \"center\",\n                    justifyContent: \"center\",\n                    background: \"#0080FF\",\n                    color: \"#ffffff\",\n                    fontSize: \"14px\",\n                    lineHeight: \"20px\",\n                    fontWeight: 600,\n                    gap: \"8px\",\n                    cursor: \"pointer\",\n                    position: \"relative\",\n                    overflow: \"hidden\",\n                    transition: \"filter 0.2s ease\",\n                    transform: isCopyHover ? \"scale(1.025)\" : \"scale(1)\",\n                    filter: isCopyHover ? \"brightness(1.1)\" : undefined,\n                }}\n            >\n                <ClipboardIcon\n                    style={{\n                        flexShrink: 0,\n                        marginTop: \"-2px\",\n                        marginBottom: \"-2px\",\n                    }}\n                />\n                <span>Copy Generated Code</span>\n                <div\n                    style={{\n                        position: \"absolute\",\n                        width: \"100%\",\n                        height: \"100%\",\n                        top: 0,\n                        left: 0,\n                        display: \"flex\",\n                        alignItems: \"center\",\n                        justifyContent: \"center\",\n                        background: \"#0080FF\",\n                        transition: \"all 0.2s ease\",\n                        transform: isCopied\n                            ? \"translateY(0)\"\n                            : \"translateY(40px)\",\n                    }}\n                >\n                    <ClipboardIcon\n                        style={{\n                            flexShrink: 0,\n                            marginTop: \"-2px\",\n                            marginBottom: \"-2px\",\n                        }}\n                    />\n                    <span>Copied!</span>\n                </div>\n            </button>\n            <a\n                onPointerEnter={() => setIsLearnMoreHover(true)}\n                onPointerLeave={() => setIsLearnMoreHover(false)}\n                href=\"https://refine.dev/docs/packages/documentation/inferencer\"\n                target=\"_blank\"\n                rel=\"noreferrer\"\n                style={{\n                    appearance: \"none\",\n                    textDecoration: \"none\",\n                    border: \"none\",\n                    padding: \"10px 16px\",\n                    borderRadius: \"4px\",\n                    display: \"flex\",\n                    alignItems: \"center\",\n                    justifyContent: \"center\",\n                    background: \"rgba(0, 128, 255, 0.1)\",\n                    color: \"#0080FF\",\n                    fontSize: \"14px\",\n                    lineHeight: \"20px\",\n                    fontWeight: 600,\n                    gap: \"8px\",\n                    cursor: \"pointer\",\n                    transition: \"all 0.2s ease\",\n                    transform: isLearnMoreHover ? \"scale(1.025)\" : undefined,\n                    filter: isLearnMoreHover ? \"brightness(1.1)\" : undefined,\n                }}\n            >\n                <OpenIcon\n                    style={{\n                        flexShrink: 0,\n                    }}\n                />\n                <span>Learn more about inferencer</span>\n            </a>\n        </div>\n    );\n\n    return (\n        <div\n            className=\"refine-inferencer--code-viewer-modal\"\n            style={{\n                position: \"fixed\",\n                top: 0,\n                left: 0,\n                right: 0,\n                bottom: 0,\n                zIndex: 9999,\n                backgroundColor: \"rgba(0, 0, 0, 0.5)\",\n                transition: \"all 0.2s ease\",\n                opacity: visible ? 1 : 0,\n                pointerEvents: visible ? \"all\" : \"none\",\n                display: \"flex\",\n                justifyContent: \"center\",\n                alignItems: \"center\",\n            }}\n        >\n            <div\n                ref={modalRef}\n                style={{\n                    transform: visible\n                        ? \"scale(1) translateY(0px)\"\n                        : \"scale(0) translateY(-200px)\",\n                    transition: \"all 0.25s cubic-bezier(.35,1.29,.81,1.08)\",\n                    transitionDelay: \"0.25\",\n                    width: \"calc(100% - calc(32px * 2))\",\n                    height: \"calc(100% - calc(32px * 2))\",\n                    backgroundColor: \"#fff\",\n                    maxWidth: \"640px\",\n                    maxHeight: \"720px\",\n                    borderRadius: \"8px\",\n                    padding: \"16px\",\n                }}\n            >\n                <div\n                    style={{\n                        display: \"flex\",\n                        flexDirection: \"column\",\n                        height: \"100%\",\n                        width: \"100%\",\n                        gap: \"16px\",\n                    }}\n                >\n                    {title}\n                    {highlight}\n                    {buttons}\n                </div>\n            </div>\n        </div>\n    );\n};\n\nconst InfoIcon = (props: SVGProps<SVGSVGElement>) => (\n    <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        width={20}\n        height={20}\n        fill=\"none\"\n        {...props}\n    >\n        <path\n            fill=\"#0080FF\"\n            fillRule=\"evenodd\"\n            d=\"M10 20C4.477 20 0 15.523 0 10S4.477 0 10 0s10 4.477 10 10-4.477 10-10 10Zm0-15a1.25 1.25 0 1 0 0 2.5A1.25 1.25 0 0 0 10 5Zm0 10c.69 0 1.25-.56 1.25-1.25V10a1.25 1.25 0 1 0-2.5 0v3.75c0 .69.56 1.25 1.25 1.25Z\"\n            clipRule=\"evenodd\"\n        />\n    </svg>\n);\n\nconst OpenIcon = (props: SVGProps<SVGSVGElement>) => (\n    <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        width={16}\n        height={16}\n        fill=\"none\"\n        {...props}\n    >\n        <path\n            fill=\"currentColor\"\n            d=\"M5 2a1 1 0 0 1 0 2H4v8h8v-1a1 1 0 1 1 2 0v1a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h1Z\"\n        />\n        <path\n            fill=\"currentColor\"\n            d=\"M9 2a1 1 0 0 0 0 2h1.586L6.293 8.293a1 1 0 0 0 1.414 1.414L12 5.414V7a1 1 0 1 0 2 0V3a1 1 0 0 0-1-1H9Z\"\n        />\n    </svg>\n);\n\nconst CloseIcon = (props: SVGProps<SVGSVGElement>) => (\n    <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        width={32}\n        height={32}\n        fill=\"none\"\n        {...props}\n    >\n        <path\n            fill=\"#A6A6A6\"\n            fillRule=\"evenodd\"\n            d=\"M16 32C7.163 32 0 24.837 0 16S7.163 0 16 0s16 7.163 16 16-7.163 16-16 16Zm-2.586-21.414a2 2 0 1 0-2.828 2.828L13.172 16l-2.586 2.586a2 2 0 1 0 2.828 2.828L16 18.828l2.586 2.586a2 2 0 1 0 2.828-2.828L18.828 16l2.586-2.586a2 2 0 1 0-2.828-2.828L16 13.172l-2.586-2.586Z\"\n            clipRule=\"evenodd\"\n        />\n    </svg>\n);\n\nconst ClipboardIcon = (props: SVGProps<SVGSVGElement>) => (\n    <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        width={20}\n        height={20}\n        viewBox=\"0 0 24 24\"\n        fill=\"none\"\n        {...props}\n    >\n        <path\n            fill=\"currentColor\"\n            fillRule=\"evenodd\"\n            d=\"M8 5a3 3 0 0 0 3 3h2a3 3 0 0 0 3-3h1a2 2 0 0 1 2 2v11a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V7a2 2 0 0 1 2-2h1Zm0 7a1 1 0 0 1 1-1h6a1 1 0 1 1 0 2H9a1 1 0 0 1-1-1Zm1 3a1 1 0 1 0 0 2h4a1 1 0 1 0 0-2H9Z\"\n            clipRule=\"evenodd\"\n        />\n        <path fill=\"currentColor\" d=\"M13 4a1 1 0 1 1 0 2h-2a1 1 0 1 1 0-2h2Z\" />\n    </svg>\n);\n","import React from \"react\";\nimport { useDataProvider, useResource, BaseKey } from \"@refinedev/core\";\n\nimport { pickDataProvider, dataProviderFromResource } from \"../utilities\";\nimport { InferencerComponentProps } from \"../types\";\nimport { pickMeta } from \"../utilities/get-meta-props\";\n\n/**\n * This hook will handle the data fetching for the inferencer with `loading` and `initial` states.\n * Data provider functions will be used respectively for the `list`, `show` and `edit` types.\n */\nexport const useInferFetch = (\n    type: \"list\" | \"show\" | \"edit\" | \"create\",\n    resourceNameOrRouteName?: string,\n    idFromProps?: string | number,\n    meta?: InferencerComponentProps[\"meta\"],\n) => {\n    const {\n        resource,\n        id: idFromURL,\n        resources,\n    } = useResource(resourceNameOrRouteName);\n\n    const id = idFromProps ?? idFromURL;\n\n    const dataProvider = useDataProvider();\n\n    const [error, setError] = React.useState<string | undefined>(undefined);\n\n    const [data, setData] = React.useState<Record<string, unknown> | undefined>(\n        undefined,\n    );\n    const [datas, setDatas] = React.useState<\n        Array<Record<string, unknown>> | undefined\n    >(undefined);\n    const [initial, setInitial] = React.useState<boolean>(true);\n    const [loading, setLoading] = React.useState<boolean>(false);\n\n    const resolver = React.useCallback(\n        async (recordItemId: BaseKey | undefined) => {\n            const dataProviderName =\n                dataProviderFromResource(resource) ??\n                pickDataProvider(resource?.name, undefined, resources);\n            const dp = dataProvider(dataProviderName);\n\n            setLoading(true);\n            setError(undefined);\n\n            try {\n                if (type === \"list\" || type === \"create\") {\n                    if (resource) {\n                        const response = await dp.getList({\n                            resource: resource?.name,\n                            meta: pickMeta(\n                                resource?.identifier ?? resource?.name,\n                                meta,\n                                [\"getList\"],\n                            ),\n                        });\n                        const r = response.data?.[0];\n\n                        if (!r) {\n                            setError(\n                                `<p>No records/data found for resource \"${resource?.name}\".</p>\n                            <p>Please check your data provider and resource.</p>\n                            <p>For more info, please check the <a href=\"https://refine.dev/docs/packages/documentation/inferencer/\" target=\"_blank\">documentation</a>.</p>`,\n                            );\n                        }\n                        setData(r);\n                        setDatas(response.data);\n                        setTimeout(() => {\n                            setLoading(false);\n                        }, 500);\n                    }\n                }\n                if ((type === \"edit\" || type === \"show\") && recordItemId) {\n                    if (resource) {\n                        const response = await dp.getOne({\n                            resource: resource?.name,\n                            id: recordItemId,\n                            meta: pickMeta(\n                                resource?.identifier ?? resource?.name,\n                                meta,\n                                [\"getOne\"],\n                            ),\n                        });\n                        const r = response.data;\n                        if (!r) {\n                            setError(\n                                `<p>No records/data found for resource \"${resource?.name}\".</p>\n                            <p>Please check your data provider and resource.</p>\n                            <p>For more info, please check the <a href=\"https://refine.dev/docs/packages/documentation/inferencer/\" target=\"_blank\">documentation</a>.</p>`,\n                            );\n                        }\n                        setData(r);\n                        setTimeout(() => {\n                            setLoading(false);\n                        }, 500);\n                    }\n                }\n            } catch (error) {\n                console.warn(\n                    \"An error occured while fetching the resource data. Please check the error message below:\",\n                    error,\n                );\n                setError(\n                    `<p>Something went wrong while fetching the resource data.</p>\n                    <p>Please check your data provider and API for resource \"${resource?.name}\".</p>\n                    <p>For more info, please check the <a href=\"https://refine.dev/docs/packages/documentation/inferencer/\" target=\"_blank\">documentation</a>.</p>`,\n                );\n                setTimeout(() => {\n                    setLoading(false);\n                }, 500);\n            }\n        },\n        [type, dataProvider, resource, resources],\n    );\n\n    React.useEffect(() => {\n        setInitial(false);\n        if (!loading && !data) {\n            resolver(id);\n        }\n    }, [resolver, id]);\n\n    return {\n        data,\n        datas,\n        loading,\n        initial,\n        error,\n    };\n};\n","import React from \"react\";\nimport { useDataProvider } from \"@refinedev/core\";\n\nimport {\n    dataProviderFromResource,\n    removeRelationSuffix,\n    toPlural,\n    toSingular,\n} from \"../utilities\";\nimport {\n    FieldInferencer,\n    InferField,\n    InferencerComponentProps,\n    ResourceInferenceAttempt,\n} from \"../types\";\nimport { get } from \"lodash\";\nimport { pickMeta } from \"../utilities/get-meta-props\";\n\ntype UseRelationFetchProps = {\n    record?: Record<string, unknown>;\n    fields?: (InferField | null | false)[];\n    infer: FieldInferencer;\n    meta?: InferencerComponentProps[\"meta\"];\n};\n\nexport const useRelationFetch = ({\n    record,\n    fields,\n    infer,\n    meta,\n}: UseRelationFetchProps) => {\n    const dataProvider = useDataProvider();\n\n    const [updatedFields, setUpdatedFields] = React.useState<InferField[]>([]);\n\n    const [initial, setInitial] = React.useState(true);\n    const [loading, setLoading] = React.useState<boolean>(false);\n\n    const resolver = React.useCallback(\n        async (allFields: (InferField | false | null)[]) => {\n            console.groupCollapsed(\n                \"@refinedev/inferencer is trying to detect relations\",\n            );\n            const attempts: Array<ResourceInferenceAttempt> = [];\n            setLoading(true);\n            try {\n                const promises = allFields.map(async (field) => {\n                    if (field && (field.relation || field.canRelation)) {\n                        if (record) {\n                            if (field.relationInfer) {\n                                return field;\n                            }\n                            const dataProviderName = dataProviderFromResource(\n                                field.resource,\n                            );\n                            const dp = dataProvider(dataProviderName);\n\n                            const isMultiple = field.multiple;\n\n                            const requestId = Array.isArray(field.accessor)\n                                ? undefined\n                                : field.multiple\n                                ? (record[field.key] as Array<unknown>).map(\n                                      (el) => {\n                                          return field.accessor\n                                              ? get(el, field.accessor)\n                                              : el;\n                                      },\n                                  )[0]\n                                : field.accessor\n                                ? get(record[field.key], field.accessor)\n                                : record[field.key];\n\n                            if (requestId && field.resource) {\n                                try {\n                                    let record:\n                                        | Record<string, unknown>\n                                        | undefined = {};\n\n                                    if (isMultiple && dp.getMany) {\n                                        const { data } = await dp.getMany({\n                                            resource: field.resource.name,\n                                            ids: [requestId],\n                                            meta: pickMeta(\n                                                field.resource?.identifier ??\n                                                    field.resource?.name,\n                                                meta,\n                                                [\"getMany\"],\n                                            ),\n                                        });\n                                        record = data?.[0];\n                                    } else {\n                                        const { data } = await dp.getOne({\n                                            resource: field.resource.name,\n                                            id: requestId,\n                                            meta: pickMeta(\n                                                field.resource?.identifier ??\n                                                    field.resource?.name,\n                                                meta,\n                                                isMultiple\n                                                    ? [\"getMany\", \"getOne\"]\n                                                    : [\"getOne\"],\n                                            ),\n                                        });\n                                        record = data;\n                                    }\n\n                                    attempts.push({\n                                        status: \"success\",\n                                        resource: field.resource.name,\n                                        field: field.key,\n                                    });\n\n                                    const relationInfer = infer(\n                                        \"__\",\n                                        record,\n                                        {},\n                                        infer,\n                                    );\n\n                                    return {\n                                        ...field,\n                                        relationInfer,\n                                    };\n                                } catch (error) {\n                                    attempts.push({\n                                        status: \"error\",\n                                        resource: field.resource.name,\n                                        field: field.key,\n                                    });\n                                    return {\n                                        ...field,\n                                        relationInfer: null,\n                                    };\n                                }\n                            }\n\n                            if (requestId) {\n                                let responseData;\n                                let isPlural;\n\n                                try {\n                                    let record:\n                                        | Record<string, unknown>\n                                        | undefined = {};\n\n                                    if (isMultiple && dp.getMany) {\n                                        const { data } = await dp.getMany?.({\n                                            resource: toPlural(\n                                                removeRelationSuffix(field.key),\n                                            ),\n                                            ids: [requestId],\n                                            meta: pickMeta(\n                                                toPlural(\n                                                    removeRelationSuffix(\n                                                        field.key,\n                                                    ),\n                                                ),\n                                                meta,\n                                                [\"getMany\"],\n                                            ),\n                                        });\n                                        record = data?.[0];\n                                    } else {\n                                        const { data } = await dp.getOne({\n                                            resource: toPlural(\n                                                removeRelationSuffix(field.key),\n                                            ),\n                                            id: requestId,\n                                            meta: pickMeta(\n                                                toPlural(\n                                                    removeRelationSuffix(\n                                                        field.key,\n                                                    ),\n                                                ),\n                                                meta,\n                                                isMultiple\n                                                    ? [\"getMany\", \"getOne\"]\n                                                    : [\"getOne\"],\n                                            ),\n                                        });\n                                        record = data;\n                                    }\n\n                                    attempts.push({\n                                        status: \"success\",\n                                        resource: toPlural(\n                                            removeRelationSuffix(field.key),\n                                        ),\n                                        field: field.key,\n                                    });\n\n                                    responseData = record;\n                                    isPlural = true;\n                                } catch (error) {\n                                    attempts.push({\n                                        status: \"error\",\n                                        resource: toPlural(\n                                            removeRelationSuffix(field.key),\n                                        ),\n                                        field: field.key,\n                                    });\n\n                                    let record:\n                                        | Record<string, unknown>\n                                        | undefined = {};\n\n                                    try {\n                                        if (isMultiple && dp.getMany) {\n                                            const { data } = await dp.getMany({\n                                                resource: toSingular(\n                                                    removeRelationSuffix(\n                                                        field.key,\n                                                    ),\n                                                ),\n                                                meta: pickMeta(\n                                                    toSingular(\n                                                        removeRelationSuffix(\n                                                            field.key,\n                                                        ),\n                                                    ),\n                                                    meta,\n                                                    [\"getMany\"],\n                                                ),\n                                                ids: [requestId],\n                                            });\n                                            record = data?.[0];\n                                        } else {\n                                            const { data } = await dp.getOne({\n                                                resource: toSingular(\n                                                    removeRelationSuffix(\n                                                        field.key,\n                                                    ),\n                                                ),\n                                                meta: pickMeta(\n                                                    toSingular(\n                                                        removeRelationSuffix(\n                                                            field.key,\n                                                        ),\n                                                    ),\n                                                    meta,\n                                                    isMultiple\n                                                        ? [\"getMany\", \"getOne\"]\n                                                        : [\"getOne\"],\n                                                ),\n                                                id: requestId,\n                                            });\n                                            record = data;\n                                        }\n\n                                        attempts.push({\n                                            status: \"success\",\n                                            resource: toSingular(\n                                                removeRelationSuffix(field.key),\n                                            ),\n                                            field: field.key,\n                                        });\n\n                                        responseData = record;\n                                        isPlural = false;\n                                    } catch (error) {\n                                        attempts.push({\n                                            status: \"error\",\n                                            resource: toSingular(\n                                                removeRelationSuffix(field.key),\n                                            ),\n                                            field: field.key,\n                                        });\n\n                                        return {\n                                            ...field,\n                                            relationInfer: null,\n                                        };\n                                    }\n                                }\n\n                                const relationInfer = infer(\n                                    \"__\",\n                                    responseData,\n                                    {},\n                                    infer,\n                                );\n\n                                const resourceNameWithoutRelationSuffix =\n                                    removeRelationSuffix(field.key);\n\n                                return {\n                                    ...field,\n                                    relation: true,\n                                    type: \"relation\",\n                                    resource: {\n                                        name: isPlural\n                                            ? toPlural(\n                                                  resourceNameWithoutRelationSuffix,\n                                              )\n                                            : toSingular(\n                                                  resourceNameWithoutRelationSuffix,\n                                              ),\n                                    },\n                                    fieldable: false,\n                                    canRelation: undefined,\n                                    relationInfer,\n                                };\n                            }\n\n                            return {\n                                ...field,\n                                relationInfer: null,\n                            };\n                        }\n                    }\n                    return field;\n                });\n\n                const results = await Promise.all(promises);\n\n                setUpdatedFields(results.filter((el) => el) as InferField[]);\n                setTimeout(() => {\n                    setLoading(false);\n                }, 500);\n            } catch (error) {\n                setTimeout(() => {\n                    setLoading(false);\n                }, 500);\n            }\n            setTimeout(() => {\n                console.log(\n                    `Tried to detect relations with ${\n                        attempts.length\n                    } attempts and succeeded with ${\n                        attempts.filter((el) => el.status === \"success\").length\n                    } attempts.`,\n                );\n                console.groupEnd();\n\n                console.info(\n                    `@refinedev/inferencer may send multiple requests to your API for nonexistent resources when trying to detect relations. To learn more about how the inferencer works, visit https://s.refine.dev/how-inferencer-works`,\n                );\n            }, 500);\n        },\n        [dataProvider, record],\n    );\n\n    React.useEffect(() => {\n        setInitial(false);\n        if (\n            !loading &&\n            fields &&\n            fields.length > 0 &&\n            updatedFields.length === 0\n        ) {\n            resolver(fields);\n        }\n    }, [resolver, loading, fields, resolver]);\n\n    return {\n        fields: updatedFields,\n        loading,\n        initial,\n    };\n};\n","import React from \"react\";\nimport { Alert, Row, Col } from \"antd\";\n\nimport { CreateInferencerConfig } from \"../../types\";\n\nexport const ErrorComponent: CreateInferencerConfig[\"errorComponent\"] = ({\n    error,\n}) => {\n    if (error) {\n        return (\n            <Row justify=\"center\" align=\"middle\" style={{ minHeight: \"200px\" }}>\n                <Col>\n                    <Alert\n                        message=\"Error\"\n                        description={\n                            <div\n                                dangerouslySetInnerHTML={{\n                                    __html: error ?? \"\",\n                                }}\n                            />\n                        }\n                        type=\"error\"\n                        showIcon\n                    />\n                </Col>\n            </Row>\n        );\n    }\n\n    return null;\n};\n","import React from \"react\";\nimport { Spin, Row, Col } from \"antd\";\n\nimport { CreateInferencerConfig } from \"../../types\";\n\nexport const LoadingComponent: CreateInferencerConfig[\"loadingComponent\"] =\n    () => {\n        return (\n            <Row justify=\"center\" align=\"middle\" style={{ minHeight: \"300px\" }}>\n                <Col>\n                    <Spin size=\"large\" />\n                </Col>\n            </Row>\n        );\n    };\n","import {\n    useTable,\n    List,\n    TagField,\n    ImageField,\n    EmailField,\n    UrlField,\n    BooleanField,\n    DateField,\n    MarkdownField,\n    EditButton,\n    ShowButton,\n    DeleteButton,\n} from \"@refinedev/antd\";\nimport { Table, Space } from \"antd\";\n\n// import { createInferencer } from \"../../create-inferencer\";\nimport { createSchemaInferencer } from '../../../from-scheme/create-schema-inferencer';\nimport {\n    jsx,\n    componentName,\n    translatePrettyString,\n    accessor,\n    printImports,\n    noOp,\n    getVariableName,\n    getMetaProps,\n} from \"../../../utilities\";\n\nimport { ErrorComponent } from \"../error\";\nimport { LoadingComponent } from \"../loading\";\nimport { SharedCodeViewer } from \"../../../components/shared-code-viewer\";\n\nimport {\n    InferField,\n    ImportElement,\n    RendererContext,\n    SchemaInferencerResultComponent,\n} from '../../../from-scheme/types';\n\n/**\n * a renderer function for list page in Ant Design\n * @internal used internally from inferencer components\n */\nexport const renderer = ({\n     resource,\n     fields,\n     meta,\n     isCustomPage,\n     i18n,\n}: RendererContext) => {\n    const COMPONENT_NAME = componentName(\n        resource.label ?? resource.name,\n        \"list\",\n    );\n    const recordName = \"tableProps?.dataSource\";\n    const imports: Array<ImportElement> = [\n        [\"React\", \"react\", true],\n        [\"IResourceComponentsProps\", \"@refinedev/core\"],\n        [\"BaseRecord\", \"@refinedev/core\"],\n        [\"useTable\", \"@refinedev/antd\"],\n        [\"List\", \"@refinedev/antd\"],\n        [\"Table\", \"antd\"],\n        [\"Space\", \"antd\"],\n    ];\n\n    if (i18n) {\n        imports.push([\"useTranslate\", \"@refinedev/core\"]);\n    }\n\n    const relationFields: (InferField | null)[] = fields.filter(\n        (field) => field?.relation && !field?.fieldable && field?.resource,\n    );\n\n    const relationHooksCode = relationFields\n        .filter(Boolean)\n        .map((field) => {\n            if (field?.relation && !field.fieldable && field.resource) {\n                imports.push([\"useMany\", \"@refinedev/core\"]);\n\n                let idsString = \"\";\n\n                if (field.multiple) {\n                    idsString = `[].concat(...(${recordName}?.map((item) => ${accessor(\n                        \"item\",\n                        field.key,\n                        field.accessor,\n                        false,\n                    )}) ?? []))`;\n                } else {\n                    idsString = `${recordName}?.map((item) => ${accessor(\n                        \"item\",\n                        field.key,\n                        field.accessor,\n                        false,\n                    )}) ?? []`;\n                }\n\n                return `\n                const { data: ${getVariableName(\n                    field.key,\n                    \"Data\",\n                )}, isLoading: ${getVariableName(field.key, \"IsLoading\")} } =\n                useMany({\n                    resource: \"${field.resource.name}\",\n                    ids: ${idsString},\n                    queryOptions: {\n                        enabled: !!${recordName},\n                    },\n                    ${getMetaProps(\n                    field?.resource?.identifier ?? field?.resource?.name,\n                    meta,\n                    \"getMany\",\n                )}\n                });\n                `;\n            }\n            return undefined;\n        })\n        .filter(Boolean);\n\n    const renderRelationFields = (field: InferField) => {\n        if (field.relation && field.resource) {\n            const validVariableName = getVariableName(field.key, \"Data\");\n            const variableName = `${validVariableName}?.data`;\n            const variableIsLoading = getVariableName(field.key, \"IsLoading\");\n\n            if (Array.isArray(field.accessor)) {\n                // not handled - not possible case\n                return undefined;\n            }\n\n            const loadingCondition = `${variableIsLoading} ? <>Loading...</> : `;\n\n            const dataIndex = field.multiple\n                ? `dataIndex=\"${field.key}\"`\n                : `dataIndex={[\"${field.key}\", ${\n                    field.accessor ? `\"${field.accessor}\"` : \"\"\n                }]}`;\n\n            const title = `title=${translatePrettyString({\n                resource,\n                field,\n                i18n,\n            })}`;\n\n            let render = \"\";\n\n            // if multiple, then map it with tagfield\n            // if not, then just show the value\n\n            if (field.multiple) {\n                imports.push([\"TagField\", \"@refinedev/antd\"]);\n                let val = \"item\";\n\n                if (field?.relationInfer) {\n                    const valSingle = `${variableName}?.find((resourceItems) => resourceItems.id === ${accessor(\n                        \"item\",\n                        undefined,\n                        field.accessor,\n                    )})`;\n                    const valViewableSingle = accessor(\n                        valSingle,\n                        undefined,\n                        field?.relationInfer?.accessor,\n                    );\n                    val = valViewableSingle;\n                }\n\n                render = `render={(value: any[]) => ${loadingCondition} (\n                    <>\n                        {${accessor(\n                    \"value\",\n                    undefined,\n                    // field.accessor,\n                )}?.map((item, index) => (\n                            <TagField key={index} value={${val}} />\n                        ))}\n                    </>\n                )}`;\n            } else {\n                if (field?.relationInfer) {\n                    const valSingle = `${variableName}?.find((item) => item.id === value)`;\n                    const valViewableSingle = accessor(\n                        valSingle,\n                        undefined,\n                        field?.relationInfer?.accessor,\n                    );\n\n                    render = `render={(value) => ${loadingCondition} ${valViewableSingle}}`;\n                } else {\n                    render = \"\";\n                }\n            }\n\n            return jsx`<Table.Column ${dataIndex} ${title} ${render} />`;\n        }\n        return undefined;\n    };\n\n    const imageFields = (field: InferField) => {\n        if (field.type === \"image\") {\n            imports.push([\"ImageField\", \"@refinedev/antd\"]);\n\n            const dataIndex =\n                Array.isArray(field.accessor) || field.multiple\n                    ? `dataIndex=\"${field.key}\"`\n                    : `dataIndex={[\"${field.key}\", ${\n                        field.accessor ? `\"${field.accessor}\"` : \"\"\n                    }]}`;\n\n            const title = `title=${translatePrettyString({\n                resource,\n                field,\n                i18n,\n            })}`;\n\n            let render = jsx`render={(value: any) => <ImageField style={{ maxWidth: \"100px\" }} value={${accessor(\n                \"value\",\n                undefined,\n                Array.isArray(field.accessor) ? field.accessor : undefined,\n                \" + \",\n            )}} />}`;\n\n            if (field.multiple) {\n                const val = accessor(\"item\", undefined, field.accessor, \" + \");\n                render = jsx`render={(value: any[]) => (<>{value?.map((item, index) => (\n                    <ImageField style={{ maxWidth: \"100px\" }} value={${val}} key={index} />\n                ))}</>)}`;\n            }\n\n            return jsx`<Table.Column ${dataIndex} ${title} ${render} />`;\n        }\n        return undefined;\n    };\n\n    const emailFields = (field: InferField) => {\n        if (field.type === \"email\") {\n            imports.push(\n                [\"TagField\", \"@refinedev/antd\"],\n                [\"EmailField\", \"@refinedev/antd\"],\n            );\n            const dataIndex =\n                Array.isArray(field.accessor) || field.multiple\n                    ? `dataIndex=\"${field.key}\"`\n                    : `dataIndex={[\"${field.key}\", ${\n                        field.accessor ? `\"${field.accessor}\"` : \"\"\n                    }]}`;\n\n            const title = `title=${translatePrettyString({\n                resource,\n                field,\n                i18n,\n            })}`;\n\n            let render = jsx`render={(value: any) => <EmailField value={${accessor(\n                \"value\",\n                undefined,\n                Array.isArray(field.accessor) ? field.accessor : undefined,\n                ' + \" \" + ',\n            )}} />}`;\n\n            if (field.multiple) {\n                const val = accessor(\n                    \"item\",\n                    undefined,\n                    field.accessor,\n                    ' + \" \" + ',\n                );\n                render = jsx`render={(value: any[]) => (<>{value?.map((item, index) => (\n                    <TagField value={${val}} key={index} />\n                ))}</>)}`;\n            }\n\n            return jsx`<Table.Column ${dataIndex} ${title} ${render} />`;\n        }\n        return undefined;\n    };\n\n    const urlFields = (field: InferField) => {\n        if (field.type === \"url\") {\n            imports.push(\n                [\"UrlField\", \"@refinedev/antd\"],\n                [\"TagField\", \"@refinedev/antd\"],\n            );\n\n            const dataIndex =\n                Array.isArray(field.accessor) || field.multiple\n                    ? `dataIndex=\"${field.key}\"`\n                    : `dataIndex={[\"${field.key}\", ${\n                        field.accessor ? `\"${field.accessor}\"` : \"\"\n                    }]}`;\n\n            const title = `title=${translatePrettyString({\n                resource,\n                field,\n                i18n,\n            })}`;\n\n            let render = jsx`render={(value: any) => <UrlField value={${accessor(\n                \"value\",\n                undefined,\n                Array.isArray(field.accessor) ? field.accessor : undefined,\n                \" + \",\n            )}} />}`;\n\n            if (field.multiple) {\n                const val = accessor(\"item\", undefined, field.accessor, \" + \");\n                render = jsx`render={(value: any[]) => (<>{value?.map((item, index) => (\n                    <TagField value={${val}} key={index} />\n                ))}</>)}`;\n            }\n\n            return jsx`<Table.Column ${dataIndex} ${title} ${render} />`;\n        }\n        return undefined;\n    };\n\n    const booleanFields = (field: InferField) => {\n        if (field?.type === \"boolean\") {\n            imports.push([\"BooleanField\", \"@refinedev/antd\"]);\n\n            const dataIndex =\n                Array.isArray(field.accessor) || field.multiple\n                    ? `dataIndex=\"${field.key}\"`\n                    : `dataIndex={[\"${field.key}\", ${\n                        field.accessor ? `\"${field.accessor}\"` : \"\"\n                    }]}`;\n\n            const title = `title=${translatePrettyString({\n                resource,\n                field,\n                i18n,\n            })}`;\n\n            let render = jsx`render={(value: any) => <BooleanField value={${accessor(\n                \"value\",\n                undefined,\n                Array.isArray(field.accessor) ? field.accessor : undefined,\n                \" && \",\n            )}} />}`;\n\n            if (field.multiple) {\n                const val = accessor(\"item\", undefined, field.accessor, \" && \");\n                render = jsx`render={(value: any[]) => (<>{value?.map((item, index) => (\n                    <BooleanField value={${val}} key={index} />\n                ))}</>)}`;\n            }\n\n            return jsx`<Table.Column ${dataIndex} ${title} ${render} />`;\n        }\n\n        return undefined;\n    };\n\n    const dateFields = (field: InferField) => {\n        if (field.type === \"date\") {\n            imports.push([\"DateField\", \"@refinedev/antd\"]);\n\n            const dataIndex =\n                Array.isArray(field.accessor) || field.multiple\n                    ? `dataIndex=\"${field.key}\"`\n                    : `dataIndex={[\"${field.key}\", ${\n                        field.accessor ? `\"${field.accessor}\"` : \"\"\n                    }]}`;\n\n            const title = `title=${translatePrettyString({\n                resource,\n                field,\n                i18n,\n            })}`;\n\n            let render = jsx`render={(value: any) => <DateField value={${accessor(\n                \"value\",\n                undefined,\n                Array.isArray(field.accessor) ? field.accessor : undefined,\n                ' + \" \" + ',\n            )}} />}`;\n\n            if (field.multiple) {\n                const val = accessor(\n                    \"item\",\n                    undefined,\n                    field.accessor,\n                    ' + \" \" + ',\n                );\n                render = jsx`render={(value: any[]) => (<>{value?.map((item, index) => (\n                    <DateField value={${val}} key={index} />\n                ))}</>)}`;\n            }\n\n            return jsx`<Table.Column ${dataIndex} ${title} ${render} />`;\n        }\n        return undefined;\n    };\n\n    const richtextFields = (field: InferField) => {\n        if (field?.type === \"richtext\") {\n            imports.push([\"MarkdownField\", \"@refinedev/antd\"]);\n\n            const dataIndex =\n                Array.isArray(field.accessor) || field.multiple\n                    ? `dataIndex=\"${field.key}\"`\n                    : field.accessor\n                        ? `dataIndex={[\"${field.key}\", \"${field.accessor}\"]}`\n                        : `dataIndex=\"${field.key}\"`;\n\n            const title = `title=${translatePrettyString({\n                resource,\n                field,\n                i18n,\n            })}`;\n\n            let render = jsx`render={(value: any) => <MarkdownField value={(${accessor(\n                \"value\",\n                undefined,\n                Array.isArray(field.accessor) ? field.accessor : undefined,\n            )}).slice(0, 80) + \"...\"} />}`;\n\n            if (field.multiple) {\n                const val = accessor(\n                    \"item\",\n                    undefined,\n                    field.accessor,\n                    ' + \" \" + ',\n                );\n                render = jsx`render={(value: any[]) => (<>{value?.map((item, index) => (\n                    <MarkdownField value={(${val})?.slice(0, 80) + \"...\"} key={index} />\n                ))}</>)}`;\n            }\n\n            return jsx`<Table.Column ${dataIndex} ${title} ${render} />`;\n        }\n\n        return undefined;\n    };\n\n    const basicFields = (field: InferField) => {\n        if (field && (field.type === \"text\" || field.type === \"number\")) {\n            const dataIndex =\n                field.accessor &&\n                !Array.isArray(field.accessor) &&\n                !field.multiple\n                    ? `dataIndex={[\"${field.key}\", \"${field.accessor}\"]}`\n                    : `dataIndex=\"${field.key}\"`;\n\n            const title = `title=${translatePrettyString({\n                resource,\n                field,\n                i18n,\n            })}`;\n            let render = \"\";\n\n            if (field.multiple) {\n                imports.push([\"TagField\", \"@refinedev/antd\"]);\n\n                const val = accessor(\n                    \"item\",\n                    undefined,\n                    field.accessor,\n                    ' + \" \" + ',\n                );\n                render = `render={(value: any[]) => (<>{value?.map((item) => (\n                    <TagField value={${val}} key={${val}} />\n                ))}</>)}`;\n            }\n            if (!field.multiple && Array.isArray(field.accessor)) {\n                render = `render={(value: any) => (<>{${accessor(\n                    \"value\",\n                    undefined,\n                    field.accessor,\n                )}}</>)}`;\n            }\n\n            return `<Table.Column ${dataIndex} ${title} ${render} />`;\n        }\n        return undefined;\n    };\n\n    const {\n        canEdit,\n        canShow,\n        canDelete: canDeleteProp,\n        meta: resourceMeta,\n    } = resource ?? {};\n\n    const canDelete = canDeleteProp || resourceMeta?.canDelete;\n\n    if (canEdit) {\n        imports.push([\"EditButton\", \"@refinedev/antd\"]);\n    }\n    if (canShow) {\n        imports.push([\"ShowButton\", \"@refinedev/antd\"]);\n    }\n    if (canDelete) {\n        imports.push([\"DeleteButton\", \"@refinedev/antd\"]);\n    }\n\n    const actionColumnTitle = i18n\n        ? `{translate(\"table.actions\")}`\n        : `\"Actions\"`;\n\n    const actionButtons =\n        canEdit || canShow || canDelete\n            ? jsx`\n            <Table.Column\n                title=${actionColumnTitle}\n                dataIndex=\"actions\"\n                render={(_, record: BaseRecord) => (\n                    <Space>\n                    ${\n                canEdit\n                    ? jsx`\n                        <EditButton\n                            hideText\n                            size=\"small\"\n                            recordItemId={record.id}\n                        />\n                        `\n                    : \"\"\n            }\n                    ${\n                canShow\n                    ? jsx`\n                        <ShowButton\n                            hideText\n                            size=\"small\"\n                            recordItemId={record.id}\n                        />\n                        `\n                    : \"\"\n            }\n                    ${\n                canDelete\n                    ? jsx`\n                        <DeleteButton\n                            hideText\n                            size=\"small\"\n                            recordItemId={record.id}\n                        />\n                        `\n                    : \"\"\n            }\n                    </Space>\n                )}\n            />\n        `\n            : \"\";\n\n    const renderedFields: Array<string | undefined> = fields.map((field) => {\n        switch (field?.type) {\n            case \"text\":\n            case \"number\":\n                return basicFields(field);\n            case \"richtext\":\n                return richtextFields(field);\n            case \"email\":\n                return emailFields(field);\n            case \"image\":\n                return imageFields(field);\n            case \"date\":\n                return dateFields(field);\n            case \"boolean\":\n                return booleanFields(field);\n            case \"url\":\n                return urlFields(field);\n            case \"relation\":\n                return renderRelationFields(field);\n            default:\n                return undefined;\n        }\n    });\n\n    noOp(imports);\n\n    const useTranslateHook = i18n && `const translate = useTranslate();`;\n\n    return jsx`\n        ${printImports(imports)}\n\n        export const ${COMPONENT_NAME}: React.FC<IResourceComponentsProps> = () => {\n            ${useTranslateHook}\n            const { tableProps } = useTable({\n                syncWithLocation: true,\n                ${isCustomPage ? ` resource: \"${resource.name}\",` : \"\"}\n                ${getMetaProps(\n        resource?.identifier ?? resource?.name,\n        meta,\n        \"getList\",\n    )}\n            });\n\n            ${relationHooksCode}\n\n            return (\n                <List>\n                    <Table {...tableProps} rowKey=\"id\">\n                        ${renderedFields.join(\"\\r\\n\")}\n                        ${actionButtons}\n                    </Table>\n                </List>\n            );\n        };\n    `;\n};\n\n/**\n * @experimental This is an experimental component\n */\nexport const ListInferencer: SchemaInferencerResultComponent = createSchemaInferencer({\n    type: \"list\",\n    additionalScope: [\n        [\n            \"@refinedev/antd\",\n            \"RefineAntd\",\n            {\n                useTable,\n                List,\n                TagField,\n                ImageField,\n                EmailField,\n                UrlField,\n                BooleanField,\n                DateField,\n                MarkdownField,\n                EditButton,\n                ShowButton,\n                DeleteButton,\n            },\n        ],\n        [\"antd\", \"AntdPackage\", { Table, Space }],\n    ],\n    codeViewerComponent: SharedCodeViewer,\n    loadingComponent: LoadingComponent,\n    errorComponent: ErrorComponent,\n    renderer,\n});\n","import { cloneDeep, isEmpty, merge, set } from 'lodash';\nimport scheme from './scheme';\n\n//@ts-ignore\nfunction traverseAndFlatten(currentNode, target, flattenedKey) {\n\tfor (var key in currentNode) {\n\t\tif (currentNode.hasOwnProperty(key)) {\n\t\t\tvar newKey;\n\t\t\tif (flattenedKey === undefined) {\n\t\t\t\tnewKey = key;\n\t\t\t} else {\n\t\t\t\tnewKey = flattenedKey + '.' + key;\n\t\t\t}\n\n\t\t\tvar value = currentNode[key];\n\t\t\tif (typeof value === \"object\") {\n\t\t\t\ttraverseAndFlatten(value, target, newKey);\n\t\t\t} else {\n\t\t\t\ttarget[newKey] = value;\n\t\t\t}\n\t\t}\n\t}\n}\n\n//@ts-ignore\nfunction flatten(obj) {\n\tconst flattenedObject = {};\n\t//@ts-ignore\n\ttraverseAndFlatten(obj, flattenedObject);\n\treturn flattenedObject;\n}\n\nconst isSchema = (value: unknown): value is string => typeof value === 'string' ? value.startsWith('#/components/schemas/') : false;\n\ntype InferencerType = 'create' | 'list' | 'show' | 'edit';\n\ninterface ResourceSchema {\n    properties: Record<string, any>;\n    required: string[];\n    type: 'object';\n}\n\ninterface CrudSchemas {\n    [k: string]: Record<'request' | 'response', ResourceSchema | undefined>;\n    create: Record<'request' | 'response', ResourceSchema | undefined>;\n    edit: Record<'request' | 'response', ResourceSchema | undefined>;\n    show: Record<'request' | 'response', ResourceSchema | undefined>;\n}\n\nconst operationKeys = [['get', 'show'], ['post', 'create'], ['put', 'edit']];\n\nconst getCrudSchemas = (resourceSchema: any): CrudSchemas => {\n    const crudSchemas: CrudSchemas = {\n        create: {\n            request: undefined,\n            response: undefined,\n        },\n        edit: {\n            request: undefined,\n            response: undefined,\n        },\n        show: {\n            request: undefined,\n            response: undefined,\n        },\n    };\n\n    operationKeys.forEach(([operationKey, crudKey]) => {\n        if (operationKey in resourceSchema) {\n            const flattenSchema = flatten(resourceSchema[operationKey]);\n\n            const requestRef = Object.entries(flattenSchema)\n                .find(([key, value]) => key.includes('requestBody.content') && isSchema(value)) as [string, string] | undefined;\n\n            if (requestRef) {\n                const requestRefName = requestRef[1].split('/').at(-1)!;\n                set(crudSchemas, `${crudKey}.request`, cloneDeep<ResourceSchema>((scheme.components.schemas as any)[requestRefName]));\n            }\n\n            const responseRef = Object.entries(flattenSchema)\n                .find(([key, value]) => key.includes('responses') && isSchema(value)) as [string, string] | undefined;\n\n            if (responseRef) {\n                const responseRefName = responseRef[1].split('/').at(-1)!;\n                set(crudSchemas, `${crudKey}.response`, cloneDeep<ResourceSchema>((scheme.components.schemas as any)[responseRefName]));\n            }\n        }\n    });\n\n    return crudSchemas;\n};\n\nexport const getSchemaByType = (name: string, type: InferencerType): CrudSchemas[InferencerType] => {\n    const crudSchemas = {} as CrudSchemas;\n\n    Object.keys(scheme.paths)\n        .filter((path) => path.includes(name))\n        .forEach((path) => {\n            // @ts-ignore\n            const result = getCrudSchemas(scheme.paths[path]);\n            merge(crudSchemas, result);\n            crudSchemas.list = result.show;\n        });\n\n    console.log('crudSchemas: ', crudSchemas);\n\n    console.groupEnd();\n\n    return crudSchemas[type];\n};\n","export default {\n\t\"openapi\": \"3.0.0\",\n\t\"paths\": {\n\t\t\"/api/platform/v1/auth/signup\": {\n\t\t\t\"post\": {\n\t\t\t\t\"operationId\": \"AuthController_signUp\",\n\t\t\t\t\"parameters\": [],\n\t\t\t\t\"requestBody\": {\n\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\"content\": {\n\t\t\t\t\t\t\"application/json\": {\n\t\t\t\t\t\t\t\"schema\": {\n\t\t\t\t\t\t\t\t\"$ref\": \"#/components/schemas/SignUpByEmailRequest\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"responses\": {\n\t\t\t\t\t\"201\": {\n\t\t\t\t\t\t\"description\": \"\",\n\t\t\t\t\t\t\"content\": {\n\t\t\t\t\t\t\t\"application/json\": {\n\t\t\t\t\t\t\t\t\"schema\": {\n\t\t\t\t\t\t\t\t\t\"$ref\": \"#/components/schemas/SignUpByEmailResponseDTO\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t\"409\": {\n\t\t\t\t\t\t\"description\": \"Appears when user with such email already exists\",\n\t\t\t\t\t\t\"content\": {\n\t\t\t\t\t\t\t\"application/json\": {\n\t\t\t\t\t\t\t\t\"schema\": {\n\t\t\t\t\t\t\t\t\t\"allOf\": [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"$ref\": \"#/components/schemas/ErrorResponse\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"properties\": {\n\t\t\t\t\t\t\t\t\t\t\t\t\"status\": {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"type\": \"number\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"default\": 409\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"tags\": [\n\t\t\t\t\t\"Auth\"\n\t\t\t\t]\n\t\t\t}\n\t\t},\n\t\t\"/api/platform/v1/auth/tenant-signup\": {\n\t\t\t\"post\": {\n\t\t\t\t\"operationId\": \"AuthController_signUpWithTenantCreation\",\n\t\t\t\t\"parameters\": [],\n\t\t\t\t\"requestBody\": {\n\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\"content\": {\n\t\t\t\t\t\t\"application/json\": {\n\t\t\t\t\t\t\t\"schema\": {\n\t\t\t\t\t\t\t\t\"$ref\": \"#/components/schemas/SignUpByEmailWithTenantCreationRequest\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"responses\": {\n\t\t\t\t\t\"201\": {\n\t\t\t\t\t\t\"description\": \"\",\n\t\t\t\t\t\t\"content\": {\n\t\t\t\t\t\t\t\"application/json\": {\n\t\t\t\t\t\t\t\t\"schema\": {\n\t\t\t\t\t\t\t\t\t\"$ref\": \"#/components/schemas/SignUpByEmailResponseDTO\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t\"409\": {\n\t\t\t\t\t\t\"description\": \"Appears when user with such email already exists\",\n\t\t\t\t\t\t\"content\": {\n\t\t\t\t\t\t\t\"application/json\": {\n\t\t\t\t\t\t\t\t\"schema\": {\n\t\t\t\t\t\t\t\t\t\"allOf\": [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"$ref\": \"#/components/schemas/ErrorResponse\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"properties\": {\n\t\t\t\t\t\t\t\t\t\t\t\t\"status\": {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"type\": \"number\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"default\": 409\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"tags\": [\n\t\t\t\t\t\"Auth\"\n\t\t\t\t]\n\t\t\t}\n\t\t},\n\t\t\"/api/platform/v1/auth/approve-signup\": {\n\t\t\t\"post\": {\n\t\t\t\t\"operationId\": \"AuthController_approveSignup\",\n\t\t\t\t\"summary\": \"\",\n\t\t\t\t\"description\": \"or you can respond with some message and let user to login\\n    default behavior is to force user to login and make sure his password is correct\",\n\t\t\t\t\"parameters\": [],\n\t\t\t\t\"requestBody\": {\n\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\"content\": {\n\t\t\t\t\t\t\"application/json\": {\n\t\t\t\t\t\t\t\"schema\": {\n\t\t\t\t\t\t\t\t\"$ref\": \"#/components/schemas/ApproveSignUpRequest\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"responses\": {\n\t\t\t\t\t\"200\": {\n\t\t\t\t\t\t\"description\": \"\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"tags\": [\n\t\t\t\t\t\"Auth\"\n\t\t\t\t]\n\t\t\t}\n\t\t},\n\t\t\"/api/platform/v1/auth/signin\": {\n\t\t\t\"post\": {\n\t\t\t\t\"operationId\": \"AuthController_signIn\",\n\t\t\t\t\"parameters\": [],\n\t\t\t\t\"requestBody\": {\n\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\"content\": {\n\t\t\t\t\t\t\"application/json\": {\n\t\t\t\t\t\t\t\"schema\": {\n\t\t\t\t\t\t\t\t\"$ref\": \"#/components/schemas/SignInRequest\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"responses\": {\n\t\t\t\t\t\"200\": {\n\t\t\t\t\t\t\"description\": \"\",\n\t\t\t\t\t\t\"content\": {\n\t\t\t\t\t\t\t\"application/json\": {\n\t\t\t\t\t\t\t\t\"schema\": {\n\t\t\t\t\t\t\t\t\t\"$ref\": \"#/components/schemas/SignInResponseDTO\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"tags\": [\n\t\t\t\t\t\"Auth\"\n\t\t\t\t]\n\t\t\t}\n\t\t},\n\t\t\"/api/platform/v1/auth/sso/saml/login\": {\n\t\t\t\"post\": {\n\t\t\t\t\"operationId\": \"AuthController_samlLogin\",\n\t\t\t\t\"parameters\": [],\n\t\t\t\t\"requestBody\": {\n\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\"content\": {\n\t\t\t\t\t\t\"application/json\": {\n\t\t\t\t\t\t\t\"schema\": {\n\t\t\t\t\t\t\t\t\"$ref\": \"#/components/schemas/InitiateSamlLoginRequest\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"responses\": {\n\t\t\t\t\t\"200\": {\n\t\t\t\t\t\t\"description\": \"\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"tags\": [\n\t\t\t\t\t\"Auth\"\n\t\t\t\t]\n\t\t\t}\n\t\t},\n\t\t\"/api/platform/v1/auth/sso/saml/ac\": {\n\t\t\t\"post\": {\n\t\t\t\t\"operationId\": \"AuthController_samlAcknowledge\",\n\t\t\t\t\"parameters\": [],\n\t\t\t\t\"responses\": {\n\t\t\t\t\t\"200\": {\n\t\t\t\t\t\t\"description\": \"\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"tags\": [\n\t\t\t\t\t\"Auth\"\n\t\t\t\t]\n\t\t\t}\n\t\t},\n\t\t\"/api/platform/v1/auth/refresh-access-token\": {\n\t\t\t\"post\": {\n\t\t\t\t\"operationId\": \"AuthController_refreshAccessToken\",\n\t\t\t\t\"parameters\": [],\n\t\t\t\t\"responses\": {\n\t\t\t\t\t\"200\": {\n\t\t\t\t\t\t\"description\": \"\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"tags\": [\n\t\t\t\t\t\"Auth\"\n\t\t\t\t]\n\t\t\t}\n\t\t},\n\t\t\"/api/platform/v1/auth/saml/sso/metadata\": {\n\t\t\t\"get\": {\n\t\t\t\t\"operationId\": \"SamlController_samlMetadata\",\n\t\t\t\t\"parameters\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"name\": \"samlConfigurationId\",\n\t\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\t\"in\": \"query\",\n\t\t\t\t\t\t\"schema\": {\n\t\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"name\": \"tenantId\",\n\t\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\t\"in\": \"query\",\n\t\t\t\t\t\t\"schema\": {\n\t\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"responses\": {\n\t\t\t\t\t\"200\": {\n\t\t\t\t\t\t\"description\": \"\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"tags\": [\n\t\t\t\t\t\"Auth\"\n\t\t\t\t]\n\t\t\t}\n\t\t},\n\t\t\"/api/platform/v1/roles\": {\n\t\t\t\"get\": {\n\t\t\t\t\"operationId\": \"RolesController_findAll\",\n\t\t\t\t\"parameters\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"name\": \"page\",\n\t\t\t\t\t\t\"required\": false,\n\t\t\t\t\t\t\"in\": \"query\",\n\t\t\t\t\t\t\"description\": \"Page number to retrieve.If you provide invalid value the default page number will applied\\n        <p>\\n             <b>Example: </b> 1\\n          </p>\\n        <p>\\n             <b>Default Value: </b> 1\\n          </p>\\n        \",\n\t\t\t\t\t\t\"schema\": {\n\t\t\t\t\t\t\t\"type\": \"number\"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"name\": \"limit\",\n\t\t\t\t\t\t\"required\": false,\n\t\t\t\t\t\t\"in\": \"query\",\n\t\t\t\t\t\t\"description\": \"Number of records per page.\\n      <p>\\n             <b>Example: </b> 20\\n          </p>\\n      <p>\\n             <b>Default Value: </b> 50\\n          </p>\\n      <p>\\n             <b>Max Value: </b> 100\\n          </p>\\n\\n      If provided value is greater than max value, max value will be applied.\\n      \",\n\t\t\t\t\t\t\"schema\": {\n\t\t\t\t\t\t\t\"type\": \"number\"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"name\": \"filter.id\",\n\t\t\t\t\t\t\"required\": false,\n\t\t\t\t\t\t\"in\": \"query\",\n\t\t\t\t\t\t\"description\": \"Filter by id query param.\\n          <p>\\n             <b>Format: </b> filter.id={$not}:OPERATION:VALUE\\n          </p>\\n          <p>\\n             <b>Example: </b> filter.id=$not:$like:John Doe&filter.id=like:John\\n          </p>\\n          <h4>Available Operations</h4><ul><li>$eq</li>\\n<li>$in</li></ul>\",\n\t\t\t\t\t\t\"schema\": {\n\t\t\t\t\t\t\t\"type\": \"array\",\n\t\t\t\t\t\t\t\"items\": {\n\t\t\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"name\": \"filter.name\",\n\t\t\t\t\t\t\"required\": false,\n\t\t\t\t\t\t\"in\": \"query\",\n\t\t\t\t\t\t\"description\": \"Filter by name query param.\\n          <p>\\n             <b>Format: </b> filter.name={$not}:OPERATION:VALUE\\n          </p>\\n          <p>\\n             <b>Example: </b> filter.name=$not:$like:John Doe&filter.name=like:John\\n          </p>\\n          <h4>Available Operations</h4><ul><li>$contains</li></ul>\",\n\t\t\t\t\t\t\"schema\": {\n\t\t\t\t\t\t\t\"type\": \"array\",\n\t\t\t\t\t\t\t\"items\": {\n\t\t\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"name\": \"sortBy\",\n\t\t\t\t\t\t\"required\": false,\n\t\t\t\t\t\t\"in\": \"query\",\n\t\t\t\t\t\t\"description\": \"Parameter to sort by.\\n      <p>To sort by multiple fields, just provide query param multiple types. The order in url defines an order of sorting</p>\\n      <p>\\n             <b>Format: </b> fieldName:DIRECTION\\n          </p>\\n      <p>\\n             <b>Example: </b> sortBy=id:DESC&sortBy=createdAt:ASC\\n          </p>\\n      <p>\\n             <b>Default Value: </b> createdAt:DESC,id:DESC\\n          </p>\\n      <h4>Available Fields</h4><ul><li>id</li>\\n<li>name</li>\\n<li>createdAt</li>\\n<li>updatedAt</li></ul>\\n      \",\n\t\t\t\t\t\t\"schema\": {\n\t\t\t\t\t\t\t\"type\": \"array\",\n\t\t\t\t\t\t\t\"items\": {\n\t\t\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\t\t\"enum\": [\n\t\t\t\t\t\t\t\t\t\"id:ASC\",\n\t\t\t\t\t\t\t\t\t\"id:DESC\",\n\t\t\t\t\t\t\t\t\t\"name:ASC\",\n\t\t\t\t\t\t\t\t\t\"name:DESC\",\n\t\t\t\t\t\t\t\t\t\"createdAt:ASC\",\n\t\t\t\t\t\t\t\t\t\"createdAt:DESC\",\n\t\t\t\t\t\t\t\t\t\"updatedAt:ASC\",\n\t\t\t\t\t\t\t\t\t\"updatedAt:DESC\"\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"name\": \"search\",\n\t\t\t\t\t\t\"required\": false,\n\t\t\t\t\t\t\"in\": \"query\",\n\t\t\t\t\t\t\"description\": \"Search term to filter result values\\n        <p>\\n             <b>Example: </b> John\\n          </p>\\n        <p>\\n             <b>Default Value: </b> No default value\\n          </p>\\n        \",\n\t\t\t\t\t\t\"schema\": {\n\t\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"name\": \"searchBy\",\n\t\t\t\t\t\t\"required\": false,\n\t\t\t\t\t\t\"in\": \"query\",\n\t\t\t\t\t\t\"description\": \"List of fields to search by term to filter result values\\n        <p>\\n             <b>Example: </b> name,roleType\\n          </p>\\n        <p>\\n             <b>Default Value: </b> By default all fields mentioned below will be used to search by term\\n          </p>\\n        <h4>Available Fields</h4><ul><li>name</li>\\n<li>roleType</li></ul>\\n        \",\n\t\t\t\t\t\t\"schema\": {\n\t\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"responses\": {\n\t\t\t\t\t\"200\": {\n\t\t\t\t\t\t\"description\": \"\",\n\t\t\t\t\t\t\"content\": {\n\t\t\t\t\t\t\t\"application/json\": {\n\t\t\t\t\t\t\t\t\"schema\": {\n\t\t\t\t\t\t\t\t\t\"allOf\": [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"$ref\": \"#/components/schemas/PaginatedDocumented\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"properties\": {\n\t\t\t\t\t\t\t\t\t\t\t\t\"data\": {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"type\": \"array\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"items\": {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"$ref\": \"#/components/schemas/UserRoleWithoutPermission\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\"meta\": {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"properties\": {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"select\": {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"type\": \"array\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"items\": {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"filter\": {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"type\": \"object\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"properties\": {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"id\": {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"oneOf\": [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"type\": \"array\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"items\": {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"name\": {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"oneOf\": [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"type\": \"array\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"items\": {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"tags\": [\n\t\t\t\t\t\"Roles\"\n\t\t\t\t],\n\t\t\t\t\"security\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"bearer\": []\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"post\": {\n\t\t\t\t\"operationId\": \"RolesController_create\",\n\t\t\t\t\"parameters\": [],\n\t\t\t\t\"requestBody\": {\n\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\"content\": {\n\t\t\t\t\t\t\"application/json\": {\n\t\t\t\t\t\t\t\"schema\": {\n\t\t\t\t\t\t\t\t\"$ref\": \"#/components/schemas/CreateUserRole\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"responses\": {\n\t\t\t\t\t\"201\": {\n\t\t\t\t\t\t\"description\": \"\",\n\t\t\t\t\t\t\"content\": {\n\t\t\t\t\t\t\t\"application/json\": {\n\t\t\t\t\t\t\t\t\"schema\": {\n\t\t\t\t\t\t\t\t\t\"$ref\": \"#/components/schemas/UserRoleWithoutPermission\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"tags\": [\n\t\t\t\t\t\"Roles\"\n\t\t\t\t],\n\t\t\t\t\"security\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"bearer\": []\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\t\t},\n\t\t\"/api/platform/v1/roles/{id}\": {\n\t\t\t\"get\": {\n\t\t\t\t\"operationId\": \"RolesController_findOne\",\n\t\t\t\t\"parameters\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"name\": \"id\",\n\t\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\t\"in\": \"path\",\n\t\t\t\t\t\t\"description\": \"Entity id, uuid v4 format\",\n\t\t\t\t\t\t\"example\": \"123e4567-e89b-12d3-a456-426614174000\",\n\t\t\t\t\t\t\"schema\": {\n\t\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"responses\": {\n\t\t\t\t\t\"200\": {\n\t\t\t\t\t\t\"description\": \"\",\n\t\t\t\t\t\t\"content\": {\n\t\t\t\t\t\t\t\"application/json\": {\n\t\t\t\t\t\t\t\t\"schema\": {\n\t\t\t\t\t\t\t\t\t\"$ref\": \"#/components/schemas/UserRoleWithoutPermission\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"tags\": [\n\t\t\t\t\t\"Roles\"\n\t\t\t\t],\n\t\t\t\t\"security\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"bearer\": []\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"put\": {\n\t\t\t\t\"operationId\": \"RolesController_updateOne\",\n\t\t\t\t\"parameters\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"name\": \"id\",\n\t\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\t\"in\": \"path\",\n\t\t\t\t\t\t\"description\": \"Entity id, uuid v4 format\",\n\t\t\t\t\t\t\"example\": \"123e4567-e89b-12d3-a456-426614174000\",\n\t\t\t\t\t\t\"schema\": {\n\t\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"requestBody\": {\n\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\"content\": {\n\t\t\t\t\t\t\"application/json\": {\n\t\t\t\t\t\t\t\"schema\": {\n\t\t\t\t\t\t\t\t\"$ref\": \"#/components/schemas/UpdateUserRole\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"responses\": {\n\t\t\t\t\t\"200\": {\n\t\t\t\t\t\t\"description\": \"\",\n\t\t\t\t\t\t\"content\": {\n\t\t\t\t\t\t\t\"application/json\": {\n\t\t\t\t\t\t\t\t\"schema\": {\n\t\t\t\t\t\t\t\t\t\"$ref\": \"#/components/schemas/UserRoleWithoutPermission\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"tags\": [\n\t\t\t\t\t\"Roles\"\n\t\t\t\t],\n\t\t\t\t\"security\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"bearer\": []\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"delete\": {\n\t\t\t\t\"operationId\": \"RolesController_softDelete\",\n\t\t\t\t\"parameters\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"name\": \"id\",\n\t\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\t\"in\": \"path\",\n\t\t\t\t\t\t\"description\": \"Entity id, uuid v4 format\",\n\t\t\t\t\t\t\"example\": \"123e4567-e89b-12d3-a456-426614174000\",\n\t\t\t\t\t\t\"schema\": {\n\t\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"name\": \"version\",\n\t\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\t\"in\": \"query\",\n\t\t\t\t\t\t\"description\": \"Version number of entity\",\n\t\t\t\t\t\t\"example\": \"1\",\n\t\t\t\t\t\t\"schema\": {\n\t\t\t\t\t\t\t\"minimum\": 0,\n\t\t\t\t\t\t\t\"type\": \"number\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"responses\": {\n\t\t\t\t\t\"204\": {\n\t\t\t\t\t\t\"description\": \"\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"tags\": [\n\t\t\t\t\t\"Roles\"\n\t\t\t\t],\n\t\t\t\t\"security\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"bearer\": []\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\t\t},\n\t\t\"/api/platform/v1/tenants/configuration/saml\": {\n\t\t\t\"post\": {\n\t\t\t\t\"operationId\": \"TenantsConfigurationController_setupSaml\",\n\t\t\t\t\"parameters\": [],\n\t\t\t\t\"requestBody\": {\n\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\"content\": {\n\t\t\t\t\t\t\"application/json\": {\n\t\t\t\t\t\t\t\"schema\": {\n\t\t\t\t\t\t\t\t\"$ref\": \"#/components/schemas/SetupSamlConfiguration\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"responses\": {\n\t\t\t\t\t\"200\": {\n\t\t\t\t\t\t\"description\": \"\",\n\t\t\t\t\t\t\"content\": {\n\t\t\t\t\t\t\t\"application/json\": {\n\t\t\t\t\t\t\t\t\"schema\": {\n\t\t\t\t\t\t\t\t\t\"$ref\": \"#/components/schemas/SetupSamlConfigurationResponseDTO\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"tags\": [\n\t\t\t\t\t\"Tenants\"\n\t\t\t\t]\n\t\t\t}\n\t\t},\n\t\t\"/api/platform/health\": {\n\t\t\t\"get\": {\n\t\t\t\t\"operationId\": \"HealthController_getHealth\",\n\t\t\t\t\"parameters\": [],\n\t\t\t\t\"responses\": {\n\t\t\t\t\t\"200\": {\n\t\t\t\t\t\t\"description\": \"The Health Check is successful\",\n\t\t\t\t\t\t\"content\": {\n\t\t\t\t\t\t\t\"application/json\": {\n\t\t\t\t\t\t\t\t\"schema\": {\n\t\t\t\t\t\t\t\t\t\"type\": \"object\",\n\t\t\t\t\t\t\t\t\t\"properties\": {\n\t\t\t\t\t\t\t\t\t\t\"status\": {\n\t\t\t\t\t\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\t\t\t\t\t\"example\": \"ok\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\"info\": {\n\t\t\t\t\t\t\t\t\t\t\t\"type\": \"object\",\n\t\t\t\t\t\t\t\t\t\t\t\"example\": {\n\t\t\t\t\t\t\t\t\t\t\t\t\"database\": {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"status\": \"up\"\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\"additionalProperties\": {\n\t\t\t\t\t\t\t\t\t\t\t\t\"type\": \"object\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"properties\": {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"status\": {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\"additionalProperties\": {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\"nullable\": true\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\"error\": {\n\t\t\t\t\t\t\t\t\t\t\t\"type\": \"object\",\n\t\t\t\t\t\t\t\t\t\t\t\"example\": {},\n\t\t\t\t\t\t\t\t\t\t\t\"additionalProperties\": {\n\t\t\t\t\t\t\t\t\t\t\t\t\"type\": \"object\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"properties\": {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"status\": {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\"additionalProperties\": {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\"nullable\": true\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\"details\": {\n\t\t\t\t\t\t\t\t\t\t\t\"type\": \"object\",\n\t\t\t\t\t\t\t\t\t\t\t\"example\": {\n\t\t\t\t\t\t\t\t\t\t\t\t\"database\": {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"status\": \"up\"\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\"additionalProperties\": {\n\t\t\t\t\t\t\t\t\t\t\t\t\"type\": \"object\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"properties\": {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"status\": {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\"additionalProperties\": {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t\"503\": {\n\t\t\t\t\t\t\"description\": \"The Health Check is not successful\",\n\t\t\t\t\t\t\"content\": {\n\t\t\t\t\t\t\t\"application/json\": {\n\t\t\t\t\t\t\t\t\"schema\": {\n\t\t\t\t\t\t\t\t\t\"type\": \"object\",\n\t\t\t\t\t\t\t\t\t\"properties\": {\n\t\t\t\t\t\t\t\t\t\t\"status\": {\n\t\t\t\t\t\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\t\t\t\t\t\"example\": \"error\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\"info\": {\n\t\t\t\t\t\t\t\t\t\t\t\"type\": \"object\",\n\t\t\t\t\t\t\t\t\t\t\t\"example\": {\n\t\t\t\t\t\t\t\t\t\t\t\t\"database\": {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"status\": \"up\"\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\"additionalProperties\": {\n\t\t\t\t\t\t\t\t\t\t\t\t\"type\": \"object\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"properties\": {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"status\": {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\"additionalProperties\": {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\"nullable\": true\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\"error\": {\n\t\t\t\t\t\t\t\t\t\t\t\"type\": \"object\",\n\t\t\t\t\t\t\t\t\t\t\t\"example\": {\n\t\t\t\t\t\t\t\t\t\t\t\t\"redis\": {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"status\": \"down\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"message\": \"Could not connect\"\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\"additionalProperties\": {\n\t\t\t\t\t\t\t\t\t\t\t\t\"type\": \"object\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"properties\": {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"status\": {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\"additionalProperties\": {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\"nullable\": true\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\"details\": {\n\t\t\t\t\t\t\t\t\t\t\t\"type\": \"object\",\n\t\t\t\t\t\t\t\t\t\t\t\"example\": {\n\t\t\t\t\t\t\t\t\t\t\t\t\"database\": {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"status\": \"up\"\n\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\"redis\": {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"status\": \"down\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"message\": \"Could not connect\"\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\"additionalProperties\": {\n\t\t\t\t\t\t\t\t\t\t\t\t\"type\": \"object\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"properties\": {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"status\": {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\"additionalProperties\": {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"tags\": [\n\t\t\t\t\t\"Health\"\n\t\t\t\t]\n\t\t\t}\n\t\t}\n\t},\n\t\"info\": {\n\t\t\"title\": \"Platform Application is responsible for the common things, like user, tenants, auth, management.\",\n\t\t\"description\": \"It has a common api for tenants and auth. By default designed as a multi-tenant, but you can have only one tenant and manage it like this, in case if in future you would like to expand.\",\n\t\t\"version\": \"1.0.0\",\n\t\t\"contact\": {\n\t\t\t\"name\": \"Vitalii Samofal\",\n\t\t\t\"url\": \"https://www.softkit.dev/\",\n\t\t\t\"email\": \"vitalii.samofal@softkit.dev\"\n\t\t}\n\t},\n\t\"tags\": [],\n\t\"servers\": [\n\t\t{\n\t\t\t\"url\": \"http://localhost:9999\",\n\t\t\t\"description\": \"local server\"\n\t\t}\n\t],\n\t\"components\": {\n\t\t\"securitySchemes\": {\n\t\t\t\"bearer\": {\n\t\t\t\t\"scheme\": \"bearer\",\n\t\t\t\t\"bearerFormat\": \"JWT\",\n\t\t\t\t\"type\": \"http\"\n\t\t\t}\n\t\t},\n\t\t\"schemas\": {\n\t\t\t\"ErrorResponse\": {\n\t\t\t\t\"type\": \"object\",\n\t\t\t\t\"properties\": {\n\t\t\t\t\t\"type\": {\n\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\"description\": \"link to the docs with more details about the error\"\n\t\t\t\t\t},\n\t\t\t\t\t\"title\": {\n\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\"description\": \"title of the error, short description\"\n\t\t\t\t\t},\n\t\t\t\t\t\"status\": {\n\t\t\t\t\t\t\"type\": \"number\",\n\t\t\t\t\t\t\"description\": \"http status code of the error, e.g. 404\"\n\t\t\t\t\t},\n\t\t\t\t\t\"detail\": {\n\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\"description\": \"detail of the error, comprehensive message for the end user (e.g. 'customer with id 12344321 not found')\"\n\t\t\t\t\t},\n\t\t\t\t\t\"data\": {\n\t\t\t\t\t\t\"type\": \"object\",\n\t\t\t\t\t\t\"description\": \"additional data that can be used by the client to handle the error\"\n\t\t\t\t\t},\n\t\t\t\t\t\"instance\": {\n\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\"description\": \"error instance, unique identifier for this particular occurrence of the problem\"\n\t\t\t\t\t},\n\t\t\t\t\t\"errorCode\": {\n\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\"description\": \"A code that uniquely identifies the type of error or problem that occurred\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"required\": [\n\t\t\t\t\t\"type\",\n\t\t\t\t\t\"title\",\n\t\t\t\t\t\"status\",\n\t\t\t\t\t\"detail\",\n\t\t\t\t\t\"data\",\n\t\t\t\t\t\"instance\",\n\t\t\t\t\t\"errorCode\"\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"SignUpByEmailRequest\": {\n\t\t\t\t\"type\": \"object\",\n\t\t\t\t\"properties\": {\n\t\t\t\t\t\"repeatedPassword\": {\n\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\"description\": \"just in case of some issues with frontend,\\nwe won't save garbage to the database\"\n\t\t\t\t\t},\n\t\t\t\t\t\"email\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t},\n\t\t\t\t\t\"password\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t},\n\t\t\t\t\t\"firstName\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t},\n\t\t\t\t\t\"lastName\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"required\": [\n\t\t\t\t\t\"repeatedPassword\",\n\t\t\t\t\t\"email\",\n\t\t\t\t\t\"firstName\",\n\t\t\t\t\t\"lastName\"\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"SignUpByEmailResponseDTO\": {\n\t\t\t\t\"type\": \"object\",\n\t\t\t\t\"properties\": {\n\t\t\t\t\t\"message\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t},\n\t\t\t\t\t\"approvalId\": {\n\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\"description\": \"id of approval entity, for future reuse\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"required\": [\n\t\t\t\t\t\"message\",\n\t\t\t\t\t\"approvalId\"\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"SignUpByEmailWithTenantCreationRequest\": {\n\t\t\t\t\"type\": \"object\",\n\t\t\t\t\"properties\": {\n\t\t\t\t\t\"companyName\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t},\n\t\t\t\t\t\"companyIdentifier\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t},\n\t\t\t\t\t\"repeatedPassword\": {\n\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\"description\": \"just in case of some issues with frontend,\\nwe won't save garbage to the database\"\n\t\t\t\t\t},\n\t\t\t\t\t\"email\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t},\n\t\t\t\t\t\"password\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t},\n\t\t\t\t\t\"firstName\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t},\n\t\t\t\t\t\"lastName\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"required\": [\n\t\t\t\t\t\"companyName\",\n\t\t\t\t\t\"companyIdentifier\",\n\t\t\t\t\t\"repeatedPassword\",\n\t\t\t\t\t\"email\",\n\t\t\t\t\t\"firstName\",\n\t\t\t\t\t\"lastName\"\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"ApproveSignUpRequest\": {\n\t\t\t\t\"type\": \"object\",\n\t\t\t\t\"properties\": {\n\t\t\t\t\t\"id\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t},\n\t\t\t\t\t\"code\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"required\": [\n\t\t\t\t\t\"id\",\n\t\t\t\t\t\"code\"\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"SignInRequest\": {\n\t\t\t\t\"type\": \"object\",\n\t\t\t\t\"properties\": {\n\t\t\t\t\t\"email\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t},\n\t\t\t\t\t\"password\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"required\": [\n\t\t\t\t\t\"email\"\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"SignInResponseDTO\": {\n\t\t\t\t\"type\": \"object\",\n\t\t\t\t\"properties\": {\n\t\t\t\t\t\"message\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t},\n\t\t\t\t\t\"accessToken\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t},\n\t\t\t\t\t\"refreshToken\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"required\": [\n\t\t\t\t\t\"message\",\n\t\t\t\t\t\"accessToken\",\n\t\t\t\t\t\"refreshToken\"\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"InitiateSamlLoginRequest\": {\n\t\t\t\t\"type\": \"object\",\n\t\t\t\t\"properties\": {\n\t\t\t\t\t\"redirectUrl\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t},\n\t\t\t\t\t\"samlConfigurationId\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"required\": [\n\t\t\t\t\t\"redirectUrl\",\n\t\t\t\t\t\"samlConfigurationId\"\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"PaginatedMetaDocumented\": {\n\t\t\t\t\"type\": \"object\",\n\t\t\t\t\"properties\": {\n\t\t\t\t\t\"itemsPerPage\": {\n\t\t\t\t\t\t\"type\": \"number\",\n\t\t\t\t\t\t\"title\": \"Number of items per page\"\n\t\t\t\t\t},\n\t\t\t\t\t\"totalItems\": {\n\t\t\t\t\t\t\"type\": \"number\",\n\t\t\t\t\t\t\"title\": \"Total number of items\"\n\t\t\t\t\t},\n\t\t\t\t\t\"currentPage\": {\n\t\t\t\t\t\t\"type\": \"number\",\n\t\t\t\t\t\t\"title\": \"Current requested page\"\n\t\t\t\t\t},\n\t\t\t\t\t\"totalPages\": {\n\t\t\t\t\t\t\"type\": \"number\",\n\t\t\t\t\t\t\"title\": \"Total number of pages\"\n\t\t\t\t\t},\n\t\t\t\t\t\"sortBy\": {\n\t\t\t\t\t\t\"type\": \"array\",\n\t\t\t\t\t\t\"title\": \"Sorting by columns\",\n\t\t\t\t\t\t\"items\": {\n\t\t\t\t\t\t\t\"type\": \"array\",\n\t\t\t\t\t\t\t\"items\": {\n\t\t\t\t\t\t\t\t\"oneOf\": [\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\t\t\t\t\"enum\": [\n\t\t\t\t\t\t\t\t\t\t\t\"ASC\",\n\t\t\t\t\t\t\t\t\t\t\t\"DESC\"\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t\"searchBy\": {\n\t\t\t\t\t\t\"title\": \"Search by fields\",\n\t\t\t\t\t\t\"type\": \"array\",\n\t\t\t\t\t\t\"items\": {\n\t\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t\"search\": {\n\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\"title\": \"Search term\"\n\t\t\t\t\t},\n\t\t\t\t\t\"select\": {\n\t\t\t\t\t\t\"title\": \"List of selected fields\",\n\t\t\t\t\t\t\"type\": \"array\",\n\t\t\t\t\t\t\"items\": {\n\t\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t\"filter\": {\n\t\t\t\t\t\t\"type\": \"object\",\n\t\t\t\t\t\t\"title\": \"Filters that applied to the query\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"required\": [\n\t\t\t\t\t\"itemsPerPage\",\n\t\t\t\t\t\"totalItems\",\n\t\t\t\t\t\"currentPage\",\n\t\t\t\t\t\"totalPages\"\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"PaginatedLinksDocumented\": {\n\t\t\t\t\"type\": \"object\",\n\t\t\t\t\"properties\": {\n\t\t\t\t\t\"first\": {\n\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\"title\": \"Link to first page\"\n\t\t\t\t\t},\n\t\t\t\t\t\"previous\": {\n\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\"title\": \"Link to previous page\"\n\t\t\t\t\t},\n\t\t\t\t\t\"current\": {\n\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\"title\": \"Link to current page\"\n\t\t\t\t\t},\n\t\t\t\t\t\"next\": {\n\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\"title\": \"Link to next page\"\n\t\t\t\t\t},\n\t\t\t\t\t\"last\": {\n\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\"title\": \"Link to last page\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"PaginatedDocumented\": {\n\t\t\t\t\"type\": \"object\",\n\t\t\t\t\"properties\": {\n\t\t\t\t\t\"data\": {\n\t\t\t\t\t\t\"title\": \"Array of entities\",\n\t\t\t\t\t\t\"type\": \"array\",\n\t\t\t\t\t\t\"items\": {\n\t\t\t\t\t\t\t\"type\": \"object\"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t\"meta\": {\n\t\t\t\t\t\t\"title\": \"Pagination Metadata\",\n\t\t\t\t\t\t\"allOf\": [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\"$ref\": \"#/components/schemas/PaginatedMetaDocumented\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t},\n\t\t\t\t\t\"links\": {\n\t\t\t\t\t\t\"title\": \"Links to pages\",\n\t\t\t\t\t\t\"allOf\": [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\"$ref\": \"#/components/schemas/PaginatedLinksDocumented\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"required\": [\n\t\t\t\t\t\"data\",\n\t\t\t\t\t\"meta\",\n\t\t\t\t\t\"links\"\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"UserRoleWithoutPermission\": {\n\t\t\t\t\"type\": \"object\",\n\t\t\t\t\"properties\": {\n\t\t\t\t\t\"createdAt\": {\n\t\t\t\t\t\t\"format\": \"date-time\",\n\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\"description\": \"Created at date time in ISO format\"\n\t\t\t\t\t},\n\t\t\t\t\t\"updatedAt\": {\n\t\t\t\t\t\t\"format\": \"date-time\",\n\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\"description\": \"Last time updated at date time in ISO format\"\n\t\t\t\t\t},\n\t\t\t\t\t\"deletedAt\": {\n\t\t\t\t\t\t\"format\": \"date-time\",\n\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\"description\": \"Deleted at date time in ISO format\"\n\t\t\t\t\t},\n\t\t\t\t\t\"version\": {\n\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\"description\": \"Entity version for optimistic lock handling\"\n\t\t\t\t\t},\n\t\t\t\t\t\"id\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t},\n\t\t\t\t\t\"name\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t},\n\t\t\t\t\t\"description\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t},\n\t\t\t\t\t\"roleType\": {\n\t\t\t\t\t\t\"enum\": [\n\t\t\t\t\t\t\t\"SUPER_ADMIN\",\n\t\t\t\t\t\t\t\"ADMIN\",\n\t\t\t\t\t\t\t\"REGULAR_USER\"\n\t\t\t\t\t\t],\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t},\n\t\t\t\t\t\"tenantId\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"required\": [\n\t\t\t\t\t\"createdAt\",\n\t\t\t\t\t\"updatedAt\",\n\t\t\t\t\t\"deletedAt\",\n\t\t\t\t\t\"version\",\n\t\t\t\t\t\"id\",\n\t\t\t\t\t\"name\",\n\t\t\t\t\t\"description\"\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"CreateUserRole\": {\n\t\t\t\t\"type\": \"object\",\n\t\t\t\t\"properties\": {\n\t\t\t\t\t\"name\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t},\n\t\t\t\t\t\"description\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"required\": [\n\t\t\t\t\t\"name\",\n\t\t\t\t\t\"description\"\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"PermissionCategory\": {\n\t\t\t\t\"type\": \"object\",\n\t\t\t\t\"properties\": {\n\t\t\t\t\t\"createdAt\": {\n\t\t\t\t\t\t\"format\": \"date-time\",\n\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\"description\": \"Created at date time in ISO format\"\n\t\t\t\t\t},\n\t\t\t\t\t\"updatedAt\": {\n\t\t\t\t\t\t\"format\": \"date-time\",\n\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\"description\": \"Last time updated at date time in ISO format\"\n\t\t\t\t\t},\n\t\t\t\t\t\"deletedAt\": {\n\t\t\t\t\t\t\"format\": \"date-time\",\n\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\"description\": \"Deleted at date time in ISO format\"\n\t\t\t\t\t},\n\t\t\t\t\t\"version\": {\n\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\"description\": \"Entity version for optimistic lock handling\"\n\t\t\t\t\t},\n\t\t\t\t\t\"id\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t},\n\t\t\t\t\t\"name\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t},\n\t\t\t\t\t\"description\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t},\n\t\t\t\t\t\"permissions\": {\n\t\t\t\t\t\t\"type\": \"array\",\n\t\t\t\t\t\t\"items\": {\n\t\t\t\t\t\t\t\"$ref\": \"#/components/schemas/Permission\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"required\": [\n\t\t\t\t\t\"createdAt\",\n\t\t\t\t\t\"updatedAt\",\n\t\t\t\t\t\"deletedAt\",\n\t\t\t\t\t\"version\",\n\t\t\t\t\t\"id\",\n\t\t\t\t\t\"name\",\n\t\t\t\t\t\"description\",\n\t\t\t\t\t\"permissions\"\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"Permission\": {\n\t\t\t\t\"type\": \"object\",\n\t\t\t\t\"properties\": {\n\t\t\t\t\t\"createdAt\": {\n\t\t\t\t\t\t\"format\": \"date-time\",\n\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\"description\": \"Created at date time in ISO format\"\n\t\t\t\t\t},\n\t\t\t\t\t\"updatedAt\": {\n\t\t\t\t\t\t\"format\": \"date-time\",\n\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\"description\": \"Last time updated at date time in ISO format\"\n\t\t\t\t\t},\n\t\t\t\t\t\"deletedAt\": {\n\t\t\t\t\t\t\"format\": \"date-time\",\n\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\"description\": \"Deleted at date time in ISO format\"\n\t\t\t\t\t},\n\t\t\t\t\t\"version\": {\n\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\"description\": \"Entity version for optimistic lock handling\"\n\t\t\t\t\t},\n\t\t\t\t\t\"id\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t},\n\t\t\t\t\t\"name\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t},\n\t\t\t\t\t\"description\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t},\n\t\t\t\t\t\"action\": {\n\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\"description\": \"action is the identifier of the permission\\nusually it is the name of the permission in lowercase\\ne.g. ADMIN.USER.CREATE, ADMIN.USER.READ, ADMIN.USER.UPDATE, ADMIN.USER.DELETE, ADMIN.USER.BULK_UPLOAD\"\n\t\t\t\t\t},\n\t\t\t\t\t\"permissionCategoryId\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t},\n\t\t\t\t\t\"permissionCategory\": {\n\t\t\t\t\t\t\"nullable\": true,\n\t\t\t\t\t\t\"allOf\": [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\"$ref\": \"#/components/schemas/PermissionCategory\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"required\": [\n\t\t\t\t\t\"createdAt\",\n\t\t\t\t\t\"updatedAt\",\n\t\t\t\t\t\"deletedAt\",\n\t\t\t\t\t\"version\",\n\t\t\t\t\t\"id\",\n\t\t\t\t\t\"name\",\n\t\t\t\t\t\"action\",\n\t\t\t\t\t\"permissionCategoryId\",\n\t\t\t\t\t\"permissionCategory\"\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"UserRole\": {\n\t\t\t\t\"type\": \"object\",\n\t\t\t\t\"properties\": {\n\t\t\t\t\t\"createdAt\": {\n\t\t\t\t\t\t\"format\": \"date-time\",\n\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\"description\": \"Created at date time in ISO format\"\n\t\t\t\t\t},\n\t\t\t\t\t\"updatedAt\": {\n\t\t\t\t\t\t\"format\": \"date-time\",\n\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\"description\": \"Last time updated at date time in ISO format\"\n\t\t\t\t\t},\n\t\t\t\t\t\"deletedAt\": {\n\t\t\t\t\t\t\"format\": \"date-time\",\n\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\"description\": \"Deleted at date time in ISO format\"\n\t\t\t\t\t},\n\t\t\t\t\t\"version\": {\n\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\"description\": \"Entity version for optimistic lock handling\"\n\t\t\t\t\t},\n\t\t\t\t\t\"id\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t},\n\t\t\t\t\t\"name\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t},\n\t\t\t\t\t\"description\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t},\n\t\t\t\t\t\"roleType\": {\n\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\"enum\": [\n\t\t\t\t\t\t\t\"SUPER_ADMIN\",\n\t\t\t\t\t\t\t\"ADMIN\",\n\t\t\t\t\t\t\t\"REGULAR_USER\"\n\t\t\t\t\t\t]\n\t\t\t\t\t},\n\t\t\t\t\t\"permissions\": {\n\t\t\t\t\t\t\"type\": \"array\",\n\t\t\t\t\t\t\"items\": {\n\t\t\t\t\t\t\t\"$ref\": \"#/components/schemas/Permission\"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t\"tenantId\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t},\n\t\t\t\t\t\"tenant\": {\n\t\t\t\t\t\t\"nullable\": true,\n\t\t\t\t\t\t\"description\": \"Tenants can have their own roles, but they can also inherit roles from the platform.\",\n\t\t\t\t\t\t\"allOf\": [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\"$ref\": \"#/components/schemas/Tenant\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"required\": [\n\t\t\t\t\t\"createdAt\",\n\t\t\t\t\t\"updatedAt\",\n\t\t\t\t\t\"deletedAt\",\n\t\t\t\t\t\"version\",\n\t\t\t\t\t\"id\",\n\t\t\t\t\t\"name\",\n\t\t\t\t\t\"description\"\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"UserTenantAccount\": {\n\t\t\t\t\"type\": \"object\",\n\t\t\t\t\"properties\": {\n\t\t\t\t\t\"createdAt\": {\n\t\t\t\t\t\t\"format\": \"date-time\",\n\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\"description\": \"Created at date time in ISO format\"\n\t\t\t\t\t},\n\t\t\t\t\t\"updatedAt\": {\n\t\t\t\t\t\t\"format\": \"date-time\",\n\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\"description\": \"Last time updated at date time in ISO format\"\n\t\t\t\t\t},\n\t\t\t\t\t\"deletedAt\": {\n\t\t\t\t\t\t\"format\": \"date-time\",\n\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\"description\": \"Deleted at date time in ISO format\"\n\t\t\t\t\t},\n\t\t\t\t\t\"version\": {\n\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\"description\": \"Entity version for optimistic lock handling\"\n\t\t\t\t\t},\n\t\t\t\t\t\"tenantId\": {\n\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\"description\": \"Tenant identifier\"\n\t\t\t\t\t},\n\t\t\t\t\t\"id\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t},\n\t\t\t\t\t\"userProfileId\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t},\n\t\t\t\t\t\"userStatus\": {\n\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\"enum\": [\n\t\t\t\t\t\t\t\"ACTIVE\",\n\t\t\t\t\t\t\t\"DEACTIVATED\"\n\t\t\t\t\t\t]\n\t\t\t\t\t},\n\t\t\t\t\t\"roles\": {\n\t\t\t\t\t\t\"type\": \"array\",\n\t\t\t\t\t\t\"items\": {\n\t\t\t\t\t\t\t\"$ref\": \"#/components/schemas/UserRole\"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t\"userProfile\": {\n\t\t\t\t\t\t\"$ref\": \"#/components/schemas/UserProfile\"\n\t\t\t\t\t},\n\t\t\t\t\t\"tenant\": {\n\t\t\t\t\t\t\"$ref\": \"#/components/schemas/Tenant\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"required\": [\n\t\t\t\t\t\"createdAt\",\n\t\t\t\t\t\"updatedAt\",\n\t\t\t\t\t\"deletedAt\",\n\t\t\t\t\t\"version\",\n\t\t\t\t\t\"tenantId\",\n\t\t\t\t\t\"id\",\n\t\t\t\t\t\"userProfileId\",\n\t\t\t\t\t\"userStatus\"\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"UserProfile\": {\n\t\t\t\t\"type\": \"object\",\n\t\t\t\t\"properties\": {\n\t\t\t\t\t\"createdAt\": {\n\t\t\t\t\t\t\"format\": \"date-time\",\n\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\"description\": \"Created at date time in ISO format\"\n\t\t\t\t\t},\n\t\t\t\t\t\"updatedAt\": {\n\t\t\t\t\t\t\"format\": \"date-time\",\n\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\"description\": \"Last time updated at date time in ISO format\"\n\t\t\t\t\t},\n\t\t\t\t\t\"deletedAt\": {\n\t\t\t\t\t\t\"format\": \"date-time\",\n\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\"description\": \"Deleted at date time in ISO format\"\n\t\t\t\t\t},\n\t\t\t\t\t\"version\": {\n\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\"description\": \"Entity version for optimistic lock handling\"\n\t\t\t\t\t},\n\t\t\t\t\t\"id\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t},\n\t\t\t\t\t\"email\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t},\n\t\t\t\t\t\"password\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t},\n\t\t\t\t\t\"firstName\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t},\n\t\t\t\t\t\"lastName\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t},\n\t\t\t\t\t\"status\": {\n\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\"enum\": [\n\t\t\t\t\t\t\t\"ACTIVE\",\n\t\t\t\t\t\t\t\"WAITING_FOR_EMAIL_APPROVAL\",\n\t\t\t\t\t\t\t\"DEACTIVATED\"\n\t\t\t\t\t\t]\n\t\t\t\t\t},\n\t\t\t\t\t\"userTenantsAccounts\": {\n\t\t\t\t\t\t\"type\": \"array\",\n\t\t\t\t\t\t\"items\": {\n\t\t\t\t\t\t\t\"$ref\": \"#/components/schemas/UserTenantAccount\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"required\": [\n\t\t\t\t\t\"createdAt\",\n\t\t\t\t\t\"updatedAt\",\n\t\t\t\t\t\"deletedAt\",\n\t\t\t\t\t\"version\",\n\t\t\t\t\t\"id\",\n\t\t\t\t\t\"email\",\n\t\t\t\t\t\"firstName\",\n\t\t\t\t\t\"lastName\",\n\t\t\t\t\t\"status\"\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"SAMLConfiguration\": {\n\t\t\t\t\"type\": \"object\",\n\t\t\t\t\"properties\": {\n\t\t\t\t\t\"createdAt\": {\n\t\t\t\t\t\t\"format\": \"date-time\",\n\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\"description\": \"Created at date time in ISO format\"\n\t\t\t\t\t},\n\t\t\t\t\t\"updatedAt\": {\n\t\t\t\t\t\t\"format\": \"date-time\",\n\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\"description\": \"Last time updated at date time in ISO format\"\n\t\t\t\t\t},\n\t\t\t\t\t\"deletedAt\": {\n\t\t\t\t\t\t\"format\": \"date-time\",\n\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\"description\": \"Deleted at date time in ISO format\"\n\t\t\t\t\t},\n\t\t\t\t\t\"version\": {\n\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\"description\": \"Entity version for optimistic lock handling\"\n\t\t\t\t\t},\n\t\t\t\t\t\"tenantId\": {\n\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\"description\": \"Tenant identifier\"\n\t\t\t\t\t},\n\t\t\t\t\t\"id\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t},\n\t\t\t\t\t\"entryPoint\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t},\n\t\t\t\t\t\"certificate\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t},\n\t\t\t\t\t\"enabled\": {\n\t\t\t\t\t\t\"type\": \"boolean\"\n\t\t\t\t\t},\n\t\t\t\t\t\"tenant\": {\n\t\t\t\t\t\t\"nullable\": true,\n\t\t\t\t\t\t\"allOf\": [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\"$ref\": \"#/components/schemas/Tenant\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"required\": [\n\t\t\t\t\t\"createdAt\",\n\t\t\t\t\t\"updatedAt\",\n\t\t\t\t\t\"deletedAt\",\n\t\t\t\t\t\"version\",\n\t\t\t\t\t\"tenantId\",\n\t\t\t\t\t\"id\",\n\t\t\t\t\t\"entryPoint\",\n\t\t\t\t\t\"certificate\",\n\t\t\t\t\t\"enabled\"\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"Tenant\": {\n\t\t\t\t\"type\": \"object\",\n\t\t\t\t\"properties\": {\n\t\t\t\t\t\"createdAt\": {\n\t\t\t\t\t\t\"format\": \"date-time\",\n\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\"description\": \"Created at date time in ISO format\"\n\t\t\t\t\t},\n\t\t\t\t\t\"updatedAt\": {\n\t\t\t\t\t\t\"format\": \"date-time\",\n\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\"description\": \"Last time updated at date time in ISO format\"\n\t\t\t\t\t},\n\t\t\t\t\t\"deletedAt\": {\n\t\t\t\t\t\t\"format\": \"date-time\",\n\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\"description\": \"Deleted at date time in ISO format\"\n\t\t\t\t\t},\n\t\t\t\t\t\"version\": {\n\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\"description\": \"Entity version for optimistic lock handling\"\n\t\t\t\t\t},\n\t\t\t\t\t\"id\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t},\n\t\t\t\t\t\"tenantFriendlyIdentifier\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t},\n\t\t\t\t\t\"tenantName\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t},\n\t\t\t\t\t\"tenantStatus\": {\n\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\"enum\": [\n\t\t\t\t\t\t\t\"ACTIVE\",\n\t\t\t\t\t\t\t\"INACTIVE\"\n\t\t\t\t\t\t]\n\t\t\t\t\t},\n\t\t\t\t\t\"ownerId\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t},\n\t\t\t\t\t\"owner\": {\n\t\t\t\t\t\t\"$ref\": \"#/components/schemas/UserProfile\"\n\t\t\t\t\t},\n\t\t\t\t\t\"samlConfigurations\": {\n\t\t\t\t\t\t\"type\": \"array\",\n\t\t\t\t\t\t\"items\": {\n\t\t\t\t\t\t\t\"$ref\": \"#/components/schemas/SAMLConfiguration\"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t\"tenantUsersAccount\": {\n\t\t\t\t\t\t\"type\": \"array\",\n\t\t\t\t\t\t\"items\": {\n\t\t\t\t\t\t\t\"$ref\": \"#/components/schemas/UserTenantAccount\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"required\": [\n\t\t\t\t\t\"createdAt\",\n\t\t\t\t\t\"updatedAt\",\n\t\t\t\t\t\"deletedAt\",\n\t\t\t\t\t\"version\",\n\t\t\t\t\t\"id\",\n\t\t\t\t\t\"tenantFriendlyIdentifier\",\n\t\t\t\t\t\"tenantName\",\n\t\t\t\t\t\"tenantStatus\",\n\t\t\t\t\t\"ownerId\"\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"UpdateUserRole\": {\n\t\t\t\t\"type\": \"object\",\n\t\t\t\t\"properties\": {\n\t\t\t\t\t\"version\": {\n\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\"description\": \"Entity version for optimistic lock handling\"\n\t\t\t\t\t},\n\t\t\t\t\t\"name\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t},\n\t\t\t\t\t\"description\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t},\n\t\t\t\t\t\"tenant\": {\n\t\t\t\t\t\t\"nullable\": true,\n\t\t\t\t\t\t\"description\": \"Tenants can have their own roles, but they can also inherit roles from the platform.\",\n\t\t\t\t\t\t\"allOf\": [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\"$ref\": \"#/components/schemas/Tenant\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"required\": [\n\t\t\t\t\t\"version\",\n\t\t\t\t\t\"name\",\n\t\t\t\t\t\"description\"\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"IdpMappingDto\": {\n\t\t\t\t\"type\": \"object\",\n\t\t\t\t\"properties\": {\n\t\t\t\t\t\"firstName\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t},\n\t\t\t\t\t\"lastName\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t},\n\t\t\t\t\t\"email\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t},\n\t\t\t\t\t\"role\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"required\": [\n\t\t\t\t\t\"firstName\",\n\t\t\t\t\t\"lastName\",\n\t\t\t\t\t\"email\",\n\t\t\t\t\t\"role\"\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"SetupSamlConfiguration\": {\n\t\t\t\t\"type\": \"object\",\n\t\t\t\t\"properties\": {\n\t\t\t\t\t\"entryPoint\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t},\n\t\t\t\t\t\"certificate\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t},\n\t\t\t\t\t\"fieldsMapping\": {\n\t\t\t\t\t\t\"$ref\": \"#/components/schemas/IdpMappingDto\"\n\t\t\t\t\t},\n\t\t\t\t\t\"enabled\": {\n\t\t\t\t\t\t\"type\": \"boolean\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"required\": [\n\t\t\t\t\t\"entryPoint\",\n\t\t\t\t\t\"certificate\",\n\t\t\t\t\t\"fieldsMapping\",\n\t\t\t\t\t\"enabled\"\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"SetupSamlConfigurationResponseDTO\": {\n\t\t\t\t\"type\": \"object\",\n\t\t\t\t\"properties\": {\n\t\t\t\t\t\"message\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t},\n\t\t\t\t\t\"id\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"required\": [\n\t\t\t\t\t\"message\",\n\t\t\t\t\t\"id\"\n\t\t\t\t]\n\t\t\t}\n\t\t}\n\t}\n}\n","import { getSchemaByType } from '../find';\nimport React, { useContext } from \"react\";\nimport { useResource, TranslationContext } from \"@refinedev/core\";\n\nimport {\n    CreateSchemaInferencer,\n    InferencerComponentProps,\n    SchemaInferencerResultComponent,\n    InferField,\n    InferType,\n} from '../types';\n\nimport { composeInferencers } from \"../compose-schema-inferencers\";\nimport { composeTransformers } from \"../compose-transformers\";\n\nimport { defaultElements } from \"../field-from-schema-inferencers\";\nimport { defaultTransformers } from \"../field-transformers\";\nimport { LiveComponent } from \"../../components\";\nimport { useInferFetch } from \"../../use-infer-fetch\";\nimport { useRelationFetch } from \"../../use-relation-fetch\";\n\nimport scheme from \"../scheme\";\n\nimport { prepareLiveCode, componentName, removeHiddenCode } from \"../../utilities\";\n\n/**\n * CreateInferencer is a function that creates a Inferencer component.\n *\n * Inferencer will handle the data fetching and the infering parts,\n * then it will invoke the `renderer` function to generate the code.\n * The generated code will be used to render the component by `react-live`.\n * Its required to havee`additionalScope` prop when using packages other than `react` and `@refinedev/core`.\n *\n * @param config - Inferencer configuration.\n * @param config.type - Infering type.\n * @param config.additionalScope - Additional scope for live code.\n * @param config.renderer - String renderer for Inferencer.\n * @param config.fieldTransformers - Field transformers.\n * @param config.customElements - Field inferencers.\n * @param config.codeViewerComponent - Code viewer component.\n * @param config.errorComponent - Error component.\n * @param config.loadingComponent - Loading component.\n */\nexport const createSchemaInferencer: CreateSchemaInferencer = ({\n    type,\n    additionalScope = [],\n    customElements = [],\n    fieldTransformers = [],\n    renderer,\n    loadingComponent: LoadingComponent,\n    errorComponent: ErrorComponent,\n    codeViewerComponent: CodeViewerComponent,\n}) => {\n    const infer = composeInferencers([...defaultElements, ...customElements]);\n    const transform = composeTransformers([\n        ...defaultTransformers,\n        ...fieldTransformers,\n    ]);\n\n    const Inferencer = ({\n        resourceName,\n        fieldTransformer,\n        meta,\n        id,\n    }: {\n        resourceName?: string;\n        fieldTransformer?: InferencerComponentProps[\"fieldTransformer\"];\n        meta?: InferencerComponentProps[\"meta\"];\n        id?: string | number;\n    }) => {\n        console.log('resourceName: ', resourceName);\n        const { resource, resources } = useResource(resourceName);\n        console.log('resource: ', resource);\n        const { resource: resourceFromURL } = useResource();\n        console.log('resourceFromURL: ', resourceFromURL);\n        const { i18nProvider } = useContext(TranslationContext);\n\n        const inferSingleField = (\n            key: string,\n            props: any,\n        ) => {\n            const inferResult = infer(key, props, infer, type);\n\n            if (inferResult) {\n                if (resource) {\n                    const transformed = transform(\n                        [inferResult] as InferField[],\n                        resources,\n                        resource,\n                        {},\n                        infer,\n                        type,\n                    );\n\n                    const customTransformedFields = fieldTransformer\n                        ? transformed.flatMap((field) => {\n                              const result = fieldTransformer(field);\n\n                              return result ? [result] : [];\n                          })\n                        : transformed;\n\n                    return customTransformedFields?.[0];\n                }\n            }\n\n            return undefined;\n        };\n\n        const inferSchema = (schemaObject: any): InferField[] => {\n            console.log('schemaObject: ', schemaObject);\n            return Object.entries(schemaObject.properties)\n                .reduce((acc, [key, props]) => {\n                    const inferResult = inferSingleField(key, props);\n                    if (inferResult) {\n                        acc.push(inferResult);\n                    }\n\n                    return acc;\n                }, [] as InferField[]);\n        };\n\n        const clearedFields = inferSchema(getSchemaByType(resource!.name, type));\n        console.log('clearedFields: ', clearedFields);\n        // const clearedFields = [];\n\n        const code = React.useMemo(() => {\n            if (resource) {\n                return renderer({\n                    resource,\n                    resources,\n                    fields: clearedFields,\n                    infer,\n                    meta,\n                    isCustomPage: resource.name !== resourceFromURL?.name,\n                    id,\n                    i18n: !!i18nProvider,\n                });\n            }\n            return \"\";\n        }, [\n            resource,\n            resources,\n            clearedFields,\n        ]);\n\n        return (\n            <CodeViewerComponent\n                code={removeHiddenCode(code)}\n            />\n        );\n    };\n\n    const InferencerComponent: SchemaInferencerResultComponent = ({\n        name,\n        resource,\n        fieldTransformer,\n        meta,\n        id,\n    }) => {\n        const { resource: resourceItem } = useResource(resource ?? name);\n        console.log('resourceItem: ', resourceItem);\n\n        getSchemaByType(resourceItem!.name, type);\n\n        const key = `${\n            resourceItem?.identifier ?? resourceItem?.name\n        }-${type}-${id}`;\n\n        return (\n            <Inferencer\n                fieldTransformer={fieldTransformer}\n                resourceName={resource ?? name}\n                meta={meta ?? {}}\n                key={key}\n                id={id}\n            />\n        );\n    };\n\n    return InferencerComponent;\n};\n","import { FieldInferencer } from \"../types\";\nimport { pickInferredField } from \"../../utilities\";\n\n/**\n * Compose multiple field inferencers into one\n * @param inferencers The inferencer functions to compose\n */\nexport const composeInferencers = (\n    inferencers: Array<FieldInferencer>,\n): FieldInferencer => {\n    const fieldInferencer: FieldInferencer = (\n        key,\n        props,\n        infer = fieldInferencer,\n        type,\n    ) => {\n        const inferences = inferencers.map((inferencer) =>\n            inferencer(key, props, infer, type),\n        );\n        const picked = pickInferredField(inferences);\n\n        return picked;\n    };\n\n    return fieldInferencer;\n};\n","import { FieldTransformer } from \"../types\";\n\n/**\n * Compose multiple field transformers into one\n * @param transformers The transformer functions to compose\n */\nexport const composeTransformers = (\n    transformers: Array<FieldTransformer>,\n): FieldTransformer => {\n    const fieldTransformer: FieldTransformer = (\n        fields,\n        resources,\n        resource,\n        record,\n        infer,\n        type,\n    ) => {\n        return transformers.reduce((acc, transformer) => {\n            return transformer(acc, resources, resource, record, infer, type);\n        }, fields);\n    };\n\n    return fieldTransformer;\n};\n","import has from \"lodash/has\";\nimport { FieldInferencer } from '../types';\n\nexport const arrayInfer: FieldInferencer = (\n    key,\n    props,\n    infer,\n    type,\n) => {\n    if (has(props, 'enum')) {\n        return {\n            key,\n            type: 'text',\n        };\n    }\n\n    //@ts-ignore\n    if (props.type === 'array') {\n        //@ts-ignore\n        const basicType = infer(key, props.items, infer, type) || {\n            type: 'text',\n        };\n\n        return {\n            key,\n            type: basicType.type,\n        };\n    }\n\n    return false;\n};\n","import { FieldInferencer } from '../types';\n\nexport const booleanInfer: FieldInferencer = (key, props) => {\n    //@ts-ignore\n    if (props.type === 'boolean') {\n        return {\n            key,\n            type: 'boolean',\n        };\n    }\n\n    return false;\n};\n","import dayjs from \"dayjs\";\nimport { FieldInferencer } from '../types';\n\nconst dateSuffixRegexp = /(_at|_on|At|On|AT|ON)(\\[\\])?$/;\n\nexport const dateInfer: FieldInferencer = (key, props) => {\n    const isDateField = dateSuffixRegexp.test(key);\n\n    //@ts-ignore\n    if (isDateField || props.format === 'date-time') {\n        return {\n            key,\n            type: 'date',\n        };\n    }\n\n    return false;\n};\n","import { FieldInferencer } from '../types';\n\nconst emailSuffixRegexp = /(email)(\\[\\])?$/;\n\nexport const emailInfer: FieldInferencer = (key, props) => {\n    const isEmailField = emailSuffixRegexp.test(key);\n\n    if (isEmailField) {\n        return {\n            key,\n            type: 'email',\n        };\n    }\n\n    return false;\n};\n","import { FieldInferencer } from '../types';\n\nexport const numberInfer: FieldInferencer = (key, props) => {\n    // @ts-ignore\n    if (props.type === 'number') {\n        return {\n            key,\n            type: \"number\",\n        };\n    }\n\n    return false;\n};\n","import { getFieldableKeys } from \"../../utilities\";\nimport { FieldInferencer } from '../types';\n\nconst idPropertyRegexp = /id$/i;\n\nexport const objectInfer: FieldInferencer = (\n    key,\n    props,\n    // record,\n    infer,\n    // schema,\n    // type,\n) => {\n    return false;\n};\n","import { FieldInferencer } from '../types';\n\nexport const richtextInfer: FieldInferencer = (key, value) => {\n    const isLongText = typeof value === \"string\" && value.length > 100;\n\n    if (isLongText) {\n        return {\n            key,\n            type: \"richtext\",\n            priority: 1,\n        };\n    }\n\n    return false;\n};\n","import { FieldInferencer } from '../types';\n\nexport const textInfer: FieldInferencer = (key, props) => {\n    // @ts-ignore\n    const isText = props.type === 'string';\n\n    if (isText) {\n        return {\n            key,\n            type: \"text\",\n        };\n    }\n\n    return false;\n};\n","import { FieldInferencer } from '../types';\n\nconst urlRegexp = /^(https?|ftp):\\/\\/(-\\.)?([^\\s/?\\.#-]+\\.?)+(\\/[^\\s]*)?$/i;\n\nexport const urlInfer: FieldInferencer = (key, value) => {\n    const isValidURL = typeof value === \"string\" && urlRegexp.test(value);\n\n    if (isValidURL) {\n        return {\n            key,\n            type: \"url\",\n            priority: 1,\n        };\n    }\n\n    return false;\n};\n","import { arrayInfer } from \"./array\";\nimport { booleanInfer } from \"./boolean\";\nimport { dateInfer } from \"./date\";\nimport { emailInfer } from \"./email\";\nimport { imageInfer } from \"./image\";\nimport { nullishInfer } from \"./nullish\";\nimport { numberInfer } from \"./number\";\nimport { objectInfer } from \"./object\";\nimport { relationInfer } from \"./relation\";\nimport { richtextInfer } from \"./richtext\";\nimport { textInfer } from \"./text\";\nimport { urlInfer } from \"./url\";\n\nexport const defaultElements = [\n    arrayInfer,\n    booleanInfer,\n    dateInfer,\n    emailInfer,\n    // imageInfer,\n    // nullishInfer,\n    numberInfer,\n    objectInfer,\n    // relationInfer,\n    richtextInfer,\n    urlInfer,\n    textInfer,\n];\n","import { FieldTransformer, InferField } from \"../types\";\n\nexport const basicToRelation: FieldTransformer = (\n    fields,\n    resources,\n    resource,\n    record,\n) => {\n    const mapped: Array<InferField> = fields.map((field) => {\n        if (\n            !field.relation &&\n            (field.type === \"text\" ||\n                field.type === \"richtext\" ||\n                field.type === \"number\") &&\n            !field.canRelation\n        ) {\n            // check if value is a valid id (regex)\n            // if multiple, check value by value\n            // take accessor into account (should be single only)\n            // valid id should be a valid uuid (meaning, lowercase alphanumeric with dashes)\n            const validUUIdRegex = /^[a-z0-9-]+$/;\n\n            const isValidUUID = (value: unknown) => {\n                return validUUIdRegex.test(`${value}`);\n            };\n\n            const isNotSelf = field.key.toLowerCase() !== \"id\";\n\n            const singleOrNoAccessor =\n                !field.accessor || typeof field.accessor === \"string\";\n\n            // in case of multiple accessors, we can't infer a relation\n            // or if the field is the id field\n            if (!singleOrNoAccessor || !isNotSelf) {\n                return field;\n            }\n\n            const valuesToCheck = field.multiple\n                ? (record[field.key] as unknown[])\n                : [record[field.key]];\n\n            const allValid = valuesToCheck.every((value) => {\n                return isValidUUID(\n                    field.accessor\n                        ? (value as Record<string, unknown>)[\n                              field.accessor as string\n                          ]\n                        : value,\n                );\n            });\n\n            if (allValid) {\n                return {\n                    ...field,\n                    canRelation: true,\n                };\n            }\n\n            return field;\n        }\n        return field;\n    });\n\n    return mapped;\n};\n","import { FieldTransformer, InferField } from \"../types\";\n\nconst imageFieldLikeRegexp = /(image|photo|avatar|cover|thumbnail|icon)/i;\n\nexport const imageByKey: FieldTransformer = (fields) => {\n    const mapped: Array<InferField> = fields.map((field) => {\n        if (field.type === \"url\" && imageFieldLikeRegexp.test(field.key)) {\n            return {\n                ...field,\n                type: \"image\",\n            };\n        }\n\n        return field;\n    });\n\n    return mapped;\n};\n","import { resourceFromInferred } from \"../../utilities\";\nimport { FieldTransformer, InferField } from \"../types\";\n\nexport const relationByResource: FieldTransformer = (\n    fields,\n    resources,\n    resource,\n    record,\n    infer,\n) => {\n    const mapped: Array<InferField> = fields.map((field) => {\n        const inferResource = resourceFromInferred(field, resources);\n\n        if (inferResource) {\n            return {\n                ...field,\n                relation: true,\n                type: \"relation\",\n                resource: inferResource,\n            };\n        }\n\n        return field;\n    });\n\n    return mapped;\n};\n","import { FieldTransformer, InferField } from \"../types\";\n\nexport const relationToFieldable: FieldTransformer = (\n    fields,\n    resources,\n    resource,\n    record,\n    infer,\n    type,\n) => {\n    const mapped: Array<InferField> = fields.map((field) => {\n        if (field.relation && field.type === \"relation\" && !field.resource) {\n            const value = field.accessor\n                ? (record[field.key] as any)[field.accessor as string]\n                : record[field.key];\n\n            const inferredType = infer(field.key, value, record, infer, type);\n\n            if (inferredType && inferredType.type !== \"relation\") {\n                return {\n                    ...field,\n                    fieldable: true,\n                    relation: false,\n                    type: inferredType.type,\n                    canRelation: true,\n                };\n            }\n        }\n\n        return field;\n    });\n\n    return mapped;\n};\n","import { basicToRelation } from \"./basic-to-relation\";\nimport { imageByKey } from \"./image-by-key\";\nimport { relationByResource } from \"./relation-by-resource\";\nimport { relationToFieldable } from \"./relation-to-fieldable\";\n\nexport const defaultTransformers = [\n    imageByKey,\n    relationByResource,\n    relationToFieldable,\n    basicToRelation,\n];\n","import { Create, useForm, useSelect, getValueFromEvent } from \"@refinedev/antd\";\nimport { Form, Input, Select, Upload, Checkbox, DatePicker } from \"antd\";\nimport dayjs from \"dayjs\";\n\nimport { createSchemaInferencer } from '../../../from-scheme/create-schema-inferencer';\nimport {\n    jsx,\n    componentName,\n    prettyString,\n    accessor,\n    printImports,\n    isIDKey,\n    noOp,\n    getOptionLabel,\n    getVariableName,\n    translatePrettyString,\n    getMetaProps,\n    shouldDotAccess,\n} from \"../../../utilities\";\n\nimport { ErrorComponent } from \"../error\";\nimport { LoadingComponent } from \"../loading\";\nimport { SharedCodeViewer } from \"../../../components/shared-code-viewer\";\n\nimport {\n\tInferField,\n\tImportElement,\n\tRendererContext,\n\tSchemaInferencerResultComponent,\n} from '../../../from-scheme/types';\n\n/**\n * a renderer function for create page in Ant Design\n * @internal used internally from inferencer components\n */\nexport const renderer = ({\n    resource,\n    fields,\n    meta,\n    isCustomPage,\n    i18n,\n}: RendererContext) => {\n    console.log('fields: ', fields);\n    const COMPONENT_NAME = componentName(\n        resource.label ?? resource.name,\n        \"create\",\n    );\n    const imports: Array<ImportElement> = [\n        [\"React\", \"react\", true],\n        [\"IResourceComponentsProps\", \"@refinedev/core\"],\n        [\"Create\", \"@refinedev/antd\"],\n        [\"Form\", \"antd\"],\n        [\"useForm\", \"@refinedev/antd\"],\n        [\"Input\", \"antd\"],\n    ];\n\n    if (i18n) {\n        imports.push([\"useTranslate\", \"@refinedev/core\"]);\n    }\n\n    const relationFields: (InferField | null)[] = fields.filter(\n        (field) => field?.relation && !field?.fieldable && field?.resource,\n    );\n\n    const relationHooksCode = relationFields\n        .filter(Boolean)\n        .map((field) => {\n            if (field?.relation && !field.fieldable && field.resource) {\n                imports.push([\"useSelect\", \"@refinedev/antd\"]);\n\n                return `\n                const { selectProps: ${getVariableName(\n                    field.key,\n                    \"SelectProps\",\n                )} } =\n                useSelect({\n                    resource: \"${field.resource.name}\",\n                    ${getOptionLabel(field)}\n                    ${getMetaProps(\n                        field?.resource?.identifier ?? field?.resource?.name,\n                        meta,\n                        \"getList\",\n                    )}\n                });\n            `;\n            }\n            return undefined;\n        })\n        .filter(Boolean);\n\n    const renderRelationFields = (field: InferField) => {\n        if (field.relation && field.resource) {\n            imports.push([\"Select\", \"antd\"]);\n            const variableName = getVariableName(field.key, \"SelectProps\");\n\n            const name = field.accessor\n                ? field.multiple\n                    ? `\"${field.key}\"`\n                    : `[\"${field.key}\", \"${field.accessor}\"]`\n                : `\"${field.key}\"`;\n\n            let valueProps = \"\";\n            let valueEvent = \"\";\n\n            if (field.accessor && field.multiple) {\n                const canDot = shouldDotAccess(`${field.accessor}`);\n                valueEvent = `getValueFromEvent={(selected: string[]) => {\n                    return selected?.map((item) => ({ ${\n                        canDot ? field.accessor : `[\"${field.accessor}\"]`\n                    }: item }));\n                }}`;\n                valueProps = `getValueProps={(value: any[]) => {\n                    return {\n                        value: value?.map((item) => ${accessor(\n                            \"item\",\n                            undefined,\n                            field.accessor,\n                        )}),\n                    };\n                }}`;\n            }\n\n            return jsx`\n                <Form.Item\n                    label=${translatePrettyString({\n                        resource,\n                        field,\n                        i18n,\n                    })}\n                    name={${name}}\n                    rules={[\n                        {\n                            required: true,\n                        },\n                    ]}\n                    ${valueProps}\n                    ${valueEvent}\n                >\n                    <Select ${\n                        field.multiple ? 'mode=\"multiple\"' : \"\"\n                    } {...${variableName}} />\n                </Form.Item>\n                `;\n        }\n        return undefined;\n    };\n\n    const basicInputFields = (field: InferField) => {\n        if (\n            field.type === \"text\" ||\n            field.type === \"url\" ||\n            field.type === \"email\" ||\n            field.type === \"number\"\n        ) {\n            if (isIDKey(field.key)) {\n                return undefined;\n            }\n\n            if (field.multiple) {\n                return undefined;\n            }\n\n            return jsx`\n                <Form.Item\n                    label=${translatePrettyString({\n                        resource,\n                        field,\n                        i18n,\n                    })}\n                    name={[\"${field.key}\"${\n                field.accessor ? ', \"' + field.accessor + '\"' : \"\"\n            }]}\n                    rules={[\n                        {\n                            required: true,\n                        },\n                    ]}\n                >\n                    <Input  />\n                </Form.Item>\n            `;\n        }\n        return undefined;\n    };\n\n    const imageFields = (field: InferField) => {\n        if (field.type === \"image\") {\n            imports.push(\n                [\"Upload\", \"antd\"],\n                [\"getValueFromEvent\", \"@refinedev/antd\"],\n            );\n            let valueProps = 'valuePropName=\"fileList\"';\n\n            if (field.multiple && !field.accessor) {\n                valueProps =\n                    \"getValueProps={(value) => ({ fileList: value?.map((item: any) => ({ url: item, name: item, uid: item }))})}\";\n            }\n\n            if (!field.multiple) {\n                if (field.accessor) {\n                    valueProps =\n                        \"getValueProps={(value) => ({ fileList: value ? [value] : [] })}\";\n                } else {\n                    valueProps =\n                        \"getValueProps={(value) => ({ fileList: [{ url: value, name: value, uid: value }]})}\";\n                }\n            }\n\n            return jsx`\n                <Form.Item label=${translatePrettyString({\n                    resource,\n                    field,\n                    i18n,\n                })}>\n                    <Form.Item\n                        name=\"${field.key}\"\n                        ${valueProps}\n                        getValueFromEvent={getValueFromEvent}\n                        noStyle\n                        rules={[\n                            {\n                                required: true,\n                            },\n                        ]}\n                    >\n                        <Upload.Dragger\n                            listType=\"picture\"\n                            ${field.multiple ? \"multiple\" : \"\"}\n                            beforeUpload={() => false}\n                        >\n                            <p className=\"ant-upload-text\">\n                                Drag & drop a file in this area\n                            </p>\n                        </Upload.Dragger>\n                    </Form.Item>\n                </Form.Item>\n                `;\n        }\n        return undefined;\n    };\n\n    const booleanFields = (field: InferField) => {\n        if (field.type === \"boolean\") {\n            imports.push([\"Checkbox\", \"antd\"]);\n\n            if (field.multiple) {\n                return undefined;\n            }\n\n            return jsx`\n                <Form.Item\n                    label=${translatePrettyString({\n                        resource,\n                        field,\n                        i18n,\n                    })}\n                    valuePropName=\"checked\"\n                    name={[\"${field.key}\"${\n                field.accessor ? ', \"' + field.accessor + '\"' : \"\"\n            }]}\n                    rules={[\n                        {\n                            required: true,\n                        },\n                    ]}\n                >\n                    <Checkbox>${prettyString(field.key)}</Checkbox>\n                </Form.Item>\n            `;\n        }\n        return undefined;\n    };\n\n    const dateFields = (field: InferField) => {\n        if (field.type === \"date\") {\n            imports.push([\"DatePicker\", \"antd\"], [\"dayjs\", \"dayjs\", true]);\n\n            if (field.multiple) {\n                return undefined;\n            }\n\n            return jsx`\n                <Form.Item\n                    label=${translatePrettyString({\n                        resource,\n                        field,\n                        i18n,\n                    })}\n                    name={[\"${field.key}\"${\n                field.accessor ? ', \"' + field.accessor + '\"' : \"\"\n            }]}\n                    rules={[\n                        {\n                            required: true,\n                        },\n                    ]}\n                    getValueProps={(value) => ({ value: value ? dayjs(value) : undefined })}\n                >\n                    <DatePicker />\n                </Form.Item>\n            `;\n        }\n        return undefined;\n    };\n\n    const richtextFields = (field: InferField) => {\n        if (field.type === \"richtext\") {\n            return jsx`\n            <Form.Item\n                label=${translatePrettyString({\n                    resource,\n                    field,\n                    i18n,\n                })}\n                name=\"${field.key}\"\n                rules={[\n                    {\n                        required: true,\n                    },\n                ]}\n            >\n                <Input.TextArea rows={5} />\n            </Form.Item>\n            `;\n        }\n\n        return undefined;\n    };\n\n    console.log('fields: ', fields);\n\n    const renderedFields: Array<string | undefined> = fields.map((field) => {\n        switch (field?.type) {\n            case \"text\":\n            case \"number\":\n            case \"email\":\n            case \"url\":\n                return basicInputFields(field);\n            case \"richtext\":\n                return richtextFields(field);\n            case \"image\":\n                return imageFields(field);\n            case \"date\":\n                return dateFields(field);\n            case \"boolean\":\n                return booleanFields(field);\n            case \"relation\":\n                return renderRelationFields(field);\n            default:\n                return undefined;\n        }\n    });\n\n    noOp(imports);\n\n    const useTranslateHook = i18n && `const translate = useTranslate();`;\n\n    return jsx`\n    ${printImports(imports)}\n\n    export const ${COMPONENT_NAME}: React.FC<IResourceComponentsProps> = () => {\n        ${useTranslateHook}\n        const { formProps, saveButtonProps, queryResult } = useForm(${\n            isCustomPage\n                ? `{\n                      resource: \"${resource.name}\",\n                      action: \"create\",\n                      ${getMetaProps(\n                          resource.identifier ?? resource.name,\n                          meta,\n                          \"getOne\",\n                      )}\n                  }`\n                : getMetaProps(\n                      resource?.identifier ?? resource?.name,\n                      meta,\n                      \"getOne\",\n                  )\n                ? `{\n                  ${getMetaProps(\n                      resource?.identifier ?? resource?.name,\n                      meta,\n                      \"getOne\",\n                  )}\n              }`\n                : \"\"\n        });\n\n        ${relationHooksCode}\n\n        return (\n            <Create saveButtonProps={saveButtonProps}>\n                <Form {...formProps} layout=\"vertical\">\n                    ${renderedFields.join(\"\")}\n                </Form>\n            </Create>\n        );\n    };\n    `;\n};\n\n/**\n * @experimental This is an experimental component\n */\nexport const CreateInferencer: SchemaInferencerResultComponent = createSchemaInferencer({\n    type: \"create\",\n    additionalScope: [\n        [\n            \"@refinedev/antd\",\n            \"RefineAntd\",\n            { Create, useForm, useSelect, getValueFromEvent },\n        ],\n        [\"dayjs\", \"dayjs\", dayjs, true],\n        [\n            \"antd\",\n            \"AntdPackage\",\n            { Form, Input, Select, Upload, Checkbox, DatePicker },\n        ],\n    ],\n    codeViewerComponent: SharedCodeViewer,\n    loadingComponent: LoadingComponent,\n    errorComponent: ErrorComponent,\n    renderer,\n});\n","import { Edit, useForm, useSelect, getValueFromEvent } from \"@refinedev/antd\";\nimport { Form, Input, Select, Upload, Checkbox, DatePicker } from \"antd\";\nimport dayjs from \"dayjs\";\n\nimport { createInferencer } from \"../../create-inferencer\";\nimport {\n    jsx,\n    componentName,\n    prettyString,\n    accessor,\n    printImports,\n    isIDKey,\n    noOp,\n    getVariableName,\n    translatePrettyString,\n    getMetaProps,\n    shouldDotAccess,\n    idQuoteWrapper,\n} from \"../../utilities\";\n\nimport { ErrorComponent } from \"./error\";\nimport { LoadingComponent } from \"./loading\";\nimport { SharedCodeViewer } from \"../../components/shared-code-viewer\";\n\nimport {\n    InferencerResultComponent,\n    InferField,\n    ImportElement,\n    RendererContext,\n} from \"../../types\";\n\n/**\n * a renderer function for edit page in Ant Design\n * @internal used internally from inferencer components\n */\nexport const renderer = ({\n    resource,\n    fields,\n    meta,\n    isCustomPage,\n    id,\n    i18n,\n}: RendererContext) => {\n    const COMPONENT_NAME = componentName(\n        resource.label ?? resource.name,\n        \"edit\",\n    );\n    const recordName = getVariableName(resource.label ?? resource.name, \"Data\");\n    const imports: Array<ImportElement> = [\n        [\"React\", \"react\", true],\n        [\"IResourceComponentsProps\", \"@refinedev/core\"],\n        [\"Edit\", \"@refinedev/antd\"],\n        [\"Form\", \"antd\"],\n        [\"useForm\", \"@refinedev/antd\"],\n        [\"Input\", \"antd\"],\n    ];\n\n    if (i18n) {\n        imports.push([\"useTranslate\", \"@refinedev/core\"]);\n    }\n\n    const relationFields: (InferField | null)[] = fields.filter(\n        (field) => field?.relation && !field?.fieldable && field?.resource,\n    );\n\n    const relationHooksCode = relationFields\n        .filter(Boolean)\n        .map((field) => {\n            if (field?.relation && !field.fieldable && field.resource) {\n                imports.push([\"useSelect\", \"@refinedev/antd\"]);\n\n                let val = accessor(\n                    recordName,\n                    field.key,\n                    field.accessor,\n                    false,\n                );\n\n                if (field.multiple && field.accessor) {\n                    val = `${accessor(\n                        recordName,\n                        field.key,\n                    )}?.map((item: any) => ${accessor(\n                        \"item\",\n                        undefined,\n                        field.accessor,\n                    )})`;\n                }\n\n                return `\n                const { selectProps: ${getVariableName(\n                    field.key,\n                    \"SelectProps\",\n                )} } =\n                useSelect({\n                    resource: \"${field.resource.name}\",\n                    defaultValue: ${val},\n                    ${\n                        field.relationInfer\n                            ? field.relationInfer.accessor\n                                ? typeof field.relationInfer.accessor ===\n                                  \"string\"\n                                    ? field.relationInfer.accessor !== \"title\"\n                                        ? `optionLabel: \"${field.relationInfer.accessor}\",`\n                                        : \"\"\n                                    : `optionLabel: \"${field.relationInfer.accessor[0]}\",`\n                                : \"\"\n                            : \"\"\n                    }\n                    ${getMetaProps(\n                        field?.resource?.identifier ?? field?.resource?.name,\n                        meta,\n                        \"getList\",\n                    )}\n                });\n            `;\n            }\n            return undefined;\n        })\n        .filter(Boolean);\n\n    const renderRelationFields = (field: InferField) => {\n        if (field.relation && field.resource) {\n            imports.push([\"Select\", \"antd\"]);\n            const variableName = getVariableName(field.key, \"SelectProps\");\n\n            const name = field.accessor\n                ? field.multiple\n                    ? `\"${field.key}\"`\n                    : `[\"${field.key}\", \"${field.accessor}\"]`\n                : `\"${field.key}\"`;\n\n            let valueProps = \"\";\n            let valueEvent = \"\";\n\n            if (field.accessor && field.multiple) {\n                const canDot = shouldDotAccess(`${field.accessor}`);\n                valueEvent = `getValueFromEvent={(selected: string[]) => {\n                    return selected?.map((item) => ({ ${\n                        canDot ? field.accessor : `[\"${field.accessor}\"]`\n                    }: item }));\n                }}`;\n                valueProps = `getValueProps={(value: any[]) => {\n                    return {\n                        value: value?.map((item) => ${accessor(\n                            \"item\",\n                            undefined,\n                            field.accessor,\n                        )}),\n                    };\n                }}`;\n            }\n\n            return jsx`\n                <Form.Item\n                    label=${translatePrettyString({\n                        resource,\n                        field,\n                        i18n,\n                    })}\n                    name={${name}}\n                    rules={[\n                        {\n                            required: true,\n                        },\n                    ]}\n                    ${valueProps}\n                    ${valueEvent}\n                >\n                    <Select ${\n                        field.multiple ? 'mode=\"multiple\"' : \"\"\n                    } {...${variableName}} />\n                </Form.Item>             \n                `;\n        }\n        return undefined;\n    };\n\n    const basicInputFields = (field: InferField) => {\n        if (\n            field.type === \"text\" ||\n            field.type === \"url\" ||\n            field.type === \"email\" ||\n            field.type === \"number\"\n        ) {\n            if (field.multiple) {\n                const val = accessor(field.key, \"index\", field.accessor)\n                    .split(\"?.\")\n                    .map((el) => `\"${el}\"`)\n                    .join(\", \")\n                    .replace(/\"index\"/, \"index\");\n\n                return `\n                    <>\n                        {(${accessor(\n                            recordName,\n                            field.key,\n                        )} as any[])?.map((item, index) => (\n                            <Form.Item\n                                key={index}\n                                label=${translatePrettyString({\n                                    resource,\n                                    field,\n                                    i18n,\n                                })}\n                                name={[${val}]}\n                            >\n                                <Input\n                                    type=\"${field.type}\"\n                                ${\n                                    isIDKey(field.key)\n                                        ? \"readOnly disabled\"\n                                        : \"\"\n                                } />\n                            </Form.Item>\n                        ))}\n                    </>\n                `;\n            }\n            return jsx`\n                <Form.Item\n                    label=${translatePrettyString({\n                        resource,\n                        field,\n                        i18n,\n                    })}\n                    name={[\"${field.key}\"${\n                field.accessor ? ', \"' + field.accessor + '\"' : \"\"\n            }]}\n                    rules={[\n                        {\n                            required: true,\n                        },\n                    ]}\n                >\n                    <Input ${isIDKey(field.key) ? \"readOnly disabled\" : \"\"} />\n                </Form.Item>\n            `;\n        }\n        return undefined;\n    };\n\n    const imageFields = (field: InferField) => {\n        if (field.type === \"image\") {\n            imports.push(\n                [\"Upload\", \"antd\"],\n                [\"getValueFromEvent\", \"@refinedev/antd\"],\n            );\n            let valueProps = 'valuePropName=\"fileList\"';\n\n            if (field.multiple && !field.accessor) {\n                valueProps =\n                    \"getValueProps={(value) => ({ fileList: value?.map((item: any) => ({ url: item, name: item, uid: item }))})}\";\n            }\n\n            if (!field.multiple) {\n                if (field.accessor) {\n                    valueProps =\n                        \"getValueProps={(value) => ({ fileList: value ? [value] : [] })}\";\n                } else {\n                    valueProps =\n                        \"getValueProps={(value) => ({ fileList: [{ url: value, name: value, uid: value }]})}\";\n                }\n            }\n\n            return jsx`\n                <Form.Item label=${translatePrettyString({\n                    resource,\n                    field,\n                    i18n,\n                })}>\n                    <Form.Item\n                        name=\"${field.key}\"\n                        ${valueProps}\n                        getValueFromEvent={getValueFromEvent}\n                        noStyle\n                        rules={[\n                            {\n                                required: true,\n                            },\n                        ]}\n                    >\n                        <Upload.Dragger\n                            listType=\"picture\"\n                            ${field.multiple ? \"multiple\" : \"\"}\n                            beforeUpload={() => false}\n                        >\n                            <p className=\"ant-upload-text\">\n                                Drag & drop a file in this area\n                            </p>\n                        </Upload.Dragger>\n                    </Form.Item>\n                </Form.Item>\n                `;\n        }\n        return undefined;\n    };\n\n    const booleanFields = (field: InferField) => {\n        if (field.type === \"boolean\") {\n            imports.push([\"Checkbox\", \"antd\"]);\n\n            if (field.multiple) {\n                const val = accessor(field.key, \"index\", field.accessor)\n                    .split(\"?.\")\n                    .map((el) => `\"${el}\"`)\n                    .join(\", \")\n                    .replace(/\"index\"/, \"index\");\n\n                return `\n                    <>\n                        {(${accessor(\n                            recordName,\n                            field.key,\n                        )} as any[])?.map((item, index) => (\n                            <Form.Item\n                                key={index}\n                                valuePropName=\"checked\"\n                                label=${translatePrettyString({\n                                    resource,\n                                    field,\n                                    i18n,\n                                })}\n                                name={[${val}]}\n                            >\n                                <Checkbox>${prettyString(field.key)}</Checkbox>\n                            </Form.Item>\n                        ))}\n                    </>\n                `;\n            }\n            return jsx`\n                <Form.Item\n                    label=${translatePrettyString({\n                        resource,\n                        field,\n                        i18n,\n                    })}\n                    valuePropName=\"checked\"\n                    name={[\"${field.key}\"${\n                field.accessor ? ', \"' + field.accessor + '\"' : \"\"\n            }]}\n                    rules={[\n                        {\n                            required: true,\n                        },\n                    ]}\n                >\n                    <Checkbox>${prettyString(field.key)}</Checkbox>\n                </Form.Item>\n            `;\n        }\n        return undefined;\n    };\n\n    const dateFields = (field: InferField) => {\n        if (field.type === \"date\") {\n            imports.push([\"DatePicker\", \"antd\"], [\"dayjs\", \"dayjs\", true]);\n\n            if (field.multiple) {\n                const val = accessor(field.key, \"index\", field.accessor)\n                    .split(\"?.\")\n                    .map((el) => `\"${el}\"`)\n                    .join(\", \")\n                    .replace(/\"index\"/, \"index\");\n\n                return jsx`\n                    <>\n                        {(${accessor(\n                            recordName,\n                            field.key,\n                        )} as any[])?.map((item, index) => (\n                            <Form.Item\n                                key={index}\n                                label=${translatePrettyString({\n                                    resource,\n                                    field,\n                                    i18n,\n                                })}\n                                name={[${val}]}\n                                getValueProps={(value) => ({ value: value ? dayjs(value) : undefined })}\n                            >\n                                <DatePicker />\n                            </Form.Item>\n                        ))}\n                    </>\n                `;\n            }\n            return jsx`\n                <Form.Item\n                    label=${translatePrettyString({\n                        resource,\n                        field,\n                        i18n,\n                    })}\n                    name={[\"${field.key}\"${\n                field.accessor ? ', \"' + field.accessor + '\"' : \"\"\n            }]}\n                    rules={[\n                        {\n                            required: true,\n                        },\n                    ]}\n                    getValueProps={(value) => ({ value: value ? dayjs(value) : undefined })}\n                >\n                    <DatePicker />\n                </Form.Item>\n            `;\n        }\n        return undefined;\n    };\n\n    const richtextFields = (field: InferField) => {\n        if (field.type === \"richtext\") {\n            return jsx`\n            <Form.Item\n                label=${translatePrettyString({\n                    resource,\n                    field,\n                    i18n,\n                })}\n                name=\"${field.key}\"\n                rules={[\n                    {\n                        required: true,\n                    },\n                ]}\n            >\n                <Input.TextArea rows={5} />\n            </Form.Item>\n            `;\n        }\n\n        return undefined;\n    };\n\n    const renderedFields: Array<string | undefined> = fields.map((field) => {\n        switch (field?.type) {\n            case \"text\":\n            case \"number\":\n            case \"email\":\n            case \"url\":\n                return basicInputFields(field);\n            case \"richtext\":\n                return richtextFields(field);\n            case \"image\":\n                return imageFields(field);\n            case \"date\":\n                return dateFields(field);\n            case \"boolean\":\n                return booleanFields(field);\n            case \"relation\":\n                return renderRelationFields(field);\n            default:\n                return undefined;\n        }\n    });\n\n    noOp(imports);\n\n    const useTranslateHook = i18n && `const translate = useTranslate();`;\n\n    return jsx`\n    ${printImports(imports)}\n    \n    export const ${COMPONENT_NAME}: React.FC<IResourceComponentsProps> = () => {\n        ${useTranslateHook}\n        const { formProps, saveButtonProps, queryResult } = useForm(${\n            isCustomPage\n                ? `{\n                      resource: \"${resource.name}\",\n                      id: ${idQuoteWrapper(id)},\n                      action: \"edit\",\n                      ${getMetaProps(\n                          resource?.identifier ?? resource?.name,\n                          meta,\n                          \"getOne\",\n                      )}\n                  }`\n                : getMetaProps(\n                      resource?.identifier ?? resource?.name,\n                      meta,\n                      \"getOne\",\n                  )\n                ? `{\n                    ${getMetaProps(\n                        resource?.identifier ?? resource?.name,\n                        meta,\n                        \"getOne\",\n                    )}\n                }`\n                : \"\"\n        });\n    \n        const ${recordName} = queryResult?.data?.data;\n    \n        ${relationHooksCode}\n\n        return (\n            <Edit saveButtonProps={saveButtonProps}>\n                <Form {...formProps} layout=\"vertical\">\n                    ${renderedFields.join(\"\")}\n                </Form>\n            </Edit>\n        );\n    };\n    `;\n};\n\n/**\n * @experimental This is an experimental component\n */\nexport const EditInferencer: InferencerResultComponent = createInferencer({\n    type: \"edit\",\n    additionalScope: [\n        [\n            \"@refinedev/antd\",\n            \"RefineAntd\",\n            { Edit, useForm, useSelect, getValueFromEvent },\n        ],\n        [\"dayjs\", \"dayjs\", dayjs, true],\n        [\n            \"antd\",\n            \"AntdPackage\",\n            { Form, Input, Select, Upload, Checkbox, DatePicker },\n        ],\n    ],\n    codeViewerComponent: SharedCodeViewer,\n    loadingComponent: LoadingComponent,\n    errorComponent: ErrorComponent,\n    renderer,\n});\n"],"mappings":"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","names":["renderer","import_react","import_core","import_antd","import_react","import_core","prettier","tsParser","pluralize","import_pluralize","pluralize","import_pluralize","pluralize","import_pluralize","pluralize","componentName","accessor","module","dayjs","accessor","React","ErrorComponent","import_react","React","Highlight","theme","import_react","import_core","React","error","import_react","import_core","React","record","relationInfer","error","renderer","LoadingComponent","ErrorComponent","record","records","fields","React","_a","_b","import_react","React","import_react","import_antd","React","import_antd","import_lodash","import_react","import_core","composeInferencers","composeTransformers","arrayInfer","has","booleanInfer","dateSuffixRegexp","dateInfer","emailInfer","numberInfer","objectInfer","richtextInfer","textInfer","urlRegexp","urlInfer","defaultElements","arrayInfer","booleanInfer","dateInfer","emailInfer","numberInfer","objectInfer","richtextInfer","urlInfer","textInfer","basicToRelation","imageFieldLikeRegexp","imageByKey","relationByResource","relationToFieldable","defaultTransformers","imageByKey","relationByResource","relationToFieldable","basicToRelation","renderer","LoadingComponent","ErrorComponent","composeInferencers","defaultElements","composeTransformers","defaultTransformers","React","renderer","import_antd","import_dayjs","renderer","dayjs","import_antd","import_dayjs","renderer","dayjs","React"]}